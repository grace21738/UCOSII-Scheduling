
Test.elf:     file format elf32-littlenios2
Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00018a70 memsz 0x0001e208 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016804  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000514  040169c0  040169c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bbc  04016ed4  04016ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005798  04018a90  04018a90  00019a90  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00019a90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd0  00000000  00000000  00019ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002277  00000000  00000000  0001a888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030d77  00000000  00000000  0001caff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009555  00000000  00000000  0004d876  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b410  00000000  00000000  00056dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026fc  00000000  00000000  000721dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000243f  00000000  00000000  000748d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d338  00000000  00000000  00076d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00084050  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000988  00000000  00000000  00084060  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0008942c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00089432  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00089435  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00089436  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0008943a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0008943e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00089442  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0008944b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00089454  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  0008945d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000016  00000000  00000000  00089466  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
040169c0 l    d  .rodata	00000000 .rodata
04016ed4 l    d  .rwdata	00000000 .rwdata
04018a90 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
040005bc l     F .text	00000094 TaskStartCreateTasks
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400095c l     F .text	00000058 __sprint_r
04016ada l     O .rodata	00000010 blanks.3452
04016aca l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040029c0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040043bc l     F .text	00000058 std
040044c8 l     F .text	00000008 __fp_lock
040044d0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04016ed4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
040189d8 l     O .rwdata	00000004 charset
04016b10 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04016c58 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0400865c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04009788 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
04009ffc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400a05c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400a15c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400a27c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0400a3cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0400a614 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040189fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400a8b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
04018a00 l     O .rwdata	00000004 lockid
04018acc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
04018a04 l     O .rwdata	00000004 lockid
04018ad4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0400c45c l     F .text	00000044 OS_InitMisc
0400c4a0 l     F .text	0000006c OS_InitRdyList
0400c604 l     F .text	000000e0 OS_InitTCBList
0400c380 l     F .text	000000dc OS_InitEventList
0400c50c l     F .text	0000007c OS_InitTaskIdle
0400c588 l     F .text	0000007c OS_InitTaskStat
0400c948 l     F .text	0000018c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0400e984 l     F .text	00000110 OS_FlagTaskRdy
0400e6dc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04017890 l     O .rwdata	000000c4 epcs
04017954 l     O .rwdata	0000106c jtag_uart
040132b8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0401337c l     F .text	000001ec alt_epcs_flash_query
04013344 l     F .text	00000038 alt_flash_device_register
04013568 l     F .text	00000108 alt_epcs_flash_memcmp
040139f4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04013ea4 l     F .text	000002c4 altera_avalon_jtag_uart_irq
04014168 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04014980 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
04014b5c l     F .text	00000038 epcs_await_wip_released
04014b94 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040150e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040155ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040156e8 l     F .text	000000dc alt_file_locked
0401594c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000036 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04016730 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
040168e4 l     F .text	00000040 alt_sim_halt
04006178 g     F .text	00000094 _mprec_log10
04018a52 g     O .rwdata	00000002 OSTaskNameSize
040138f0 g     F .text	00000090 alt_epcs_flash_get_info
04006264 g     F .text	00000088 __any_on
04007970 g     F .text	00000070 _isatty_r
04016c30 g     O .rodata	00000028 __mprec_tinytens
0400a42c g     F .text	000000c8 alt_main
04000834 g     F .text	000000a0 _puts_r
0401df98 g     O .bss	00000100 alt_irq
04018a90 g     O .bss	00000001 tmp
040079e0 g     F .text	00000078 _lseek_r
0400f278 g     F .text	000000d0 OS_MemInit
040131bc g     F .text	00000064 OSTimeSet
0400917c g     F .text	00000088 __eqdf2
0400aef4 g     F .text	000006b4 OSEventPendMulti
0401e228 g       *ABS*	00000000 __alt_heap_start
04015f54 g     F .text	00000020 OSTaskCreateHook
040007bc g     F .text	00000044 printf
04018a2a g     O .rwdata	00000002 OSMboxEn
0400b5fc g     F .text	0000007c OSIntEnter
0400743c g     F .text	00000068 __sseek
04004424 g     F .text	000000a4 __sinit
04018a3a g     O .rwdata	00000002 OSQEn
040050fc g     F .text	00000084 _setlocale_r
04004524 g     F .text	00000068 __sfmoreglue
0400ab20 g     F .text	000000d0 __malloc_unlock
04015fb0 g     F .text	0000001c OSTaskStatHook
04018adf g     O .bss	00000001 OSLockNesting
04018a78 g     O .rwdata	00000002 OSDataSize
04018ae0 g     O .bss	00000001 OSRunning
04005bf4 g     F .text	000000e0 memmove
04015fe8 g     F .text	0000001c OSInitHookBegin
04018a70 g     O .rwdata	00000002 OSTmrSize
04004514 g     F .text	00000010 _cleanup
040062ec g     F .text	000000bc _Balloc
04018ae4 g     O .bss	00000004 OSIdleCtr
0400928c g     F .text	00000088 __gtdf2
04015c20 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0400cd98 g     F .text	000002e0 OS_TCBInit
04014ae0 g     F .text	0000007c epcs_sector_erase
00000000 g     F .entry	00000000 __reset
04018a76 g     O .rwdata	00000002 OSTmrWheelTblSize
04018a16 g     O .rwdata	00000002 OSEventSize
0400ac5c g     F .text	00000024 get_timeout_flag
04018ae8 g     O .bss	00000001 OSPrioHighRdy
040078fc g     F .text	00000074 _fstat_r
04015f74 g     F .text	00000020 OSTaskDelHook
04018ab8 g     O .bss	00000004 errno
04015c00 g       .text	00000000 OSStartHighRdy
0401198c g     F .text	00000200 OSTaskCreateExt
0400e1f8 g     F .text	00000068 OSFlagPendGetFlagsRdy
04018a56 g     O .rwdata	00000002 OSTaskStatStkSize
0400d204 g     F .text	00000334 OSFlagAccept
0400f9b0 g     F .text	000000c8 OSQFlush
0400f348 g     F .text	00000154 OSQAccept
04018ac4 g     O .bss	00000004 alt_argv
040209c0 g       *ABS*	00000000 _gp
040117b8 g     F .text	000001d4 OSTaskCreate
04011244 g     F .text	00000574 OSTaskChangePrio
04018ad8 g     O .bss	00000004 alt_heapsem
0400d078 g     F .text	0000018c OSDebugInit
04011b8c g     F .text	0000040c OSTaskDel
04017710 g     O .rwdata	00000180 alt_fd_list
0401ad44 g     O .bss	00000370 OSFlagTbl
0400c15c g     F .text	000000b8 OS_EventTaskRemove
04014cd0 g     F .text	00000064 epcs_write_status_register
04016294 g     F .text	00000094 alt_find_dev
04005b54 g     F .text	000000a0 memcpy
04018a40 g     O .rwdata	00000002 OSRdyTblSize
04004508 g     F .text	0000000c _cleanup_r
04009424 g     F .text	000000f8 __floatsidf
04015670 g     F .text	00000078 alt_io_redirect
0400939c g     F .text	00000088 __ltdf2
040169c0 g       *ABS*	00000000 __DTOR_END__
040008d4 g     F .text	00000014 puts
0400ac80 g     F .text	00000130 OSEventNameGet
04018a24 g     O .rwdata	00000002 OSFlagMax
04015b54 g     F .text	00000020 altera_nios2_irq_init
04013a88 g     F .text	00000110 alt_epcs_flash_write_block
040060c8 g     F .text	000000b0 __ratio
0400b678 g     F .text	000001d0 OSIntExit
04018a5e g     O .rwdata	00000002 OSTCBSize
04018ae9 g     O .bss	00000001 OSPrioCur
040143e4 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04000800 g     F .text	00000034 _printf_r
040098c4 g     F .text	00000008 __udivsi3
0400a1bc g     F .text	000000c0 isatty
04018a44 g     O .rwdata	00000002 OSStkWidth
04016b40 g     O .rodata	000000c8 __mprec_tens
04018a38 g     O .rwdata	00000002 OSPtrSize
040050d8 g     F .text	00000008 __locale_charset
04018a18 g     O .rwdata	00000002 OSEventTblSize
04015b74 g       .text	00000000 OSCtxSw
04018aac g     O .bss	00000004 __malloc_top_pad
04018aec g     O .bss	00000004 OSTCBList
04018abc g     O .bss	00000004 alt_fd_list_lock
040189d4 g     O .rwdata	00000004 __mb_cur_max
040050e0 g     F .text	0000000c _localeconv_r
040069e4 g     F .text	0000003c __i2b
04004abc g     F .text	0000049c __sfvwrite_r
0400ac14 g     F .text	00000028 set_buff_size
0401b0b4 g     O .bss	00000c30 OSMemTbl
04018af0 g     O .bss	00000001 OSTickStepState
040073c4 g     F .text	00000070 _sbrk_r
04018a3c g     O .rwdata	00000002 OSQMax
0401bce4 g     O .bss	00000800 OSTaskStatStk
0400ee60 g     F .text	0000010c OSMemNameGet
04018a1c g     O .rwdata	00000002 OSFlagEn
04007a58 g     F .text	00000078 _read_r
04018a62 g     O .rwdata	00000002 OSTimeTickHookEn
0400ff14 g     F .text	00000180 OSQPost
0400ea94 g     F .text	000000ac OS_FlagUnlink
040172d4 g     O .rwdata	0000000c __lc_ctype
040189f4 g     O .rwdata	00000004 alt_max_fd
0400c738 g     F .text	0000006c OS_MemCopy
0400c7a4 g     F .text	000001a4 OS_Sched
04009d00 g     F .text	00000138 __unpack_d
040077d8 g     F .text	00000110 _fclose_r
0400ed5c g     F .text	00000104 OSMemGet
040122c0 g     F .text	000001c4 OSTaskNameSet
04004388 g     F .text	00000034 fflush
04018ab0 g     O .bss	00000004 __malloc_max_sbrked_mem
04018af4 g     O .bss	00000004 OSCtxSwCtr
04015fcc g     F .text	0000001c OSTimeTickHook
04018a26 g     O .rwdata	00000002 OSFlagNameSize
04018a91 g     O .bss	00000001 i_cnt
0400c214 g     F .text	00000104 OS_EventTaskRemoveMulti
04008aec g     F .text	00000074 __adddf3
0400c008 g     F .text	00000154 OS_EventTaskWaitMulti
04013980 g     F .text	00000074 alt_epcs_flash_erase_block
04005fa8 g     F .text	00000120 __b2d
04018a3e g     O .rwdata	00000002 OSQSize
040080ac g     F .text	000005b0 __umoddi3
0400a2dc g     F .text	000000f0 lseek
04010af0 g     F .text	0000027c OSSemPend
040189d0 g     O .rwdata	00000004 _global_impure_ptr
04006d60 g     F .text	000005f4 _realloc_r
04018a28 g     O .rwdata	00000002 OSLowestPrio
0401e228 g       *ABS*	00000000 __bss_end
040154b4 g     F .text	000000f8 alt_iic_isr_register
0401603c g     F .text	00000020 OSTCBInitHook
04018a6e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
04015a44 g     F .text	00000110 alt_tick
04007ad0 g     F .text	000005dc __udivdi3
04018a10 g     O .rwdata	00000002 OSEventEn
04016c08 g     O .rodata	00000028 __mprec_bigtens
04006c40 g     F .text	00000120 __s2b
04018a6a g     O .rwdata	00000002 OSTmrCfgNameSize
04018a94 g     O .bss	00000004 RandomSem
040095f4 g     F .text	00000194 __floatunsidf
04005ec8 g     F .text	00000060 __mcmp
040044f0 g     F .text	00000018 __fp_lock_all
0401546c g     F .text	00000048 alt_ic_irq_enabled
0400e8a0 g     F .text	000000e4 OS_FlagInit
040159ac g     F .text	00000098 alt_alarm_stop
04018a4c g     O .rwdata	00000002 OSTaskIdleStkSize
04018b30 g     O .bss	00000004 alt_irq_active
0401067c g     F .text	000000c0 OSSemAccept
0400f08c g     F .text	000000f0 OSMemPut
0400eb40 g     F .text	0000021c OSMemCreate
04018af8 g     O .bss	00000004 OSIdleCtrMax
040000ec g     F .exceptions	000000d0 alt_irq_handler
040176e8 g     O .rwdata	00000028 alt_dev_null
04018a60 g     O .rwdata	00000002 OSTicksPerSec
04015b74 g       .text	00000000 OSIntCtxSw
04005d94 g     F .text	00000070 __hi0bits
0400951c g     F .text	000000d8 __fixdfsi
04018afc g     O .bss	00000004 OSTCBFreeList
04010d6c g     F .text	0000017c OSSemPendAbort
040189ec g     O .rwdata	00000008 alt_dev_list
040001f4 g     F .text	00000210 print_buffer
0400a790 g     F .text	00000120 write
04018a64 g     O .rwdata	00000002 OSVersionNbr
0400a088 g     F .text	000000d4 fstat
04018a0c g     O .rwdata	00000004 OSEndiannessTest
04018b64 g     O .bss	000001e0 pb
04006b20 g     F .text	00000120 __pow5mult
04018aa0 g     O .bss	00000004 __nlocale_changed
040098cc g     F .text	00000008 __umodsi3
04014e0c g     F .text	0000006c epcs_read_electronic_signature
04018a1e g     O .rwdata	00000002 OSFlagGrpSize
0401e228 g       *ABS*	00000000 end
04013d6c g     F .text	00000138 altera_avalon_jtag_uart_init
0400cc08 g     F .text	000000c8 OS_TaskStat
0400abf0 g     F .text	00000024 get_buff_idx
040169bc g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
040149f0 g     F .text	00000090 alt_avalon_timer_sc_init
0400996c g     F .text	00000080 __clzsi2
040146a4 g     F .text	000002dc altera_avalon_jtag_uart_write
04004414 g     F .text	00000004 __sfp_lock_acquire
04005a70 g     F .text	000000e4 memchr
0400c6e4 g     F .text	00000054 OS_MemClr
040009b4 g     F .text	00001eac ___vfprintf_internal_r
04015c44 g     F .text	00000310 OSTaskStkInit
040047a8 g     F .text	00000314 _free_r
0400bd64 g     F .text	00000194 OS_EventTaskRdy
04018add g     O .bss	00000001 TIMEOUT
04016734 g     F .text	000001b0 __call_exitprocs
04018b00 g     O .bss	00000001 OSCPUUsage
04018aa4 g     O .bss	00000004 __mlocale_changed
040189e0 g     O .rwdata	00000004 __malloc_sbrk_base
040001bc g     F .text	00000038 _start
04018b34 g     O .bss	00000004 _alt_tick_rate
0400fa78 g     F .text	00000320 OSQPend
04012c84 g     F .text	0000014c OSTimeDly
040066b0 g     F .text	0000014c __lshift
0401605c g     F .text	00000238 alt_avalon_spi_command
04018b38 g     O .bss	00000004 _alt_nticks
0400a4f4 g     F .text	00000120 read
04013254 g     F .text	00000064 alt_sys_init
040165fc g     F .text	00000134 __register_exitproc
04018b01 g     O .bss	00000001 OSTaskCtr
04012dd0 g     F .text	00000178 OSTimeDlyHMSM
040067fc g     F .text	000001e8 __multiply
04018a98 g     O .bss	00000004 current
0401427c g     F .text	00000074 altera_avalon_jtag_uart_close
04018b3c g     O .bss	00000028 __malloc_current_mallinfo
04018a12 g     O .rwdata	00000002 OSEventMax
040063a8 g     F .text	0000017c __d2b
04010ee8 g     F .text	00000128 OSSemPost
04014a80 g     F .text	00000060 epcs_read_status_register
0400b8d4 g     F .text	000000e4 OSSchedUnlock
04013c24 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04016448 g     F .text	000000f4 alt_get_fd
04018b04 g     O .bss	00000004 OSMemFreeList
0400ba28 g     F .text	000000ac OSStatInit
0400e608 g     F .text	000000d4 OSFlagQuery
04009e38 g     F .text	000000c8 __fpcmp_parts_d
04018a48 g     O .rwdata	00000002 OSTaskCreateExtEn
04007768 g     F .text	00000070 _close_r
04018ade g     O .bss	00000001 idx
04014e78 g     F .text	00000068 epcs_read_device_id
04016588 g     F .text	00000074 memcmp
0400bd48 g     F .text	0000001c OS_Dummy
04013cd4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0401e228 g       *ABS*	00000000 __alt_stack_base
04013d1c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
04002884 g     F .text	0000013c __swsetup_r
0401c4e4 g     O .bss	000001e0 OSQTbl
04008f24 g     F .text	00000258 __divdf3
0400458c g     F .text	000000f0 __sfp
0400620c g     F .text	00000058 __copybits
040172e0 g     O .rwdata	00000408 __malloc_av_
04004420 g     F .text	00000004 __sinit_lock_release
040189c4 g     O .rwdata	00000006 task_data
04018b08 g     O .bss	00000004 OSTCBHighRdy
04008b60 g     F .text	000003c4 __muldf3
04007520 g     F .text	00000060 __sread
04018b0c g     O .bss	00000004 OSQFreeList
04016328 g     F .text	00000120 alt_find_file
04015034 g     F .text	000000b4 alt_dev_llist_insert
0400aa18 g     F .text	00000108 __malloc_lock
0400a6d4 g     F .text	000000bc sbrk
0400ac3c g     F .text	00000020 get_buff_size
0400adb0 g     F .text	00000144 OSEventNameSet
0400418c g     F .text	000001fc _fflush_r
040076b4 g     F .text	000000b4 _calloc_r
04018b10 g     O .bss	00000001 OSRdyGrp
04018a7c g     O .rwdata	00000008 alt_flash_dev_list
04018a90 g       *ABS*	00000000 __bss_start
04005cd4 g     F .text	00000098 memset
04018a9c g     O .bss	00000001 err
04000650 g     F .text	00000044 main
04018a9d g     O .bss	00000001 t_cnt
04018ac8 g     O .bss	00000004 alt_envp
04018ab4 g     O .bss	00000004 __malloc_max_total_mem
04013c7c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04016d94 g     O .rodata	00000100 OSUnMapTbl
04018a42 g     O .rwdata	00000002 OSSemEn
0400e260 g     F .text	000003a8 OSFlagPost
04007434 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
040078e8 g     F .text	00000014 fclose
0400bef8 g     F .text	00000110 OS_EventTaskWait
0400ccd0 g     F .text	000000c8 OS_TaskStatStkChk
0401e098 g     O .bss	00000190 _atexit0
04011f98 g     F .text	00000170 OSTaskDelReq
04002bd8 g     F .text	000015b4 _dtoa_r
04005330 g     F .text	00000740 _malloc_r
040189f8 g     O .rwdata	00000004 alt_errno
0400b9b8 g     F .text	00000070 OSStart
0400a9bc g     F .text	0000005c __env_unlock
04005020 g     F .text	000000b8 _fwalk
04012484 g     F .text	00000218 OSTaskResume
0400f17c g     F .text	000000fc OSMemQuery
04018a54 g     O .rwdata	00000002 OSTaskStatEn
04018a2e g     O .rwdata	00000002 OSMemMax
04010094 g     F .text	00000188 OSQPostFront
04009804 g     F .text	00000060 __divsi3
04018b11 g     O .bss	00000003 OSRdyTbl
04018a08 g     O .rwdata	00000002 OSDebugEn
04016c64 g     O .rodata	00000014 __thenan_df
0400467c g     F .text	0000012c _malloc_trim_r
040169c0 g       *ABS*	00000000 __CTOR_END__
04018a20 g     O .rwdata	00000002 OSFlagNodeSize
04018a68 g     O .rwdata	00000002 OSTmrCfgMax
04013670 g     F .text	00000280 alt_epcs_flash_write
04007580 g     F .text	000000bc strcmp
0400f49c g     F .text	00000214 OSQCreate
04012108 g     F .text	000001b8 OSTaskNameGet
0401021c g     F .text	00000234 OSQPostOpt
0400bad4 g     F .text	00000254 OSTimeTick
04018a50 g     O .rwdata	00000002 OSTaskMax
040169c0 g       *ABS*	00000000 __DTOR_LIST__
0401073c g     F .text	00000114 OSSemCreate
04018a74 g     O .rwdata	00000002 OSTmrWheelSize
04009204 g     F .text	00000088 __nedf2
04018a4a g     O .rwdata	00000002 OSTaskDelEn
04011010 g     F .text	00000130 OSSemQuery
0400f6b0 g     F .text	00000300 OSQDel
0400fd98 g     F .text	0000017c OSQPendAbort
04013220 g     F .text	00000034 alt_irq_init
0400a674 g     F .text	00000060 alt_release_fd
04016c78 g     O .rodata	00000100 __clz_tab
04018aa8 g     O .bss	00000004 _PathLocale
0401653c g     F .text	00000014 atexit
0400763c g     F .text	00000078 _write_r
0400b848 g     F .text	0000008c OSSchedLock
04005180 g     F .text	0000001c setlocale
0400d538 g     F .text	0000013c OSFlagCreate
040189cc g     O .rwdata	00000004 _impure_ptr
04018ac0 g     O .bss	00000004 alt_argc
040151ac g     F .text	00000064 _do_dtors
04018a1a g     O .rwdata	00000002 OSEventMultiEn
0400d674 g     F .text	000002a8 OSFlagDel
04018b14 g     O .bss	00000004 OSEventFreeList
04000020 g       .exceptions	00000000 alt_irq_entry
04005f28 g     F .text	00000080 __ulp
04007354 g     F .text	00000040 __isinfd
0400dbb4 g     F .text	00000644 OSFlagPend
04018a66 g     O .rwdata	00000002 OSTmrEn
040044d8 g     F .text	00000018 __fp_unlock_all
040189e4 g     O .rwdata	00000008 alt_fs_list
0400cad4 g     F .text	00000080 OS_StrCopy
04018a30 g     O .rwdata	00000002 OSMemNameSize
04016004 g     F .text	0000001c OSInitHookEnd
04018a5c g     O .rwdata	00000002 OSTCBPrioTblMax
040050ec g     F .text	00000010 localeconv
04014bcc g     F .text	000000b4 epcs_read_buffer
04018a58 g     O .rwdata	00000002 OSTaskStatStkChkEn
040132f0 g     F .text	00000054 alt_epcs_flash_init
040152e0 g     F .text	00000050 alt_ic_isr_register
04018a2c g     O .rwdata	00000002 OSMemEn
04018a36 g     O .rwdata	00000002 OSMutexEn
04018a90 g       *ABS*	00000000 _edata
0401e228 g       *ABS*	00000000 _end
04015210 g     F .text	0000007c alt_flash_open_dev
04018b18 g     O .bss	00000001 OSIntNesting
040142f0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04018d44 g     O .bss	00000800 TaskStartStk
04012f48 g     F .text	00000210 OSTimeDlyResume
0400da60 g     F .text	00000154 OSFlagNameSet
0401269c g     F .text	000001fc OSTaskStkChk
040153cc g     F .text	000000a0 alt_ic_irq_disable
04018a32 g     O .rwdata	00000002 OSMemSize
040074a4 g     F .text	0000007c __swrite
040189dc g     O .rwdata	00000004 __malloc_trim_threshold
04018b1c g     O .bss	00000004 OSTCBCur
04016550 g     F .text	00000038 exit
04018a34 g     O .rwdata	00000002 OSMemTblSize
04004f58 g     F .text	000000c8 _fwalk_reent
04006524 g     F .text	0000018c __mdiff
0401528c g     F .text	00000054 alt_flash_close_dev
040189c0 g     O .rwdata	00000004 PRINT
04009864 g     F .text	00000060 __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04019544 g     O .bss	00001800 TaskStk
04000020 g     F .exceptions	00000000 alt_exception
04004418 g     F .text	00000004 __sfp_lock_release
0400b5a8 g     F .text	00000054 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
04012ac4 g     F .text	00000144 OSTaskQuery
040105d0 g     F .text	000000ac OS_QInit
0400cb54 g     F .text	00000058 OS_StrLen
0400ef6c g     F .text	00000120 OSMemNameSet
04018a4e g     O .rwdata	00000002 OSTaskProfileEn
04018b20 g     O .bss	00000004 OSTime
0401c6c4 g     O .bss	00000800 OSTaskIdleStk
04016924 g     F .text	0000002c _exit
04007394 g     F .text	00000030 __isnand
04014ee0 g     F .text	00000154 alt_alarm_start
0400d91c g     F .text	00000144 OSFlagNameGet
04013158 g     F .text	00000064 OSTimeGet
040098d4 g     F .text	00000098 __muldi3
0400519c g     F .text	00000194 __smakebuf_r
040008e8 g     F .text	00000074 strlen
04014c80 g     F .text	00000050 epcs_write_enable
04015f94 g     F .text	0000001c OSTaskSwHook
040157c4 g     F .text	00000188 open
0401cec4 g     O .bss	00000b40 OSEventTbl
04009314 g     F .text	00000088 __gedf2
0401da04 g     O .bss	00000540 OSTCBTbl
04011140 g     F .text	00000104 OSSemSet
04018a84 g     O .rwdata	00000004 alt_priority_mask
04010850 g     F .text	000002a0 OSSemDel
04018b24 g     O .bss	00000004 OSFlagFreeList
04015330 g     F .text	0000009c alt_ic_irq_enable
04018a14 g     O .rwdata	00000002 OSEventNameSize
04002860 g     F .text	00000024 __vfprintf_internal
04018b28 g     O .bss	00000001 OSStatRdy
00000000 g       *ABS*	00000000 __alt_mem_epcs
0401df44 g     O .bss	00000054 OSTCBPrioTbl
0400a910 g     F .text	000000ac __env_lock
04018a5a g     O .rwdata	00000002 OSTaskSwHookEn
04008a6c g     F .text	00000080 __subdf3
04013b98 g     F .text	0000008c alt_epcs_flash_read
04005e04 g     F .text	000000c4 __lo0bits
04000694 g     F .text	00000128 Init_Task_ddl
04018a88 g     O .rwdata	00000008 alt_alarm_list
04018a22 g     O .rwdata	00000002 OSFlagWidth
04015148 g     F .text	00000064 _do_ctors
04000404 g     F .text	000001b8 Task
04009f00 g     F .text	000000fc close
04018ad0 g     O .bss	00000004 alt_envsem
04018b2c g     O .bss	00000004 OSIdleCtrRun
0400bd28 g     F .text	00000020 OSVersion
04018a6c g     O .rwdata	00000002 OSTmrCfgWheelSize
04012c08 g     F .text	0000007c OS_TaskStkClr
040099ec g     F .text	00000314 __pack_d
04018a46 g     O .rwdata	00000002 OSTaskCreateEn
04018adc g     O .bss	00000001 buffer_index
0400c318 g     F .text	00000068 OS_EventWaitListInit
04016020 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0400441c g     F .text	00000004 __sinit_lock_acquire
04014d34 g     F .text	000000d8 epcs_write_buffer
04006a20 g     F .text	00000100 __multadd
04012898 g     F .text	0000022c OSTaskSuspend
04005d6c g     F .text	00000028 _Bfree
0400cbac g     F .text	0000005c OS_TaskIdle
04018a72 g     O .rwdata	00000002 OSTmrTblSize
04010450 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	400b5fc0 	call	400b5fc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0ffff17 	ldw	r3,-4(fp)
 4000120:	e0bffe17 	ldw	r2,-8(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	1005003a 	cmpeq	r2,r2,zero
 400012c:	1000161e 	bne	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000130:	e0bffd17 	ldw	r2,-12(fp)
 4000134:	00c100b4 	movhi	r3,1026
 4000138:	18f7e604 	addi	r3,r3,-8296
 400013c:	100490fa 	slli	r2,r2,3
 4000140:	10c5883a 	add	r2,r2,r3
 4000144:	11400017 	ldw	r5,0(r2)
 4000148:	e0bffd17 	ldw	r2,-12(fp)
 400014c:	00c100b4 	movhi	r3,1026
 4000150:	18f7e604 	addi	r3,r3,-8296
 4000154:	100490fa 	slli	r2,r2,3
 4000158:	10c5883a 	add	r2,r2,r3
 400015c:	10800104 	addi	r2,r2,4
 4000160:	11000017 	ldw	r4,0(r2)
 4000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000168:	0005313a 	rdctl	r2,ipending
 400016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 4000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000178:	e0bfff17 	ldw	r2,-4(fp)
 400017c:	1004c03a 	cmpne	r2,r2,zero
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffe17 	ldw	r2,-8(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	400b6780 	call	400b678 <OSIntExit>
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001bc:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001c4:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 40001c8:	d6827014 	ori	gp,gp,2496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001cc:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001d0:	10a2a414 	ori	r2,r2,35472

    movhi r3, %hi(__bss_end)
 40001d4:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40001d8:	18f88a14 	ori	r3,r3,57896

    beq r2, r3, 1f
 40001dc:	10c00326 	beq	r2,r3,40001ec <_start+0x30>

0:
    stw zero, (r2)
 40001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e8:	10fffd36 	bltu	r2,r3,40001e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001ec:	400a42c0 	call	400a42c <alt_main>

040001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f0:	003fff06 	br	40001f0 <alt_after_alt_main>

040001f4 <print_buffer>:
extern INT8U get_timeout_flag();
extern INT8U get_buff_idx();
INT8U i_cnt;
INT8U tmp;
INT8U t_cnt;
void print_buffer(void) {
 40001f4:	defffe04 	addi	sp,sp,-8
 40001f8:	dfc00115 	stw	ra,4(sp)
 40001fc:	df000015 	stw	fp,0(sp)
 4000200:	d839883a 	mov	fp,sp

	if( PRINT ){
 4000204:	d0a00017 	ldw	r2,-32768(gp)
 4000208:	1005003a 	cmpeq	r2,r2,zero
 400020c:	1000061e 	bne	r2,zero,4000228 <print_buffer+0x34>
		printf("Time\tInformation\t\tfrom\tto\n");
 4000210:	01010074 	movhi	r4,1025
 4000214:	211a7004 	addi	r4,r4,27072
 4000218:	40008d40 	call	40008d4 <puts>
		printf("----------------------------------------------------------\n");
 400021c:	01010074 	movhi	r4,1025
 4000220:	211a7704 	addi	r4,r4,27100
 4000224:	40008d40 	call	40008d4 <puts>
	}
	//if( get_buff_idx() - (PRINT*_PRINT_BUF) < _PRINT_BUF ) tmp = get_buff_idx()%_PRINT_BUF;
	//else tmp = _PRINT_BUF;
    //printf("get_buff_idx():%d\n",get_buff_idx());
    for( i_cnt =0; i_cnt<get_buff_idx(); i_cnt ++){
 4000228:	d0203445 	stb	zero,-32559(gp)
 400022c:	00006806 	br	40003d0 <print_buffer+0x1dc>
        //printf("a: %s, l: %d\n", pb[i_cnt + PRINT*_PRINT_BUF],strlen(pb[i_cnt + PRINT*_PRINT_BUF]));

        //sscanf( pb[i_cnt + PRINT*_PRINT_BUF], "%u %u %u %u ",&msg[_INFO], &msg[_FROM], &msg[_TO], &msg[_TT]);
        //printf("MM: %u %u %u %u\n",msg[_INFO], msg[_FROM], msg[_TO], msg[_TT]);

        if( pb[i_cnt][_INFO] == _TIMEOUT ){
 4000230:	d0a03443 	ldbu	r2,-32559(gp)
 4000234:	10803fcc 	andi	r2,r2,255
 4000238:	00c100b4 	movhi	r3,1026
 400023c:	18e2d904 	addi	r3,r3,-29852
 4000240:	1004913a 	slli	r2,r2,4
 4000244:	10c5883a 	add	r2,r2,r3
 4000248:	10800104 	addi	r2,r2,4
 400024c:	10800017 	ldw	r2,0(r2)
 4000250:	108000d8 	cmpnei	r2,r2,3
 4000254:	1000161e 	bne	r2,zero,40002b0 <print_buffer+0xbc>
            printf( "time:%d\t",pb[i_cnt][_TT]);
 4000258:	d0a03443 	ldbu	r2,-32559(gp)
 400025c:	10803fcc 	andi	r2,r2,255
 4000260:	00c100b4 	movhi	r3,1026
 4000264:	18e2d904 	addi	r3,r3,-29852
 4000268:	1004913a 	slli	r2,r2,4
 400026c:	10c5883a 	add	r2,r2,r3
 4000270:	11400017 	ldw	r5,0(r2)
 4000274:	01010074 	movhi	r4,1025
 4000278:	211a8604 	addi	r4,r4,27160
 400027c:	40007bc0 	call	40007bc <printf>
            printf( "task %d exceed deadline\n", pb[i_cnt][_FROM]);
 4000280:	d0a03443 	ldbu	r2,-32559(gp)
 4000284:	10803fcc 	andi	r2,r2,255
 4000288:	00c100b4 	movhi	r3,1026
 400028c:	18e2d904 	addi	r3,r3,-29852
 4000290:	1004913a 	slli	r2,r2,4
 4000294:	10c5883a 	add	r2,r2,r3
 4000298:	10800304 	addi	r2,r2,12
 400029c:	11400017 	ldw	r5,0(r2)
 40002a0:	01010074 	movhi	r4,1025
 40002a4:	211a8904 	addi	r4,r4,27172
 40002a8:	40007bc0 	call	40007bc <printf>
 40002ac:	00004506 	br	40003c4 <print_buffer+0x1d0>
        }
        else{
            printf( "%u\t",pb[i_cnt][_TT]);
 40002b0:	d0a03443 	ldbu	r2,-32559(gp)
 40002b4:	10803fcc 	andi	r2,r2,255
 40002b8:	00c100b4 	movhi	r3,1026
 40002bc:	18e2d904 	addi	r3,r3,-29852
 40002c0:	1004913a 	slli	r2,r2,4
 40002c4:	10c5883a 	add	r2,r2,r3
 40002c8:	11400017 	ldw	r5,0(r2)
 40002cc:	01010074 	movhi	r4,1025
 40002d0:	211a9004 	addi	r4,r4,27200
 40002d4:	40007bc0 	call	40007bc <printf>
            if( pb[i_cnt][_INFO] == _COMPLETE )
 40002d8:	d0a03443 	ldbu	r2,-32559(gp)
 40002dc:	10803fcc 	andi	r2,r2,255
 40002e0:	00c100b4 	movhi	r3,1026
 40002e4:	18e2d904 	addi	r3,r3,-29852
 40002e8:	1004913a 	slli	r2,r2,4
 40002ec:	10c5883a 	add	r2,r2,r3
 40002f0:	10800104 	addi	r2,r2,4
 40002f4:	10800017 	ldw	r2,0(r2)
 40002f8:	10800098 	cmpnei	r2,r2,2
 40002fc:	1000141e 	bne	r2,zero,4000350 <print_buffer+0x15c>
                printf( "COMPLETE\t\t%u\t%u\n", pb[i_cnt][_FROM], pb[i_cnt][_TO]);
 4000300:	d0a03443 	ldbu	r2,-32559(gp)
 4000304:	10803fcc 	andi	r2,r2,255
 4000308:	00c100b4 	movhi	r3,1026
 400030c:	18e2d904 	addi	r3,r3,-29852
 4000310:	1004913a 	slli	r2,r2,4
 4000314:	10c5883a 	add	r2,r2,r3
 4000318:	10800304 	addi	r2,r2,12
 400031c:	11400017 	ldw	r5,0(r2)
 4000320:	d0a03443 	ldbu	r2,-32559(gp)
 4000324:	10803fcc 	andi	r2,r2,255
 4000328:	00c100b4 	movhi	r3,1026
 400032c:	18e2d904 	addi	r3,r3,-29852
 4000330:	1004913a 	slli	r2,r2,4
 4000334:	10c5883a 	add	r2,r2,r3
 4000338:	10800204 	addi	r2,r2,8
 400033c:	11800017 	ldw	r6,0(r2)
 4000340:	01010074 	movhi	r4,1025
 4000344:	211a9104 	addi	r4,r4,27204
 4000348:	40007bc0 	call	40007bc <printf>
 400034c:	00001d06 	br	40003c4 <print_buffer+0x1d0>
            else if( pb[i_cnt][_INFO] == _PREEMPT )
 4000350:	d0a03443 	ldbu	r2,-32559(gp)
 4000354:	10803fcc 	andi	r2,r2,255
 4000358:	00c100b4 	movhi	r3,1026
 400035c:	18e2d904 	addi	r3,r3,-29852
 4000360:	1004913a 	slli	r2,r2,4
 4000364:	10c5883a 	add	r2,r2,r3
 4000368:	10800104 	addi	r2,r2,4
 400036c:	10800017 	ldw	r2,0(r2)
 4000370:	10800058 	cmpnei	r2,r2,1
 4000374:	1000131e 	bne	r2,zero,40003c4 <print_buffer+0x1d0>
                printf( "PREEMPT\t\t%u\t%u\n", pb[i_cnt][_FROM], pb[i_cnt][_TO]);
 4000378:	d0a03443 	ldbu	r2,-32559(gp)
 400037c:	10803fcc 	andi	r2,r2,255
 4000380:	00c100b4 	movhi	r3,1026
 4000384:	18e2d904 	addi	r3,r3,-29852
 4000388:	1004913a 	slli	r2,r2,4
 400038c:	10c5883a 	add	r2,r2,r3
 4000390:	10800304 	addi	r2,r2,12
 4000394:	11400017 	ldw	r5,0(r2)
 4000398:	d0a03443 	ldbu	r2,-32559(gp)
 400039c:	10803fcc 	andi	r2,r2,255
 40003a0:	00c100b4 	movhi	r3,1026
 40003a4:	18e2d904 	addi	r3,r3,-29852
 40003a8:	1004913a 	slli	r2,r2,4
 40003ac:	10c5883a 	add	r2,r2,r3
 40003b0:	10800204 	addi	r2,r2,8
 40003b4:	11800017 	ldw	r6,0(r2)
 40003b8:	01010074 	movhi	r4,1025
 40003bc:	211a9604 	addi	r4,r4,27224
 40003c0:	40007bc0 	call	40007bc <printf>
		printf("----------------------------------------------------------\n");
	}
	//if( get_buff_idx() - (PRINT*_PRINT_BUF) < _PRINT_BUF ) tmp = get_buff_idx()%_PRINT_BUF;
	//else tmp = _PRINT_BUF;
    //printf("get_buff_idx():%d\n",get_buff_idx());
    for( i_cnt =0; i_cnt<get_buff_idx(); i_cnt ++){
 40003c4:	d0a03443 	ldbu	r2,-32559(gp)
 40003c8:	10800044 	addi	r2,r2,1
 40003cc:	d0a03445 	stb	r2,-32559(gp)
 40003d0:	400abf00 	call	400abf0 <get_buff_idx>
 40003d4:	d0e03443 	ldbu	r3,-32559(gp)
 40003d8:	11003fcc 	andi	r4,r2,255
 40003dc:	18803fcc 	andi	r2,r3,255
 40003e0:	113f9336 	bltu	r2,r4,4000230 <print_buffer+0x3c>
                printf( "PREEMPT\t\t%u\t%u\n", pb[i_cnt][_FROM], pb[i_cnt][_TO]);
        }
        //OSTimeDlyHMSM(0, 0, 1, 0);
    }
    //if( get_timeout_flag()==1 ) PRINT = _PRINT_TOL;
    PRINT -= 1;
 40003e4:	d0a00017 	ldw	r2,-32768(gp)
 40003e8:	10bfffc4 	addi	r2,r2,-1
 40003ec:	d0a00015 	stw	r2,-32768(gp)
}
 40003f0:	e037883a 	mov	sp,fp
 40003f4:	dfc00117 	ldw	ra,4(sp)
 40003f8:	df000017 	ldw	fp,0(sp)
 40003fc:	dec00204 	addi	sp,sp,8
 4000400:	f800283a 	ret

04000404 <Task>:

void Task(void *pdata)
{
 4000404:	defff404 	addi	sp,sp,-48
 4000408:	dfc00b15 	stw	ra,44(sp)
 400040c:	df000a15 	stw	fp,40(sp)
 4000410:	dc000915 	stw	r16,36(sp)
 4000414:	df000904 	addi	fp,sp,36
 4000418:	e13ffe15 	stw	r4,-8(fp)
    int start ; //the start time
    int end ; //the end time
    int toDelay;
    //INT32U C;
    INT8U *p = (INT8U *)pdata;
 400041c:	e0bffe17 	ldw	r2,-8(fp)
 4000420:	e0bffa15 	stw	r2,-24(fp)
    //OSTCBCur->compTime = p[COMP];
    //printf("\n&which: %d cc %d", OSPrioCur,((RM *)pdata)->c);
    //OSTCBCur->period = p[PERIOD];
    //printf("\n&which: %d pp %d", OSPrioCur,((RM *)pdata)->p);
    //printf("OSTCBCur->compTime: %d, OSTCBCur->period: %d\n", OSTCBCur->compTime, OSTCBCur->period);
    OSTCBCur->ddl = p[PERIOD];
 4000424:	008100b4 	movhi	r2,1026
 4000428:	10a2c704 	addi	r2,r2,-29924
 400042c:	10c00017 	ldw	r3,0(r2)
 4000430:	e0bffa17 	ldw	r2,-24(fp)
 4000434:	10800044 	addi	r2,r2,1
 4000438:	10800003 	ldbu	r2,0(r2)
 400043c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->compTime = p[COMP];
 4000440:	008100b4 	movhi	r2,1026
 4000444:	10a2c704 	addi	r2,r2,-29924
 4000448:	10c00017 	ldw	r3,0(r2)
 400044c:	e0bffa17 	ldw	r2,-24(fp)
 4000450:	10800003 	ldbu	r2,0(r2)
 4000454:	18800b85 	stb	r2,46(r3)
    OSTCBCur->fullComp = p[COMP];
 4000458:	008100b4 	movhi	r2,1026
 400045c:	10a2c704 	addi	r2,r2,-29924
 4000460:	10c00017 	ldw	r3,0(r2)
 4000464:	e0bffa17 	ldw	r2,-24(fp)
 4000468:	10800003 	ldbu	r2,0(r2)
 400046c:	18800c45 	stb	r2,49(r3)
    OSTCBCur->period = p[PERIOD];
 4000470:	008100b4 	movhi	r2,1026
 4000474:	10a2c704 	addi	r2,r2,-29924
 4000478:	10c00017 	ldw	r3,0(r2)
 400047c:	e0bffa17 	ldw	r2,-24(fp)
 4000480:	10800044 	addi	r2,r2,1
 4000484:	10800003 	ldbu	r2,0(r2)
 4000488:	18800bc5 	stb	r2,47(r3)
    start=OSTimeGet();
 400048c:	40131580 	call	4013158 <OSTimeGet>
 4000490:	e0bffd15 	stw	r2,-12(fp)
        //OS_ENTER_CRITICAL();
    	//printf("OSTCBCur->OSTCBPrio: %d\n", OSTCBCur->OSTCBPrio);
    	//OSTimeDly(1);
    	//OSTimeDlyHMSM(0, 0, 3, 0);
		#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
			OS_CPU_SR  cpu_sr = 0;
 4000494:	e03ff915 	stw	zero,-28(fp)
		#endif

        while(OSTCBCur->compTime>0) //C ticks
 4000498:	008100b4 	movhi	r2,1026
 400049c:	10a2c704 	addi	r2,r2,-29924
 40004a0:	10800017 	ldw	r2,0(r2)
 40004a4:	10800b83 	ldbu	r2,46(r2)
 40004a8:	10803fcc 	andi	r2,r2,255
 40004ac:	1004c03a 	cmpne	r2,r2,zero
 40004b0:	103ff91e 	bne	r2,zero,4000498 <Task+0x94>
        {
            // do nothing
        	//printf("AA: %d\n",OSTCBCur->compTime);
        }

        if(  get_buff_idx() < get_buff_size()){
 40004b4:	400abf00 	call	400abf0 <get_buff_idx>
 40004b8:	400ac3c0 	call	400ac3c <get_buff_size>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40004bc:	0005303a 	rdctl	r2,status
 40004c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40004c4:	e0fff817 	ldw	r3,-32(fp)
 40004c8:	00bfff84 	movi	r2,-2
 40004cc:	1884703a 	and	r2,r3,r2
 40004d0:	1001703a 	wrctl	status,r2
  
  return context;
 40004d4:	e0bff817 	ldw	r2,-32(fp)
		     //printf("OSTimeGet: %o\n", OSTimeGet());
		     //printf("Prio:%o , Deadline: %o \n",OSTCBCur->OSTCBPrio, OSTCBCur->ddl);
		 }

		OS_ENTER_CRITICAL();
 40004d8:	e0bff915 	stw	r2,-28(fp)
		end = OSTimeGet() ; // end time
 40004dc:	40131580 	call	4013158 <OSTimeGet>
 40004e0:	e0bffc15 	stw	r2,-16(fp)
		toDelay = (OSTCBCur->ddl)-end;//period == (end-start)
 40004e4:	008100b4 	movhi	r2,1026
 40004e8:	10a2c704 	addi	r2,r2,-29924
 40004ec:	10800017 	ldw	r2,0(r2)
 40004f0:	10800c03 	ldbu	r2,48(r2)
 40004f4:	10c03fcc 	andi	r3,r2,255
 40004f8:	e0bffc17 	ldw	r2,-16(fp)
 40004fc:	1885c83a 	sub	r2,r3,r2
 4000500:	e0bffb15 	stw	r2,-20(fp)
		toDelay = toDelay < 0 ? 0 : toDelay;
 4000504:	e0bffb17 	ldw	r2,-20(fp)
 4000508:	e0bfff15 	stw	r2,-4(fp)
 400050c:	e0ffff17 	ldw	r3,-4(fp)
 4000510:	1804403a 	cmpge	r2,r3,zero
 4000514:	1000011e 	bne	r2,zero,400051c <Task+0x118>
 4000518:	e03fff15 	stw	zero,-4(fp)
 400051c:	e0bfff17 	ldw	r2,-4(fp)
 4000520:	e0bffb15 	stw	r2,-20(fp)
		// if(  get_buff_idx() < get_buff_size() ){
		//     printf("start, end: %d, %d\n", start, end);
		//     }
		//start = start + p[PERIOD]; // next start time
		OSTCBCur->compTime = p[COMP];//C ;// reset the counter (c ticks for computation)
 4000524:	008100b4 	movhi	r2,1026
 4000528:	10a2c704 	addi	r2,r2,-29924
 400052c:	10c00017 	ldw	r3,0(r2)
 4000530:	e0bffa17 	ldw	r2,-24(fp)
 4000534:	10800003 	ldbu	r2,0(r2)
 4000538:	18800b85 	stb	r2,46(r3)
        if( get_buff_idx() == get_buff_size() || get_timeout_flag( ) ){
 400053c:	400abf00 	call	400abf0 <get_buff_idx>
 4000540:	1021883a 	mov	r16,r2
 4000544:	400ac3c0 	call	400ac3c <get_buff_size>
 4000548:	80c03fcc 	andi	r3,r16,255
 400054c:	10803fcc 	andi	r2,r2,255
 4000550:	18800426 	beq	r3,r2,4000564 <Task+0x160>
 4000554:	400ac5c0 	call	400ac5c <get_timeout_flag>
 4000558:	10803fcc 	andi	r2,r2,255
 400055c:	1005003a 	cmpeq	r2,r2,zero
 4000560:	1000011e 	bne	r2,zero,4000568 <Task+0x164>
        	print_buffer();
 4000564:	40001f40 	call	40001f4 <print_buffer>
        	/*
        	if( PRINT < _PRINT_TOL ){
				print_buffer();
			}*/
		}
        OSTCBCur->ddl += OSTCBCur->period;
 4000568:	008100b4 	movhi	r2,1026
 400056c:	10a2c704 	addi	r2,r2,-29924
 4000570:	11000017 	ldw	r4,0(r2)
 4000574:	008100b4 	movhi	r2,1026
 4000578:	10a2c704 	addi	r2,r2,-29924
 400057c:	10800017 	ldw	r2,0(r2)
 4000580:	10c00c03 	ldbu	r3,48(r2)
 4000584:	008100b4 	movhi	r2,1026
 4000588:	10a2c704 	addi	r2,r2,-29924
 400058c:	10800017 	ldw	r2,0(r2)
 4000590:	10800bc3 	ldbu	r2,47(r2)
 4000594:	1885883a 	add	r2,r3,r2
 4000598:	20800c05 	stb	r2,48(r4)
 400059c:	e0bff917 	ldw	r2,-28(fp)
 40005a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40005a4:	e0bff717 	ldw	r2,-36(fp)
 40005a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTimeDly (toDelay);// delay and wait (P-C) times
 40005ac:	e0bffb17 	ldw	r2,-20(fp)
 40005b0:	113fffcc 	andi	r4,r2,65535
 40005b4:	4012c840 	call	4012c84 <OSTimeDly>

    }
 40005b8:	003fb606 	br	4000494 <Task+0x90>

040005bc <TaskStartCreateTasks>:
}
static void TaskStartCreateTasks(void)
{
 40005bc:	defffe04 	addi	sp,sp,-8
 40005c0:	dfc00115 	stw	ra,4(sp)
 40005c4:	df000015 	stw	fp,0(sp)
 40005c8:	d839883a 	mov	fp,sp

    //CHANGE
    OSTaskCreate(Task, (void *)task_data[0], &TaskStk[0][TASK_STK_SIZE - 1], 1);
 40005cc:	d1600104 	addi	r5,gp,-32764
 40005d0:	008100b4 	movhi	r2,1026
 40005d4:	10a55104 	addi	r2,r2,-27324
 40005d8:	1181ff04 	addi	r6,r2,2044
 40005dc:	01010034 	movhi	r4,1024
 40005e0:	21010104 	addi	r4,r4,1028
 40005e4:	01c00044 	movi	r7,1
 40005e8:	40117b80 	call	40117b8 <OSTaskCreate>
    OSTaskCreate(Task, (void *)task_data[1], &TaskStk[1][TASK_STK_SIZE - 1], 2);
 40005ec:	008100b4 	movhi	r2,1026
 40005f0:	10a27184 	addi	r2,r2,-30266
 40005f4:	100b883a 	mov	r5,r2
 40005f8:	008100b4 	movhi	r2,1026
 40005fc:	10a55104 	addi	r2,r2,-27324
 4000600:	1183ff04 	addi	r6,r2,4092
 4000604:	01010034 	movhi	r4,1024
 4000608:	21010104 	addi	r4,r4,1028
 400060c:	01c00084 	movi	r7,2
 4000610:	40117b80 	call	40117b8 <OSTaskCreate>
    OSTaskCreate(Task, (void *)task_data[2], &TaskStk[2][TASK_STK_SIZE - 1], 3);
 4000614:	008100b4 	movhi	r2,1026
 4000618:	10a27204 	addi	r2,r2,-30264
 400061c:	100b883a 	mov	r5,r2
 4000620:	008100b4 	movhi	r2,1026
 4000624:	10a55104 	addi	r2,r2,-27324
 4000628:	1185ff04 	addi	r6,r2,6140
 400062c:	01010034 	movhi	r4,1024
 4000630:	21010104 	addi	r4,r4,1028
 4000634:	01c000c4 	movi	r7,3
 4000638:	40117b80 	call	40117b8 <OSTaskCreate>
}
 400063c:	e037883a 	mov	sp,fp
 4000640:	dfc00117 	ldw	ra,4(sp)
 4000644:	df000017 	ldw	fp,0(sp)
 4000648:	dec00204 	addi	sp,sp,8
 400064c:	f800283a 	ret

04000650 <main>:


int  main (void)
{
 4000650:	defffe04 	addi	sp,sp,-8
 4000654:	dfc00115 	stw	ra,4(sp)
 4000658:	df000015 	stw	fp,0(sp)
 400065c:	d839883a 	mov	fp,sp
    //PC_DispClrScr(DISP_FGND_WHITE + DISP_BGND_BLACK);      /* Clear the screen                         */

    //OSInit();                                              /* Initialize uC/OS-II                      */
    //OSStatInit();                                          /* Initialize uC/OS-II's statistics         */

    TaskStartCreateTasks();
 4000660:	40005bc0 	call	40005bc <TaskStartCreateTasks>
    //OSCtxSwCtr = 0;                                    /* Clear context switch counter             */
    OSTimeSet(0);
 4000664:	0009883a 	mov	r4,zero
 4000668:	40131bc0 	call	40131bc <OSTimeSet>
    set_buff_size( 0 );
 400066c:	0009883a 	mov	r4,zero
 4000670:	400ac140 	call	400ac14 <set_buff_size>
    Init_Task_ddl();
 4000674:	40006940 	call	4000694 <Init_Task_ddl>
    //OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
    OSStart();                                             /* Start multitasking                       */
 4000678:	400b9b80 	call	400b9b8 <OSStart>
    return 0;
 400067c:	0005883a 	mov	r2,zero
}
 4000680:	e037883a 	mov	sp,fp
 4000684:	dfc00117 	ldw	ra,4(sp)
 4000688:	df000017 	ldw	fp,0(sp)
 400068c:	dec00204 	addi	sp,sp,8
 4000690:	f800283a 	ret

04000694 <Init_Task_ddl>:

OS_TCB *current;
void Init_Task_ddl(void){
 4000694:	deffff04 	addi	sp,sp,-4
 4000698:	df000015 	stw	fp,0(sp)
 400069c:	d839883a 	mov	fp,sp
    for (i_cnt = 1; i_cnt < OS_LOWEST_PRIO-1 ; i_cnt++)
 40006a0:	00800044 	movi	r2,1
 40006a4:	d0a03445 	stb	r2,-32559(gp)
 40006a8:	00003c06 	br	400079c <Init_Task_ddl+0x108>
        {

            if (OSTCBPrioTbl[i_cnt] != (OS_TCB *)0 )
 40006ac:	d0a03443 	ldbu	r2,-32559(gp)
 40006b0:	10803fcc 	andi	r2,r2,255
 40006b4:	00c100b4 	movhi	r3,1026
 40006b8:	18f7d104 	addi	r3,r3,-8380
 40006bc:	1085883a 	add	r2,r2,r2
 40006c0:	1085883a 	add	r2,r2,r2
 40006c4:	10c5883a 	add	r2,r2,r3
 40006c8:	10800017 	ldw	r2,0(r2)
 40006cc:	1005003a 	cmpeq	r2,r2,zero
 40006d0:	10002f1e 	bne	r2,zero,4000790 <Init_Task_ddl+0xfc>
            {
                // printf("BBBBBB, %d\n",cnt);
                current = OSTCBPrioTbl[i_cnt];
 40006d4:	d0a03443 	ldbu	r2,-32559(gp)
 40006d8:	10803fcc 	andi	r2,r2,255
 40006dc:	00c100b4 	movhi	r3,1026
 40006e0:	18f7d104 	addi	r3,r3,-8380
 40006e4:	1085883a 	add	r2,r2,r2
 40006e8:	1085883a 	add	r2,r2,r2
 40006ec:	10c5883a 	add	r2,r2,r3
 40006f0:	10800017 	ldw	r2,0(r2)
 40006f4:	d0a03615 	stw	r2,-32552(gp)
                current->compTime = task_data[i_cnt-1][COMP];
 40006f8:	d1203617 	ldw	r4,-32552(gp)
 40006fc:	d0a03443 	ldbu	r2,-32559(gp)
 4000700:	10803fcc 	andi	r2,r2,255
 4000704:	10bfffc4 	addi	r2,r2,-1
 4000708:	1087883a 	add	r3,r2,r2
 400070c:	d0a00104 	addi	r2,gp,-32764
 4000710:	1885883a 	add	r2,r3,r2
 4000714:	10800003 	ldbu	r2,0(r2)
 4000718:	20800b85 	stb	r2,46(r4)
                current->fullComp = task_data[i_cnt-1][COMP];
 400071c:	d1203617 	ldw	r4,-32552(gp)
 4000720:	d0a03443 	ldbu	r2,-32559(gp)
 4000724:	10803fcc 	andi	r2,r2,255
 4000728:	10bfffc4 	addi	r2,r2,-1
 400072c:	1087883a 	add	r3,r2,r2
 4000730:	d0a00104 	addi	r2,gp,-32764
 4000734:	1885883a 	add	r2,r3,r2
 4000738:	10800003 	ldbu	r2,0(r2)
 400073c:	20800c45 	stb	r2,49(r4)
                current->period = task_data[i_cnt-1][PERIOD];
 4000740:	d1203617 	ldw	r4,-32552(gp)
 4000744:	d0a03443 	ldbu	r2,-32559(gp)
 4000748:	10803fcc 	andi	r2,r2,255
 400074c:	10bfffc4 	addi	r2,r2,-1
 4000750:	1087883a 	add	r3,r2,r2
 4000754:	008100b4 	movhi	r2,1026
 4000758:	10a27144 	addi	r2,r2,-30267
 400075c:	1885883a 	add	r2,r3,r2
 4000760:	10800003 	ldbu	r2,0(r2)
 4000764:	20800bc5 	stb	r2,47(r4)
                current->ddl = task_data[i_cnt-1][PERIOD];
 4000768:	d1203617 	ldw	r4,-32552(gp)
 400076c:	d0a03443 	ldbu	r2,-32559(gp)
 4000770:	10803fcc 	andi	r2,r2,255
 4000774:	10bfffc4 	addi	r2,r2,-1
 4000778:	1087883a 	add	r3,r2,r2
 400077c:	008100b4 	movhi	r2,1026
 4000780:	10a27144 	addi	r2,r2,-30267
 4000784:	1885883a 	add	r2,r3,r2
 4000788:	10800003 	ldbu	r2,0(r2)
 400078c:	20800c05 	stb	r2,48(r4)
    return 0;
}

OS_TCB *current;
void Init_Task_ddl(void){
    for (i_cnt = 1; i_cnt < OS_LOWEST_PRIO-1 ; i_cnt++)
 4000790:	d0a03443 	ldbu	r2,-32559(gp)
 4000794:	10800044 	addi	r2,r2,1
 4000798:	d0a03445 	stb	r2,-32559(gp)
 400079c:	d0a03443 	ldbu	r2,-32559(gp)
 40007a0:	10803fcc 	andi	r2,r2,255
 40007a4:	108004f0 	cmpltui	r2,r2,19
 40007a8:	103fc01e 	bne	r2,zero,40006ac <Init_Task_ddl+0x18>
                current->fullComp = task_data[i_cnt-1][COMP];
                current->period = task_data[i_cnt-1][PERIOD];
                current->ddl = task_data[i_cnt-1][PERIOD];
            }
        }
}
 40007ac:	e037883a 	mov	sp,fp
 40007b0:	df000017 	ldw	fp,0(sp)
 40007b4:	dec00104 	addi	sp,sp,4
 40007b8:	f800283a 	ret

040007bc <printf>:
 40007bc:	defffb04 	addi	sp,sp,-20
 40007c0:	dfc00115 	stw	ra,4(sp)
 40007c4:	d9400215 	stw	r5,8(sp)
 40007c8:	d9800315 	stw	r6,12(sp)
 40007cc:	d9c00415 	stw	r7,16(sp)
 40007d0:	008100b4 	movhi	r2,1026
 40007d4:	10a27304 	addi	r2,r2,-30260
 40007d8:	10c00017 	ldw	r3,0(r2)
 40007dc:	200b883a 	mov	r5,r4
 40007e0:	d8800204 	addi	r2,sp,8
 40007e4:	19000217 	ldw	r4,8(r3)
 40007e8:	100d883a 	mov	r6,r2
 40007ec:	d8800015 	stw	r2,0(sp)
 40007f0:	40028600 	call	4002860 <__vfprintf_internal>
 40007f4:	dfc00117 	ldw	ra,4(sp)
 40007f8:	dec00504 	addi	sp,sp,20
 40007fc:	f800283a 	ret

04000800 <_printf_r>:
 4000800:	defffc04 	addi	sp,sp,-16
 4000804:	dfc00115 	stw	ra,4(sp)
 4000808:	d9800215 	stw	r6,8(sp)
 400080c:	d9c00315 	stw	r7,12(sp)
 4000810:	280d883a 	mov	r6,r5
 4000814:	21400217 	ldw	r5,8(r4)
 4000818:	d8c00204 	addi	r3,sp,8
 400081c:	180f883a 	mov	r7,r3
 4000820:	d8c00015 	stw	r3,0(sp)
 4000824:	40009b40 	call	40009b4 <___vfprintf_internal_r>
 4000828:	dfc00117 	ldw	ra,4(sp)
 400082c:	dec00404 	addi	sp,sp,16
 4000830:	f800283a 	ret

04000834 <_puts_r>:
 4000834:	defff604 	addi	sp,sp,-40
 4000838:	dc400715 	stw	r17,28(sp)
 400083c:	2023883a 	mov	r17,r4
 4000840:	2809883a 	mov	r4,r5
 4000844:	dfc00915 	stw	ra,36(sp)
 4000848:	dcc00815 	stw	r19,32(sp)
 400084c:	2827883a 	mov	r19,r5
 4000850:	40008e80 	call	40008e8 <strlen>
 4000854:	89400217 	ldw	r5,8(r17)
 4000858:	00c10074 	movhi	r3,1025
 400085c:	18da9a04 	addi	r3,r3,27240
 4000860:	01c00044 	movi	r7,1
 4000864:	12000044 	addi	r8,r2,1
 4000868:	d8c00515 	stw	r3,20(sp)
 400086c:	d9c00615 	stw	r7,24(sp)
 4000870:	d8c00304 	addi	r3,sp,12
 4000874:	01c00084 	movi	r7,2
 4000878:	8809883a 	mov	r4,r17
 400087c:	d80d883a 	mov	r6,sp
 4000880:	d8c00015 	stw	r3,0(sp)
 4000884:	dcc00315 	stw	r19,12(sp)
 4000888:	da000215 	stw	r8,8(sp)
 400088c:	d9c00115 	stw	r7,4(sp)
 4000890:	d8800415 	stw	r2,16(sp)
 4000894:	4004abc0 	call	4004abc <__sfvwrite_r>
 4000898:	00ffffc4 	movi	r3,-1
 400089c:	10000626 	beq	r2,zero,40008b8 <_puts_r+0x84>
 40008a0:	1805883a 	mov	r2,r3
 40008a4:	dfc00917 	ldw	ra,36(sp)
 40008a8:	dcc00817 	ldw	r19,32(sp)
 40008ac:	dc400717 	ldw	r17,28(sp)
 40008b0:	dec00a04 	addi	sp,sp,40
 40008b4:	f800283a 	ret
 40008b8:	00c00284 	movi	r3,10
 40008bc:	1805883a 	mov	r2,r3
 40008c0:	dfc00917 	ldw	ra,36(sp)
 40008c4:	dcc00817 	ldw	r19,32(sp)
 40008c8:	dc400717 	ldw	r17,28(sp)
 40008cc:	dec00a04 	addi	sp,sp,40
 40008d0:	f800283a 	ret

040008d4 <puts>:
 40008d4:	008100b4 	movhi	r2,1026
 40008d8:	10a27304 	addi	r2,r2,-30260
 40008dc:	200b883a 	mov	r5,r4
 40008e0:	11000017 	ldw	r4,0(r2)
 40008e4:	40008341 	jmpi	4000834 <_puts_r>

040008e8 <strlen>:
 40008e8:	208000cc 	andi	r2,r4,3
 40008ec:	2011883a 	mov	r8,r4
 40008f0:	1000161e 	bne	r2,zero,400094c <strlen+0x64>
 40008f4:	20c00017 	ldw	r3,0(r4)
 40008f8:	017fbff4 	movhi	r5,65279
 40008fc:	297fbfc4 	addi	r5,r5,-257
 4000900:	01e02074 	movhi	r7,32897
 4000904:	39e02004 	addi	r7,r7,-32640
 4000908:	1945883a 	add	r2,r3,r5
 400090c:	11c4703a 	and	r2,r2,r7
 4000910:	00c6303a 	nor	r3,zero,r3
 4000914:	1886703a 	and	r3,r3,r2
 4000918:	18000c1e 	bne	r3,zero,400094c <strlen+0x64>
 400091c:	280d883a 	mov	r6,r5
 4000920:	380b883a 	mov	r5,r7
 4000924:	21000104 	addi	r4,r4,4
 4000928:	20800017 	ldw	r2,0(r4)
 400092c:	1187883a 	add	r3,r2,r6
 4000930:	1946703a 	and	r3,r3,r5
 4000934:	0084303a 	nor	r2,zero,r2
 4000938:	10c4703a 	and	r2,r2,r3
 400093c:	103ff926 	beq	r2,zero,4000924 <strlen+0x3c>
 4000940:	20800007 	ldb	r2,0(r4)
 4000944:	10000326 	beq	r2,zero,4000954 <strlen+0x6c>
 4000948:	21000044 	addi	r4,r4,1
 400094c:	20800007 	ldb	r2,0(r4)
 4000950:	103ffd1e 	bne	r2,zero,4000948 <strlen+0x60>
 4000954:	2205c83a 	sub	r2,r4,r8
 4000958:	f800283a 	ret

0400095c <__sprint_r>:
 400095c:	30800217 	ldw	r2,8(r6)
 4000960:	defffe04 	addi	sp,sp,-8
 4000964:	dc000015 	stw	r16,0(sp)
 4000968:	dfc00115 	stw	ra,4(sp)
 400096c:	3021883a 	mov	r16,r6
 4000970:	0007883a 	mov	r3,zero
 4000974:	1000061e 	bne	r2,zero,4000990 <__sprint_r+0x34>
 4000978:	1805883a 	mov	r2,r3
 400097c:	30000115 	stw	zero,4(r6)
 4000980:	dfc00117 	ldw	ra,4(sp)
 4000984:	dc000017 	ldw	r16,0(sp)
 4000988:	dec00204 	addi	sp,sp,8
 400098c:	f800283a 	ret
 4000990:	4004abc0 	call	4004abc <__sfvwrite_r>
 4000994:	1007883a 	mov	r3,r2
 4000998:	1805883a 	mov	r2,r3
 400099c:	80000115 	stw	zero,4(r16)
 40009a0:	80000215 	stw	zero,8(r16)
 40009a4:	dfc00117 	ldw	ra,4(sp)
 40009a8:	dc000017 	ldw	r16,0(sp)
 40009ac:	dec00204 	addi	sp,sp,8
 40009b0:	f800283a 	ret

040009b4 <___vfprintf_internal_r>:
 40009b4:	defea404 	addi	sp,sp,-1392
 40009b8:	dd815815 	stw	r22,1376(sp)
 40009bc:	dc015215 	stw	r16,1352(sp)
 40009c0:	d9c15115 	stw	r7,1348(sp)
 40009c4:	dfc15b15 	stw	ra,1388(sp)
 40009c8:	df015a15 	stw	fp,1384(sp)
 40009cc:	ddc15915 	stw	r23,1380(sp)
 40009d0:	dd415715 	stw	r21,1372(sp)
 40009d4:	dd015615 	stw	r20,1368(sp)
 40009d8:	dcc15515 	stw	r19,1364(sp)
 40009dc:	dc815415 	stw	r18,1360(sp)
 40009e0:	dc415315 	stw	r17,1356(sp)
 40009e4:	282d883a 	mov	r22,r5
 40009e8:	3021883a 	mov	r16,r6
 40009ec:	d9014f15 	stw	r4,1340(sp)
 40009f0:	40050e00 	call	40050e0 <_localeconv_r>
 40009f4:	10800017 	ldw	r2,0(r2)
 40009f8:	d9c15117 	ldw	r7,1348(sp)
 40009fc:	d8814915 	stw	r2,1316(sp)
 4000a00:	d8814f17 	ldw	r2,1340(sp)
 4000a04:	10000226 	beq	r2,zero,4000a10 <___vfprintf_internal_r+0x5c>
 4000a08:	10800e17 	ldw	r2,56(r2)
 4000a0c:	10020d26 	beq	r2,zero,4001244 <___vfprintf_internal_r+0x890>
 4000a10:	b080030b 	ldhu	r2,12(r22)
 4000a14:	1080020c 	andi	r2,r2,8
 4000a18:	10020e26 	beq	r2,zero,4001254 <___vfprintf_internal_r+0x8a0>
 4000a1c:	b0800417 	ldw	r2,16(r22)
 4000a20:	10020c26 	beq	r2,zero,4001254 <___vfprintf_internal_r+0x8a0>
 4000a24:	b200030b 	ldhu	r8,12(r22)
 4000a28:	00800284 	movi	r2,10
 4000a2c:	40c0068c 	andi	r3,r8,26
 4000a30:	18802f1e 	bne	r3,r2,4000af0 <___vfprintf_internal_r+0x13c>
 4000a34:	b080038f 	ldh	r2,14(r22)
 4000a38:	10002d16 	blt	r2,zero,4000af0 <___vfprintf_internal_r+0x13c>
 4000a3c:	b240038b 	ldhu	r9,14(r22)
 4000a40:	b2800717 	ldw	r10,28(r22)
 4000a44:	b2c00917 	ldw	r11,36(r22)
 4000a48:	d9014f17 	ldw	r4,1340(sp)
 4000a4c:	dc402904 	addi	r17,sp,164
 4000a50:	d8804004 	addi	r2,sp,256
 4000a54:	00c10004 	movi	r3,1024
 4000a58:	423fff4c 	andi	r8,r8,65533
 4000a5c:	800d883a 	mov	r6,r16
 4000a60:	880b883a 	mov	r5,r17
 4000a64:	da002c0d 	sth	r8,176(sp)
 4000a68:	da402c8d 	sth	r9,178(sp)
 4000a6c:	da803015 	stw	r10,192(sp)
 4000a70:	dac03215 	stw	r11,200(sp)
 4000a74:	d8802d15 	stw	r2,180(sp)
 4000a78:	d8c02e15 	stw	r3,184(sp)
 4000a7c:	d8802915 	stw	r2,164(sp)
 4000a80:	d8c02b15 	stw	r3,172(sp)
 4000a84:	d8002f15 	stw	zero,188(sp)
 4000a88:	40009b40 	call	40009b4 <___vfprintf_internal_r>
 4000a8c:	d8814b15 	stw	r2,1324(sp)
 4000a90:	10000416 	blt	r2,zero,4000aa4 <___vfprintf_internal_r+0xf0>
 4000a94:	d9014f17 	ldw	r4,1340(sp)
 4000a98:	880b883a 	mov	r5,r17
 4000a9c:	400418c0 	call	400418c <_fflush_r>
 4000aa0:	1002321e 	bne	r2,zero,400136c <___vfprintf_internal_r+0x9b8>
 4000aa4:	d8802c0b 	ldhu	r2,176(sp)
 4000aa8:	1080100c 	andi	r2,r2,64
 4000aac:	10000326 	beq	r2,zero,4000abc <___vfprintf_internal_r+0x108>
 4000ab0:	b080030b 	ldhu	r2,12(r22)
 4000ab4:	10801014 	ori	r2,r2,64
 4000ab8:	b080030d 	sth	r2,12(r22)
 4000abc:	d8814b17 	ldw	r2,1324(sp)
 4000ac0:	dfc15b17 	ldw	ra,1388(sp)
 4000ac4:	df015a17 	ldw	fp,1384(sp)
 4000ac8:	ddc15917 	ldw	r23,1380(sp)
 4000acc:	dd815817 	ldw	r22,1376(sp)
 4000ad0:	dd415717 	ldw	r21,1372(sp)
 4000ad4:	dd015617 	ldw	r20,1368(sp)
 4000ad8:	dcc15517 	ldw	r19,1364(sp)
 4000adc:	dc815417 	ldw	r18,1360(sp)
 4000ae0:	dc415317 	ldw	r17,1356(sp)
 4000ae4:	dc015217 	ldw	r16,1352(sp)
 4000ae8:	dec15c04 	addi	sp,sp,1392
 4000aec:	f800283a 	ret
 4000af0:	0005883a 	mov	r2,zero
 4000af4:	0007883a 	mov	r3,zero
 4000af8:	dd401904 	addi	r21,sp,100
 4000afc:	d8814215 	stw	r2,1288(sp)
 4000b00:	802f883a 	mov	r23,r16
 4000b04:	d8c14315 	stw	r3,1292(sp)
 4000b08:	d8014b15 	stw	zero,1324(sp)
 4000b0c:	d8014815 	stw	zero,1312(sp)
 4000b10:	d8014415 	stw	zero,1296(sp)
 4000b14:	d8014715 	stw	zero,1308(sp)
 4000b18:	dd400c15 	stw	r21,48(sp)
 4000b1c:	d8000e15 	stw	zero,56(sp)
 4000b20:	d8000d15 	stw	zero,52(sp)
 4000b24:	b8800007 	ldb	r2,0(r23)
 4000b28:	10001926 	beq	r2,zero,4000b90 <___vfprintf_internal_r+0x1dc>
 4000b2c:	00c00944 	movi	r3,37
 4000b30:	10c01726 	beq	r2,r3,4000b90 <___vfprintf_internal_r+0x1dc>
 4000b34:	b821883a 	mov	r16,r23
 4000b38:	00000106 	br	4000b40 <___vfprintf_internal_r+0x18c>
 4000b3c:	10c00326 	beq	r2,r3,4000b4c <___vfprintf_internal_r+0x198>
 4000b40:	84000044 	addi	r16,r16,1
 4000b44:	80800007 	ldb	r2,0(r16)
 4000b48:	103ffc1e 	bne	r2,zero,4000b3c <___vfprintf_internal_r+0x188>
 4000b4c:	85e7c83a 	sub	r19,r16,r23
 4000b50:	98000e26 	beq	r19,zero,4000b8c <___vfprintf_internal_r+0x1d8>
 4000b54:	dc800e17 	ldw	r18,56(sp)
 4000b58:	dc400d17 	ldw	r17,52(sp)
 4000b5c:	008001c4 	movi	r2,7
 4000b60:	94e5883a 	add	r18,r18,r19
 4000b64:	8c400044 	addi	r17,r17,1
 4000b68:	adc00015 	stw	r23,0(r21)
 4000b6c:	dc800e15 	stw	r18,56(sp)
 4000b70:	acc00115 	stw	r19,4(r21)
 4000b74:	dc400d15 	stw	r17,52(sp)
 4000b78:	14428b16 	blt	r2,r17,40015a8 <___vfprintf_internal_r+0xbf4>
 4000b7c:	ad400204 	addi	r21,r21,8
 4000b80:	d9014b17 	ldw	r4,1324(sp)
 4000b84:	24c9883a 	add	r4,r4,r19
 4000b88:	d9014b15 	stw	r4,1324(sp)
 4000b8c:	802f883a 	mov	r23,r16
 4000b90:	b8800007 	ldb	r2,0(r23)
 4000b94:	10013c26 	beq	r2,zero,4001088 <___vfprintf_internal_r+0x6d4>
 4000b98:	bdc00044 	addi	r23,r23,1
 4000b9c:	d8000405 	stb	zero,16(sp)
 4000ba0:	b8c00007 	ldb	r3,0(r23)
 4000ba4:	04ffffc4 	movi	r19,-1
 4000ba8:	d8014c15 	stw	zero,1328(sp)
 4000bac:	d8014a15 	stw	zero,1320(sp)
 4000bb0:	d8c14d15 	stw	r3,1332(sp)
 4000bb4:	bdc00044 	addi	r23,r23,1
 4000bb8:	d9414d17 	ldw	r5,1332(sp)
 4000bbc:	00801604 	movi	r2,88
 4000bc0:	28fff804 	addi	r3,r5,-32
 4000bc4:	10c06036 	bltu	r2,r3,4000d48 <___vfprintf_internal_r+0x394>
 4000bc8:	18c5883a 	add	r2,r3,r3
 4000bcc:	1085883a 	add	r2,r2,r2
 4000bd0:	00c10034 	movhi	r3,1024
 4000bd4:	18c2f904 	addi	r3,r3,3044
 4000bd8:	10c5883a 	add	r2,r2,r3
 4000bdc:	11000017 	ldw	r4,0(r2)
 4000be0:	2000683a 	jmp	r4
 4000be4:	04001b58 	cmpnei	r16,zero,109
 4000be8:	04000d48 	cmpgei	r16,zero,53
 4000bec:	04000d48 	cmpgei	r16,zero,53
 4000bf0:	04001b44 	movi	r16,109
 4000bf4:	04000d48 	cmpgei	r16,zero,53
 4000bf8:	04000d48 	cmpgei	r16,zero,53
 4000bfc:	04000d48 	cmpgei	r16,zero,53
 4000c00:	04000d48 	cmpgei	r16,zero,53
 4000c04:	04000d48 	cmpgei	r16,zero,53
 4000c08:	04000d48 	cmpgei	r16,zero,53
 4000c0c:	04001924 	muli	r16,zero,100
 4000c10:	04001b34 	movhi	r16,108
 4000c14:	04000d48 	cmpgei	r16,zero,53
 4000c18:	0400193c 	xorhi	r16,zero,100
 4000c1c:	04001bd0 	cmplti	r16,zero,111
 4000c20:	04000d48 	cmpgei	r16,zero,53
 4000c24:	04001bbc 	xorhi	r16,zero,110
 4000c28:	04001b84 	movi	r16,110
 4000c2c:	04001b84 	movi	r16,110
 4000c30:	04001b84 	movi	r16,110
 4000c34:	04001b84 	movi	r16,110
 4000c38:	04001b84 	movi	r16,110
 4000c3c:	04001b84 	movi	r16,110
 4000c40:	04001b84 	movi	r16,110
 4000c44:	04001b84 	movi	r16,110
 4000c48:	04001b84 	movi	r16,110
 4000c4c:	04000d48 	cmpgei	r16,zero,53
 4000c50:	04000d48 	cmpgei	r16,zero,53
 4000c54:	04000d48 	cmpgei	r16,zero,53
 4000c58:	04000d48 	cmpgei	r16,zero,53
 4000c5c:	04000d48 	cmpgei	r16,zero,53
 4000c60:	04000d48 	cmpgei	r16,zero,53
 4000c64:	04000d48 	cmpgei	r16,zero,53
 4000c68:	04000d48 	cmpgei	r16,zero,53
 4000c6c:	04000d48 	cmpgei	r16,zero,53
 4000c70:	04000d48 	cmpgei	r16,zero,53
 4000c74:	040013a0 	cmpeqi	r16,zero,78
 4000c78:	04001a0c 	andi	r16,zero,104
 4000c7c:	04000d48 	cmpgei	r16,zero,53
 4000c80:	04001a0c 	andi	r16,zero,104
 4000c84:	04000d48 	cmpgei	r16,zero,53
 4000c88:	04000d48 	cmpgei	r16,zero,53
 4000c8c:	04000d48 	cmpgei	r16,zero,53
 4000c90:	04000d48 	cmpgei	r16,zero,53
 4000c94:	04001b70 	cmpltui	r16,zero,109
 4000c98:	04000d48 	cmpgei	r16,zero,53
 4000c9c:	04000d48 	cmpgei	r16,zero,53
 4000ca0:	04001454 	movui	r16,81
 4000ca4:	04000d48 	cmpgei	r16,zero,53
 4000ca8:	04000d48 	cmpgei	r16,zero,53
 4000cac:	04000d48 	cmpgei	r16,zero,53
 4000cb0:	04000d48 	cmpgei	r16,zero,53
 4000cb4:	04000d48 	cmpgei	r16,zero,53
 4000cb8:	040014a0 	cmpeqi	r16,zero,82
 4000cbc:	04000d48 	cmpgei	r16,zero,53
 4000cc0:	04000d48 	cmpgei	r16,zero,53
 4000cc4:	04001ac0 	call	4001ac <OSCtxSw_SWITCH_PC+0x40016c>
 4000cc8:	04000d48 	cmpgei	r16,zero,53
 4000ccc:	04000d48 	cmpgei	r16,zero,53
 4000cd0:	04000d48 	cmpgei	r16,zero,53
 4000cd4:	04000d48 	cmpgei	r16,zero,53
 4000cd8:	04000d48 	cmpgei	r16,zero,53
 4000cdc:	04000d48 	cmpgei	r16,zero,53
 4000ce0:	04000d48 	cmpgei	r16,zero,53
 4000ce4:	04000d48 	cmpgei	r16,zero,53
 4000ce8:	04000d48 	cmpgei	r16,zero,53
 4000cec:	04000d48 	cmpgei	r16,zero,53
 4000cf0:	04001a94 	movui	r16,106
 4000cf4:	040013ac 	andhi	r16,zero,78
 4000cf8:	04001a0c 	andi	r16,zero,104
 4000cfc:	04001a0c 	andi	r16,zero,104
 4000d00:	04001a0c 	andi	r16,zero,104
 4000d04:	040019f8 	rdprs	r16,zero,103
 4000d08:	040013ac 	andhi	r16,zero,78
 4000d0c:	04000d48 	cmpgei	r16,zero,53
 4000d10:	04000d48 	cmpgei	r16,zero,53
 4000d14:	04001980 	call	400198 <OSCtxSw_SWITCH_PC+0x400158>
 4000d18:	04000d48 	cmpgei	r16,zero,53
 4000d1c:	04001950 	cmplti	r16,zero,101
 4000d20:	04001460 	cmpeqi	r16,zero,81
 4000d24:	040019b0 	cmpltui	r16,zero,102
 4000d28:	0400199c 	xori	r16,zero,102
 4000d2c:	04000d48 	cmpgei	r16,zero,53
 4000d30:	04001c2c 	andhi	r16,zero,112
 4000d34:	04000d48 	cmpgei	r16,zero,53
 4000d38:	040014ac 	andhi	r16,zero,82
 4000d3c:	04000d48 	cmpgei	r16,zero,53
 4000d40:	04000d48 	cmpgei	r16,zero,53
 4000d44:	04001b24 	muli	r16,zero,108
 4000d48:	d9014d17 	ldw	r4,1332(sp)
 4000d4c:	2000ce26 	beq	r4,zero,4001088 <___vfprintf_internal_r+0x6d4>
 4000d50:	01400044 	movi	r5,1
 4000d54:	d9800f04 	addi	r6,sp,60
 4000d58:	d9c14015 	stw	r7,1280(sp)
 4000d5c:	d9414515 	stw	r5,1300(sp)
 4000d60:	d9814115 	stw	r6,1284(sp)
 4000d64:	280f883a 	mov	r7,r5
 4000d68:	d9000f05 	stb	r4,60(sp)
 4000d6c:	d8000405 	stb	zero,16(sp)
 4000d70:	d8014615 	stw	zero,1304(sp)
 4000d74:	d8c14c17 	ldw	r3,1328(sp)
 4000d78:	1880008c 	andi	r2,r3,2
 4000d7c:	1005003a 	cmpeq	r2,r2,zero
 4000d80:	d8815015 	stw	r2,1344(sp)
 4000d84:	1000031e 	bne	r2,zero,4000d94 <___vfprintf_internal_r+0x3e0>
 4000d88:	d9014517 	ldw	r4,1300(sp)
 4000d8c:	21000084 	addi	r4,r4,2
 4000d90:	d9014515 	stw	r4,1300(sp)
 4000d94:	d9414c17 	ldw	r5,1328(sp)
 4000d98:	2940210c 	andi	r5,r5,132
 4000d9c:	d9414e15 	stw	r5,1336(sp)
 4000da0:	28002d1e 	bne	r5,zero,4000e58 <___vfprintf_internal_r+0x4a4>
 4000da4:	d9814a17 	ldw	r6,1320(sp)
 4000da8:	d8814517 	ldw	r2,1300(sp)
 4000dac:	30a1c83a 	sub	r16,r6,r2
 4000db0:	0400290e 	bge	zero,r16,4000e58 <___vfprintf_internal_r+0x4a4>
 4000db4:	00800404 	movi	r2,16
 4000db8:	1404580e 	bge	r2,r16,4001f1c <___vfprintf_internal_r+0x1568>
 4000dbc:	dc800e17 	ldw	r18,56(sp)
 4000dc0:	dc400d17 	ldw	r17,52(sp)
 4000dc4:	1027883a 	mov	r19,r2
 4000dc8:	07010074 	movhi	fp,1025
 4000dcc:	e71ab684 	addi	fp,fp,27354
 4000dd0:	050001c4 	movi	r20,7
 4000dd4:	00000306 	br	4000de4 <___vfprintf_internal_r+0x430>
 4000dd8:	843ffc04 	addi	r16,r16,-16
 4000ddc:	ad400204 	addi	r21,r21,8
 4000de0:	9c00130e 	bge	r19,r16,4000e30 <___vfprintf_internal_r+0x47c>
 4000de4:	94800404 	addi	r18,r18,16
 4000de8:	8c400044 	addi	r17,r17,1
 4000dec:	af000015 	stw	fp,0(r21)
 4000df0:	acc00115 	stw	r19,4(r21)
 4000df4:	dc800e15 	stw	r18,56(sp)
 4000df8:	dc400d15 	stw	r17,52(sp)
 4000dfc:	a47ff60e 	bge	r20,r17,4000dd8 <___vfprintf_internal_r+0x424>
 4000e00:	d9014f17 	ldw	r4,1340(sp)
 4000e04:	b00b883a 	mov	r5,r22
 4000e08:	d9800c04 	addi	r6,sp,48
 4000e0c:	d9c15115 	stw	r7,1348(sp)
 4000e10:	400095c0 	call	400095c <__sprint_r>
 4000e14:	d9c15117 	ldw	r7,1348(sp)
 4000e18:	10009e1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4000e1c:	843ffc04 	addi	r16,r16,-16
 4000e20:	dc800e17 	ldw	r18,56(sp)
 4000e24:	dc400d17 	ldw	r17,52(sp)
 4000e28:	dd401904 	addi	r21,sp,100
 4000e2c:	9c3fed16 	blt	r19,r16,4000de4 <___vfprintf_internal_r+0x430>
 4000e30:	9425883a 	add	r18,r18,r16
 4000e34:	8c400044 	addi	r17,r17,1
 4000e38:	008001c4 	movi	r2,7
 4000e3c:	af000015 	stw	fp,0(r21)
 4000e40:	ac000115 	stw	r16,4(r21)
 4000e44:	dc800e15 	stw	r18,56(sp)
 4000e48:	dc400d15 	stw	r17,52(sp)
 4000e4c:	1441f516 	blt	r2,r17,4001624 <___vfprintf_internal_r+0xc70>
 4000e50:	ad400204 	addi	r21,r21,8
 4000e54:	00000206 	br	4000e60 <___vfprintf_internal_r+0x4ac>
 4000e58:	dc800e17 	ldw	r18,56(sp)
 4000e5c:	dc400d17 	ldw	r17,52(sp)
 4000e60:	d8800407 	ldb	r2,16(sp)
 4000e64:	10000b26 	beq	r2,zero,4000e94 <___vfprintf_internal_r+0x4e0>
 4000e68:	00800044 	movi	r2,1
 4000e6c:	94800044 	addi	r18,r18,1
 4000e70:	8c400044 	addi	r17,r17,1
 4000e74:	a8800115 	stw	r2,4(r21)
 4000e78:	d8c00404 	addi	r3,sp,16
 4000e7c:	008001c4 	movi	r2,7
 4000e80:	a8c00015 	stw	r3,0(r21)
 4000e84:	dc800e15 	stw	r18,56(sp)
 4000e88:	dc400d15 	stw	r17,52(sp)
 4000e8c:	1441da16 	blt	r2,r17,40015f8 <___vfprintf_internal_r+0xc44>
 4000e90:	ad400204 	addi	r21,r21,8
 4000e94:	d9015017 	ldw	r4,1344(sp)
 4000e98:	20000b1e 	bne	r4,zero,4000ec8 <___vfprintf_internal_r+0x514>
 4000e9c:	d8800444 	addi	r2,sp,17
 4000ea0:	94800084 	addi	r18,r18,2
 4000ea4:	8c400044 	addi	r17,r17,1
 4000ea8:	a8800015 	stw	r2,0(r21)
 4000eac:	00c00084 	movi	r3,2
 4000eb0:	008001c4 	movi	r2,7
 4000eb4:	a8c00115 	stw	r3,4(r21)
 4000eb8:	dc800e15 	stw	r18,56(sp)
 4000ebc:	dc400d15 	stw	r17,52(sp)
 4000ec0:	1441c216 	blt	r2,r17,40015cc <___vfprintf_internal_r+0xc18>
 4000ec4:	ad400204 	addi	r21,r21,8
 4000ec8:	d9414e17 	ldw	r5,1336(sp)
 4000ecc:	00802004 	movi	r2,128
 4000ed0:	2880b126 	beq	r5,r2,4001198 <___vfprintf_internal_r+0x7e4>
 4000ed4:	d8c14617 	ldw	r3,1304(sp)
 4000ed8:	19e1c83a 	sub	r16,r3,r7
 4000edc:	0400260e 	bge	zero,r16,4000f78 <___vfprintf_internal_r+0x5c4>
 4000ee0:	00800404 	movi	r2,16
 4000ee4:	1403c90e 	bge	r2,r16,4001e0c <___vfprintf_internal_r+0x1458>
 4000ee8:	1027883a 	mov	r19,r2
 4000eec:	07010074 	movhi	fp,1025
 4000ef0:	e71ab284 	addi	fp,fp,27338
 4000ef4:	050001c4 	movi	r20,7
 4000ef8:	00000306 	br	4000f08 <___vfprintf_internal_r+0x554>
 4000efc:	843ffc04 	addi	r16,r16,-16
 4000f00:	ad400204 	addi	r21,r21,8
 4000f04:	9c00130e 	bge	r19,r16,4000f54 <___vfprintf_internal_r+0x5a0>
 4000f08:	94800404 	addi	r18,r18,16
 4000f0c:	8c400044 	addi	r17,r17,1
 4000f10:	af000015 	stw	fp,0(r21)
 4000f14:	acc00115 	stw	r19,4(r21)
 4000f18:	dc800e15 	stw	r18,56(sp)
 4000f1c:	dc400d15 	stw	r17,52(sp)
 4000f20:	a47ff60e 	bge	r20,r17,4000efc <___vfprintf_internal_r+0x548>
 4000f24:	d9014f17 	ldw	r4,1340(sp)
 4000f28:	b00b883a 	mov	r5,r22
 4000f2c:	d9800c04 	addi	r6,sp,48
 4000f30:	d9c15115 	stw	r7,1348(sp)
 4000f34:	400095c0 	call	400095c <__sprint_r>
 4000f38:	d9c15117 	ldw	r7,1348(sp)
 4000f3c:	1000551e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4000f40:	843ffc04 	addi	r16,r16,-16
 4000f44:	dc800e17 	ldw	r18,56(sp)
 4000f48:	dc400d17 	ldw	r17,52(sp)
 4000f4c:	dd401904 	addi	r21,sp,100
 4000f50:	9c3fed16 	blt	r19,r16,4000f08 <___vfprintf_internal_r+0x554>
 4000f54:	9425883a 	add	r18,r18,r16
 4000f58:	8c400044 	addi	r17,r17,1
 4000f5c:	008001c4 	movi	r2,7
 4000f60:	af000015 	stw	fp,0(r21)
 4000f64:	ac000115 	stw	r16,4(r21)
 4000f68:	dc800e15 	stw	r18,56(sp)
 4000f6c:	dc400d15 	stw	r17,52(sp)
 4000f70:	14418216 	blt	r2,r17,400157c <___vfprintf_internal_r+0xbc8>
 4000f74:	ad400204 	addi	r21,r21,8
 4000f78:	d9014c17 	ldw	r4,1328(sp)
 4000f7c:	2080400c 	andi	r2,r4,256
 4000f80:	10004a1e 	bne	r2,zero,40010ac <___vfprintf_internal_r+0x6f8>
 4000f84:	d9414117 	ldw	r5,1284(sp)
 4000f88:	91e5883a 	add	r18,r18,r7
 4000f8c:	8c400044 	addi	r17,r17,1
 4000f90:	008001c4 	movi	r2,7
 4000f94:	a9400015 	stw	r5,0(r21)
 4000f98:	a9c00115 	stw	r7,4(r21)
 4000f9c:	dc800e15 	stw	r18,56(sp)
 4000fa0:	dc400d15 	stw	r17,52(sp)
 4000fa4:	14416716 	blt	r2,r17,4001544 <___vfprintf_internal_r+0xb90>
 4000fa8:	a8c00204 	addi	r3,r21,8
 4000fac:	d9814c17 	ldw	r6,1328(sp)
 4000fb0:	3080010c 	andi	r2,r6,4
 4000fb4:	10002826 	beq	r2,zero,4001058 <___vfprintf_internal_r+0x6a4>
 4000fb8:	d8814a17 	ldw	r2,1320(sp)
 4000fbc:	d9014517 	ldw	r4,1300(sp)
 4000fc0:	1121c83a 	sub	r16,r2,r4
 4000fc4:	0400240e 	bge	zero,r16,4001058 <___vfprintf_internal_r+0x6a4>
 4000fc8:	00800404 	movi	r2,16
 4000fcc:	14044f0e 	bge	r2,r16,400210c <___vfprintf_internal_r+0x1758>
 4000fd0:	dc400d17 	ldw	r17,52(sp)
 4000fd4:	1027883a 	mov	r19,r2
 4000fd8:	07010074 	movhi	fp,1025
 4000fdc:	e71ab684 	addi	fp,fp,27354
 4000fe0:	050001c4 	movi	r20,7
 4000fe4:	00000306 	br	4000ff4 <___vfprintf_internal_r+0x640>
 4000fe8:	843ffc04 	addi	r16,r16,-16
 4000fec:	18c00204 	addi	r3,r3,8
 4000ff0:	9c00110e 	bge	r19,r16,4001038 <___vfprintf_internal_r+0x684>
 4000ff4:	94800404 	addi	r18,r18,16
 4000ff8:	8c400044 	addi	r17,r17,1
 4000ffc:	1f000015 	stw	fp,0(r3)
 4001000:	1cc00115 	stw	r19,4(r3)
 4001004:	dc800e15 	stw	r18,56(sp)
 4001008:	dc400d15 	stw	r17,52(sp)
 400100c:	a47ff60e 	bge	r20,r17,4000fe8 <___vfprintf_internal_r+0x634>
 4001010:	d9014f17 	ldw	r4,1340(sp)
 4001014:	b00b883a 	mov	r5,r22
 4001018:	d9800c04 	addi	r6,sp,48
 400101c:	400095c0 	call	400095c <__sprint_r>
 4001020:	10001c1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001024:	843ffc04 	addi	r16,r16,-16
 4001028:	dc800e17 	ldw	r18,56(sp)
 400102c:	dc400d17 	ldw	r17,52(sp)
 4001030:	d8c01904 	addi	r3,sp,100
 4001034:	9c3fef16 	blt	r19,r16,4000ff4 <___vfprintf_internal_r+0x640>
 4001038:	9425883a 	add	r18,r18,r16
 400103c:	8c400044 	addi	r17,r17,1
 4001040:	008001c4 	movi	r2,7
 4001044:	1f000015 	stw	fp,0(r3)
 4001048:	1c000115 	stw	r16,4(r3)
 400104c:	dc800e15 	stw	r18,56(sp)
 4001050:	dc400d15 	stw	r17,52(sp)
 4001054:	1440cb16 	blt	r2,r17,4001384 <___vfprintf_internal_r+0x9d0>
 4001058:	d8814a17 	ldw	r2,1320(sp)
 400105c:	d9414517 	ldw	r5,1300(sp)
 4001060:	1140010e 	bge	r2,r5,4001068 <___vfprintf_internal_r+0x6b4>
 4001064:	2805883a 	mov	r2,r5
 4001068:	d9814b17 	ldw	r6,1324(sp)
 400106c:	308d883a 	add	r6,r6,r2
 4001070:	d9814b15 	stw	r6,1324(sp)
 4001074:	90013b1e 	bne	r18,zero,4001564 <___vfprintf_internal_r+0xbb0>
 4001078:	d9c14017 	ldw	r7,1280(sp)
 400107c:	dd401904 	addi	r21,sp,100
 4001080:	d8000d15 	stw	zero,52(sp)
 4001084:	003ea706 	br	4000b24 <___vfprintf_internal_r+0x170>
 4001088:	d8800e17 	ldw	r2,56(sp)
 400108c:	10053f1e 	bne	r2,zero,400258c <___vfprintf_internal_r+0x1bd8>
 4001090:	d8000d15 	stw	zero,52(sp)
 4001094:	b080030b 	ldhu	r2,12(r22)
 4001098:	1080100c 	andi	r2,r2,64
 400109c:	103e8726 	beq	r2,zero,4000abc <___vfprintf_internal_r+0x108>
 40010a0:	00bfffc4 	movi	r2,-1
 40010a4:	d8814b15 	stw	r2,1324(sp)
 40010a8:	003e8406 	br	4000abc <___vfprintf_internal_r+0x108>
 40010ac:	d9814d17 	ldw	r6,1332(sp)
 40010b0:	00801944 	movi	r2,101
 40010b4:	11806e16 	blt	r2,r6,4001270 <___vfprintf_internal_r+0x8bc>
 40010b8:	d9414717 	ldw	r5,1308(sp)
 40010bc:	00c00044 	movi	r3,1
 40010c0:	1943430e 	bge	r3,r5,4001dd0 <___vfprintf_internal_r+0x141c>
 40010c4:	d8814117 	ldw	r2,1284(sp)
 40010c8:	94800044 	addi	r18,r18,1
 40010cc:	8c400044 	addi	r17,r17,1
 40010d0:	a8800015 	stw	r2,0(r21)
 40010d4:	008001c4 	movi	r2,7
 40010d8:	a8c00115 	stw	r3,4(r21)
 40010dc:	dc800e15 	stw	r18,56(sp)
 40010e0:	dc400d15 	stw	r17,52(sp)
 40010e4:	1441ca16 	blt	r2,r17,4001810 <___vfprintf_internal_r+0xe5c>
 40010e8:	a8c00204 	addi	r3,r21,8
 40010ec:	d9014917 	ldw	r4,1316(sp)
 40010f0:	00800044 	movi	r2,1
 40010f4:	94800044 	addi	r18,r18,1
 40010f8:	8c400044 	addi	r17,r17,1
 40010fc:	18800115 	stw	r2,4(r3)
 4001100:	008001c4 	movi	r2,7
 4001104:	19000015 	stw	r4,0(r3)
 4001108:	dc800e15 	stw	r18,56(sp)
 400110c:	dc400d15 	stw	r17,52(sp)
 4001110:	1441b616 	blt	r2,r17,40017ec <___vfprintf_internal_r+0xe38>
 4001114:	1cc00204 	addi	r19,r3,8
 4001118:	d9014217 	ldw	r4,1288(sp)
 400111c:	d9414317 	ldw	r5,1292(sp)
 4001120:	000d883a 	mov	r6,zero
 4001124:	000f883a 	mov	r7,zero
 4001128:	40092040 	call	4009204 <__nedf2>
 400112c:	10017426 	beq	r2,zero,4001700 <___vfprintf_internal_r+0xd4c>
 4001130:	d9414717 	ldw	r5,1308(sp)
 4001134:	d9814117 	ldw	r6,1284(sp)
 4001138:	8c400044 	addi	r17,r17,1
 400113c:	2c85883a 	add	r2,r5,r18
 4001140:	14bfffc4 	addi	r18,r2,-1
 4001144:	28bfffc4 	addi	r2,r5,-1
 4001148:	30c00044 	addi	r3,r6,1
 400114c:	98800115 	stw	r2,4(r19)
 4001150:	008001c4 	movi	r2,7
 4001154:	98c00015 	stw	r3,0(r19)
 4001158:	dc800e15 	stw	r18,56(sp)
 400115c:	dc400d15 	stw	r17,52(sp)
 4001160:	14418e16 	blt	r2,r17,400179c <___vfprintf_internal_r+0xde8>
 4001164:	9cc00204 	addi	r19,r19,8
 4001168:	d9414817 	ldw	r5,1312(sp)
 400116c:	d8800804 	addi	r2,sp,32
 4001170:	8c400044 	addi	r17,r17,1
 4001174:	9165883a 	add	r18,r18,r5
 4001178:	98800015 	stw	r2,0(r19)
 400117c:	008001c4 	movi	r2,7
 4001180:	99400115 	stw	r5,4(r19)
 4001184:	dc800e15 	stw	r18,56(sp)
 4001188:	dc400d15 	stw	r17,52(sp)
 400118c:	1440ed16 	blt	r2,r17,4001544 <___vfprintf_internal_r+0xb90>
 4001190:	98c00204 	addi	r3,r19,8
 4001194:	003f8506 	br	4000fac <___vfprintf_internal_r+0x5f8>
 4001198:	d9814a17 	ldw	r6,1320(sp)
 400119c:	d8814517 	ldw	r2,1300(sp)
 40011a0:	30a1c83a 	sub	r16,r6,r2
 40011a4:	043f4b0e 	bge	zero,r16,4000ed4 <___vfprintf_internal_r+0x520>
 40011a8:	00800404 	movi	r2,16
 40011ac:	1404340e 	bge	r2,r16,4002280 <___vfprintf_internal_r+0x18cc>
 40011b0:	1027883a 	mov	r19,r2
 40011b4:	07010074 	movhi	fp,1025
 40011b8:	e71ab284 	addi	fp,fp,27338
 40011bc:	050001c4 	movi	r20,7
 40011c0:	00000306 	br	40011d0 <___vfprintf_internal_r+0x81c>
 40011c4:	843ffc04 	addi	r16,r16,-16
 40011c8:	ad400204 	addi	r21,r21,8
 40011cc:	9c00130e 	bge	r19,r16,400121c <___vfprintf_internal_r+0x868>
 40011d0:	94800404 	addi	r18,r18,16
 40011d4:	8c400044 	addi	r17,r17,1
 40011d8:	af000015 	stw	fp,0(r21)
 40011dc:	acc00115 	stw	r19,4(r21)
 40011e0:	dc800e15 	stw	r18,56(sp)
 40011e4:	dc400d15 	stw	r17,52(sp)
 40011e8:	a47ff60e 	bge	r20,r17,40011c4 <___vfprintf_internal_r+0x810>
 40011ec:	d9014f17 	ldw	r4,1340(sp)
 40011f0:	b00b883a 	mov	r5,r22
 40011f4:	d9800c04 	addi	r6,sp,48
 40011f8:	d9c15115 	stw	r7,1348(sp)
 40011fc:	400095c0 	call	400095c <__sprint_r>
 4001200:	d9c15117 	ldw	r7,1348(sp)
 4001204:	103fa31e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001208:	843ffc04 	addi	r16,r16,-16
 400120c:	dc800e17 	ldw	r18,56(sp)
 4001210:	dc400d17 	ldw	r17,52(sp)
 4001214:	dd401904 	addi	r21,sp,100
 4001218:	9c3fed16 	blt	r19,r16,40011d0 <___vfprintf_internal_r+0x81c>
 400121c:	9425883a 	add	r18,r18,r16
 4001220:	8c400044 	addi	r17,r17,1
 4001224:	008001c4 	movi	r2,7
 4001228:	af000015 	stw	fp,0(r21)
 400122c:	ac000115 	stw	r16,4(r21)
 4001230:	dc800e15 	stw	r18,56(sp)
 4001234:	dc400d15 	stw	r17,52(sp)
 4001238:	14416116 	blt	r2,r17,40017c0 <___vfprintf_internal_r+0xe0c>
 400123c:	ad400204 	addi	r21,r21,8
 4001240:	003f2406 	br	4000ed4 <___vfprintf_internal_r+0x520>
 4001244:	d9014f17 	ldw	r4,1340(sp)
 4001248:	40044240 	call	4004424 <__sinit>
 400124c:	d9c15117 	ldw	r7,1348(sp)
 4001250:	003def06 	br	4000a10 <___vfprintf_internal_r+0x5c>
 4001254:	d9014f17 	ldw	r4,1340(sp)
 4001258:	b00b883a 	mov	r5,r22
 400125c:	d9c15115 	stw	r7,1348(sp)
 4001260:	40028840 	call	4002884 <__swsetup_r>
 4001264:	d9c15117 	ldw	r7,1348(sp)
 4001268:	103dee26 	beq	r2,zero,4000a24 <___vfprintf_internal_r+0x70>
 400126c:	003f8c06 	br	40010a0 <___vfprintf_internal_r+0x6ec>
 4001270:	d9014217 	ldw	r4,1288(sp)
 4001274:	d9414317 	ldw	r5,1292(sp)
 4001278:	000d883a 	mov	r6,zero
 400127c:	000f883a 	mov	r7,zero
 4001280:	400917c0 	call	400917c <__eqdf2>
 4001284:	1000f21e 	bne	r2,zero,4001650 <___vfprintf_internal_r+0xc9c>
 4001288:	00810074 	movhi	r2,1025
 400128c:	109ab204 	addi	r2,r2,27336
 4001290:	94800044 	addi	r18,r18,1
 4001294:	8c400044 	addi	r17,r17,1
 4001298:	a8800015 	stw	r2,0(r21)
 400129c:	00c00044 	movi	r3,1
 40012a0:	008001c4 	movi	r2,7
 40012a4:	a8c00115 	stw	r3,4(r21)
 40012a8:	dc800e15 	stw	r18,56(sp)
 40012ac:	dc400d15 	stw	r17,52(sp)
 40012b0:	1442fa16 	blt	r2,r17,4001e9c <___vfprintf_internal_r+0x14e8>
 40012b4:	a8c00204 	addi	r3,r21,8
 40012b8:	d8800517 	ldw	r2,20(sp)
 40012bc:	d9014717 	ldw	r4,1308(sp)
 40012c0:	11015c0e 	bge	r2,r4,4001834 <___vfprintf_internal_r+0xe80>
 40012c4:	dc400d17 	ldw	r17,52(sp)
 40012c8:	d9814917 	ldw	r6,1316(sp)
 40012cc:	00800044 	movi	r2,1
 40012d0:	94800044 	addi	r18,r18,1
 40012d4:	8c400044 	addi	r17,r17,1
 40012d8:	18800115 	stw	r2,4(r3)
 40012dc:	008001c4 	movi	r2,7
 40012e0:	19800015 	stw	r6,0(r3)
 40012e4:	dc800e15 	stw	r18,56(sp)
 40012e8:	dc400d15 	stw	r17,52(sp)
 40012ec:	14431016 	blt	r2,r17,4001f30 <___vfprintf_internal_r+0x157c>
 40012f0:	18c00204 	addi	r3,r3,8
 40012f4:	d8814717 	ldw	r2,1308(sp)
 40012f8:	143fffc4 	addi	r16,r2,-1
 40012fc:	043f2b0e 	bge	zero,r16,4000fac <___vfprintf_internal_r+0x5f8>
 4001300:	00800404 	movi	r2,16
 4001304:	1402a20e 	bge	r2,r16,4001d90 <___vfprintf_internal_r+0x13dc>
 4001308:	dc400d17 	ldw	r17,52(sp)
 400130c:	1027883a 	mov	r19,r2
 4001310:	07010074 	movhi	fp,1025
 4001314:	e71ab284 	addi	fp,fp,27338
 4001318:	050001c4 	movi	r20,7
 400131c:	00000306 	br	400132c <___vfprintf_internal_r+0x978>
 4001320:	18c00204 	addi	r3,r3,8
 4001324:	843ffc04 	addi	r16,r16,-16
 4001328:	9c029c0e 	bge	r19,r16,4001d9c <___vfprintf_internal_r+0x13e8>
 400132c:	94800404 	addi	r18,r18,16
 4001330:	8c400044 	addi	r17,r17,1
 4001334:	1f000015 	stw	fp,0(r3)
 4001338:	1cc00115 	stw	r19,4(r3)
 400133c:	dc800e15 	stw	r18,56(sp)
 4001340:	dc400d15 	stw	r17,52(sp)
 4001344:	a47ff60e 	bge	r20,r17,4001320 <___vfprintf_internal_r+0x96c>
 4001348:	d9014f17 	ldw	r4,1340(sp)
 400134c:	b00b883a 	mov	r5,r22
 4001350:	d9800c04 	addi	r6,sp,48
 4001354:	400095c0 	call	400095c <__sprint_r>
 4001358:	103f4e1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 400135c:	dc800e17 	ldw	r18,56(sp)
 4001360:	dc400d17 	ldw	r17,52(sp)
 4001364:	d8c01904 	addi	r3,sp,100
 4001368:	003fee06 	br	4001324 <___vfprintf_internal_r+0x970>
 400136c:	d8802c0b 	ldhu	r2,176(sp)
 4001370:	00ffffc4 	movi	r3,-1
 4001374:	d8c14b15 	stw	r3,1324(sp)
 4001378:	1080100c 	andi	r2,r2,64
 400137c:	103dcc1e 	bne	r2,zero,4000ab0 <___vfprintf_internal_r+0xfc>
 4001380:	003dce06 	br	4000abc <___vfprintf_internal_r+0x108>
 4001384:	d9014f17 	ldw	r4,1340(sp)
 4001388:	b00b883a 	mov	r5,r22
 400138c:	d9800c04 	addi	r6,sp,48
 4001390:	400095c0 	call	400095c <__sprint_r>
 4001394:	103f3f1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001398:	dc800e17 	ldw	r18,56(sp)
 400139c:	003f2e06 	br	4001058 <___vfprintf_internal_r+0x6a4>
 40013a0:	d9414c17 	ldw	r5,1328(sp)
 40013a4:	29400414 	ori	r5,r5,16
 40013a8:	d9414c15 	stw	r5,1328(sp)
 40013ac:	d9814c17 	ldw	r6,1328(sp)
 40013b0:	3080080c 	andi	r2,r6,32
 40013b4:	10014f1e 	bne	r2,zero,40018f4 <___vfprintf_internal_r+0xf40>
 40013b8:	d8c14c17 	ldw	r3,1328(sp)
 40013bc:	1880040c 	andi	r2,r3,16
 40013c0:	1002ea1e 	bne	r2,zero,4001f6c <___vfprintf_internal_r+0x15b8>
 40013c4:	d9014c17 	ldw	r4,1328(sp)
 40013c8:	2080100c 	andi	r2,r4,64
 40013cc:	1002e726 	beq	r2,zero,4001f6c <___vfprintf_internal_r+0x15b8>
 40013d0:	3880000f 	ldh	r2,0(r7)
 40013d4:	39c00104 	addi	r7,r7,4
 40013d8:	d9c14015 	stw	r7,1280(sp)
 40013dc:	1023d7fa 	srai	r17,r2,31
 40013e0:	1021883a 	mov	r16,r2
 40013e4:	88037216 	blt	r17,zero,40021b0 <___vfprintf_internal_r+0x17fc>
 40013e8:	01000044 	movi	r4,1
 40013ec:	98000416 	blt	r19,zero,4001400 <___vfprintf_internal_r+0xa4c>
 40013f0:	d8c14c17 	ldw	r3,1328(sp)
 40013f4:	00bfdfc4 	movi	r2,-129
 40013f8:	1886703a 	and	r3,r3,r2
 40013fc:	d8c14c15 	stw	r3,1328(sp)
 4001400:	8444b03a 	or	r2,r16,r17
 4001404:	1002261e 	bne	r2,zero,4001ca0 <___vfprintf_internal_r+0x12ec>
 4001408:	9802251e 	bne	r19,zero,4001ca0 <___vfprintf_internal_r+0x12ec>
 400140c:	20803fcc 	andi	r2,r4,255
 4001410:	10029b26 	beq	r2,zero,4001e80 <___vfprintf_internal_r+0x14cc>
 4001414:	d8c01904 	addi	r3,sp,100
 4001418:	dd000f04 	addi	r20,sp,60
 400141c:	d8c14115 	stw	r3,1284(sp)
 4001420:	d8c14117 	ldw	r3,1284(sp)
 4001424:	dcc14515 	stw	r19,1300(sp)
 4001428:	a0c5c83a 	sub	r2,r20,r3
 400142c:	11c00a04 	addi	r7,r2,40
 4001430:	99c0010e 	bge	r19,r7,4001438 <___vfprintf_internal_r+0xa84>
 4001434:	d9c14515 	stw	r7,1300(sp)
 4001438:	dcc14615 	stw	r19,1304(sp)
 400143c:	d8800407 	ldb	r2,16(sp)
 4001440:	103e4c26 	beq	r2,zero,4000d74 <___vfprintf_internal_r+0x3c0>
 4001444:	d8814517 	ldw	r2,1300(sp)
 4001448:	10800044 	addi	r2,r2,1
 400144c:	d8814515 	stw	r2,1300(sp)
 4001450:	003e4806 	br	4000d74 <___vfprintf_internal_r+0x3c0>
 4001454:	d9814c17 	ldw	r6,1328(sp)
 4001458:	31800414 	ori	r6,r6,16
 400145c:	d9814c15 	stw	r6,1328(sp)
 4001460:	d8c14c17 	ldw	r3,1328(sp)
 4001464:	1880080c 	andi	r2,r3,32
 4001468:	1001271e 	bne	r2,zero,4001908 <___vfprintf_internal_r+0xf54>
 400146c:	d9414c17 	ldw	r5,1328(sp)
 4001470:	2880040c 	andi	r2,r5,16
 4001474:	1002b61e 	bne	r2,zero,4001f50 <___vfprintf_internal_r+0x159c>
 4001478:	d9814c17 	ldw	r6,1328(sp)
 400147c:	3080100c 	andi	r2,r6,64
 4001480:	1002b326 	beq	r2,zero,4001f50 <___vfprintf_internal_r+0x159c>
 4001484:	3c00000b 	ldhu	r16,0(r7)
 4001488:	0009883a 	mov	r4,zero
 400148c:	39c00104 	addi	r7,r7,4
 4001490:	0023883a 	mov	r17,zero
 4001494:	d9c14015 	stw	r7,1280(sp)
 4001498:	d8000405 	stb	zero,16(sp)
 400149c:	003fd306 	br	40013ec <___vfprintf_internal_r+0xa38>
 40014a0:	d9014c17 	ldw	r4,1328(sp)
 40014a4:	21000414 	ori	r4,r4,16
 40014a8:	d9014c15 	stw	r4,1328(sp)
 40014ac:	d9414c17 	ldw	r5,1328(sp)
 40014b0:	2880080c 	andi	r2,r5,32
 40014b4:	1001081e 	bne	r2,zero,40018d8 <___vfprintf_internal_r+0xf24>
 40014b8:	d8c14c17 	ldw	r3,1328(sp)
 40014bc:	1880040c 	andi	r2,r3,16
 40014c0:	1002b01e 	bne	r2,zero,4001f84 <___vfprintf_internal_r+0x15d0>
 40014c4:	d9014c17 	ldw	r4,1328(sp)
 40014c8:	2080100c 	andi	r2,r4,64
 40014cc:	1002ad26 	beq	r2,zero,4001f84 <___vfprintf_internal_r+0x15d0>
 40014d0:	3c00000b 	ldhu	r16,0(r7)
 40014d4:	01000044 	movi	r4,1
 40014d8:	39c00104 	addi	r7,r7,4
 40014dc:	0023883a 	mov	r17,zero
 40014e0:	d9c14015 	stw	r7,1280(sp)
 40014e4:	d8000405 	stb	zero,16(sp)
 40014e8:	003fc006 	br	40013ec <___vfprintf_internal_r+0xa38>
 40014ec:	d9014f17 	ldw	r4,1340(sp)
 40014f0:	b00b883a 	mov	r5,r22
 40014f4:	d9800c04 	addi	r6,sp,48
 40014f8:	400095c0 	call	400095c <__sprint_r>
 40014fc:	103ee51e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001500:	dc800e17 	ldw	r18,56(sp)
 4001504:	d8c01904 	addi	r3,sp,100
 4001508:	d9814c17 	ldw	r6,1328(sp)
 400150c:	3080004c 	andi	r2,r6,1
 4001510:	1005003a 	cmpeq	r2,r2,zero
 4001514:	103ea51e 	bne	r2,zero,4000fac <___vfprintf_internal_r+0x5f8>
 4001518:	00800044 	movi	r2,1
 400151c:	dc400d17 	ldw	r17,52(sp)
 4001520:	18800115 	stw	r2,4(r3)
 4001524:	d8814917 	ldw	r2,1316(sp)
 4001528:	94800044 	addi	r18,r18,1
 400152c:	8c400044 	addi	r17,r17,1
 4001530:	18800015 	stw	r2,0(r3)
 4001534:	008001c4 	movi	r2,7
 4001538:	dc800e15 	stw	r18,56(sp)
 400153c:	dc400d15 	stw	r17,52(sp)
 4001540:	14421e0e 	bge	r2,r17,4001dbc <___vfprintf_internal_r+0x1408>
 4001544:	d9014f17 	ldw	r4,1340(sp)
 4001548:	b00b883a 	mov	r5,r22
 400154c:	d9800c04 	addi	r6,sp,48
 4001550:	400095c0 	call	400095c <__sprint_r>
 4001554:	103ecf1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001558:	dc800e17 	ldw	r18,56(sp)
 400155c:	d8c01904 	addi	r3,sp,100
 4001560:	003e9206 	br	4000fac <___vfprintf_internal_r+0x5f8>
 4001564:	d9014f17 	ldw	r4,1340(sp)
 4001568:	b00b883a 	mov	r5,r22
 400156c:	d9800c04 	addi	r6,sp,48
 4001570:	400095c0 	call	400095c <__sprint_r>
 4001574:	103ec026 	beq	r2,zero,4001078 <___vfprintf_internal_r+0x6c4>
 4001578:	003ec606 	br	4001094 <___vfprintf_internal_r+0x6e0>
 400157c:	d9014f17 	ldw	r4,1340(sp)
 4001580:	b00b883a 	mov	r5,r22
 4001584:	d9800c04 	addi	r6,sp,48
 4001588:	d9c15115 	stw	r7,1348(sp)
 400158c:	400095c0 	call	400095c <__sprint_r>
 4001590:	d9c15117 	ldw	r7,1348(sp)
 4001594:	103ebf1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001598:	dc800e17 	ldw	r18,56(sp)
 400159c:	dc400d17 	ldw	r17,52(sp)
 40015a0:	dd401904 	addi	r21,sp,100
 40015a4:	003e7406 	br	4000f78 <___vfprintf_internal_r+0x5c4>
 40015a8:	d9014f17 	ldw	r4,1340(sp)
 40015ac:	b00b883a 	mov	r5,r22
 40015b0:	d9800c04 	addi	r6,sp,48
 40015b4:	d9c15115 	stw	r7,1348(sp)
 40015b8:	400095c0 	call	400095c <__sprint_r>
 40015bc:	d9c15117 	ldw	r7,1348(sp)
 40015c0:	103eb41e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40015c4:	dd401904 	addi	r21,sp,100
 40015c8:	003d6d06 	br	4000b80 <___vfprintf_internal_r+0x1cc>
 40015cc:	d9014f17 	ldw	r4,1340(sp)
 40015d0:	b00b883a 	mov	r5,r22
 40015d4:	d9800c04 	addi	r6,sp,48
 40015d8:	d9c15115 	stw	r7,1348(sp)
 40015dc:	400095c0 	call	400095c <__sprint_r>
 40015e0:	d9c15117 	ldw	r7,1348(sp)
 40015e4:	103eab1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40015e8:	dc800e17 	ldw	r18,56(sp)
 40015ec:	dc400d17 	ldw	r17,52(sp)
 40015f0:	dd401904 	addi	r21,sp,100
 40015f4:	003e3406 	br	4000ec8 <___vfprintf_internal_r+0x514>
 40015f8:	d9014f17 	ldw	r4,1340(sp)
 40015fc:	b00b883a 	mov	r5,r22
 4001600:	d9800c04 	addi	r6,sp,48
 4001604:	d9c15115 	stw	r7,1348(sp)
 4001608:	400095c0 	call	400095c <__sprint_r>
 400160c:	d9c15117 	ldw	r7,1348(sp)
 4001610:	103ea01e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001614:	dc800e17 	ldw	r18,56(sp)
 4001618:	dc400d17 	ldw	r17,52(sp)
 400161c:	dd401904 	addi	r21,sp,100
 4001620:	003e1c06 	br	4000e94 <___vfprintf_internal_r+0x4e0>
 4001624:	d9014f17 	ldw	r4,1340(sp)
 4001628:	b00b883a 	mov	r5,r22
 400162c:	d9800c04 	addi	r6,sp,48
 4001630:	d9c15115 	stw	r7,1348(sp)
 4001634:	400095c0 	call	400095c <__sprint_r>
 4001638:	d9c15117 	ldw	r7,1348(sp)
 400163c:	103e951e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001640:	dc800e17 	ldw	r18,56(sp)
 4001644:	dc400d17 	ldw	r17,52(sp)
 4001648:	dd401904 	addi	r21,sp,100
 400164c:	003e0406 	br	4000e60 <___vfprintf_internal_r+0x4ac>
 4001650:	d9000517 	ldw	r4,20(sp)
 4001654:	0102520e 	bge	zero,r4,4001fa0 <___vfprintf_internal_r+0x15ec>
 4001658:	d9814717 	ldw	r6,1308(sp)
 400165c:	21807a16 	blt	r4,r6,4001848 <___vfprintf_internal_r+0xe94>
 4001660:	d8814117 	ldw	r2,1284(sp)
 4001664:	91a5883a 	add	r18,r18,r6
 4001668:	8c400044 	addi	r17,r17,1
 400166c:	a8800015 	stw	r2,0(r21)
 4001670:	008001c4 	movi	r2,7
 4001674:	a9800115 	stw	r6,4(r21)
 4001678:	dc800e15 	stw	r18,56(sp)
 400167c:	dc400d15 	stw	r17,52(sp)
 4001680:	1442f616 	blt	r2,r17,400225c <___vfprintf_internal_r+0x18a8>
 4001684:	a8c00204 	addi	r3,r21,8
 4001688:	d9414717 	ldw	r5,1308(sp)
 400168c:	2161c83a 	sub	r16,r4,r5
 4001690:	043f9d0e 	bge	zero,r16,4001508 <___vfprintf_internal_r+0xb54>
 4001694:	00800404 	movi	r2,16
 4001698:	1402130e 	bge	r2,r16,4001ee8 <___vfprintf_internal_r+0x1534>
 400169c:	dc400d17 	ldw	r17,52(sp)
 40016a0:	1027883a 	mov	r19,r2
 40016a4:	07010074 	movhi	fp,1025
 40016a8:	e71ab284 	addi	fp,fp,27338
 40016ac:	050001c4 	movi	r20,7
 40016b0:	00000306 	br	40016c0 <___vfprintf_internal_r+0xd0c>
 40016b4:	18c00204 	addi	r3,r3,8
 40016b8:	843ffc04 	addi	r16,r16,-16
 40016bc:	9c020d0e 	bge	r19,r16,4001ef4 <___vfprintf_internal_r+0x1540>
 40016c0:	94800404 	addi	r18,r18,16
 40016c4:	8c400044 	addi	r17,r17,1
 40016c8:	1f000015 	stw	fp,0(r3)
 40016cc:	1cc00115 	stw	r19,4(r3)
 40016d0:	dc800e15 	stw	r18,56(sp)
 40016d4:	dc400d15 	stw	r17,52(sp)
 40016d8:	a47ff60e 	bge	r20,r17,40016b4 <___vfprintf_internal_r+0xd00>
 40016dc:	d9014f17 	ldw	r4,1340(sp)
 40016e0:	b00b883a 	mov	r5,r22
 40016e4:	d9800c04 	addi	r6,sp,48
 40016e8:	400095c0 	call	400095c <__sprint_r>
 40016ec:	103e691e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40016f0:	dc800e17 	ldw	r18,56(sp)
 40016f4:	dc400d17 	ldw	r17,52(sp)
 40016f8:	d8c01904 	addi	r3,sp,100
 40016fc:	003fee06 	br	40016b8 <___vfprintf_internal_r+0xd04>
 4001700:	d8814717 	ldw	r2,1308(sp)
 4001704:	143fffc4 	addi	r16,r2,-1
 4001708:	043e970e 	bge	zero,r16,4001168 <___vfprintf_internal_r+0x7b4>
 400170c:	00800404 	movi	r2,16
 4001710:	1400180e 	bge	r2,r16,4001774 <___vfprintf_internal_r+0xdc0>
 4001714:	1029883a 	mov	r20,r2
 4001718:	07010074 	movhi	fp,1025
 400171c:	e71ab284 	addi	fp,fp,27338
 4001720:	054001c4 	movi	r21,7
 4001724:	00000306 	br	4001734 <___vfprintf_internal_r+0xd80>
 4001728:	9cc00204 	addi	r19,r19,8
 400172c:	843ffc04 	addi	r16,r16,-16
 4001730:	a400120e 	bge	r20,r16,400177c <___vfprintf_internal_r+0xdc8>
 4001734:	94800404 	addi	r18,r18,16
 4001738:	8c400044 	addi	r17,r17,1
 400173c:	9f000015 	stw	fp,0(r19)
 4001740:	9d000115 	stw	r20,4(r19)
 4001744:	dc800e15 	stw	r18,56(sp)
 4001748:	dc400d15 	stw	r17,52(sp)
 400174c:	ac7ff60e 	bge	r21,r17,4001728 <___vfprintf_internal_r+0xd74>
 4001750:	d9014f17 	ldw	r4,1340(sp)
 4001754:	b00b883a 	mov	r5,r22
 4001758:	d9800c04 	addi	r6,sp,48
 400175c:	400095c0 	call	400095c <__sprint_r>
 4001760:	103e4c1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001764:	dc800e17 	ldw	r18,56(sp)
 4001768:	dc400d17 	ldw	r17,52(sp)
 400176c:	dcc01904 	addi	r19,sp,100
 4001770:	003fee06 	br	400172c <___vfprintf_internal_r+0xd78>
 4001774:	07010074 	movhi	fp,1025
 4001778:	e71ab284 	addi	fp,fp,27338
 400177c:	9425883a 	add	r18,r18,r16
 4001780:	8c400044 	addi	r17,r17,1
 4001784:	008001c4 	movi	r2,7
 4001788:	9f000015 	stw	fp,0(r19)
 400178c:	9c000115 	stw	r16,4(r19)
 4001790:	dc800e15 	stw	r18,56(sp)
 4001794:	dc400d15 	stw	r17,52(sp)
 4001798:	147e720e 	bge	r2,r17,4001164 <___vfprintf_internal_r+0x7b0>
 400179c:	d9014f17 	ldw	r4,1340(sp)
 40017a0:	b00b883a 	mov	r5,r22
 40017a4:	d9800c04 	addi	r6,sp,48
 40017a8:	400095c0 	call	400095c <__sprint_r>
 40017ac:	103e391e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40017b0:	dc800e17 	ldw	r18,56(sp)
 40017b4:	dc400d17 	ldw	r17,52(sp)
 40017b8:	dcc01904 	addi	r19,sp,100
 40017bc:	003e6a06 	br	4001168 <___vfprintf_internal_r+0x7b4>
 40017c0:	d9014f17 	ldw	r4,1340(sp)
 40017c4:	b00b883a 	mov	r5,r22
 40017c8:	d9800c04 	addi	r6,sp,48
 40017cc:	d9c15115 	stw	r7,1348(sp)
 40017d0:	400095c0 	call	400095c <__sprint_r>
 40017d4:	d9c15117 	ldw	r7,1348(sp)
 40017d8:	103e2e1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40017dc:	dc800e17 	ldw	r18,56(sp)
 40017e0:	dc400d17 	ldw	r17,52(sp)
 40017e4:	dd401904 	addi	r21,sp,100
 40017e8:	003dba06 	br	4000ed4 <___vfprintf_internal_r+0x520>
 40017ec:	d9014f17 	ldw	r4,1340(sp)
 40017f0:	b00b883a 	mov	r5,r22
 40017f4:	d9800c04 	addi	r6,sp,48
 40017f8:	400095c0 	call	400095c <__sprint_r>
 40017fc:	103e251e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001800:	dc800e17 	ldw	r18,56(sp)
 4001804:	dc400d17 	ldw	r17,52(sp)
 4001808:	dcc01904 	addi	r19,sp,100
 400180c:	003e4206 	br	4001118 <___vfprintf_internal_r+0x764>
 4001810:	d9014f17 	ldw	r4,1340(sp)
 4001814:	b00b883a 	mov	r5,r22
 4001818:	d9800c04 	addi	r6,sp,48
 400181c:	400095c0 	call	400095c <__sprint_r>
 4001820:	103e1c1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001824:	dc800e17 	ldw	r18,56(sp)
 4001828:	dc400d17 	ldw	r17,52(sp)
 400182c:	d8c01904 	addi	r3,sp,100
 4001830:	003e2e06 	br	40010ec <___vfprintf_internal_r+0x738>
 4001834:	d9414c17 	ldw	r5,1328(sp)
 4001838:	2880004c 	andi	r2,r5,1
 400183c:	1005003a 	cmpeq	r2,r2,zero
 4001840:	103dda1e 	bne	r2,zero,4000fac <___vfprintf_internal_r+0x5f8>
 4001844:	003e9f06 	br	40012c4 <___vfprintf_internal_r+0x910>
 4001848:	d8c14117 	ldw	r3,1284(sp)
 400184c:	9125883a 	add	r18,r18,r4
 4001850:	8c400044 	addi	r17,r17,1
 4001854:	008001c4 	movi	r2,7
 4001858:	a8c00015 	stw	r3,0(r21)
 400185c:	a9000115 	stw	r4,4(r21)
 4001860:	dc800e15 	stw	r18,56(sp)
 4001864:	dc400d15 	stw	r17,52(sp)
 4001868:	14426616 	blt	r2,r17,4002204 <___vfprintf_internal_r+0x1850>
 400186c:	a8c00204 	addi	r3,r21,8
 4001870:	d9414917 	ldw	r5,1316(sp)
 4001874:	00800044 	movi	r2,1
 4001878:	94800044 	addi	r18,r18,1
 400187c:	8c400044 	addi	r17,r17,1
 4001880:	18800115 	stw	r2,4(r3)
 4001884:	008001c4 	movi	r2,7
 4001888:	19400015 	stw	r5,0(r3)
 400188c:	dc800e15 	stw	r18,56(sp)
 4001890:	dc400d15 	stw	r17,52(sp)
 4001894:	2021883a 	mov	r16,r4
 4001898:	14425016 	blt	r2,r17,40021dc <___vfprintf_internal_r+0x1828>
 400189c:	19400204 	addi	r5,r3,8
 40018a0:	d9814717 	ldw	r6,1308(sp)
 40018a4:	8c400044 	addi	r17,r17,1
 40018a8:	dc400d15 	stw	r17,52(sp)
 40018ac:	3107c83a 	sub	r3,r6,r4
 40018b0:	d9014117 	ldw	r4,1284(sp)
 40018b4:	90e5883a 	add	r18,r18,r3
 40018b8:	28c00115 	stw	r3,4(r5)
 40018bc:	8105883a 	add	r2,r16,r4
 40018c0:	28800015 	stw	r2,0(r5)
 40018c4:	008001c4 	movi	r2,7
 40018c8:	dc800e15 	stw	r18,56(sp)
 40018cc:	147f1d16 	blt	r2,r17,4001544 <___vfprintf_internal_r+0xb90>
 40018d0:	28c00204 	addi	r3,r5,8
 40018d4:	003db506 	br	4000fac <___vfprintf_internal_r+0x5f8>
 40018d8:	3c000017 	ldw	r16,0(r7)
 40018dc:	3c400117 	ldw	r17,4(r7)
 40018e0:	39800204 	addi	r6,r7,8
 40018e4:	01000044 	movi	r4,1
 40018e8:	d9814015 	stw	r6,1280(sp)
 40018ec:	d8000405 	stb	zero,16(sp)
 40018f0:	003ebe06 	br	40013ec <___vfprintf_internal_r+0xa38>
 40018f4:	3c000017 	ldw	r16,0(r7)
 40018f8:	3c400117 	ldw	r17,4(r7)
 40018fc:	38800204 	addi	r2,r7,8
 4001900:	d8814015 	stw	r2,1280(sp)
 4001904:	003eb706 	br	40013e4 <___vfprintf_internal_r+0xa30>
 4001908:	3c000017 	ldw	r16,0(r7)
 400190c:	3c400117 	ldw	r17,4(r7)
 4001910:	39000204 	addi	r4,r7,8
 4001914:	d9014015 	stw	r4,1280(sp)
 4001918:	0009883a 	mov	r4,zero
 400191c:	d8000405 	stb	zero,16(sp)
 4001920:	003eb206 	br	40013ec <___vfprintf_internal_r+0xa38>
 4001924:	38c00017 	ldw	r3,0(r7)
 4001928:	39c00104 	addi	r7,r7,4
 400192c:	d8c14a15 	stw	r3,1320(sp)
 4001930:	1800d10e 	bge	r3,zero,4001c78 <___vfprintf_internal_r+0x12c4>
 4001934:	00c7c83a 	sub	r3,zero,r3
 4001938:	d8c14a15 	stw	r3,1320(sp)
 400193c:	d9014c17 	ldw	r4,1328(sp)
 4001940:	b8c00007 	ldb	r3,0(r23)
 4001944:	21000114 	ori	r4,r4,4
 4001948:	d9014c15 	stw	r4,1328(sp)
 400194c:	003c9806 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001950:	d9814c17 	ldw	r6,1328(sp)
 4001954:	3080080c 	andi	r2,r6,32
 4001958:	1001f026 	beq	r2,zero,400211c <___vfprintf_internal_r+0x1768>
 400195c:	d9014b17 	ldw	r4,1324(sp)
 4001960:	38800017 	ldw	r2,0(r7)
 4001964:	39c00104 	addi	r7,r7,4
 4001968:	d9c14015 	stw	r7,1280(sp)
 400196c:	2007d7fa 	srai	r3,r4,31
 4001970:	d9c14017 	ldw	r7,1280(sp)
 4001974:	11000015 	stw	r4,0(r2)
 4001978:	10c00115 	stw	r3,4(r2)
 400197c:	003c6906 	br	4000b24 <___vfprintf_internal_r+0x170>
 4001980:	b8c00007 	ldb	r3,0(r23)
 4001984:	00801b04 	movi	r2,108
 4001988:	18824f26 	beq	r3,r2,40022c8 <___vfprintf_internal_r+0x1914>
 400198c:	d9414c17 	ldw	r5,1328(sp)
 4001990:	29400414 	ori	r5,r5,16
 4001994:	d9414c15 	stw	r5,1328(sp)
 4001998:	003c8506 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 400199c:	d9814c17 	ldw	r6,1328(sp)
 40019a0:	b8c00007 	ldb	r3,0(r23)
 40019a4:	31800814 	ori	r6,r6,32
 40019a8:	d9814c15 	stw	r6,1328(sp)
 40019ac:	003c8006 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 40019b0:	d8814c17 	ldw	r2,1328(sp)
 40019b4:	3c000017 	ldw	r16,0(r7)
 40019b8:	00c01e04 	movi	r3,120
 40019bc:	10800094 	ori	r2,r2,2
 40019c0:	d8814c15 	stw	r2,1328(sp)
 40019c4:	39c00104 	addi	r7,r7,4
 40019c8:	01410074 	movhi	r5,1025
 40019cc:	295a9b04 	addi	r5,r5,27244
 40019d0:	00800c04 	movi	r2,48
 40019d4:	0023883a 	mov	r17,zero
 40019d8:	01000084 	movi	r4,2
 40019dc:	d9c14015 	stw	r7,1280(sp)
 40019e0:	d8c14d15 	stw	r3,1332(sp)
 40019e4:	d9414415 	stw	r5,1296(sp)
 40019e8:	d8800445 	stb	r2,17(sp)
 40019ec:	d8c00485 	stb	r3,18(sp)
 40019f0:	d8000405 	stb	zero,16(sp)
 40019f4:	003e7d06 	br	40013ec <___vfprintf_internal_r+0xa38>
 40019f8:	d8814c17 	ldw	r2,1328(sp)
 40019fc:	b8c00007 	ldb	r3,0(r23)
 4001a00:	10801014 	ori	r2,r2,64
 4001a04:	d8814c15 	stw	r2,1328(sp)
 4001a08:	003c6906 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001a0c:	d9414c17 	ldw	r5,1328(sp)
 4001a10:	2880020c 	andi	r2,r5,8
 4001a14:	1001df26 	beq	r2,zero,4002194 <___vfprintf_internal_r+0x17e0>
 4001a18:	39800017 	ldw	r6,0(r7)
 4001a1c:	38800204 	addi	r2,r7,8
 4001a20:	d8814015 	stw	r2,1280(sp)
 4001a24:	d9814215 	stw	r6,1288(sp)
 4001a28:	39c00117 	ldw	r7,4(r7)
 4001a2c:	d9c14315 	stw	r7,1292(sp)
 4001a30:	d9014217 	ldw	r4,1288(sp)
 4001a34:	d9414317 	ldw	r5,1292(sp)
 4001a38:	40073540 	call	4007354 <__isinfd>
 4001a3c:	10021726 	beq	r2,zero,400229c <___vfprintf_internal_r+0x18e8>
 4001a40:	d9014217 	ldw	r4,1288(sp)
 4001a44:	d9414317 	ldw	r5,1292(sp)
 4001a48:	000d883a 	mov	r6,zero
 4001a4c:	000f883a 	mov	r7,zero
 4001a50:	400939c0 	call	400939c <__ltdf2>
 4001a54:	1002ca16 	blt	r2,zero,4002580 <___vfprintf_internal_r+0x1bcc>
 4001a58:	d9414d17 	ldw	r5,1332(sp)
 4001a5c:	008011c4 	movi	r2,71
 4001a60:	11420a16 	blt	r2,r5,400228c <___vfprintf_internal_r+0x18d8>
 4001a64:	01810074 	movhi	r6,1025
 4001a68:	319aa004 	addi	r6,r6,27264
 4001a6c:	d9814115 	stw	r6,1284(sp)
 4001a70:	d9014c17 	ldw	r4,1328(sp)
 4001a74:	00c000c4 	movi	r3,3
 4001a78:	00bfdfc4 	movi	r2,-129
 4001a7c:	2088703a 	and	r4,r4,r2
 4001a80:	180f883a 	mov	r7,r3
 4001a84:	d8c14515 	stw	r3,1300(sp)
 4001a88:	d9014c15 	stw	r4,1328(sp)
 4001a8c:	d8014615 	stw	zero,1304(sp)
 4001a90:	003e6a06 	br	400143c <___vfprintf_internal_r+0xa88>
 4001a94:	38800017 	ldw	r2,0(r7)
 4001a98:	00c00044 	movi	r3,1
 4001a9c:	39c00104 	addi	r7,r7,4
 4001aa0:	d9c14015 	stw	r7,1280(sp)
 4001aa4:	d9000f04 	addi	r4,sp,60
 4001aa8:	180f883a 	mov	r7,r3
 4001aac:	d8c14515 	stw	r3,1300(sp)
 4001ab0:	d9014115 	stw	r4,1284(sp)
 4001ab4:	d8800f05 	stb	r2,60(sp)
 4001ab8:	d8000405 	stb	zero,16(sp)
 4001abc:	003cac06 	br	4000d70 <___vfprintf_internal_r+0x3bc>
 4001ac0:	01410074 	movhi	r5,1025
 4001ac4:	295aa604 	addi	r5,r5,27288
 4001ac8:	d9414415 	stw	r5,1296(sp)
 4001acc:	d9814c17 	ldw	r6,1328(sp)
 4001ad0:	3080080c 	andi	r2,r6,32
 4001ad4:	1000f926 	beq	r2,zero,4001ebc <___vfprintf_internal_r+0x1508>
 4001ad8:	3c000017 	ldw	r16,0(r7)
 4001adc:	3c400117 	ldw	r17,4(r7)
 4001ae0:	38800204 	addi	r2,r7,8
 4001ae4:	d8814015 	stw	r2,1280(sp)
 4001ae8:	d9414c17 	ldw	r5,1328(sp)
 4001aec:	2880004c 	andi	r2,r5,1
 4001af0:	1005003a 	cmpeq	r2,r2,zero
 4001af4:	1000b31e 	bne	r2,zero,4001dc4 <___vfprintf_internal_r+0x1410>
 4001af8:	8444b03a 	or	r2,r16,r17
 4001afc:	1000b126 	beq	r2,zero,4001dc4 <___vfprintf_internal_r+0x1410>
 4001b00:	d9814d17 	ldw	r6,1332(sp)
 4001b04:	29400094 	ori	r5,r5,2
 4001b08:	00800c04 	movi	r2,48
 4001b0c:	01000084 	movi	r4,2
 4001b10:	d9414c15 	stw	r5,1328(sp)
 4001b14:	d8800445 	stb	r2,17(sp)
 4001b18:	d9800485 	stb	r6,18(sp)
 4001b1c:	d8000405 	stb	zero,16(sp)
 4001b20:	003e3206 	br	40013ec <___vfprintf_internal_r+0xa38>
 4001b24:	01810074 	movhi	r6,1025
 4001b28:	319a9b04 	addi	r6,r6,27244
 4001b2c:	d9814415 	stw	r6,1296(sp)
 4001b30:	003fe606 	br	4001acc <___vfprintf_internal_r+0x1118>
 4001b34:	00800ac4 	movi	r2,43
 4001b38:	d8800405 	stb	r2,16(sp)
 4001b3c:	b8c00007 	ldb	r3,0(r23)
 4001b40:	003c1b06 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001b44:	d8814c17 	ldw	r2,1328(sp)
 4001b48:	b8c00007 	ldb	r3,0(r23)
 4001b4c:	10800054 	ori	r2,r2,1
 4001b50:	d8814c15 	stw	r2,1328(sp)
 4001b54:	003c1606 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001b58:	d8800407 	ldb	r2,16(sp)
 4001b5c:	1000461e 	bne	r2,zero,4001c78 <___vfprintf_internal_r+0x12c4>
 4001b60:	00800804 	movi	r2,32
 4001b64:	d8800405 	stb	r2,16(sp)
 4001b68:	b8c00007 	ldb	r3,0(r23)
 4001b6c:	003c1006 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001b70:	d9814c17 	ldw	r6,1328(sp)
 4001b74:	b8c00007 	ldb	r3,0(r23)
 4001b78:	31800214 	ori	r6,r6,8
 4001b7c:	d9814c15 	stw	r6,1328(sp)
 4001b80:	003c0b06 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001b84:	0007883a 	mov	r3,zero
 4001b88:	01000244 	movi	r4,9
 4001b8c:	188002a4 	muli	r2,r3,10
 4001b90:	b8c00007 	ldb	r3,0(r23)
 4001b94:	d9814d17 	ldw	r6,1332(sp)
 4001b98:	bdc00044 	addi	r23,r23,1
 4001b9c:	d8c14d15 	stw	r3,1332(sp)
 4001ba0:	d9414d17 	ldw	r5,1332(sp)
 4001ba4:	3085883a 	add	r2,r6,r2
 4001ba8:	10fff404 	addi	r3,r2,-48
 4001bac:	28bff404 	addi	r2,r5,-48
 4001bb0:	20bff62e 	bgeu	r4,r2,4001b8c <___vfprintf_internal_r+0x11d8>
 4001bb4:	d8c14a15 	stw	r3,1320(sp)
 4001bb8:	003bff06 	br	4000bb8 <___vfprintf_internal_r+0x204>
 4001bbc:	d9414c17 	ldw	r5,1328(sp)
 4001bc0:	b8c00007 	ldb	r3,0(r23)
 4001bc4:	29402014 	ori	r5,r5,128
 4001bc8:	d9414c15 	stw	r5,1328(sp)
 4001bcc:	003bf806 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001bd0:	b8c00007 	ldb	r3,0(r23)
 4001bd4:	00800a84 	movi	r2,42
 4001bd8:	bdc00044 	addi	r23,r23,1
 4001bdc:	18831526 	beq	r3,r2,4002834 <___vfprintf_internal_r+0x1e80>
 4001be0:	d8c14d15 	stw	r3,1332(sp)
 4001be4:	18bff404 	addi	r2,r3,-48
 4001be8:	00c00244 	movi	r3,9
 4001bec:	18827836 	bltu	r3,r2,40025d0 <___vfprintf_internal_r+0x1c1c>
 4001bf0:	000d883a 	mov	r6,zero
 4001bf4:	308002a4 	muli	r2,r6,10
 4001bf8:	b9800007 	ldb	r6,0(r23)
 4001bfc:	d9414d17 	ldw	r5,1332(sp)
 4001c00:	bdc00044 	addi	r23,r23,1
 4001c04:	d9814d15 	stw	r6,1332(sp)
 4001c08:	d9014d17 	ldw	r4,1332(sp)
 4001c0c:	1145883a 	add	r2,r2,r5
 4001c10:	11bff404 	addi	r6,r2,-48
 4001c14:	20bff404 	addi	r2,r4,-48
 4001c18:	18bff62e 	bgeu	r3,r2,4001bf4 <___vfprintf_internal_r+0x1240>
 4001c1c:	3027883a 	mov	r19,r6
 4001c20:	303be50e 	bge	r6,zero,4000bb8 <___vfprintf_internal_r+0x204>
 4001c24:	04ffffc4 	movi	r19,-1
 4001c28:	003be306 	br	4000bb8 <___vfprintf_internal_r+0x204>
 4001c2c:	d8000405 	stb	zero,16(sp)
 4001c30:	39800017 	ldw	r6,0(r7)
 4001c34:	39c00104 	addi	r7,r7,4
 4001c38:	d9c14015 	stw	r7,1280(sp)
 4001c3c:	d9814115 	stw	r6,1284(sp)
 4001c40:	3001c926 	beq	r6,zero,4002368 <___vfprintf_internal_r+0x19b4>
 4001c44:	98000e16 	blt	r19,zero,4001c80 <___vfprintf_internal_r+0x12cc>
 4001c48:	d9014117 	ldw	r4,1284(sp)
 4001c4c:	000b883a 	mov	r5,zero
 4001c50:	980d883a 	mov	r6,r19
 4001c54:	4005a700 	call	4005a70 <memchr>
 4001c58:	10025926 	beq	r2,zero,40025c0 <___vfprintf_internal_r+0x1c0c>
 4001c5c:	d8c14117 	ldw	r3,1284(sp)
 4001c60:	10cfc83a 	sub	r7,r2,r3
 4001c64:	99c19e16 	blt	r19,r7,40022e0 <___vfprintf_internal_r+0x192c>
 4001c68:	d9c14515 	stw	r7,1300(sp)
 4001c6c:	38000916 	blt	r7,zero,4001c94 <___vfprintf_internal_r+0x12e0>
 4001c70:	d8014615 	stw	zero,1304(sp)
 4001c74:	003df106 	br	400143c <___vfprintf_internal_r+0xa88>
 4001c78:	b8c00007 	ldb	r3,0(r23)
 4001c7c:	003bcc06 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 4001c80:	d9014117 	ldw	r4,1284(sp)
 4001c84:	40008e80 	call	40008e8 <strlen>
 4001c88:	d8814515 	stw	r2,1300(sp)
 4001c8c:	100f883a 	mov	r7,r2
 4001c90:	103ff70e 	bge	r2,zero,4001c70 <___vfprintf_internal_r+0x12bc>
 4001c94:	d8014515 	stw	zero,1300(sp)
 4001c98:	d8014615 	stw	zero,1304(sp)
 4001c9c:	003de706 	br	400143c <___vfprintf_internal_r+0xa88>
 4001ca0:	20c03fcc 	andi	r3,r4,255
 4001ca4:	00800044 	movi	r2,1
 4001ca8:	18802d26 	beq	r3,r2,4001d60 <___vfprintf_internal_r+0x13ac>
 4001cac:	18800e36 	bltu	r3,r2,4001ce8 <___vfprintf_internal_r+0x1334>
 4001cb0:	00800084 	movi	r2,2
 4001cb4:	1880fa26 	beq	r3,r2,40020a0 <___vfprintf_internal_r+0x16ec>
 4001cb8:	01010074 	movhi	r4,1025
 4001cbc:	211aab04 	addi	r4,r4,27308
 4001cc0:	40008e80 	call	40008e8 <strlen>
 4001cc4:	100f883a 	mov	r7,r2
 4001cc8:	dcc14515 	stw	r19,1300(sp)
 4001ccc:	9880010e 	bge	r19,r2,4001cd4 <___vfprintf_internal_r+0x1320>
 4001cd0:	d8814515 	stw	r2,1300(sp)
 4001cd4:	00810074 	movhi	r2,1025
 4001cd8:	109aab04 	addi	r2,r2,27308
 4001cdc:	dcc14615 	stw	r19,1304(sp)
 4001ce0:	d8814115 	stw	r2,1284(sp)
 4001ce4:	003dd506 	br	400143c <___vfprintf_internal_r+0xa88>
 4001ce8:	d9401904 	addi	r5,sp,100
 4001cec:	dd000f04 	addi	r20,sp,60
 4001cf0:	d9414115 	stw	r5,1284(sp)
 4001cf4:	880a977a 	slli	r5,r17,29
 4001cf8:	d9814117 	ldw	r6,1284(sp)
 4001cfc:	8004d0fa 	srli	r2,r16,3
 4001d00:	8806d0fa 	srli	r3,r17,3
 4001d04:	810001cc 	andi	r4,r16,7
 4001d08:	2884b03a 	or	r2,r5,r2
 4001d0c:	31bfffc4 	addi	r6,r6,-1
 4001d10:	21000c04 	addi	r4,r4,48
 4001d14:	d9814115 	stw	r6,1284(sp)
 4001d18:	10cab03a 	or	r5,r2,r3
 4001d1c:	31000005 	stb	r4,0(r6)
 4001d20:	1021883a 	mov	r16,r2
 4001d24:	1823883a 	mov	r17,r3
 4001d28:	283ff21e 	bne	r5,zero,4001cf4 <___vfprintf_internal_r+0x1340>
 4001d2c:	d8c14c17 	ldw	r3,1328(sp)
 4001d30:	1880004c 	andi	r2,r3,1
 4001d34:	1005003a 	cmpeq	r2,r2,zero
 4001d38:	103db91e 	bne	r2,zero,4001420 <___vfprintf_internal_r+0xa6c>
 4001d3c:	20803fcc 	andi	r2,r4,255
 4001d40:	1080201c 	xori	r2,r2,128
 4001d44:	10bfe004 	addi	r2,r2,-128
 4001d48:	00c00c04 	movi	r3,48
 4001d4c:	10fdb426 	beq	r2,r3,4001420 <___vfprintf_internal_r+0xa6c>
 4001d50:	31bfffc4 	addi	r6,r6,-1
 4001d54:	d9814115 	stw	r6,1284(sp)
 4001d58:	30c00005 	stb	r3,0(r6)
 4001d5c:	003db006 	br	4001420 <___vfprintf_internal_r+0xa6c>
 4001d60:	88800068 	cmpgeui	r2,r17,1
 4001d64:	10002c1e 	bne	r2,zero,4001e18 <___vfprintf_internal_r+0x1464>
 4001d68:	8800021e 	bne	r17,zero,4001d74 <___vfprintf_internal_r+0x13c0>
 4001d6c:	00800244 	movi	r2,9
 4001d70:	14002936 	bltu	r2,r16,4001e18 <___vfprintf_internal_r+0x1464>
 4001d74:	d90018c4 	addi	r4,sp,99
 4001d78:	dd000f04 	addi	r20,sp,60
 4001d7c:	d9014115 	stw	r4,1284(sp)
 4001d80:	d9014117 	ldw	r4,1284(sp)
 4001d84:	80800c04 	addi	r2,r16,48
 4001d88:	20800005 	stb	r2,0(r4)
 4001d8c:	003da406 	br	4001420 <___vfprintf_internal_r+0xa6c>
 4001d90:	dc400d17 	ldw	r17,52(sp)
 4001d94:	07010074 	movhi	fp,1025
 4001d98:	e71ab284 	addi	fp,fp,27338
 4001d9c:	9425883a 	add	r18,r18,r16
 4001da0:	8c400044 	addi	r17,r17,1
 4001da4:	008001c4 	movi	r2,7
 4001da8:	1f000015 	stw	fp,0(r3)
 4001dac:	1c000115 	stw	r16,4(r3)
 4001db0:	dc800e15 	stw	r18,56(sp)
 4001db4:	dc400d15 	stw	r17,52(sp)
 4001db8:	147de216 	blt	r2,r17,4001544 <___vfprintf_internal_r+0xb90>
 4001dbc:	18c00204 	addi	r3,r3,8
 4001dc0:	003c7a06 	br	4000fac <___vfprintf_internal_r+0x5f8>
 4001dc4:	01000084 	movi	r4,2
 4001dc8:	d8000405 	stb	zero,16(sp)
 4001dcc:	003d8706 	br	40013ec <___vfprintf_internal_r+0xa38>
 4001dd0:	d9814c17 	ldw	r6,1328(sp)
 4001dd4:	30c4703a 	and	r2,r6,r3
 4001dd8:	1005003a 	cmpeq	r2,r2,zero
 4001ddc:	103cb926 	beq	r2,zero,40010c4 <___vfprintf_internal_r+0x710>
 4001de0:	d9014117 	ldw	r4,1284(sp)
 4001de4:	94800044 	addi	r18,r18,1
 4001de8:	8c400044 	addi	r17,r17,1
 4001dec:	008001c4 	movi	r2,7
 4001df0:	a9000015 	stw	r4,0(r21)
 4001df4:	a8c00115 	stw	r3,4(r21)
 4001df8:	dc800e15 	stw	r18,56(sp)
 4001dfc:	dc400d15 	stw	r17,52(sp)
 4001e00:	147e6616 	blt	r2,r17,400179c <___vfprintf_internal_r+0xde8>
 4001e04:	acc00204 	addi	r19,r21,8
 4001e08:	003cd706 	br	4001168 <___vfprintf_internal_r+0x7b4>
 4001e0c:	07010074 	movhi	fp,1025
 4001e10:	e71ab284 	addi	fp,fp,27338
 4001e14:	003c4f06 	br	4000f54 <___vfprintf_internal_r+0x5a0>
 4001e18:	dd000f04 	addi	r20,sp,60
 4001e1c:	dc801904 	addi	r18,sp,100
 4001e20:	8009883a 	mov	r4,r16
 4001e24:	880b883a 	mov	r5,r17
 4001e28:	01800284 	movi	r6,10
 4001e2c:	000f883a 	mov	r7,zero
 4001e30:	40080ac0 	call	40080ac <__umoddi3>
 4001e34:	12000c04 	addi	r8,r2,48
 4001e38:	94bfffc4 	addi	r18,r18,-1
 4001e3c:	8009883a 	mov	r4,r16
 4001e40:	880b883a 	mov	r5,r17
 4001e44:	01800284 	movi	r6,10
 4001e48:	000f883a 	mov	r7,zero
 4001e4c:	92000005 	stb	r8,0(r18)
 4001e50:	4007ad00 	call	4007ad0 <__udivdi3>
 4001e54:	1009883a 	mov	r4,r2
 4001e58:	1021883a 	mov	r16,r2
 4001e5c:	18800068 	cmpgeui	r2,r3,1
 4001e60:	1823883a 	mov	r17,r3
 4001e64:	103fee1e 	bne	r2,zero,4001e20 <___vfprintf_internal_r+0x146c>
 4001e68:	1800021e 	bne	r3,zero,4001e74 <___vfprintf_internal_r+0x14c0>
 4001e6c:	00800244 	movi	r2,9
 4001e70:	113feb36 	bltu	r2,r4,4001e20 <___vfprintf_internal_r+0x146c>
 4001e74:	94bfffc4 	addi	r18,r18,-1
 4001e78:	dc814115 	stw	r18,1284(sp)
 4001e7c:	003fc006 	br	4001d80 <___vfprintf_internal_r+0x13cc>
 4001e80:	d9014c17 	ldw	r4,1328(sp)
 4001e84:	2080004c 	andi	r2,r4,1
 4001e88:	10009a1e 	bne	r2,zero,40020f4 <___vfprintf_internal_r+0x1740>
 4001e8c:	d9401904 	addi	r5,sp,100
 4001e90:	dd000f04 	addi	r20,sp,60
 4001e94:	d9414115 	stw	r5,1284(sp)
 4001e98:	003d6106 	br	4001420 <___vfprintf_internal_r+0xa6c>
 4001e9c:	d9014f17 	ldw	r4,1340(sp)
 4001ea0:	b00b883a 	mov	r5,r22
 4001ea4:	d9800c04 	addi	r6,sp,48
 4001ea8:	400095c0 	call	400095c <__sprint_r>
 4001eac:	103c791e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001eb0:	dc800e17 	ldw	r18,56(sp)
 4001eb4:	d8c01904 	addi	r3,sp,100
 4001eb8:	003cff06 	br	40012b8 <___vfprintf_internal_r+0x904>
 4001ebc:	d8c14c17 	ldw	r3,1328(sp)
 4001ec0:	1880040c 	andi	r2,r3,16
 4001ec4:	1000711e 	bne	r2,zero,400208c <___vfprintf_internal_r+0x16d8>
 4001ec8:	d9014c17 	ldw	r4,1328(sp)
 4001ecc:	2080100c 	andi	r2,r4,64
 4001ed0:	10006e26 	beq	r2,zero,400208c <___vfprintf_internal_r+0x16d8>
 4001ed4:	3c00000b 	ldhu	r16,0(r7)
 4001ed8:	0023883a 	mov	r17,zero
 4001edc:	39c00104 	addi	r7,r7,4
 4001ee0:	d9c14015 	stw	r7,1280(sp)
 4001ee4:	003f0006 	br	4001ae8 <___vfprintf_internal_r+0x1134>
 4001ee8:	dc400d17 	ldw	r17,52(sp)
 4001eec:	07010074 	movhi	fp,1025
 4001ef0:	e71ab284 	addi	fp,fp,27338
 4001ef4:	9425883a 	add	r18,r18,r16
 4001ef8:	8c400044 	addi	r17,r17,1
 4001efc:	008001c4 	movi	r2,7
 4001f00:	1f000015 	stw	fp,0(r3)
 4001f04:	1c000115 	stw	r16,4(r3)
 4001f08:	dc800e15 	stw	r18,56(sp)
 4001f0c:	dc400d15 	stw	r17,52(sp)
 4001f10:	147d7616 	blt	r2,r17,40014ec <___vfprintf_internal_r+0xb38>
 4001f14:	18c00204 	addi	r3,r3,8
 4001f18:	003d7b06 	br	4001508 <___vfprintf_internal_r+0xb54>
 4001f1c:	dc800e17 	ldw	r18,56(sp)
 4001f20:	dc400d17 	ldw	r17,52(sp)
 4001f24:	07010074 	movhi	fp,1025
 4001f28:	e71ab684 	addi	fp,fp,27354
 4001f2c:	003bc006 	br	4000e30 <___vfprintf_internal_r+0x47c>
 4001f30:	d9014f17 	ldw	r4,1340(sp)
 4001f34:	b00b883a 	mov	r5,r22
 4001f38:	d9800c04 	addi	r6,sp,48
 4001f3c:	400095c0 	call	400095c <__sprint_r>
 4001f40:	103c541e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4001f44:	dc800e17 	ldw	r18,56(sp)
 4001f48:	d8c01904 	addi	r3,sp,100
 4001f4c:	003ce906 	br	40012f4 <___vfprintf_internal_r+0x940>
 4001f50:	3c000017 	ldw	r16,0(r7)
 4001f54:	0009883a 	mov	r4,zero
 4001f58:	39c00104 	addi	r7,r7,4
 4001f5c:	0023883a 	mov	r17,zero
 4001f60:	d9c14015 	stw	r7,1280(sp)
 4001f64:	d8000405 	stb	zero,16(sp)
 4001f68:	003d2006 	br	40013ec <___vfprintf_internal_r+0xa38>
 4001f6c:	38800017 	ldw	r2,0(r7)
 4001f70:	39c00104 	addi	r7,r7,4
 4001f74:	d9c14015 	stw	r7,1280(sp)
 4001f78:	1023d7fa 	srai	r17,r2,31
 4001f7c:	1021883a 	mov	r16,r2
 4001f80:	003d1806 	br	40013e4 <___vfprintf_internal_r+0xa30>
 4001f84:	3c000017 	ldw	r16,0(r7)
 4001f88:	01000044 	movi	r4,1
 4001f8c:	39c00104 	addi	r7,r7,4
 4001f90:	0023883a 	mov	r17,zero
 4001f94:	d9c14015 	stw	r7,1280(sp)
 4001f98:	d8000405 	stb	zero,16(sp)
 4001f9c:	003d1306 	br	40013ec <___vfprintf_internal_r+0xa38>
 4001fa0:	00810074 	movhi	r2,1025
 4001fa4:	109ab204 	addi	r2,r2,27336
 4001fa8:	94800044 	addi	r18,r18,1
 4001fac:	8c400044 	addi	r17,r17,1
 4001fb0:	a8800015 	stw	r2,0(r21)
 4001fb4:	00c00044 	movi	r3,1
 4001fb8:	008001c4 	movi	r2,7
 4001fbc:	a8c00115 	stw	r3,4(r21)
 4001fc0:	dc800e15 	stw	r18,56(sp)
 4001fc4:	dc400d15 	stw	r17,52(sp)
 4001fc8:	1440ca16 	blt	r2,r17,40022f4 <___vfprintf_internal_r+0x1940>
 4001fcc:	a8c00204 	addi	r3,r21,8
 4001fd0:	2000061e 	bne	r4,zero,4001fec <___vfprintf_internal_r+0x1638>
 4001fd4:	d9414717 	ldw	r5,1308(sp)
 4001fd8:	2800041e 	bne	r5,zero,4001fec <___vfprintf_internal_r+0x1638>
 4001fdc:	d9814c17 	ldw	r6,1328(sp)
 4001fe0:	3080004c 	andi	r2,r6,1
 4001fe4:	1005003a 	cmpeq	r2,r2,zero
 4001fe8:	103bf01e 	bne	r2,zero,4000fac <___vfprintf_internal_r+0x5f8>
 4001fec:	00800044 	movi	r2,1
 4001ff0:	dc400d17 	ldw	r17,52(sp)
 4001ff4:	18800115 	stw	r2,4(r3)
 4001ff8:	d8814917 	ldw	r2,1316(sp)
 4001ffc:	94800044 	addi	r18,r18,1
 4002000:	8c400044 	addi	r17,r17,1
 4002004:	18800015 	stw	r2,0(r3)
 4002008:	008001c4 	movi	r2,7
 400200c:	dc800e15 	stw	r18,56(sp)
 4002010:	dc400d15 	stw	r17,52(sp)
 4002014:	1440ca16 	blt	r2,r17,4002340 <___vfprintf_internal_r+0x198c>
 4002018:	18c00204 	addi	r3,r3,8
 400201c:	0121c83a 	sub	r16,zero,r4
 4002020:	0400500e 	bge	zero,r16,4002164 <___vfprintf_internal_r+0x17b0>
 4002024:	00800404 	movi	r2,16
 4002028:	1400800e 	bge	r2,r16,400222c <___vfprintf_internal_r+0x1878>
 400202c:	1027883a 	mov	r19,r2
 4002030:	07010074 	movhi	fp,1025
 4002034:	e71ab284 	addi	fp,fp,27338
 4002038:	050001c4 	movi	r20,7
 400203c:	00000306 	br	400204c <___vfprintf_internal_r+0x1698>
 4002040:	18c00204 	addi	r3,r3,8
 4002044:	843ffc04 	addi	r16,r16,-16
 4002048:	9c007a0e 	bge	r19,r16,4002234 <___vfprintf_internal_r+0x1880>
 400204c:	94800404 	addi	r18,r18,16
 4002050:	8c400044 	addi	r17,r17,1
 4002054:	1f000015 	stw	fp,0(r3)
 4002058:	1cc00115 	stw	r19,4(r3)
 400205c:	dc800e15 	stw	r18,56(sp)
 4002060:	dc400d15 	stw	r17,52(sp)
 4002064:	a47ff60e 	bge	r20,r17,4002040 <___vfprintf_internal_r+0x168c>
 4002068:	d9014f17 	ldw	r4,1340(sp)
 400206c:	b00b883a 	mov	r5,r22
 4002070:	d9800c04 	addi	r6,sp,48
 4002074:	400095c0 	call	400095c <__sprint_r>
 4002078:	103c061e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 400207c:	dc800e17 	ldw	r18,56(sp)
 4002080:	dc400d17 	ldw	r17,52(sp)
 4002084:	d8c01904 	addi	r3,sp,100
 4002088:	003fee06 	br	4002044 <___vfprintf_internal_r+0x1690>
 400208c:	3c000017 	ldw	r16,0(r7)
 4002090:	0023883a 	mov	r17,zero
 4002094:	39c00104 	addi	r7,r7,4
 4002098:	d9c14015 	stw	r7,1280(sp)
 400209c:	003e9206 	br	4001ae8 <___vfprintf_internal_r+0x1134>
 40020a0:	d9401904 	addi	r5,sp,100
 40020a4:	dd000f04 	addi	r20,sp,60
 40020a8:	d9414115 	stw	r5,1284(sp)
 40020ac:	d9814417 	ldw	r6,1296(sp)
 40020b0:	880a973a 	slli	r5,r17,28
 40020b4:	8004d13a 	srli	r2,r16,4
 40020b8:	810003cc 	andi	r4,r16,15
 40020bc:	3109883a 	add	r4,r6,r4
 40020c0:	2884b03a 	or	r2,r5,r2
 40020c4:	21400003 	ldbu	r5,0(r4)
 40020c8:	d9014117 	ldw	r4,1284(sp)
 40020cc:	8806d13a 	srli	r3,r17,4
 40020d0:	1021883a 	mov	r16,r2
 40020d4:	213fffc4 	addi	r4,r4,-1
 40020d8:	d9014115 	stw	r4,1284(sp)
 40020dc:	d9814117 	ldw	r6,1284(sp)
 40020e0:	10c8b03a 	or	r4,r2,r3
 40020e4:	1823883a 	mov	r17,r3
 40020e8:	31400005 	stb	r5,0(r6)
 40020ec:	203fef1e 	bne	r4,zero,40020ac <___vfprintf_internal_r+0x16f8>
 40020f0:	003ccb06 	br	4001420 <___vfprintf_internal_r+0xa6c>
 40020f4:	00800c04 	movi	r2,48
 40020f8:	d98018c4 	addi	r6,sp,99
 40020fc:	dd000f04 	addi	r20,sp,60
 4002100:	d88018c5 	stb	r2,99(sp)
 4002104:	d9814115 	stw	r6,1284(sp)
 4002108:	003cc506 	br	4001420 <___vfprintf_internal_r+0xa6c>
 400210c:	dc400d17 	ldw	r17,52(sp)
 4002110:	07010074 	movhi	fp,1025
 4002114:	e71ab684 	addi	fp,fp,27354
 4002118:	003bc706 	br	4001038 <___vfprintf_internal_r+0x684>
 400211c:	d9414c17 	ldw	r5,1328(sp)
 4002120:	2880040c 	andi	r2,r5,16
 4002124:	10007c26 	beq	r2,zero,4002318 <___vfprintf_internal_r+0x1964>
 4002128:	38800017 	ldw	r2,0(r7)
 400212c:	39c00104 	addi	r7,r7,4
 4002130:	d9c14015 	stw	r7,1280(sp)
 4002134:	d9814b17 	ldw	r6,1324(sp)
 4002138:	d9c14017 	ldw	r7,1280(sp)
 400213c:	11800015 	stw	r6,0(r2)
 4002140:	003a7806 	br	4000b24 <___vfprintf_internal_r+0x170>
 4002144:	d9014f17 	ldw	r4,1340(sp)
 4002148:	b00b883a 	mov	r5,r22
 400214c:	d9800c04 	addi	r6,sp,48
 4002150:	400095c0 	call	400095c <__sprint_r>
 4002154:	103bcf1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4002158:	dc800e17 	ldw	r18,56(sp)
 400215c:	dc400d17 	ldw	r17,52(sp)
 4002160:	d8c01904 	addi	r3,sp,100
 4002164:	d9014717 	ldw	r4,1308(sp)
 4002168:	d9414117 	ldw	r5,1284(sp)
 400216c:	8c400044 	addi	r17,r17,1
 4002170:	9125883a 	add	r18,r18,r4
 4002174:	008001c4 	movi	r2,7
 4002178:	19400015 	stw	r5,0(r3)
 400217c:	19000115 	stw	r4,4(r3)
 4002180:	dc800e15 	stw	r18,56(sp)
 4002184:	dc400d15 	stw	r17,52(sp)
 4002188:	147cee16 	blt	r2,r17,4001544 <___vfprintf_internal_r+0xb90>
 400218c:	18c00204 	addi	r3,r3,8
 4002190:	003b8606 	br	4000fac <___vfprintf_internal_r+0x5f8>
 4002194:	38c00017 	ldw	r3,0(r7)
 4002198:	39000204 	addi	r4,r7,8
 400219c:	d9014015 	stw	r4,1280(sp)
 40021a0:	d8c14215 	stw	r3,1288(sp)
 40021a4:	39c00117 	ldw	r7,4(r7)
 40021a8:	d9c14315 	stw	r7,1292(sp)
 40021ac:	003e2006 	br	4001a30 <___vfprintf_internal_r+0x107c>
 40021b0:	0005883a 	mov	r2,zero
 40021b4:	1409c83a 	sub	r4,r2,r16
 40021b8:	1105803a 	cmpltu	r2,r2,r4
 40021bc:	044bc83a 	sub	r5,zero,r17
 40021c0:	2885c83a 	sub	r2,r5,r2
 40021c4:	2021883a 	mov	r16,r4
 40021c8:	1023883a 	mov	r17,r2
 40021cc:	01000044 	movi	r4,1
 40021d0:	00800b44 	movi	r2,45
 40021d4:	d8800405 	stb	r2,16(sp)
 40021d8:	003c8406 	br	40013ec <___vfprintf_internal_r+0xa38>
 40021dc:	d9014f17 	ldw	r4,1340(sp)
 40021e0:	b00b883a 	mov	r5,r22
 40021e4:	d9800c04 	addi	r6,sp,48
 40021e8:	400095c0 	call	400095c <__sprint_r>
 40021ec:	103ba91e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40021f0:	dc800e17 	ldw	r18,56(sp)
 40021f4:	dc400d17 	ldw	r17,52(sp)
 40021f8:	d9000517 	ldw	r4,20(sp)
 40021fc:	d9401904 	addi	r5,sp,100
 4002200:	003da706 	br	40018a0 <___vfprintf_internal_r+0xeec>
 4002204:	d9014f17 	ldw	r4,1340(sp)
 4002208:	b00b883a 	mov	r5,r22
 400220c:	d9800c04 	addi	r6,sp,48
 4002210:	400095c0 	call	400095c <__sprint_r>
 4002214:	103b9f1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4002218:	dc800e17 	ldw	r18,56(sp)
 400221c:	dc400d17 	ldw	r17,52(sp)
 4002220:	d9000517 	ldw	r4,20(sp)
 4002224:	d8c01904 	addi	r3,sp,100
 4002228:	003d9106 	br	4001870 <___vfprintf_internal_r+0xebc>
 400222c:	07010074 	movhi	fp,1025
 4002230:	e71ab284 	addi	fp,fp,27338
 4002234:	9425883a 	add	r18,r18,r16
 4002238:	8c400044 	addi	r17,r17,1
 400223c:	008001c4 	movi	r2,7
 4002240:	1f000015 	stw	fp,0(r3)
 4002244:	1c000115 	stw	r16,4(r3)
 4002248:	dc800e15 	stw	r18,56(sp)
 400224c:	dc400d15 	stw	r17,52(sp)
 4002250:	147fbc16 	blt	r2,r17,4002144 <___vfprintf_internal_r+0x1790>
 4002254:	18c00204 	addi	r3,r3,8
 4002258:	003fc206 	br	4002164 <___vfprintf_internal_r+0x17b0>
 400225c:	d9014f17 	ldw	r4,1340(sp)
 4002260:	b00b883a 	mov	r5,r22
 4002264:	d9800c04 	addi	r6,sp,48
 4002268:	400095c0 	call	400095c <__sprint_r>
 400226c:	103b891e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4002270:	dc800e17 	ldw	r18,56(sp)
 4002274:	d9000517 	ldw	r4,20(sp)
 4002278:	d8c01904 	addi	r3,sp,100
 400227c:	003d0206 	br	4001688 <___vfprintf_internal_r+0xcd4>
 4002280:	07010074 	movhi	fp,1025
 4002284:	e71ab284 	addi	fp,fp,27338
 4002288:	003be406 	br	400121c <___vfprintf_internal_r+0x868>
 400228c:	00810074 	movhi	r2,1025
 4002290:	109aa104 	addi	r2,r2,27268
 4002294:	d8814115 	stw	r2,1284(sp)
 4002298:	003df506 	br	4001a70 <___vfprintf_internal_r+0x10bc>
 400229c:	d9014217 	ldw	r4,1288(sp)
 40022a0:	d9414317 	ldw	r5,1292(sp)
 40022a4:	40073940 	call	4007394 <__isnand>
 40022a8:	10003926 	beq	r2,zero,4002390 <___vfprintf_internal_r+0x19dc>
 40022ac:	d9414d17 	ldw	r5,1332(sp)
 40022b0:	008011c4 	movi	r2,71
 40022b4:	1140ce16 	blt	r2,r5,40025f0 <___vfprintf_internal_r+0x1c3c>
 40022b8:	01810074 	movhi	r6,1025
 40022bc:	319aa204 	addi	r6,r6,27272
 40022c0:	d9814115 	stw	r6,1284(sp)
 40022c4:	003dea06 	br	4001a70 <___vfprintf_internal_r+0x10bc>
 40022c8:	d9014c17 	ldw	r4,1328(sp)
 40022cc:	bdc00044 	addi	r23,r23,1
 40022d0:	b8c00007 	ldb	r3,0(r23)
 40022d4:	21000814 	ori	r4,r4,32
 40022d8:	d9014c15 	stw	r4,1328(sp)
 40022dc:	003a3406 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 40022e0:	dcc14515 	stw	r19,1300(sp)
 40022e4:	98011016 	blt	r19,zero,4002728 <___vfprintf_internal_r+0x1d74>
 40022e8:	980f883a 	mov	r7,r19
 40022ec:	d8014615 	stw	zero,1304(sp)
 40022f0:	003c5206 	br	400143c <___vfprintf_internal_r+0xa88>
 40022f4:	d9014f17 	ldw	r4,1340(sp)
 40022f8:	b00b883a 	mov	r5,r22
 40022fc:	d9800c04 	addi	r6,sp,48
 4002300:	400095c0 	call	400095c <__sprint_r>
 4002304:	103b631e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4002308:	dc800e17 	ldw	r18,56(sp)
 400230c:	d9000517 	ldw	r4,20(sp)
 4002310:	d8c01904 	addi	r3,sp,100
 4002314:	003f2e06 	br	4001fd0 <___vfprintf_internal_r+0x161c>
 4002318:	d8c14c17 	ldw	r3,1328(sp)
 400231c:	1880100c 	andi	r2,r3,64
 4002320:	1000a026 	beq	r2,zero,40025a4 <___vfprintf_internal_r+0x1bf0>
 4002324:	38800017 	ldw	r2,0(r7)
 4002328:	39c00104 	addi	r7,r7,4
 400232c:	d9c14015 	stw	r7,1280(sp)
 4002330:	d9014b17 	ldw	r4,1324(sp)
 4002334:	d9c14017 	ldw	r7,1280(sp)
 4002338:	1100000d 	sth	r4,0(r2)
 400233c:	0039f906 	br	4000b24 <___vfprintf_internal_r+0x170>
 4002340:	d9014f17 	ldw	r4,1340(sp)
 4002344:	b00b883a 	mov	r5,r22
 4002348:	d9800c04 	addi	r6,sp,48
 400234c:	400095c0 	call	400095c <__sprint_r>
 4002350:	103b501e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 4002354:	dc800e17 	ldw	r18,56(sp)
 4002358:	dc400d17 	ldw	r17,52(sp)
 400235c:	d9000517 	ldw	r4,20(sp)
 4002360:	d8c01904 	addi	r3,sp,100
 4002364:	003f2d06 	br	400201c <___vfprintf_internal_r+0x1668>
 4002368:	00800184 	movi	r2,6
 400236c:	14c09a36 	bltu	r2,r19,40025d8 <___vfprintf_internal_r+0x1c24>
 4002370:	dcc14515 	stw	r19,1300(sp)
 4002374:	9800010e 	bge	r19,zero,400237c <___vfprintf_internal_r+0x19c8>
 4002378:	d8014515 	stw	zero,1300(sp)
 400237c:	00810074 	movhi	r2,1025
 4002380:	109aa404 	addi	r2,r2,27280
 4002384:	980f883a 	mov	r7,r19
 4002388:	d8814115 	stw	r2,1284(sp)
 400238c:	003a7806 	br	4000d70 <___vfprintf_internal_r+0x3bc>
 4002390:	00bfffc4 	movi	r2,-1
 4002394:	9880e226 	beq	r19,r2,4002720 <___vfprintf_internal_r+0x1d6c>
 4002398:	d9414d17 	ldw	r5,1332(sp)
 400239c:	008019c4 	movi	r2,103
 40023a0:	2880dc26 	beq	r5,r2,4002714 <___vfprintf_internal_r+0x1d60>
 40023a4:	008011c4 	movi	r2,71
 40023a8:	2880da26 	beq	r5,r2,4002714 <___vfprintf_internal_r+0x1d60>
 40023ac:	d9414c17 	ldw	r5,1328(sp)
 40023b0:	d9014317 	ldw	r4,1292(sp)
 40023b4:	d9814217 	ldw	r6,1288(sp)
 40023b8:	29404014 	ori	r5,r5,256
 40023bc:	d9414c15 	stw	r5,1328(sp)
 40023c0:	2000cc16 	blt	r4,zero,40026f4 <___vfprintf_internal_r+0x1d40>
 40023c4:	3021883a 	mov	r16,r6
 40023c8:	2023883a 	mov	r17,r4
 40023cc:	0039883a 	mov	fp,zero
 40023d0:	d9414d17 	ldw	r5,1332(sp)
 40023d4:	00801984 	movi	r2,102
 40023d8:	2880b726 	beq	r5,r2,40026b8 <___vfprintf_internal_r+0x1d04>
 40023dc:	00801184 	movi	r2,70
 40023e0:	2880b526 	beq	r5,r2,40026b8 <___vfprintf_internal_r+0x1d04>
 40023e4:	00801944 	movi	r2,101
 40023e8:	2880c826 	beq	r5,r2,400270c <___vfprintf_internal_r+0x1d58>
 40023ec:	00801144 	movi	r2,69
 40023f0:	2880c626 	beq	r5,r2,400270c <___vfprintf_internal_r+0x1d58>
 40023f4:	9829883a 	mov	r20,r19
 40023f8:	d9014f17 	ldw	r4,1340(sp)
 40023fc:	d8800504 	addi	r2,sp,20
 4002400:	880d883a 	mov	r6,r17
 4002404:	d8800115 	stw	r2,4(sp)
 4002408:	d8c00604 	addi	r3,sp,24
 400240c:	d8800704 	addi	r2,sp,28
 4002410:	800b883a 	mov	r5,r16
 4002414:	01c00084 	movi	r7,2
 4002418:	d8c00215 	stw	r3,8(sp)
 400241c:	d8800315 	stw	r2,12(sp)
 4002420:	dd000015 	stw	r20,0(sp)
 4002424:	4002bd80 	call	4002bd8 <_dtoa_r>
 4002428:	d9814d17 	ldw	r6,1332(sp)
 400242c:	d8814115 	stw	r2,1284(sp)
 4002430:	008019c4 	movi	r2,103
 4002434:	30809526 	beq	r6,r2,400268c <___vfprintf_internal_r+0x1cd8>
 4002438:	d8c14d17 	ldw	r3,1332(sp)
 400243c:	008011c4 	movi	r2,71
 4002440:	18809226 	beq	r3,r2,400268c <___vfprintf_internal_r+0x1cd8>
 4002444:	d9414117 	ldw	r5,1284(sp)
 4002448:	d9814d17 	ldw	r6,1332(sp)
 400244c:	00801984 	movi	r2,102
 4002450:	2d25883a 	add	r18,r5,r20
 4002454:	30808626 	beq	r6,r2,4002670 <___vfprintf_internal_r+0x1cbc>
 4002458:	00801184 	movi	r2,70
 400245c:	30808426 	beq	r6,r2,4002670 <___vfprintf_internal_r+0x1cbc>
 4002460:	000d883a 	mov	r6,zero
 4002464:	000f883a 	mov	r7,zero
 4002468:	880b883a 	mov	r5,r17
 400246c:	8009883a 	mov	r4,r16
 4002470:	400917c0 	call	400917c <__eqdf2>
 4002474:	1000751e 	bne	r2,zero,400264c <___vfprintf_internal_r+0x1c98>
 4002478:	9005883a 	mov	r2,r18
 400247c:	dc800715 	stw	r18,28(sp)
 4002480:	d9014117 	ldw	r4,1284(sp)
 4002484:	d9414d17 	ldw	r5,1332(sp)
 4002488:	00c019c4 	movi	r3,103
 400248c:	1125c83a 	sub	r18,r2,r4
 4002490:	28c06826 	beq	r5,r3,4002634 <___vfprintf_internal_r+0x1c80>
 4002494:	008011c4 	movi	r2,71
 4002498:	28806626 	beq	r5,r2,4002634 <___vfprintf_internal_r+0x1c80>
 400249c:	d9000517 	ldw	r4,20(sp)
 40024a0:	d8c14d17 	ldw	r3,1332(sp)
 40024a4:	00801944 	movi	r2,101
 40024a8:	10c05516 	blt	r2,r3,4002600 <___vfprintf_internal_r+0x1c4c>
 40024ac:	213fffc4 	addi	r4,r4,-1
 40024b0:	d9000515 	stw	r4,20(sp)
 40024b4:	d8c00805 	stb	r3,32(sp)
 40024b8:	2021883a 	mov	r16,r4
 40024bc:	2000c116 	blt	r4,zero,40027c4 <___vfprintf_internal_r+0x1e10>
 40024c0:	00800ac4 	movi	r2,43
 40024c4:	d8800845 	stb	r2,33(sp)
 40024c8:	00800244 	movi	r2,9
 40024cc:	1400af0e 	bge	r2,r16,400278c <___vfprintf_internal_r+0x1dd8>
 40024d0:	1027883a 	mov	r19,r2
 40024d4:	dc400b84 	addi	r17,sp,46
 40024d8:	8009883a 	mov	r4,r16
 40024dc:	01400284 	movi	r5,10
 40024e0:	40098640 	call	4009864 <__modsi3>
 40024e4:	10800c04 	addi	r2,r2,48
 40024e8:	8c7fffc4 	addi	r17,r17,-1
 40024ec:	8009883a 	mov	r4,r16
 40024f0:	01400284 	movi	r5,10
 40024f4:	88800005 	stb	r2,0(r17)
 40024f8:	40098040 	call	4009804 <__divsi3>
 40024fc:	1021883a 	mov	r16,r2
 4002500:	98bff516 	blt	r19,r2,40024d8 <___vfprintf_internal_r+0x1b24>
 4002504:	10c00c04 	addi	r3,r2,48
 4002508:	d88009c4 	addi	r2,sp,39
 400250c:	108001c4 	addi	r2,r2,7
 4002510:	897fffc4 	addi	r5,r17,-1
 4002514:	88ffffc5 	stb	r3,-1(r17)
 4002518:	2880a72e 	bgeu	r5,r2,40027b8 <___vfprintf_internal_r+0x1e04>
 400251c:	1009883a 	mov	r4,r2
 4002520:	d9800804 	addi	r6,sp,32
 4002524:	d8c00884 	addi	r3,sp,34
 4002528:	28800003 	ldbu	r2,0(r5)
 400252c:	29400044 	addi	r5,r5,1
 4002530:	18800005 	stb	r2,0(r3)
 4002534:	18c00044 	addi	r3,r3,1
 4002538:	293ffb36 	bltu	r5,r4,4002528 <___vfprintf_internal_r+0x1b74>
 400253c:	1987c83a 	sub	r3,r3,r6
 4002540:	00800044 	movi	r2,1
 4002544:	d8c14815 	stw	r3,1312(sp)
 4002548:	90cf883a 	add	r7,r18,r3
 400254c:	1480960e 	bge	r2,r18,40027a8 <___vfprintf_internal_r+0x1df4>
 4002550:	39c00044 	addi	r7,r7,1
 4002554:	d9c14515 	stw	r7,1300(sp)
 4002558:	38003416 	blt	r7,zero,400262c <___vfprintf_internal_r+0x1c78>
 400255c:	e0803fcc 	andi	r2,fp,255
 4002560:	1080201c 	xori	r2,r2,128
 4002564:	10bfe004 	addi	r2,r2,-128
 4002568:	10004e26 	beq	r2,zero,40026a4 <___vfprintf_internal_r+0x1cf0>
 400256c:	00800b44 	movi	r2,45
 4002570:	dc814715 	stw	r18,1308(sp)
 4002574:	d8014615 	stw	zero,1304(sp)
 4002578:	d8800405 	stb	r2,16(sp)
 400257c:	003bb106 	br	4001444 <___vfprintf_internal_r+0xa90>
 4002580:	00800b44 	movi	r2,45
 4002584:	d8800405 	stb	r2,16(sp)
 4002588:	003d3306 	br	4001a58 <___vfprintf_internal_r+0x10a4>
 400258c:	d9014f17 	ldw	r4,1340(sp)
 4002590:	b00b883a 	mov	r5,r22
 4002594:	d9800c04 	addi	r6,sp,48
 4002598:	400095c0 	call	400095c <__sprint_r>
 400259c:	103abd1e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0x6e0>
 40025a0:	003abb06 	br	4001090 <___vfprintf_internal_r+0x6dc>
 40025a4:	38800017 	ldw	r2,0(r7)
 40025a8:	39c00104 	addi	r7,r7,4
 40025ac:	d9c14015 	stw	r7,1280(sp)
 40025b0:	d9414b17 	ldw	r5,1324(sp)
 40025b4:	d9c14017 	ldw	r7,1280(sp)
 40025b8:	11400015 	stw	r5,0(r2)
 40025bc:	00395906 	br	4000b24 <___vfprintf_internal_r+0x170>
 40025c0:	980f883a 	mov	r7,r19
 40025c4:	dcc14515 	stw	r19,1300(sp)
 40025c8:	d8014615 	stw	zero,1304(sp)
 40025cc:	003b9b06 	br	400143c <___vfprintf_internal_r+0xa88>
 40025d0:	0027883a 	mov	r19,zero
 40025d4:	00397806 	br	4000bb8 <___vfprintf_internal_r+0x204>
 40025d8:	00c10074 	movhi	r3,1025
 40025dc:	18daa404 	addi	r3,r3,27280
 40025e0:	100f883a 	mov	r7,r2
 40025e4:	d8814515 	stw	r2,1300(sp)
 40025e8:	d8c14115 	stw	r3,1284(sp)
 40025ec:	0039e006 	br	4000d70 <___vfprintf_internal_r+0x3bc>
 40025f0:	00810074 	movhi	r2,1025
 40025f4:	109aa304 	addi	r2,r2,27276
 40025f8:	d8814115 	stw	r2,1284(sp)
 40025fc:	003d1c06 	br	4001a70 <___vfprintf_internal_r+0x10bc>
 4002600:	d9414d17 	ldw	r5,1332(sp)
 4002604:	00801984 	movi	r2,102
 4002608:	28804926 	beq	r5,r2,4002730 <___vfprintf_internal_r+0x1d7c>
 400260c:	200f883a 	mov	r7,r4
 4002610:	24805716 	blt	r4,r18,4002770 <___vfprintf_internal_r+0x1dbc>
 4002614:	d9414c17 	ldw	r5,1328(sp)
 4002618:	2880004c 	andi	r2,r5,1
 400261c:	10000126 	beq	r2,zero,4002624 <___vfprintf_internal_r+0x1c70>
 4002620:	21c00044 	addi	r7,r4,1
 4002624:	d9c14515 	stw	r7,1300(sp)
 4002628:	383fcc0e 	bge	r7,zero,400255c <___vfprintf_internal_r+0x1ba8>
 400262c:	d8014515 	stw	zero,1300(sp)
 4002630:	003fca06 	br	400255c <___vfprintf_internal_r+0x1ba8>
 4002634:	d9000517 	ldw	r4,20(sp)
 4002638:	00bfff04 	movi	r2,-4
 400263c:	1100480e 	bge	r2,r4,4002760 <___vfprintf_internal_r+0x1dac>
 4002640:	99004716 	blt	r19,r4,4002760 <___vfprintf_internal_r+0x1dac>
 4002644:	d8c14d15 	stw	r3,1332(sp)
 4002648:	003ff006 	br	400260c <___vfprintf_internal_r+0x1c58>
 400264c:	d8800717 	ldw	r2,28(sp)
 4002650:	14bf8b2e 	bgeu	r2,r18,4002480 <___vfprintf_internal_r+0x1acc>
 4002654:	9007883a 	mov	r3,r18
 4002658:	01000c04 	movi	r4,48
 400265c:	11000005 	stb	r4,0(r2)
 4002660:	10800044 	addi	r2,r2,1
 4002664:	d8800715 	stw	r2,28(sp)
 4002668:	18bffc1e 	bne	r3,r2,400265c <___vfprintf_internal_r+0x1ca8>
 400266c:	003f8406 	br	4002480 <___vfprintf_internal_r+0x1acc>
 4002670:	d8814117 	ldw	r2,1284(sp)
 4002674:	10c00007 	ldb	r3,0(r2)
 4002678:	00800c04 	movi	r2,48
 400267c:	18805b26 	beq	r3,r2,40027ec <___vfprintf_internal_r+0x1e38>
 4002680:	d9000517 	ldw	r4,20(sp)
 4002684:	9125883a 	add	r18,r18,r4
 4002688:	003f7506 	br	4002460 <___vfprintf_internal_r+0x1aac>
 400268c:	d9014c17 	ldw	r4,1328(sp)
 4002690:	2080004c 	andi	r2,r4,1
 4002694:	1005003a 	cmpeq	r2,r2,zero
 4002698:	103f6a26 	beq	r2,zero,4002444 <___vfprintf_internal_r+0x1a90>
 400269c:	d8800717 	ldw	r2,28(sp)
 40026a0:	003f7706 	br	4002480 <___vfprintf_internal_r+0x1acc>
 40026a4:	d9c14515 	stw	r7,1300(sp)
 40026a8:	38004d16 	blt	r7,zero,40027e0 <___vfprintf_internal_r+0x1e2c>
 40026ac:	dc814715 	stw	r18,1308(sp)
 40026b0:	d8014615 	stw	zero,1304(sp)
 40026b4:	003b6106 	br	400143c <___vfprintf_internal_r+0xa88>
 40026b8:	d9014f17 	ldw	r4,1340(sp)
 40026bc:	d8800504 	addi	r2,sp,20
 40026c0:	d8800115 	stw	r2,4(sp)
 40026c4:	d8c00604 	addi	r3,sp,24
 40026c8:	d8800704 	addi	r2,sp,28
 40026cc:	800b883a 	mov	r5,r16
 40026d0:	880d883a 	mov	r6,r17
 40026d4:	01c000c4 	movi	r7,3
 40026d8:	d8c00215 	stw	r3,8(sp)
 40026dc:	d8800315 	stw	r2,12(sp)
 40026e0:	dcc00015 	stw	r19,0(sp)
 40026e4:	9829883a 	mov	r20,r19
 40026e8:	4002bd80 	call	4002bd8 <_dtoa_r>
 40026ec:	d8814115 	stw	r2,1284(sp)
 40026f0:	003f5106 	br	4002438 <___vfprintf_internal_r+0x1a84>
 40026f4:	d8c14217 	ldw	r3,1288(sp)
 40026f8:	d9014317 	ldw	r4,1292(sp)
 40026fc:	07000b44 	movi	fp,45
 4002700:	1821883a 	mov	r16,r3
 4002704:	2460003c 	xorhi	r17,r4,32768
 4002708:	003f3106 	br	40023d0 <___vfprintf_internal_r+0x1a1c>
 400270c:	9d000044 	addi	r20,r19,1
 4002710:	003f3906 	br	40023f8 <___vfprintf_internal_r+0x1a44>
 4002714:	983f251e 	bne	r19,zero,40023ac <___vfprintf_internal_r+0x19f8>
 4002718:	04c00044 	movi	r19,1
 400271c:	003f2306 	br	40023ac <___vfprintf_internal_r+0x19f8>
 4002720:	04c00184 	movi	r19,6
 4002724:	003f2106 	br	40023ac <___vfprintf_internal_r+0x19f8>
 4002728:	d8014515 	stw	zero,1300(sp)
 400272c:	003eee06 	br	40022e8 <___vfprintf_internal_r+0x1934>
 4002730:	200f883a 	mov	r7,r4
 4002734:	0100370e 	bge	zero,r4,4002814 <___vfprintf_internal_r+0x1e60>
 4002738:	9800031e 	bne	r19,zero,4002748 <___vfprintf_internal_r+0x1d94>
 400273c:	d9814c17 	ldw	r6,1328(sp)
 4002740:	3080004c 	andi	r2,r6,1
 4002744:	103fb726 	beq	r2,zero,4002624 <___vfprintf_internal_r+0x1c70>
 4002748:	20800044 	addi	r2,r4,1
 400274c:	98a7883a 	add	r19,r19,r2
 4002750:	dcc14515 	stw	r19,1300(sp)
 4002754:	980f883a 	mov	r7,r19
 4002758:	983f800e 	bge	r19,zero,400255c <___vfprintf_internal_r+0x1ba8>
 400275c:	003fb306 	br	400262c <___vfprintf_internal_r+0x1c78>
 4002760:	d9814d17 	ldw	r6,1332(sp)
 4002764:	31bfff84 	addi	r6,r6,-2
 4002768:	d9814d15 	stw	r6,1332(sp)
 400276c:	003f4c06 	br	40024a0 <___vfprintf_internal_r+0x1aec>
 4002770:	0100180e 	bge	zero,r4,40027d4 <___vfprintf_internal_r+0x1e20>
 4002774:	00800044 	movi	r2,1
 4002778:	1485883a 	add	r2,r2,r18
 400277c:	d8814515 	stw	r2,1300(sp)
 4002780:	100f883a 	mov	r7,r2
 4002784:	103f750e 	bge	r2,zero,400255c <___vfprintf_internal_r+0x1ba8>
 4002788:	003fa806 	br	400262c <___vfprintf_internal_r+0x1c78>
 400278c:	80c00c04 	addi	r3,r16,48
 4002790:	00800c04 	movi	r2,48
 4002794:	d8c008c5 	stb	r3,35(sp)
 4002798:	d9800804 	addi	r6,sp,32
 400279c:	d8c00904 	addi	r3,sp,36
 40027a0:	d8800885 	stb	r2,34(sp)
 40027a4:	003f6506 	br	400253c <___vfprintf_internal_r+0x1b88>
 40027a8:	d9014c17 	ldw	r4,1328(sp)
 40027ac:	2084703a 	and	r2,r4,r2
 40027b0:	103f9c26 	beq	r2,zero,4002624 <___vfprintf_internal_r+0x1c70>
 40027b4:	003f6606 	br	4002550 <___vfprintf_internal_r+0x1b9c>
 40027b8:	d9800804 	addi	r6,sp,32
 40027bc:	d8c00884 	addi	r3,sp,34
 40027c0:	003f5e06 	br	400253c <___vfprintf_internal_r+0x1b88>
 40027c4:	00800b44 	movi	r2,45
 40027c8:	0121c83a 	sub	r16,zero,r4
 40027cc:	d8800845 	stb	r2,33(sp)
 40027d0:	003f3d06 	br	40024c8 <___vfprintf_internal_r+0x1b14>
 40027d4:	00800084 	movi	r2,2
 40027d8:	1105c83a 	sub	r2,r2,r4
 40027dc:	003fe606 	br	4002778 <___vfprintf_internal_r+0x1dc4>
 40027e0:	d8014515 	stw	zero,1300(sp)
 40027e4:	dc814715 	stw	r18,1308(sp)
 40027e8:	003fb106 	br	40026b0 <___vfprintf_internal_r+0x1cfc>
 40027ec:	000d883a 	mov	r6,zero
 40027f0:	000f883a 	mov	r7,zero
 40027f4:	8009883a 	mov	r4,r16
 40027f8:	880b883a 	mov	r5,r17
 40027fc:	40092040 	call	4009204 <__nedf2>
 4002800:	103f9f26 	beq	r2,zero,4002680 <___vfprintf_internal_r+0x1ccc>
 4002804:	00800044 	movi	r2,1
 4002808:	1509c83a 	sub	r4,r2,r20
 400280c:	d9000515 	stw	r4,20(sp)
 4002810:	003f9b06 	br	4002680 <___vfprintf_internal_r+0x1ccc>
 4002814:	98000d1e 	bne	r19,zero,400284c <___vfprintf_internal_r+0x1e98>
 4002818:	d8c14c17 	ldw	r3,1328(sp)
 400281c:	1880004c 	andi	r2,r3,1
 4002820:	10000a1e 	bne	r2,zero,400284c <___vfprintf_internal_r+0x1e98>
 4002824:	01000044 	movi	r4,1
 4002828:	200f883a 	mov	r7,r4
 400282c:	d9014515 	stw	r4,1300(sp)
 4002830:	003f4a06 	br	400255c <___vfprintf_internal_r+0x1ba8>
 4002834:	3cc00017 	ldw	r19,0(r7)
 4002838:	39c00104 	addi	r7,r7,4
 400283c:	983d0e0e 	bge	r19,zero,4001c78 <___vfprintf_internal_r+0x12c4>
 4002840:	b8c00007 	ldb	r3,0(r23)
 4002844:	04ffffc4 	movi	r19,-1
 4002848:	0038d906 	br	4000bb0 <___vfprintf_internal_r+0x1fc>
 400284c:	9cc00084 	addi	r19,r19,2
 4002850:	dcc14515 	stw	r19,1300(sp)
 4002854:	980f883a 	mov	r7,r19
 4002858:	983f400e 	bge	r19,zero,400255c <___vfprintf_internal_r+0x1ba8>
 400285c:	003f7306 	br	400262c <___vfprintf_internal_r+0x1c78>

04002860 <__vfprintf_internal>:
 4002860:	008100b4 	movhi	r2,1026
 4002864:	10a27304 	addi	r2,r2,-30260
 4002868:	2013883a 	mov	r9,r4
 400286c:	11000017 	ldw	r4,0(r2)
 4002870:	2805883a 	mov	r2,r5
 4002874:	300f883a 	mov	r7,r6
 4002878:	480b883a 	mov	r5,r9
 400287c:	100d883a 	mov	r6,r2
 4002880:	40009b41 	jmpi	40009b4 <___vfprintf_internal_r>

04002884 <__swsetup_r>:
 4002884:	008100b4 	movhi	r2,1026
 4002888:	10a27304 	addi	r2,r2,-30260
 400288c:	10c00017 	ldw	r3,0(r2)
 4002890:	defffd04 	addi	sp,sp,-12
 4002894:	dc400115 	stw	r17,4(sp)
 4002898:	dc000015 	stw	r16,0(sp)
 400289c:	dfc00215 	stw	ra,8(sp)
 40028a0:	2023883a 	mov	r17,r4
 40028a4:	2821883a 	mov	r16,r5
 40028a8:	18000226 	beq	r3,zero,40028b4 <__swsetup_r+0x30>
 40028ac:	18800e17 	ldw	r2,56(r3)
 40028b0:	10001f26 	beq	r2,zero,4002930 <__swsetup_r+0xac>
 40028b4:	8100030b 	ldhu	r4,12(r16)
 40028b8:	2080020c 	andi	r2,r4,8
 40028bc:	10002826 	beq	r2,zero,4002960 <__swsetup_r+0xdc>
 40028c0:	81400417 	ldw	r5,16(r16)
 40028c4:	28001d26 	beq	r5,zero,400293c <__swsetup_r+0xb8>
 40028c8:	2080004c 	andi	r2,r4,1
 40028cc:	1005003a 	cmpeq	r2,r2,zero
 40028d0:	10000b26 	beq	r2,zero,4002900 <__swsetup_r+0x7c>
 40028d4:	2080008c 	andi	r2,r4,2
 40028d8:	10001226 	beq	r2,zero,4002924 <__swsetup_r+0xa0>
 40028dc:	0005883a 	mov	r2,zero
 40028e0:	80800215 	stw	r2,8(r16)
 40028e4:	28000b26 	beq	r5,zero,4002914 <__swsetup_r+0x90>
 40028e8:	0005883a 	mov	r2,zero
 40028ec:	dfc00217 	ldw	ra,8(sp)
 40028f0:	dc400117 	ldw	r17,4(sp)
 40028f4:	dc000017 	ldw	r16,0(sp)
 40028f8:	dec00304 	addi	sp,sp,12
 40028fc:	f800283a 	ret
 4002900:	80800517 	ldw	r2,20(r16)
 4002904:	80000215 	stw	zero,8(r16)
 4002908:	0085c83a 	sub	r2,zero,r2
 400290c:	80800615 	stw	r2,24(r16)
 4002910:	283ff51e 	bne	r5,zero,40028e8 <__swsetup_r+0x64>
 4002914:	2080200c 	andi	r2,r4,128
 4002918:	103ff326 	beq	r2,zero,40028e8 <__swsetup_r+0x64>
 400291c:	00bfffc4 	movi	r2,-1
 4002920:	003ff206 	br	40028ec <__swsetup_r+0x68>
 4002924:	80800517 	ldw	r2,20(r16)
 4002928:	80800215 	stw	r2,8(r16)
 400292c:	003fed06 	br	40028e4 <__swsetup_r+0x60>
 4002930:	1809883a 	mov	r4,r3
 4002934:	40044240 	call	4004424 <__sinit>
 4002938:	003fde06 	br	40028b4 <__swsetup_r+0x30>
 400293c:	20c0a00c 	andi	r3,r4,640
 4002940:	00808004 	movi	r2,512
 4002944:	18bfe026 	beq	r3,r2,40028c8 <__swsetup_r+0x44>
 4002948:	8809883a 	mov	r4,r17
 400294c:	800b883a 	mov	r5,r16
 4002950:	400519c0 	call	400519c <__smakebuf_r>
 4002954:	8100030b 	ldhu	r4,12(r16)
 4002958:	81400417 	ldw	r5,16(r16)
 400295c:	003fda06 	br	40028c8 <__swsetup_r+0x44>
 4002960:	2080040c 	andi	r2,r4,16
 4002964:	103fed26 	beq	r2,zero,400291c <__swsetup_r+0x98>
 4002968:	2080010c 	andi	r2,r4,4
 400296c:	10001226 	beq	r2,zero,40029b8 <__swsetup_r+0x134>
 4002970:	81400c17 	ldw	r5,48(r16)
 4002974:	28000526 	beq	r5,zero,400298c <__swsetup_r+0x108>
 4002978:	80801004 	addi	r2,r16,64
 400297c:	28800226 	beq	r5,r2,4002988 <__swsetup_r+0x104>
 4002980:	8809883a 	mov	r4,r17
 4002984:	40047a80 	call	40047a8 <_free_r>
 4002988:	80000c15 	stw	zero,48(r16)
 400298c:	8080030b 	ldhu	r2,12(r16)
 4002990:	81400417 	ldw	r5,16(r16)
 4002994:	80000115 	stw	zero,4(r16)
 4002998:	10bff6cc 	andi	r2,r2,65499
 400299c:	8080030d 	sth	r2,12(r16)
 40029a0:	81400015 	stw	r5,0(r16)
 40029a4:	8080030b 	ldhu	r2,12(r16)
 40029a8:	10800214 	ori	r2,r2,8
 40029ac:	113fffcc 	andi	r4,r2,65535
 40029b0:	8080030d 	sth	r2,12(r16)
 40029b4:	003fc306 	br	40028c4 <__swsetup_r+0x40>
 40029b8:	81400417 	ldw	r5,16(r16)
 40029bc:	003ff906 	br	40029a4 <__swsetup_r+0x120>

040029c0 <quorem>:
 40029c0:	28c00417 	ldw	r3,16(r5)
 40029c4:	20800417 	ldw	r2,16(r4)
 40029c8:	defff604 	addi	sp,sp,-40
 40029cc:	ddc00715 	stw	r23,28(sp)
 40029d0:	dd400515 	stw	r21,20(sp)
 40029d4:	dfc00915 	stw	ra,36(sp)
 40029d8:	df000815 	stw	fp,32(sp)
 40029dc:	dd800615 	stw	r22,24(sp)
 40029e0:	dd000415 	stw	r20,16(sp)
 40029e4:	dcc00315 	stw	r19,12(sp)
 40029e8:	dc800215 	stw	r18,8(sp)
 40029ec:	dc400115 	stw	r17,4(sp)
 40029f0:	dc000015 	stw	r16,0(sp)
 40029f4:	202f883a 	mov	r23,r4
 40029f8:	282b883a 	mov	r21,r5
 40029fc:	10c07416 	blt	r2,r3,4002bd0 <quorem+0x210>
 4002a00:	1c7fffc4 	addi	r17,r3,-1
 4002a04:	8c45883a 	add	r2,r17,r17
 4002a08:	1085883a 	add	r2,r2,r2
 4002a0c:	2c000504 	addi	r16,r5,20
 4002a10:	24c00504 	addi	r19,r4,20
 4002a14:	14ed883a 	add	r22,r2,r19
 4002a18:	80a5883a 	add	r18,r16,r2
 4002a1c:	b7000017 	ldw	fp,0(r22)
 4002a20:	91400017 	ldw	r5,0(r18)
 4002a24:	e009883a 	mov	r4,fp
 4002a28:	29400044 	addi	r5,r5,1
 4002a2c:	40098c40 	call	40098c4 <__udivsi3>
 4002a30:	1029883a 	mov	r20,r2
 4002a34:	10003c1e 	bne	r2,zero,4002b28 <quorem+0x168>
 4002a38:	a80b883a 	mov	r5,r21
 4002a3c:	b809883a 	mov	r4,r23
 4002a40:	4005ec80 	call	4005ec8 <__mcmp>
 4002a44:	10002b16 	blt	r2,zero,4002af4 <quorem+0x134>
 4002a48:	a5000044 	addi	r20,r20,1
 4002a4c:	980f883a 	mov	r7,r19
 4002a50:	0011883a 	mov	r8,zero
 4002a54:	0009883a 	mov	r4,zero
 4002a58:	81400017 	ldw	r5,0(r16)
 4002a5c:	38c00017 	ldw	r3,0(r7)
 4002a60:	84000104 	addi	r16,r16,4
 4002a64:	28bfffcc 	andi	r2,r5,65535
 4002a68:	2085883a 	add	r2,r4,r2
 4002a6c:	11bfffcc 	andi	r6,r2,65535
 4002a70:	193fffcc 	andi	r4,r3,65535
 4002a74:	1004d43a 	srli	r2,r2,16
 4002a78:	280ad43a 	srli	r5,r5,16
 4002a7c:	2189c83a 	sub	r4,r4,r6
 4002a80:	2209883a 	add	r4,r4,r8
 4002a84:	1806d43a 	srli	r3,r3,16
 4002a88:	288b883a 	add	r5,r5,r2
 4002a8c:	200dd43a 	srai	r6,r4,16
 4002a90:	28bfffcc 	andi	r2,r5,65535
 4002a94:	1887c83a 	sub	r3,r3,r2
 4002a98:	1987883a 	add	r3,r3,r6
 4002a9c:	3900000d 	sth	r4,0(r7)
 4002aa0:	38c0008d 	sth	r3,2(r7)
 4002aa4:	2808d43a 	srli	r4,r5,16
 4002aa8:	39c00104 	addi	r7,r7,4
 4002aac:	1811d43a 	srai	r8,r3,16
 4002ab0:	943fe92e 	bgeu	r18,r16,4002a58 <quorem+0x98>
 4002ab4:	8c45883a 	add	r2,r17,r17
 4002ab8:	1085883a 	add	r2,r2,r2
 4002abc:	9885883a 	add	r2,r19,r2
 4002ac0:	10c00017 	ldw	r3,0(r2)
 4002ac4:	18000b1e 	bne	r3,zero,4002af4 <quorem+0x134>
 4002ac8:	113fff04 	addi	r4,r2,-4
 4002acc:	9900082e 	bgeu	r19,r4,4002af0 <quorem+0x130>
 4002ad0:	10bfff17 	ldw	r2,-4(r2)
 4002ad4:	10000326 	beq	r2,zero,4002ae4 <quorem+0x124>
 4002ad8:	00000506 	br	4002af0 <quorem+0x130>
 4002adc:	20800017 	ldw	r2,0(r4)
 4002ae0:	1000031e 	bne	r2,zero,4002af0 <quorem+0x130>
 4002ae4:	213fff04 	addi	r4,r4,-4
 4002ae8:	8c7fffc4 	addi	r17,r17,-1
 4002aec:	993ffb36 	bltu	r19,r4,4002adc <quorem+0x11c>
 4002af0:	bc400415 	stw	r17,16(r23)
 4002af4:	a005883a 	mov	r2,r20
 4002af8:	dfc00917 	ldw	ra,36(sp)
 4002afc:	df000817 	ldw	fp,32(sp)
 4002b00:	ddc00717 	ldw	r23,28(sp)
 4002b04:	dd800617 	ldw	r22,24(sp)
 4002b08:	dd400517 	ldw	r21,20(sp)
 4002b0c:	dd000417 	ldw	r20,16(sp)
 4002b10:	dcc00317 	ldw	r19,12(sp)
 4002b14:	dc800217 	ldw	r18,8(sp)
 4002b18:	dc400117 	ldw	r17,4(sp)
 4002b1c:	dc000017 	ldw	r16,0(sp)
 4002b20:	dec00a04 	addi	sp,sp,40
 4002b24:	f800283a 	ret
 4002b28:	980f883a 	mov	r7,r19
 4002b2c:	8011883a 	mov	r8,r16
 4002b30:	0013883a 	mov	r9,zero
 4002b34:	000d883a 	mov	r6,zero
 4002b38:	40c00017 	ldw	r3,0(r8)
 4002b3c:	39000017 	ldw	r4,0(r7)
 4002b40:	42000104 	addi	r8,r8,4
 4002b44:	18bfffcc 	andi	r2,r3,65535
 4002b48:	a085383a 	mul	r2,r20,r2
 4002b4c:	1806d43a 	srli	r3,r3,16
 4002b50:	217fffcc 	andi	r5,r4,65535
 4002b54:	3085883a 	add	r2,r6,r2
 4002b58:	11bfffcc 	andi	r6,r2,65535
 4002b5c:	a0c7383a 	mul	r3,r20,r3
 4002b60:	1004d43a 	srli	r2,r2,16
 4002b64:	298bc83a 	sub	r5,r5,r6
 4002b68:	2a4b883a 	add	r5,r5,r9
 4002b6c:	2008d43a 	srli	r4,r4,16
 4002b70:	1887883a 	add	r3,r3,r2
 4002b74:	280dd43a 	srai	r6,r5,16
 4002b78:	18bfffcc 	andi	r2,r3,65535
 4002b7c:	2089c83a 	sub	r4,r4,r2
 4002b80:	2189883a 	add	r4,r4,r6
 4002b84:	3900008d 	sth	r4,2(r7)
 4002b88:	3940000d 	sth	r5,0(r7)
 4002b8c:	180cd43a 	srli	r6,r3,16
 4002b90:	39c00104 	addi	r7,r7,4
 4002b94:	2013d43a 	srai	r9,r4,16
 4002b98:	923fe72e 	bgeu	r18,r8,4002b38 <quorem+0x178>
 4002b9c:	e03fa61e 	bne	fp,zero,4002a38 <quorem+0x78>
 4002ba0:	b0ffff04 	addi	r3,r22,-4
 4002ba4:	98c0082e 	bgeu	r19,r3,4002bc8 <quorem+0x208>
 4002ba8:	b0bfff17 	ldw	r2,-4(r22)
 4002bac:	10000326 	beq	r2,zero,4002bbc <quorem+0x1fc>
 4002bb0:	00000506 	br	4002bc8 <quorem+0x208>
 4002bb4:	18800017 	ldw	r2,0(r3)
 4002bb8:	1000031e 	bne	r2,zero,4002bc8 <quorem+0x208>
 4002bbc:	18ffff04 	addi	r3,r3,-4
 4002bc0:	8c7fffc4 	addi	r17,r17,-1
 4002bc4:	98fffb36 	bltu	r19,r3,4002bb4 <quorem+0x1f4>
 4002bc8:	bc400415 	stw	r17,16(r23)
 4002bcc:	003f9a06 	br	4002a38 <quorem+0x78>
 4002bd0:	0005883a 	mov	r2,zero
 4002bd4:	003fc806 	br	4002af8 <quorem+0x138>

04002bd8 <_dtoa_r>:
 4002bd8:	22001017 	ldw	r8,64(r4)
 4002bdc:	deffda04 	addi	sp,sp,-152
 4002be0:	dd402115 	stw	r21,132(sp)
 4002be4:	dd002015 	stw	r20,128(sp)
 4002be8:	dc801e15 	stw	r18,120(sp)
 4002bec:	dc401d15 	stw	r17,116(sp)
 4002bf0:	dfc02515 	stw	ra,148(sp)
 4002bf4:	df002415 	stw	fp,144(sp)
 4002bf8:	ddc02315 	stw	r23,140(sp)
 4002bfc:	dd802215 	stw	r22,136(sp)
 4002c00:	dcc01f15 	stw	r19,124(sp)
 4002c04:	dc001c15 	stw	r16,112(sp)
 4002c08:	d9001615 	stw	r4,88(sp)
 4002c0c:	3023883a 	mov	r17,r6
 4002c10:	2829883a 	mov	r20,r5
 4002c14:	d9c01715 	stw	r7,92(sp)
 4002c18:	dc802817 	ldw	r18,160(sp)
 4002c1c:	302b883a 	mov	r21,r6
 4002c20:	40000a26 	beq	r8,zero,4002c4c <_dtoa_r+0x74>
 4002c24:	20801117 	ldw	r2,68(r4)
 4002c28:	400b883a 	mov	r5,r8
 4002c2c:	40800115 	stw	r2,4(r8)
 4002c30:	20c01117 	ldw	r3,68(r4)
 4002c34:	00800044 	movi	r2,1
 4002c38:	10c4983a 	sll	r2,r2,r3
 4002c3c:	40800215 	stw	r2,8(r8)
 4002c40:	4005d6c0 	call	4005d6c <_Bfree>
 4002c44:	d8c01617 	ldw	r3,88(sp)
 4002c48:	18001015 	stw	zero,64(r3)
 4002c4c:	8800a316 	blt	r17,zero,4002edc <_dtoa_r+0x304>
 4002c50:	90000015 	stw	zero,0(r18)
 4002c54:	a8dffc2c 	andhi	r3,r21,32752
 4002c58:	009ffc34 	movhi	r2,32752
 4002c5c:	18809126 	beq	r3,r2,4002ea4 <_dtoa_r+0x2cc>
 4002c60:	000d883a 	mov	r6,zero
 4002c64:	000f883a 	mov	r7,zero
 4002c68:	a009883a 	mov	r4,r20
 4002c6c:	a80b883a 	mov	r5,r21
 4002c70:	dd001215 	stw	r20,72(sp)
 4002c74:	dd401315 	stw	r21,76(sp)
 4002c78:	40092040 	call	4009204 <__nedf2>
 4002c7c:	1000171e 	bne	r2,zero,4002cdc <_dtoa_r+0x104>
 4002c80:	d9802717 	ldw	r6,156(sp)
 4002c84:	00800044 	movi	r2,1
 4002c88:	30800015 	stw	r2,0(r6)
 4002c8c:	d8802917 	ldw	r2,164(sp)
 4002c90:	10029b26 	beq	r2,zero,4003700 <_dtoa_r+0xb28>
 4002c94:	d9002917 	ldw	r4,164(sp)
 4002c98:	00810074 	movhi	r2,1025
 4002c9c:	109ab244 	addi	r2,r2,27337
 4002ca0:	10ffffc4 	addi	r3,r2,-1
 4002ca4:	20800015 	stw	r2,0(r4)
 4002ca8:	1805883a 	mov	r2,r3
 4002cac:	dfc02517 	ldw	ra,148(sp)
 4002cb0:	df002417 	ldw	fp,144(sp)
 4002cb4:	ddc02317 	ldw	r23,140(sp)
 4002cb8:	dd802217 	ldw	r22,136(sp)
 4002cbc:	dd402117 	ldw	r21,132(sp)
 4002cc0:	dd002017 	ldw	r20,128(sp)
 4002cc4:	dcc01f17 	ldw	r19,124(sp)
 4002cc8:	dc801e17 	ldw	r18,120(sp)
 4002ccc:	dc401d17 	ldw	r17,116(sp)
 4002cd0:	dc001c17 	ldw	r16,112(sp)
 4002cd4:	dec02604 	addi	sp,sp,152
 4002cd8:	f800283a 	ret
 4002cdc:	d9001617 	ldw	r4,88(sp)
 4002ce0:	d9401217 	ldw	r5,72(sp)
 4002ce4:	d8800104 	addi	r2,sp,4
 4002ce8:	a80d883a 	mov	r6,r21
 4002cec:	d9c00204 	addi	r7,sp,8
 4002cf0:	d8800015 	stw	r2,0(sp)
 4002cf4:	40063a80 	call	40063a8 <__d2b>
 4002cf8:	d8800715 	stw	r2,28(sp)
 4002cfc:	a804d53a 	srli	r2,r21,20
 4002d00:	1101ffcc 	andi	r4,r2,2047
 4002d04:	20008626 	beq	r4,zero,4002f20 <_dtoa_r+0x348>
 4002d08:	d8c01217 	ldw	r3,72(sp)
 4002d0c:	00800434 	movhi	r2,16
 4002d10:	10bfffc4 	addi	r2,r2,-1
 4002d14:	ddc00117 	ldw	r23,4(sp)
 4002d18:	a884703a 	and	r2,r21,r2
 4002d1c:	1811883a 	mov	r8,r3
 4002d20:	124ffc34 	orhi	r9,r2,16368
 4002d24:	25bf0044 	addi	r22,r4,-1023
 4002d28:	d8000815 	stw	zero,32(sp)
 4002d2c:	0005883a 	mov	r2,zero
 4002d30:	00cffe34 	movhi	r3,16376
 4002d34:	480b883a 	mov	r5,r9
 4002d38:	4009883a 	mov	r4,r8
 4002d3c:	180f883a 	mov	r7,r3
 4002d40:	100d883a 	mov	r6,r2
 4002d44:	4008a6c0 	call	4008a6c <__subdf3>
 4002d48:	0218dbf4 	movhi	r8,25455
 4002d4c:	4210d844 	addi	r8,r8,17249
 4002d50:	024ff4f4 	movhi	r9,16339
 4002d54:	4a61e9c4 	addi	r9,r9,-30809
 4002d58:	480f883a 	mov	r7,r9
 4002d5c:	400d883a 	mov	r6,r8
 4002d60:	180b883a 	mov	r5,r3
 4002d64:	1009883a 	mov	r4,r2
 4002d68:	4008b600 	call	4008b60 <__muldf3>
 4002d6c:	0222d874 	movhi	r8,35681
 4002d70:	42322cc4 	addi	r8,r8,-14157
 4002d74:	024ff1f4 	movhi	r9,16327
 4002d78:	4a628a04 	addi	r9,r9,-30168
 4002d7c:	480f883a 	mov	r7,r9
 4002d80:	400d883a 	mov	r6,r8
 4002d84:	180b883a 	mov	r5,r3
 4002d88:	1009883a 	mov	r4,r2
 4002d8c:	4008aec0 	call	4008aec <__adddf3>
 4002d90:	b009883a 	mov	r4,r22
 4002d94:	1021883a 	mov	r16,r2
 4002d98:	1823883a 	mov	r17,r3
 4002d9c:	40094240 	call	4009424 <__floatsidf>
 4002da0:	021427f4 	movhi	r8,20639
 4002da4:	421e7ec4 	addi	r8,r8,31227
 4002da8:	024ff4f4 	movhi	r9,16339
 4002dac:	4a5104c4 	addi	r9,r9,17427
 4002db0:	480f883a 	mov	r7,r9
 4002db4:	400d883a 	mov	r6,r8
 4002db8:	180b883a 	mov	r5,r3
 4002dbc:	1009883a 	mov	r4,r2
 4002dc0:	4008b600 	call	4008b60 <__muldf3>
 4002dc4:	180f883a 	mov	r7,r3
 4002dc8:	880b883a 	mov	r5,r17
 4002dcc:	100d883a 	mov	r6,r2
 4002dd0:	8009883a 	mov	r4,r16
 4002dd4:	4008aec0 	call	4008aec <__adddf3>
 4002dd8:	1009883a 	mov	r4,r2
 4002ddc:	180b883a 	mov	r5,r3
 4002de0:	1021883a 	mov	r16,r2
 4002de4:	1823883a 	mov	r17,r3
 4002de8:	400951c0 	call	400951c <__fixdfsi>
 4002dec:	000d883a 	mov	r6,zero
 4002df0:	000f883a 	mov	r7,zero
 4002df4:	8009883a 	mov	r4,r16
 4002df8:	880b883a 	mov	r5,r17
 4002dfc:	d8800d15 	stw	r2,52(sp)
 4002e00:	400939c0 	call	400939c <__ltdf2>
 4002e04:	10031716 	blt	r2,zero,4003a64 <_dtoa_r+0xe8c>
 4002e08:	d8c00d17 	ldw	r3,52(sp)
 4002e0c:	00800584 	movi	r2,22
 4002e10:	10c1482e 	bgeu	r2,r3,4003334 <_dtoa_r+0x75c>
 4002e14:	01000044 	movi	r4,1
 4002e18:	d9000c15 	stw	r4,48(sp)
 4002e1c:	bd85c83a 	sub	r2,r23,r22
 4002e20:	11bfffc4 	addi	r6,r2,-1
 4002e24:	30030b16 	blt	r6,zero,4003a54 <_dtoa_r+0xe7c>
 4002e28:	d9800a15 	stw	r6,40(sp)
 4002e2c:	d8001115 	stw	zero,68(sp)
 4002e30:	d8c00d17 	ldw	r3,52(sp)
 4002e34:	1802ff16 	blt	r3,zero,4003a34 <_dtoa_r+0xe5c>
 4002e38:	d9000a17 	ldw	r4,40(sp)
 4002e3c:	d8c00915 	stw	r3,36(sp)
 4002e40:	d8001015 	stw	zero,64(sp)
 4002e44:	20c9883a 	add	r4,r4,r3
 4002e48:	d9000a15 	stw	r4,40(sp)
 4002e4c:	d9001717 	ldw	r4,92(sp)
 4002e50:	00800244 	movi	r2,9
 4002e54:	11004636 	bltu	r2,r4,4002f70 <_dtoa_r+0x398>
 4002e58:	00800144 	movi	r2,5
 4002e5c:	11020416 	blt	r2,r4,4003670 <_dtoa_r+0xa98>
 4002e60:	04400044 	movi	r17,1
 4002e64:	d8c01717 	ldw	r3,92(sp)
 4002e68:	00800144 	movi	r2,5
 4002e6c:	10c1ed36 	bltu	r2,r3,4003624 <_dtoa_r+0xa4c>
 4002e70:	18c5883a 	add	r2,r3,r3
 4002e74:	1085883a 	add	r2,r2,r2
 4002e78:	00c10034 	movhi	r3,1024
 4002e7c:	18cba304 	addi	r3,r3,11916
 4002e80:	10c5883a 	add	r2,r2,r3
 4002e84:	11000017 	ldw	r4,0(r2)
 4002e88:	2000683a 	jmp	r4
 4002e8c:	04002f78 	rdprs	r16,zero,189
 4002e90:	04002f78 	rdprs	r16,zero,189
 4002e94:	04003978 	rdprs	r16,zero,229
 4002e98:	04003950 	cmplti	r16,zero,229
 4002e9c:	04003994 	movui	r16,230
 4002ea0:	040039a0 	cmpeqi	r16,zero,230
 4002ea4:	d9002717 	ldw	r4,156(sp)
 4002ea8:	0089c3c4 	movi	r2,9999
 4002eac:	20800015 	stw	r2,0(r4)
 4002eb0:	a0001026 	beq	r20,zero,4002ef4 <_dtoa_r+0x31c>
 4002eb4:	00c10074 	movhi	r3,1025
 4002eb8:	18dabe04 	addi	r3,r3,27384
 4002ebc:	d9802917 	ldw	r6,164(sp)
 4002ec0:	303f7926 	beq	r6,zero,4002ca8 <_dtoa_r+0xd0>
 4002ec4:	188000c7 	ldb	r2,3(r3)
 4002ec8:	190000c4 	addi	r4,r3,3
 4002ecc:	1000101e 	bne	r2,zero,4002f10 <_dtoa_r+0x338>
 4002ed0:	d8802917 	ldw	r2,164(sp)
 4002ed4:	11000015 	stw	r4,0(r2)
 4002ed8:	003f7306 	br	4002ca8 <_dtoa_r+0xd0>
 4002edc:	00a00034 	movhi	r2,32768
 4002ee0:	10bfffc4 	addi	r2,r2,-1
 4002ee4:	00c00044 	movi	r3,1
 4002ee8:	88aa703a 	and	r21,r17,r2
 4002eec:	90c00015 	stw	r3,0(r18)
 4002ef0:	003f5806 	br	4002c54 <_dtoa_r+0x7c>
 4002ef4:	00800434 	movhi	r2,16
 4002ef8:	10bfffc4 	addi	r2,r2,-1
 4002efc:	a884703a 	and	r2,r21,r2
 4002f00:	103fec1e 	bne	r2,zero,4002eb4 <_dtoa_r+0x2dc>
 4002f04:	00c10074 	movhi	r3,1025
 4002f08:	18dabb04 	addi	r3,r3,27372
 4002f0c:	003feb06 	br	4002ebc <_dtoa_r+0x2e4>
 4002f10:	d8802917 	ldw	r2,164(sp)
 4002f14:	19000204 	addi	r4,r3,8
 4002f18:	11000015 	stw	r4,0(r2)
 4002f1c:	003f6206 	br	4002ca8 <_dtoa_r+0xd0>
 4002f20:	ddc00117 	ldw	r23,4(sp)
 4002f24:	d8800217 	ldw	r2,8(sp)
 4002f28:	01000804 	movi	r4,32
 4002f2c:	b8c10c84 	addi	r3,r23,1074
 4002f30:	18a3883a 	add	r17,r3,r2
 4002f34:	2441b80e 	bge	r4,r17,4003618 <_dtoa_r+0xa40>
 4002f38:	00c01004 	movi	r3,64
 4002f3c:	1c47c83a 	sub	r3,r3,r17
 4002f40:	88bff804 	addi	r2,r17,-32
 4002f44:	a8c6983a 	sll	r3,r21,r3
 4002f48:	a084d83a 	srl	r2,r20,r2
 4002f4c:	1888b03a 	or	r4,r3,r2
 4002f50:	40095f40 	call	40095f4 <__floatunsidf>
 4002f54:	1011883a 	mov	r8,r2
 4002f58:	00bf8434 	movhi	r2,65040
 4002f5c:	01000044 	movi	r4,1
 4002f60:	10d3883a 	add	r9,r2,r3
 4002f64:	8dbef344 	addi	r22,r17,-1075
 4002f68:	d9000815 	stw	r4,32(sp)
 4002f6c:	003f6f06 	br	4002d2c <_dtoa_r+0x154>
 4002f70:	d8001715 	stw	zero,92(sp)
 4002f74:	04400044 	movi	r17,1
 4002f78:	00bfffc4 	movi	r2,-1
 4002f7c:	00c00044 	movi	r3,1
 4002f80:	d8800e15 	stw	r2,56(sp)
 4002f84:	d8002615 	stw	zero,152(sp)
 4002f88:	d8800f15 	stw	r2,60(sp)
 4002f8c:	d8c00b15 	stw	r3,44(sp)
 4002f90:	1021883a 	mov	r16,r2
 4002f94:	d8801617 	ldw	r2,88(sp)
 4002f98:	10001115 	stw	zero,68(r2)
 4002f9c:	d8801617 	ldw	r2,88(sp)
 4002fa0:	11401117 	ldw	r5,68(r2)
 4002fa4:	1009883a 	mov	r4,r2
 4002fa8:	40062ec0 	call	40062ec <_Balloc>
 4002fac:	d8c01617 	ldw	r3,88(sp)
 4002fb0:	d8800515 	stw	r2,20(sp)
 4002fb4:	18801015 	stw	r2,64(r3)
 4002fb8:	00800384 	movi	r2,14
 4002fbc:	14006836 	bltu	r2,r16,4003160 <_dtoa_r+0x588>
 4002fc0:	8805003a 	cmpeq	r2,r17,zero
 4002fc4:	1000661e 	bne	r2,zero,4003160 <_dtoa_r+0x588>
 4002fc8:	d9000d17 	ldw	r4,52(sp)
 4002fcc:	0102300e 	bge	zero,r4,4003890 <_dtoa_r+0xcb8>
 4002fd0:	208003cc 	andi	r2,r4,15
 4002fd4:	100490fa 	slli	r2,r2,3
 4002fd8:	2025d13a 	srai	r18,r4,4
 4002fdc:	00c10074 	movhi	r3,1025
 4002fe0:	18dad004 	addi	r3,r3,27456
 4002fe4:	10c5883a 	add	r2,r2,r3
 4002fe8:	90c0040c 	andi	r3,r18,16
 4002fec:	14000017 	ldw	r16,0(r2)
 4002ff0:	14400117 	ldw	r17,4(r2)
 4002ff4:	18036a1e 	bne	r3,zero,4003da0 <_dtoa_r+0x11c8>
 4002ff8:	05800084 	movi	r22,2
 4002ffc:	90001026 	beq	r18,zero,4003040 <_dtoa_r+0x468>
 4003000:	04c10074 	movhi	r19,1025
 4003004:	9cdb0204 	addi	r19,r19,27656
 4003008:	9080004c 	andi	r2,r18,1
 400300c:	1005003a 	cmpeq	r2,r2,zero
 4003010:	1000081e 	bne	r2,zero,4003034 <_dtoa_r+0x45c>
 4003014:	99800017 	ldw	r6,0(r19)
 4003018:	99c00117 	ldw	r7,4(r19)
 400301c:	880b883a 	mov	r5,r17
 4003020:	8009883a 	mov	r4,r16
 4003024:	4008b600 	call	4008b60 <__muldf3>
 4003028:	1021883a 	mov	r16,r2
 400302c:	b5800044 	addi	r22,r22,1
 4003030:	1823883a 	mov	r17,r3
 4003034:	9025d07a 	srai	r18,r18,1
 4003038:	9cc00204 	addi	r19,r19,8
 400303c:	903ff21e 	bne	r18,zero,4003008 <_dtoa_r+0x430>
 4003040:	a80b883a 	mov	r5,r21
 4003044:	a009883a 	mov	r4,r20
 4003048:	880f883a 	mov	r7,r17
 400304c:	800d883a 	mov	r6,r16
 4003050:	4008f240 	call	4008f24 <__divdf3>
 4003054:	1029883a 	mov	r20,r2
 4003058:	182b883a 	mov	r21,r3
 400305c:	d8c00c17 	ldw	r3,48(sp)
 4003060:	1805003a 	cmpeq	r2,r3,zero
 4003064:	1000081e 	bne	r2,zero,4003088 <_dtoa_r+0x4b0>
 4003068:	0005883a 	mov	r2,zero
 400306c:	00cffc34 	movhi	r3,16368
 4003070:	180f883a 	mov	r7,r3
 4003074:	a009883a 	mov	r4,r20
 4003078:	a80b883a 	mov	r5,r21
 400307c:	100d883a 	mov	r6,r2
 4003080:	400939c0 	call	400939c <__ltdf2>
 4003084:	1003fe16 	blt	r2,zero,4004080 <_dtoa_r+0x14a8>
 4003088:	b009883a 	mov	r4,r22
 400308c:	40094240 	call	4009424 <__floatsidf>
 4003090:	180b883a 	mov	r5,r3
 4003094:	1009883a 	mov	r4,r2
 4003098:	a00d883a 	mov	r6,r20
 400309c:	a80f883a 	mov	r7,r21
 40030a0:	4008b600 	call	4008b60 <__muldf3>
 40030a4:	0011883a 	mov	r8,zero
 40030a8:	02500734 	movhi	r9,16412
 40030ac:	1009883a 	mov	r4,r2
 40030b0:	180b883a 	mov	r5,r3
 40030b4:	480f883a 	mov	r7,r9
 40030b8:	400d883a 	mov	r6,r8
 40030bc:	4008aec0 	call	4008aec <__adddf3>
 40030c0:	d9000f17 	ldw	r4,60(sp)
 40030c4:	102d883a 	mov	r22,r2
 40030c8:	00bf3034 	movhi	r2,64704
 40030cc:	18b9883a 	add	fp,r3,r2
 40030d0:	e02f883a 	mov	r23,fp
 40030d4:	20028f1e 	bne	r4,zero,4003b14 <_dtoa_r+0xf3c>
 40030d8:	0005883a 	mov	r2,zero
 40030dc:	00d00534 	movhi	r3,16404
 40030e0:	a009883a 	mov	r4,r20
 40030e4:	a80b883a 	mov	r5,r21
 40030e8:	180f883a 	mov	r7,r3
 40030ec:	100d883a 	mov	r6,r2
 40030f0:	4008a6c0 	call	4008a6c <__subdf3>
 40030f4:	1009883a 	mov	r4,r2
 40030f8:	e00f883a 	mov	r7,fp
 40030fc:	180b883a 	mov	r5,r3
 4003100:	b00d883a 	mov	r6,r22
 4003104:	1025883a 	mov	r18,r2
 4003108:	1827883a 	mov	r19,r3
 400310c:	400928c0 	call	400928c <__gtdf2>
 4003110:	00834f16 	blt	zero,r2,4003e50 <_dtoa_r+0x1278>
 4003114:	e0e0003c 	xorhi	r3,fp,32768
 4003118:	9009883a 	mov	r4,r18
 400311c:	980b883a 	mov	r5,r19
 4003120:	180f883a 	mov	r7,r3
 4003124:	b00d883a 	mov	r6,r22
 4003128:	400939c0 	call	400939c <__ltdf2>
 400312c:	1000080e 	bge	r2,zero,4003150 <_dtoa_r+0x578>
 4003130:	0027883a 	mov	r19,zero
 4003134:	0025883a 	mov	r18,zero
 4003138:	d8802617 	ldw	r2,152(sp)
 400313c:	df000517 	ldw	fp,20(sp)
 4003140:	d8000615 	stw	zero,24(sp)
 4003144:	0084303a 	nor	r2,zero,r2
 4003148:	d8800d15 	stw	r2,52(sp)
 400314c:	00019b06 	br	40037bc <_dtoa_r+0xbe4>
 4003150:	d9801217 	ldw	r6,72(sp)
 4003154:	d8801317 	ldw	r2,76(sp)
 4003158:	3029883a 	mov	r20,r6
 400315c:	102b883a 	mov	r21,r2
 4003160:	d8c00217 	ldw	r3,8(sp)
 4003164:	18008516 	blt	r3,zero,400337c <_dtoa_r+0x7a4>
 4003168:	d9000d17 	ldw	r4,52(sp)
 400316c:	00800384 	movi	r2,14
 4003170:	11008216 	blt	r2,r4,400337c <_dtoa_r+0x7a4>
 4003174:	200490fa 	slli	r2,r4,3
 4003178:	d9802617 	ldw	r6,152(sp)
 400317c:	00c10074 	movhi	r3,1025
 4003180:	18dad004 	addi	r3,r3,27456
 4003184:	10c5883a 	add	r2,r2,r3
 4003188:	14800017 	ldw	r18,0(r2)
 400318c:	14c00117 	ldw	r19,4(r2)
 4003190:	30031e16 	blt	r6,zero,4003e0c <_dtoa_r+0x1234>
 4003194:	d9000517 	ldw	r4,20(sp)
 4003198:	d8c00f17 	ldw	r3,60(sp)
 400319c:	a823883a 	mov	r17,r21
 40031a0:	a021883a 	mov	r16,r20
 40031a4:	192b883a 	add	r21,r3,r4
 40031a8:	2039883a 	mov	fp,r4
 40031ac:	00000f06 	br	40031ec <_dtoa_r+0x614>
 40031b0:	0005883a 	mov	r2,zero
 40031b4:	00d00934 	movhi	r3,16420
 40031b8:	5009883a 	mov	r4,r10
 40031bc:	580b883a 	mov	r5,r11
 40031c0:	180f883a 	mov	r7,r3
 40031c4:	100d883a 	mov	r6,r2
 40031c8:	4008b600 	call	4008b60 <__muldf3>
 40031cc:	180b883a 	mov	r5,r3
 40031d0:	000d883a 	mov	r6,zero
 40031d4:	000f883a 	mov	r7,zero
 40031d8:	1009883a 	mov	r4,r2
 40031dc:	1021883a 	mov	r16,r2
 40031e0:	1823883a 	mov	r17,r3
 40031e4:	40092040 	call	4009204 <__nedf2>
 40031e8:	10004526 	beq	r2,zero,4003300 <_dtoa_r+0x728>
 40031ec:	900d883a 	mov	r6,r18
 40031f0:	980f883a 	mov	r7,r19
 40031f4:	8009883a 	mov	r4,r16
 40031f8:	880b883a 	mov	r5,r17
 40031fc:	4008f240 	call	4008f24 <__divdf3>
 4003200:	180b883a 	mov	r5,r3
 4003204:	1009883a 	mov	r4,r2
 4003208:	400951c0 	call	400951c <__fixdfsi>
 400320c:	1009883a 	mov	r4,r2
 4003210:	1029883a 	mov	r20,r2
 4003214:	40094240 	call	4009424 <__floatsidf>
 4003218:	180f883a 	mov	r7,r3
 400321c:	9009883a 	mov	r4,r18
 4003220:	980b883a 	mov	r5,r19
 4003224:	100d883a 	mov	r6,r2
 4003228:	4008b600 	call	4008b60 <__muldf3>
 400322c:	180f883a 	mov	r7,r3
 4003230:	880b883a 	mov	r5,r17
 4003234:	8009883a 	mov	r4,r16
 4003238:	100d883a 	mov	r6,r2
 400323c:	4008a6c0 	call	4008a6c <__subdf3>
 4003240:	1015883a 	mov	r10,r2
 4003244:	a0800c04 	addi	r2,r20,48
 4003248:	e0800005 	stb	r2,0(fp)
 400324c:	e7000044 	addi	fp,fp,1
 4003250:	1817883a 	mov	r11,r3
 4003254:	e57fd61e 	bne	fp,r21,40031b0 <_dtoa_r+0x5d8>
 4003258:	500d883a 	mov	r6,r10
 400325c:	180f883a 	mov	r7,r3
 4003260:	5009883a 	mov	r4,r10
 4003264:	180b883a 	mov	r5,r3
 4003268:	4008aec0 	call	4008aec <__adddf3>
 400326c:	100d883a 	mov	r6,r2
 4003270:	9009883a 	mov	r4,r18
 4003274:	980b883a 	mov	r5,r19
 4003278:	180f883a 	mov	r7,r3
 400327c:	1021883a 	mov	r16,r2
 4003280:	1823883a 	mov	r17,r3
 4003284:	400939c0 	call	400939c <__ltdf2>
 4003288:	10000816 	blt	r2,zero,40032ac <_dtoa_r+0x6d4>
 400328c:	980b883a 	mov	r5,r19
 4003290:	800d883a 	mov	r6,r16
 4003294:	880f883a 	mov	r7,r17
 4003298:	9009883a 	mov	r4,r18
 400329c:	400917c0 	call	400917c <__eqdf2>
 40032a0:	1000171e 	bne	r2,zero,4003300 <_dtoa_r+0x728>
 40032a4:	a080004c 	andi	r2,r20,1
 40032a8:	10001526 	beq	r2,zero,4003300 <_dtoa_r+0x728>
 40032ac:	d8800d17 	ldw	r2,52(sp)
 40032b0:	d8800415 	stw	r2,16(sp)
 40032b4:	e009883a 	mov	r4,fp
 40032b8:	213fffc4 	addi	r4,r4,-1
 40032bc:	20c00007 	ldb	r3,0(r4)
 40032c0:	00800e44 	movi	r2,57
 40032c4:	1880081e 	bne	r3,r2,40032e8 <_dtoa_r+0x710>
 40032c8:	d8800517 	ldw	r2,20(sp)
 40032cc:	113ffa1e 	bne	r2,r4,40032b8 <_dtoa_r+0x6e0>
 40032d0:	d8c00417 	ldw	r3,16(sp)
 40032d4:	d9800517 	ldw	r6,20(sp)
 40032d8:	00800c04 	movi	r2,48
 40032dc:	18c00044 	addi	r3,r3,1
 40032e0:	d8c00415 	stw	r3,16(sp)
 40032e4:	30800005 	stb	r2,0(r6)
 40032e8:	20800003 	ldbu	r2,0(r4)
 40032ec:	d8c00417 	ldw	r3,16(sp)
 40032f0:	27000044 	addi	fp,r4,1
 40032f4:	10800044 	addi	r2,r2,1
 40032f8:	d8c00d15 	stw	r3,52(sp)
 40032fc:	20800005 	stb	r2,0(r4)
 4003300:	d9001617 	ldw	r4,88(sp)
 4003304:	d9400717 	ldw	r5,28(sp)
 4003308:	4005d6c0 	call	4005d6c <_Bfree>
 400330c:	e0000005 	stb	zero,0(fp)
 4003310:	d9800d17 	ldw	r6,52(sp)
 4003314:	d8c02717 	ldw	r3,156(sp)
 4003318:	d9002917 	ldw	r4,164(sp)
 400331c:	30800044 	addi	r2,r6,1
 4003320:	18800015 	stw	r2,0(r3)
 4003324:	20029c26 	beq	r4,zero,4003d98 <_dtoa_r+0x11c0>
 4003328:	d8c00517 	ldw	r3,20(sp)
 400332c:	27000015 	stw	fp,0(r4)
 4003330:	003e5d06 	br	4002ca8 <_dtoa_r+0xd0>
 4003334:	d9800d17 	ldw	r6,52(sp)
 4003338:	00c10074 	movhi	r3,1025
 400333c:	18dad004 	addi	r3,r3,27456
 4003340:	d9001217 	ldw	r4,72(sp)
 4003344:	300490fa 	slli	r2,r6,3
 4003348:	d9401317 	ldw	r5,76(sp)
 400334c:	10c5883a 	add	r2,r2,r3
 4003350:	12000017 	ldw	r8,0(r2)
 4003354:	12400117 	ldw	r9,4(r2)
 4003358:	400d883a 	mov	r6,r8
 400335c:	480f883a 	mov	r7,r9
 4003360:	400939c0 	call	400939c <__ltdf2>
 4003364:	1000030e 	bge	r2,zero,4003374 <_dtoa_r+0x79c>
 4003368:	d8800d17 	ldw	r2,52(sp)
 400336c:	10bfffc4 	addi	r2,r2,-1
 4003370:	d8800d15 	stw	r2,52(sp)
 4003374:	d8000c15 	stw	zero,48(sp)
 4003378:	003ea806 	br	4002e1c <_dtoa_r+0x244>
 400337c:	d9000b17 	ldw	r4,44(sp)
 4003380:	202cc03a 	cmpne	r22,r4,zero
 4003384:	b000c71e 	bne	r22,zero,40036a4 <_dtoa_r+0xacc>
 4003388:	dc001117 	ldw	r16,68(sp)
 400338c:	dc801017 	ldw	r18,64(sp)
 4003390:	0027883a 	mov	r19,zero
 4003394:	04000b0e 	bge	zero,r16,40033c4 <_dtoa_r+0x7ec>
 4003398:	d8c00a17 	ldw	r3,40(sp)
 400339c:	00c0090e 	bge	zero,r3,40033c4 <_dtoa_r+0x7ec>
 40033a0:	8005883a 	mov	r2,r16
 40033a4:	1c011316 	blt	r3,r16,40037f4 <_dtoa_r+0xc1c>
 40033a8:	d9000a17 	ldw	r4,40(sp)
 40033ac:	d9801117 	ldw	r6,68(sp)
 40033b0:	80a1c83a 	sub	r16,r16,r2
 40033b4:	2089c83a 	sub	r4,r4,r2
 40033b8:	308dc83a 	sub	r6,r6,r2
 40033bc:	d9000a15 	stw	r4,40(sp)
 40033c0:	d9801115 	stw	r6,68(sp)
 40033c4:	d8801017 	ldw	r2,64(sp)
 40033c8:	0080150e 	bge	zero,r2,4003420 <_dtoa_r+0x848>
 40033cc:	d8c00b17 	ldw	r3,44(sp)
 40033d0:	1805003a 	cmpeq	r2,r3,zero
 40033d4:	1001c91e 	bne	r2,zero,4003afc <_dtoa_r+0xf24>
 40033d8:	04800e0e 	bge	zero,r18,4003414 <_dtoa_r+0x83c>
 40033dc:	d9001617 	ldw	r4,88(sp)
 40033e0:	980b883a 	mov	r5,r19
 40033e4:	900d883a 	mov	r6,r18
 40033e8:	4006b200 	call	4006b20 <__pow5mult>
 40033ec:	d9001617 	ldw	r4,88(sp)
 40033f0:	d9800717 	ldw	r6,28(sp)
 40033f4:	100b883a 	mov	r5,r2
 40033f8:	1027883a 	mov	r19,r2
 40033fc:	40067fc0 	call	40067fc <__multiply>
 4003400:	d9001617 	ldw	r4,88(sp)
 4003404:	d9400717 	ldw	r5,28(sp)
 4003408:	1023883a 	mov	r17,r2
 400340c:	4005d6c0 	call	4005d6c <_Bfree>
 4003410:	dc400715 	stw	r17,28(sp)
 4003414:	d9001017 	ldw	r4,64(sp)
 4003418:	248dc83a 	sub	r6,r4,r18
 400341c:	30010e1e 	bne	r6,zero,4003858 <_dtoa_r+0xc80>
 4003420:	d9001617 	ldw	r4,88(sp)
 4003424:	04400044 	movi	r17,1
 4003428:	880b883a 	mov	r5,r17
 400342c:	40069e40 	call	40069e4 <__i2b>
 4003430:	d9800917 	ldw	r6,36(sp)
 4003434:	1025883a 	mov	r18,r2
 4003438:	0180040e 	bge	zero,r6,400344c <_dtoa_r+0x874>
 400343c:	d9001617 	ldw	r4,88(sp)
 4003440:	100b883a 	mov	r5,r2
 4003444:	4006b200 	call	4006b20 <__pow5mult>
 4003448:	1025883a 	mov	r18,r2
 400344c:	d8801717 	ldw	r2,92(sp)
 4003450:	8880f30e 	bge	r17,r2,4003820 <_dtoa_r+0xc48>
 4003454:	0023883a 	mov	r17,zero
 4003458:	d9800917 	ldw	r6,36(sp)
 400345c:	30019e1e 	bne	r6,zero,4003ad8 <_dtoa_r+0xf00>
 4003460:	00c00044 	movi	r3,1
 4003464:	d9000a17 	ldw	r4,40(sp)
 4003468:	20c5883a 	add	r2,r4,r3
 400346c:	10c007cc 	andi	r3,r2,31
 4003470:	1800841e 	bne	r3,zero,4003684 <_dtoa_r+0xaac>
 4003474:	00800704 	movi	r2,28
 4003478:	d9000a17 	ldw	r4,40(sp)
 400347c:	d9801117 	ldw	r6,68(sp)
 4003480:	80a1883a 	add	r16,r16,r2
 4003484:	2089883a 	add	r4,r4,r2
 4003488:	308d883a 	add	r6,r6,r2
 400348c:	d9000a15 	stw	r4,40(sp)
 4003490:	d9801115 	stw	r6,68(sp)
 4003494:	d8801117 	ldw	r2,68(sp)
 4003498:	0080050e 	bge	zero,r2,40034b0 <_dtoa_r+0x8d8>
 400349c:	d9400717 	ldw	r5,28(sp)
 40034a0:	d9001617 	ldw	r4,88(sp)
 40034a4:	100d883a 	mov	r6,r2
 40034a8:	40066b00 	call	40066b0 <__lshift>
 40034ac:	d8800715 	stw	r2,28(sp)
 40034b0:	d8c00a17 	ldw	r3,40(sp)
 40034b4:	00c0050e 	bge	zero,r3,40034cc <_dtoa_r+0x8f4>
 40034b8:	d9001617 	ldw	r4,88(sp)
 40034bc:	900b883a 	mov	r5,r18
 40034c0:	180d883a 	mov	r6,r3
 40034c4:	40066b00 	call	40066b0 <__lshift>
 40034c8:	1025883a 	mov	r18,r2
 40034cc:	d9000c17 	ldw	r4,48(sp)
 40034d0:	2005003a 	cmpeq	r2,r4,zero
 40034d4:	10016f26 	beq	r2,zero,4003a94 <_dtoa_r+0xebc>
 40034d8:	d9000f17 	ldw	r4,60(sp)
 40034dc:	0102170e 	bge	zero,r4,4003d3c <_dtoa_r+0x1164>
 40034e0:	d9800b17 	ldw	r6,44(sp)
 40034e4:	3005003a 	cmpeq	r2,r6,zero
 40034e8:	1000881e 	bne	r2,zero,400370c <_dtoa_r+0xb34>
 40034ec:	0400050e 	bge	zero,r16,4003504 <_dtoa_r+0x92c>
 40034f0:	d9001617 	ldw	r4,88(sp)
 40034f4:	980b883a 	mov	r5,r19
 40034f8:	800d883a 	mov	r6,r16
 40034fc:	40066b00 	call	40066b0 <__lshift>
 4003500:	1027883a 	mov	r19,r2
 4003504:	8804c03a 	cmpne	r2,r17,zero
 4003508:	1002541e 	bne	r2,zero,4003e5c <_dtoa_r+0x1284>
 400350c:	980b883a 	mov	r5,r19
 4003510:	dd800517 	ldw	r22,20(sp)
 4003514:	dcc00615 	stw	r19,24(sp)
 4003518:	a700004c 	andi	fp,r20,1
 400351c:	2827883a 	mov	r19,r5
 4003520:	d9000717 	ldw	r4,28(sp)
 4003524:	900b883a 	mov	r5,r18
 4003528:	40029c00 	call	40029c0 <quorem>
 400352c:	d9000717 	ldw	r4,28(sp)
 4003530:	d9400617 	ldw	r5,24(sp)
 4003534:	1023883a 	mov	r17,r2
 4003538:	8dc00c04 	addi	r23,r17,48
 400353c:	4005ec80 	call	4005ec8 <__mcmp>
 4003540:	d9001617 	ldw	r4,88(sp)
 4003544:	900b883a 	mov	r5,r18
 4003548:	980d883a 	mov	r6,r19
 400354c:	1029883a 	mov	r20,r2
 4003550:	40065240 	call	4006524 <__mdiff>
 4003554:	102b883a 	mov	r21,r2
 4003558:	10800317 	ldw	r2,12(r2)
 400355c:	1001281e 	bne	r2,zero,4003a00 <_dtoa_r+0xe28>
 4003560:	d9000717 	ldw	r4,28(sp)
 4003564:	a80b883a 	mov	r5,r21
 4003568:	4005ec80 	call	4005ec8 <__mcmp>
 400356c:	d9001617 	ldw	r4,88(sp)
 4003570:	1021883a 	mov	r16,r2
 4003574:	a80b883a 	mov	r5,r21
 4003578:	4005d6c0 	call	4005d6c <_Bfree>
 400357c:	8000041e 	bne	r16,zero,4003590 <_dtoa_r+0x9b8>
 4003580:	d8801717 	ldw	r2,92(sp)
 4003584:	1000021e 	bne	r2,zero,4003590 <_dtoa_r+0x9b8>
 4003588:	e004c03a 	cmpne	r2,fp,zero
 400358c:	10011726 	beq	r2,zero,40039ec <_dtoa_r+0xe14>
 4003590:	a0010616 	blt	r20,zero,40039ac <_dtoa_r+0xdd4>
 4003594:	a000041e 	bne	r20,zero,40035a8 <_dtoa_r+0x9d0>
 4003598:	d8c01717 	ldw	r3,92(sp)
 400359c:	1800021e 	bne	r3,zero,40035a8 <_dtoa_r+0x9d0>
 40035a0:	e004c03a 	cmpne	r2,fp,zero
 40035a4:	10010126 	beq	r2,zero,40039ac <_dtoa_r+0xdd4>
 40035a8:	04023d16 	blt	zero,r16,4003ea0 <_dtoa_r+0x12c8>
 40035ac:	b5c00005 	stb	r23,0(r22)
 40035b0:	d9800517 	ldw	r6,20(sp)
 40035b4:	d9000f17 	ldw	r4,60(sp)
 40035b8:	b5800044 	addi	r22,r22,1
 40035bc:	3105883a 	add	r2,r6,r4
 40035c0:	b0806526 	beq	r22,r2,4003758 <_dtoa_r+0xb80>
 40035c4:	d9400717 	ldw	r5,28(sp)
 40035c8:	d9001617 	ldw	r4,88(sp)
 40035cc:	01800284 	movi	r6,10
 40035d0:	000f883a 	mov	r7,zero
 40035d4:	4006a200 	call	4006a20 <__multadd>
 40035d8:	d8800715 	stw	r2,28(sp)
 40035dc:	d8800617 	ldw	r2,24(sp)
 40035e0:	14c10c26 	beq	r2,r19,4003a14 <_dtoa_r+0xe3c>
 40035e4:	d9400617 	ldw	r5,24(sp)
 40035e8:	d9001617 	ldw	r4,88(sp)
 40035ec:	01800284 	movi	r6,10
 40035f0:	000f883a 	mov	r7,zero
 40035f4:	4006a200 	call	4006a20 <__multadd>
 40035f8:	d9001617 	ldw	r4,88(sp)
 40035fc:	980b883a 	mov	r5,r19
 4003600:	01800284 	movi	r6,10
 4003604:	000f883a 	mov	r7,zero
 4003608:	d8800615 	stw	r2,24(sp)
 400360c:	4006a200 	call	4006a20 <__multadd>
 4003610:	1027883a 	mov	r19,r2
 4003614:	003fc206 	br	4003520 <_dtoa_r+0x948>
 4003618:	2445c83a 	sub	r2,r4,r17
 400361c:	a088983a 	sll	r4,r20,r2
 4003620:	003e4b06 	br	4002f50 <_dtoa_r+0x378>
 4003624:	01bfffc4 	movi	r6,-1
 4003628:	00800044 	movi	r2,1
 400362c:	d9800e15 	stw	r6,56(sp)
 4003630:	d9800f15 	stw	r6,60(sp)
 4003634:	d8800b15 	stw	r2,44(sp)
 4003638:	d8c01617 	ldw	r3,88(sp)
 400363c:	008005c4 	movi	r2,23
 4003640:	18001115 	stw	zero,68(r3)
 4003644:	1580082e 	bgeu	r2,r22,4003668 <_dtoa_r+0xa90>
 4003648:	00c00104 	movi	r3,4
 400364c:	0009883a 	mov	r4,zero
 4003650:	18c7883a 	add	r3,r3,r3
 4003654:	18800504 	addi	r2,r3,20
 4003658:	21000044 	addi	r4,r4,1
 400365c:	b0bffc2e 	bgeu	r22,r2,4003650 <_dtoa_r+0xa78>
 4003660:	d9801617 	ldw	r6,88(sp)
 4003664:	31001115 	stw	r4,68(r6)
 4003668:	dc000f17 	ldw	r16,60(sp)
 400366c:	003e4b06 	br	4002f9c <_dtoa_r+0x3c4>
 4003670:	d9801717 	ldw	r6,92(sp)
 4003674:	0023883a 	mov	r17,zero
 4003678:	31bfff04 	addi	r6,r6,-4
 400367c:	d9801715 	stw	r6,92(sp)
 4003680:	003df806 	br	4002e64 <_dtoa_r+0x28c>
 4003684:	00800804 	movi	r2,32
 4003688:	10c9c83a 	sub	r4,r2,r3
 400368c:	00c00104 	movi	r3,4
 4003690:	19005a16 	blt	r3,r4,40037fc <_dtoa_r+0xc24>
 4003694:	008000c4 	movi	r2,3
 4003698:	113f7e16 	blt	r2,r4,4003494 <_dtoa_r+0x8bc>
 400369c:	20800704 	addi	r2,r4,28
 40036a0:	003f7506 	br	4003478 <_dtoa_r+0x8a0>
 40036a4:	d9801717 	ldw	r6,92(sp)
 40036a8:	00800044 	movi	r2,1
 40036ac:	1180a10e 	bge	r2,r6,4003934 <_dtoa_r+0xd5c>
 40036b0:	d9800f17 	ldw	r6,60(sp)
 40036b4:	d8c01017 	ldw	r3,64(sp)
 40036b8:	30bfffc4 	addi	r2,r6,-1
 40036bc:	1881c616 	blt	r3,r2,4003dd8 <_dtoa_r+0x1200>
 40036c0:	18a5c83a 	sub	r18,r3,r2
 40036c4:	d8800f17 	ldw	r2,60(sp)
 40036c8:	10026216 	blt	r2,zero,4004054 <_dtoa_r+0x147c>
 40036cc:	dc001117 	ldw	r16,68(sp)
 40036d0:	1007883a 	mov	r3,r2
 40036d4:	d9800a17 	ldw	r6,40(sp)
 40036d8:	d8801117 	ldw	r2,68(sp)
 40036dc:	d9001617 	ldw	r4,88(sp)
 40036e0:	30cd883a 	add	r6,r6,r3
 40036e4:	10c5883a 	add	r2,r2,r3
 40036e8:	01400044 	movi	r5,1
 40036ec:	d9800a15 	stw	r6,40(sp)
 40036f0:	d8801115 	stw	r2,68(sp)
 40036f4:	40069e40 	call	40069e4 <__i2b>
 40036f8:	1027883a 	mov	r19,r2
 40036fc:	003f2506 	br	4003394 <_dtoa_r+0x7bc>
 4003700:	00c10074 	movhi	r3,1025
 4003704:	18dab204 	addi	r3,r3,27336
 4003708:	003d6706 	br	4002ca8 <_dtoa_r+0xd0>
 400370c:	dd800517 	ldw	r22,20(sp)
 4003710:	04000044 	movi	r16,1
 4003714:	00000706 	br	4003734 <_dtoa_r+0xb5c>
 4003718:	d9400717 	ldw	r5,28(sp)
 400371c:	d9001617 	ldw	r4,88(sp)
 4003720:	01800284 	movi	r6,10
 4003724:	000f883a 	mov	r7,zero
 4003728:	4006a200 	call	4006a20 <__multadd>
 400372c:	d8800715 	stw	r2,28(sp)
 4003730:	84000044 	addi	r16,r16,1
 4003734:	d9000717 	ldw	r4,28(sp)
 4003738:	900b883a 	mov	r5,r18
 400373c:	40029c00 	call	40029c0 <quorem>
 4003740:	15c00c04 	addi	r23,r2,48
 4003744:	b5c00005 	stb	r23,0(r22)
 4003748:	d8c00f17 	ldw	r3,60(sp)
 400374c:	b5800044 	addi	r22,r22,1
 4003750:	80fff116 	blt	r16,r3,4003718 <_dtoa_r+0xb40>
 4003754:	d8000615 	stw	zero,24(sp)
 4003758:	d9400717 	ldw	r5,28(sp)
 400375c:	d9001617 	ldw	r4,88(sp)
 4003760:	01800044 	movi	r6,1
 4003764:	40066b00 	call	40066b0 <__lshift>
 4003768:	1009883a 	mov	r4,r2
 400376c:	900b883a 	mov	r5,r18
 4003770:	d8800715 	stw	r2,28(sp)
 4003774:	4005ec80 	call	4005ec8 <__mcmp>
 4003778:	00803c0e 	bge	zero,r2,400386c <_dtoa_r+0xc94>
 400377c:	b009883a 	mov	r4,r22
 4003780:	213fffc4 	addi	r4,r4,-1
 4003784:	21400003 	ldbu	r5,0(r4)
 4003788:	00800e44 	movi	r2,57
 400378c:	28c03fcc 	andi	r3,r5,255
 4003790:	18c0201c 	xori	r3,r3,128
 4003794:	18ffe004 	addi	r3,r3,-128
 4003798:	1881981e 	bne	r3,r2,4003dfc <_dtoa_r+0x1224>
 400379c:	d9800517 	ldw	r6,20(sp)
 40037a0:	21bff71e 	bne	r4,r6,4003780 <_dtoa_r+0xba8>
 40037a4:	d8800d17 	ldw	r2,52(sp)
 40037a8:	37000044 	addi	fp,r6,1
 40037ac:	10800044 	addi	r2,r2,1
 40037b0:	d8800d15 	stw	r2,52(sp)
 40037b4:	00800c44 	movi	r2,49
 40037b8:	30800005 	stb	r2,0(r6)
 40037bc:	d9001617 	ldw	r4,88(sp)
 40037c0:	900b883a 	mov	r5,r18
 40037c4:	4005d6c0 	call	4005d6c <_Bfree>
 40037c8:	983ecd26 	beq	r19,zero,4003300 <_dtoa_r+0x728>
 40037cc:	d8c00617 	ldw	r3,24(sp)
 40037d0:	18000426 	beq	r3,zero,40037e4 <_dtoa_r+0xc0c>
 40037d4:	1cc00326 	beq	r3,r19,40037e4 <_dtoa_r+0xc0c>
 40037d8:	d9001617 	ldw	r4,88(sp)
 40037dc:	180b883a 	mov	r5,r3
 40037e0:	4005d6c0 	call	4005d6c <_Bfree>
 40037e4:	d9001617 	ldw	r4,88(sp)
 40037e8:	980b883a 	mov	r5,r19
 40037ec:	4005d6c0 	call	4005d6c <_Bfree>
 40037f0:	003ec306 	br	4003300 <_dtoa_r+0x728>
 40037f4:	1805883a 	mov	r2,r3
 40037f8:	003eeb06 	br	40033a8 <_dtoa_r+0x7d0>
 40037fc:	d9800a17 	ldw	r6,40(sp)
 4003800:	d8c01117 	ldw	r3,68(sp)
 4003804:	20bfff04 	addi	r2,r4,-4
 4003808:	308d883a 	add	r6,r6,r2
 400380c:	1887883a 	add	r3,r3,r2
 4003810:	80a1883a 	add	r16,r16,r2
 4003814:	d9800a15 	stw	r6,40(sp)
 4003818:	d8c01115 	stw	r3,68(sp)
 400381c:	003f1d06 	br	4003494 <_dtoa_r+0x8bc>
 4003820:	a03f0c1e 	bne	r20,zero,4003454 <_dtoa_r+0x87c>
 4003824:	00800434 	movhi	r2,16
 4003828:	10bfffc4 	addi	r2,r2,-1
 400382c:	a884703a 	and	r2,r21,r2
 4003830:	103f081e 	bne	r2,zero,4003454 <_dtoa_r+0x87c>
 4003834:	a89ffc2c 	andhi	r2,r21,32752
 4003838:	103f0626 	beq	r2,zero,4003454 <_dtoa_r+0x87c>
 400383c:	d8c01117 	ldw	r3,68(sp)
 4003840:	d9000a17 	ldw	r4,40(sp)
 4003844:	18c00044 	addi	r3,r3,1
 4003848:	21000044 	addi	r4,r4,1
 400384c:	d8c01115 	stw	r3,68(sp)
 4003850:	d9000a15 	stw	r4,40(sp)
 4003854:	003f0006 	br	4003458 <_dtoa_r+0x880>
 4003858:	d9400717 	ldw	r5,28(sp)
 400385c:	d9001617 	ldw	r4,88(sp)
 4003860:	4006b200 	call	4006b20 <__pow5mult>
 4003864:	d8800715 	stw	r2,28(sp)
 4003868:	003eed06 	br	4003420 <_dtoa_r+0x848>
 400386c:	1000021e 	bne	r2,zero,4003878 <_dtoa_r+0xca0>
 4003870:	b880004c 	andi	r2,r23,1
 4003874:	103fc11e 	bne	r2,zero,400377c <_dtoa_r+0xba4>
 4003878:	b5bfffc4 	addi	r22,r22,-1
 400387c:	b0c00007 	ldb	r3,0(r22)
 4003880:	00800c04 	movi	r2,48
 4003884:	18bffc26 	beq	r3,r2,4003878 <_dtoa_r+0xca0>
 4003888:	b7000044 	addi	fp,r22,1
 400388c:	003fcb06 	br	40037bc <_dtoa_r+0xbe4>
 4003890:	d9800d17 	ldw	r6,52(sp)
 4003894:	018fc83a 	sub	r7,zero,r6
 4003898:	3801f726 	beq	r7,zero,4004078 <_dtoa_r+0x14a0>
 400389c:	398003cc 	andi	r6,r7,15
 40038a0:	300c90fa 	slli	r6,r6,3
 40038a4:	01410074 	movhi	r5,1025
 40038a8:	295ad004 	addi	r5,r5,27456
 40038ac:	d9001217 	ldw	r4,72(sp)
 40038b0:	314d883a 	add	r6,r6,r5
 40038b4:	30c00117 	ldw	r3,4(r6)
 40038b8:	30800017 	ldw	r2,0(r6)
 40038bc:	d9401317 	ldw	r5,76(sp)
 40038c0:	3821d13a 	srai	r16,r7,4
 40038c4:	100d883a 	mov	r6,r2
 40038c8:	180f883a 	mov	r7,r3
 40038cc:	4008b600 	call	4008b60 <__muldf3>
 40038d0:	1011883a 	mov	r8,r2
 40038d4:	1813883a 	mov	r9,r3
 40038d8:	1029883a 	mov	r20,r2
 40038dc:	182b883a 	mov	r21,r3
 40038e0:	8001e526 	beq	r16,zero,4004078 <_dtoa_r+0x14a0>
 40038e4:	05800084 	movi	r22,2
 40038e8:	04410074 	movhi	r17,1025
 40038ec:	8c5b0204 	addi	r17,r17,27656
 40038f0:	8080004c 	andi	r2,r16,1
 40038f4:	1005003a 	cmpeq	r2,r2,zero
 40038f8:	1000081e 	bne	r2,zero,400391c <_dtoa_r+0xd44>
 40038fc:	89800017 	ldw	r6,0(r17)
 4003900:	89c00117 	ldw	r7,4(r17)
 4003904:	480b883a 	mov	r5,r9
 4003908:	4009883a 	mov	r4,r8
 400390c:	4008b600 	call	4008b60 <__muldf3>
 4003910:	1011883a 	mov	r8,r2
 4003914:	b5800044 	addi	r22,r22,1
 4003918:	1813883a 	mov	r9,r3
 400391c:	8021d07a 	srai	r16,r16,1
 4003920:	8c400204 	addi	r17,r17,8
 4003924:	803ff21e 	bne	r16,zero,40038f0 <_dtoa_r+0xd18>
 4003928:	4029883a 	mov	r20,r8
 400392c:	482b883a 	mov	r21,r9
 4003930:	003dca06 	br	400305c <_dtoa_r+0x484>
 4003934:	d9000817 	ldw	r4,32(sp)
 4003938:	2005003a 	cmpeq	r2,r4,zero
 400393c:	1001f61e 	bne	r2,zero,4004118 <_dtoa_r+0x1540>
 4003940:	dc001117 	ldw	r16,68(sp)
 4003944:	dc801017 	ldw	r18,64(sp)
 4003948:	18c10cc4 	addi	r3,r3,1075
 400394c:	003f6106 	br	40036d4 <_dtoa_r+0xafc>
 4003950:	d8000b15 	stw	zero,44(sp)
 4003954:	d9802617 	ldw	r6,152(sp)
 4003958:	d8c00d17 	ldw	r3,52(sp)
 400395c:	30800044 	addi	r2,r6,1
 4003960:	18ad883a 	add	r22,r3,r2
 4003964:	b13fffc4 	addi	r4,r22,-1
 4003968:	d9000e15 	stw	r4,56(sp)
 400396c:	0581f60e 	bge	zero,r22,4004148 <_dtoa_r+0x1570>
 4003970:	dd800f15 	stw	r22,60(sp)
 4003974:	003f3006 	br	4003638 <_dtoa_r+0xa60>
 4003978:	d8000b15 	stw	zero,44(sp)
 400397c:	d9002617 	ldw	r4,152(sp)
 4003980:	0101eb0e 	bge	zero,r4,4004130 <_dtoa_r+0x1558>
 4003984:	202d883a 	mov	r22,r4
 4003988:	d9000e15 	stw	r4,56(sp)
 400398c:	d9000f15 	stw	r4,60(sp)
 4003990:	003f2906 	br	4003638 <_dtoa_r+0xa60>
 4003994:	01800044 	movi	r6,1
 4003998:	d9800b15 	stw	r6,44(sp)
 400399c:	003ff706 	br	400397c <_dtoa_r+0xda4>
 40039a0:	01000044 	movi	r4,1
 40039a4:	d9000b15 	stw	r4,44(sp)
 40039a8:	003fea06 	br	4003954 <_dtoa_r+0xd7c>
 40039ac:	04000c0e 	bge	zero,r16,40039e0 <_dtoa_r+0xe08>
 40039b0:	d9400717 	ldw	r5,28(sp)
 40039b4:	d9001617 	ldw	r4,88(sp)
 40039b8:	01800044 	movi	r6,1
 40039bc:	40066b00 	call	40066b0 <__lshift>
 40039c0:	1009883a 	mov	r4,r2
 40039c4:	900b883a 	mov	r5,r18
 40039c8:	d8800715 	stw	r2,28(sp)
 40039cc:	4005ec80 	call	4005ec8 <__mcmp>
 40039d0:	0081e00e 	bge	zero,r2,4004154 <_dtoa_r+0x157c>
 40039d4:	bdc00044 	addi	r23,r23,1
 40039d8:	00800e84 	movi	r2,58
 40039dc:	b881a226 	beq	r23,r2,4004068 <_dtoa_r+0x1490>
 40039e0:	b7000044 	addi	fp,r22,1
 40039e4:	b5c00005 	stb	r23,0(r22)
 40039e8:	003f7406 	br	40037bc <_dtoa_r+0xbe4>
 40039ec:	00800e44 	movi	r2,57
 40039f0:	b8819d26 	beq	r23,r2,4004068 <_dtoa_r+0x1490>
 40039f4:	053ffa0e 	bge	zero,r20,40039e0 <_dtoa_r+0xe08>
 40039f8:	8dc00c44 	addi	r23,r17,49
 40039fc:	003ff806 	br	40039e0 <_dtoa_r+0xe08>
 4003a00:	d9001617 	ldw	r4,88(sp)
 4003a04:	a80b883a 	mov	r5,r21
 4003a08:	04000044 	movi	r16,1
 4003a0c:	4005d6c0 	call	4005d6c <_Bfree>
 4003a10:	003edf06 	br	4003590 <_dtoa_r+0x9b8>
 4003a14:	d9001617 	ldw	r4,88(sp)
 4003a18:	980b883a 	mov	r5,r19
 4003a1c:	01800284 	movi	r6,10
 4003a20:	000f883a 	mov	r7,zero
 4003a24:	4006a200 	call	4006a20 <__multadd>
 4003a28:	1027883a 	mov	r19,r2
 4003a2c:	d8800615 	stw	r2,24(sp)
 4003a30:	003ebb06 	br	4003520 <_dtoa_r+0x948>
 4003a34:	d9801117 	ldw	r6,68(sp)
 4003a38:	d8800d17 	ldw	r2,52(sp)
 4003a3c:	d8000915 	stw	zero,36(sp)
 4003a40:	308dc83a 	sub	r6,r6,r2
 4003a44:	0087c83a 	sub	r3,zero,r2
 4003a48:	d9801115 	stw	r6,68(sp)
 4003a4c:	d8c01015 	stw	r3,64(sp)
 4003a50:	003cfe06 	br	4002e4c <_dtoa_r+0x274>
 4003a54:	018dc83a 	sub	r6,zero,r6
 4003a58:	d9801115 	stw	r6,68(sp)
 4003a5c:	d8000a15 	stw	zero,40(sp)
 4003a60:	003cf306 	br	4002e30 <_dtoa_r+0x258>
 4003a64:	d9000d17 	ldw	r4,52(sp)
 4003a68:	40094240 	call	4009424 <__floatsidf>
 4003a6c:	880b883a 	mov	r5,r17
 4003a70:	8009883a 	mov	r4,r16
 4003a74:	180f883a 	mov	r7,r3
 4003a78:	100d883a 	mov	r6,r2
 4003a7c:	40092040 	call	4009204 <__nedf2>
 4003a80:	103ce126 	beq	r2,zero,4002e08 <_dtoa_r+0x230>
 4003a84:	d9800d17 	ldw	r6,52(sp)
 4003a88:	31bfffc4 	addi	r6,r6,-1
 4003a8c:	d9800d15 	stw	r6,52(sp)
 4003a90:	003cdd06 	br	4002e08 <_dtoa_r+0x230>
 4003a94:	d9000717 	ldw	r4,28(sp)
 4003a98:	900b883a 	mov	r5,r18
 4003a9c:	4005ec80 	call	4005ec8 <__mcmp>
 4003aa0:	103e8d0e 	bge	r2,zero,40034d8 <_dtoa_r+0x900>
 4003aa4:	d9400717 	ldw	r5,28(sp)
 4003aa8:	d9001617 	ldw	r4,88(sp)
 4003aac:	01800284 	movi	r6,10
 4003ab0:	000f883a 	mov	r7,zero
 4003ab4:	4006a200 	call	4006a20 <__multadd>
 4003ab8:	d9800d17 	ldw	r6,52(sp)
 4003abc:	d8800715 	stw	r2,28(sp)
 4003ac0:	31bfffc4 	addi	r6,r6,-1
 4003ac4:	d9800d15 	stw	r6,52(sp)
 4003ac8:	b001a71e 	bne	r22,zero,4004168 <_dtoa_r+0x1590>
 4003acc:	d8800e17 	ldw	r2,56(sp)
 4003ad0:	d8800f15 	stw	r2,60(sp)
 4003ad4:	003e8006 	br	40034d8 <_dtoa_r+0x900>
 4003ad8:	90800417 	ldw	r2,16(r18)
 4003adc:	1085883a 	add	r2,r2,r2
 4003ae0:	1085883a 	add	r2,r2,r2
 4003ae4:	1485883a 	add	r2,r2,r18
 4003ae8:	11000417 	ldw	r4,16(r2)
 4003aec:	4005d940 	call	4005d94 <__hi0bits>
 4003af0:	00c00804 	movi	r3,32
 4003af4:	1887c83a 	sub	r3,r3,r2
 4003af8:	003e5a06 	br	4003464 <_dtoa_r+0x88c>
 4003afc:	d9400717 	ldw	r5,28(sp)
 4003b00:	d9801017 	ldw	r6,64(sp)
 4003b04:	d9001617 	ldw	r4,88(sp)
 4003b08:	4006b200 	call	4006b20 <__pow5mult>
 4003b0c:	d8800715 	stw	r2,28(sp)
 4003b10:	003e4306 	br	4003420 <_dtoa_r+0x848>
 4003b14:	d9800f17 	ldw	r6,60(sp)
 4003b18:	d8800d17 	ldw	r2,52(sp)
 4003b1c:	d9800315 	stw	r6,12(sp)
 4003b20:	d8800415 	stw	r2,16(sp)
 4003b24:	d8c00b17 	ldw	r3,44(sp)
 4003b28:	1805003a 	cmpeq	r2,r3,zero
 4003b2c:	1000e21e 	bne	r2,zero,4003eb8 <_dtoa_r+0x12e0>
 4003b30:	d9000317 	ldw	r4,12(sp)
 4003b34:	0005883a 	mov	r2,zero
 4003b38:	00cff834 	movhi	r3,16352
 4003b3c:	200c90fa 	slli	r6,r4,3
 4003b40:	01010074 	movhi	r4,1025
 4003b44:	211ad004 	addi	r4,r4,27456
 4003b48:	180b883a 	mov	r5,r3
 4003b4c:	310d883a 	add	r6,r6,r4
 4003b50:	327fff17 	ldw	r9,-4(r6)
 4003b54:	323ffe17 	ldw	r8,-8(r6)
 4003b58:	1009883a 	mov	r4,r2
 4003b5c:	480f883a 	mov	r7,r9
 4003b60:	400d883a 	mov	r6,r8
 4003b64:	4008f240 	call	4008f24 <__divdf3>
 4003b68:	180b883a 	mov	r5,r3
 4003b6c:	b00d883a 	mov	r6,r22
 4003b70:	b80f883a 	mov	r7,r23
 4003b74:	1009883a 	mov	r4,r2
 4003b78:	4008a6c0 	call	4008a6c <__subdf3>
 4003b7c:	a80b883a 	mov	r5,r21
 4003b80:	a009883a 	mov	r4,r20
 4003b84:	d8c01915 	stw	r3,100(sp)
 4003b88:	d8801815 	stw	r2,96(sp)
 4003b8c:	400951c0 	call	400951c <__fixdfsi>
 4003b90:	1009883a 	mov	r4,r2
 4003b94:	1027883a 	mov	r19,r2
 4003b98:	40094240 	call	4009424 <__floatsidf>
 4003b9c:	a80b883a 	mov	r5,r21
 4003ba0:	a009883a 	mov	r4,r20
 4003ba4:	180f883a 	mov	r7,r3
 4003ba8:	100d883a 	mov	r6,r2
 4003bac:	4008a6c0 	call	4008a6c <__subdf3>
 4003bb0:	d9801817 	ldw	r6,96(sp)
 4003bb4:	1823883a 	mov	r17,r3
 4003bb8:	d8801415 	stw	r2,80(sp)
 4003bbc:	302d883a 	mov	r22,r6
 4003bc0:	d9800517 	ldw	r6,20(sp)
 4003bc4:	9cc00c04 	addi	r19,r19,48
 4003bc8:	dc401515 	stw	r17,84(sp)
 4003bcc:	d8c01917 	ldw	r3,100(sp)
 4003bd0:	34c00005 	stb	r19,0(r6)
 4003bd4:	d8800517 	ldw	r2,20(sp)
 4003bd8:	d9401917 	ldw	r5,100(sp)
 4003bdc:	d9801417 	ldw	r6,80(sp)
 4003be0:	b009883a 	mov	r4,r22
 4003be4:	880f883a 	mov	r7,r17
 4003be8:	182f883a 	mov	r23,r3
 4003bec:	17000044 	addi	fp,r2,1
 4003bf0:	400928c0 	call	400928c <__gtdf2>
 4003bf4:	00804e16 	blt	zero,r2,4003d30 <_dtoa_r+0x1158>
 4003bf8:	d9801417 	ldw	r6,80(sp)
 4003bfc:	0005883a 	mov	r2,zero
 4003c00:	00cffc34 	movhi	r3,16368
 4003c04:	180b883a 	mov	r5,r3
 4003c08:	880f883a 	mov	r7,r17
 4003c0c:	1009883a 	mov	r4,r2
 4003c10:	4008a6c0 	call	4008a6c <__subdf3>
 4003c14:	d9401917 	ldw	r5,100(sp)
 4003c18:	180f883a 	mov	r7,r3
 4003c1c:	b009883a 	mov	r4,r22
 4003c20:	100d883a 	mov	r6,r2
 4003c24:	400928c0 	call	400928c <__gtdf2>
 4003c28:	00bda216 	blt	zero,r2,40032b4 <_dtoa_r+0x6dc>
 4003c2c:	d8c00317 	ldw	r3,12(sp)
 4003c30:	00800044 	movi	r2,1
 4003c34:	10c01216 	blt	r2,r3,4003c80 <_dtoa_r+0x10a8>
 4003c38:	003d4506 	br	4003150 <_dtoa_r+0x578>
 4003c3c:	d9801417 	ldw	r6,80(sp)
 4003c40:	0005883a 	mov	r2,zero
 4003c44:	00cffc34 	movhi	r3,16368
 4003c48:	180b883a 	mov	r5,r3
 4003c4c:	880f883a 	mov	r7,r17
 4003c50:	1009883a 	mov	r4,r2
 4003c54:	4008a6c0 	call	4008a6c <__subdf3>
 4003c58:	d9c01b17 	ldw	r7,108(sp)
 4003c5c:	180b883a 	mov	r5,r3
 4003c60:	1009883a 	mov	r4,r2
 4003c64:	b00d883a 	mov	r6,r22
 4003c68:	400939c0 	call	400939c <__ltdf2>
 4003c6c:	103d9116 	blt	r2,zero,40032b4 <_dtoa_r+0x6dc>
 4003c70:	d9800517 	ldw	r6,20(sp)
 4003c74:	d9000317 	ldw	r4,12(sp)
 4003c78:	3105883a 	add	r2,r6,r4
 4003c7c:	e0bd3426 	beq	fp,r2,4003150 <_dtoa_r+0x578>
 4003c80:	04500934 	movhi	r17,16420
 4003c84:	0021883a 	mov	r16,zero
 4003c88:	b80b883a 	mov	r5,r23
 4003c8c:	b009883a 	mov	r4,r22
 4003c90:	800d883a 	mov	r6,r16
 4003c94:	880f883a 	mov	r7,r17
 4003c98:	4008b600 	call	4008b60 <__muldf3>
 4003c9c:	d9401517 	ldw	r5,84(sp)
 4003ca0:	d9001417 	ldw	r4,80(sp)
 4003ca4:	880f883a 	mov	r7,r17
 4003ca8:	000d883a 	mov	r6,zero
 4003cac:	d8801a15 	stw	r2,104(sp)
 4003cb0:	d8c01b15 	stw	r3,108(sp)
 4003cb4:	4008b600 	call	4008b60 <__muldf3>
 4003cb8:	180b883a 	mov	r5,r3
 4003cbc:	1009883a 	mov	r4,r2
 4003cc0:	1823883a 	mov	r17,r3
 4003cc4:	1021883a 	mov	r16,r2
 4003cc8:	400951c0 	call	400951c <__fixdfsi>
 4003ccc:	1009883a 	mov	r4,r2
 4003cd0:	102b883a 	mov	r21,r2
 4003cd4:	40094240 	call	4009424 <__floatsidf>
 4003cd8:	880b883a 	mov	r5,r17
 4003cdc:	8009883a 	mov	r4,r16
 4003ce0:	180f883a 	mov	r7,r3
 4003ce4:	100d883a 	mov	r6,r2
 4003ce8:	4008a6c0 	call	4008a6c <__subdf3>
 4003cec:	1021883a 	mov	r16,r2
 4003cf0:	d9001b17 	ldw	r4,108(sp)
 4003cf4:	1823883a 	mov	r17,r3
 4003cf8:	dc001415 	stw	r16,80(sp)
 4003cfc:	ad400c04 	addi	r21,r21,48
 4003d00:	dc401515 	stw	r17,84(sp)
 4003d04:	d8801a17 	ldw	r2,104(sp)
 4003d08:	e5400005 	stb	r21,0(fp)
 4003d0c:	202f883a 	mov	r23,r4
 4003d10:	d9c01b17 	ldw	r7,108(sp)
 4003d14:	d9001417 	ldw	r4,80(sp)
 4003d18:	880b883a 	mov	r5,r17
 4003d1c:	100d883a 	mov	r6,r2
 4003d20:	102d883a 	mov	r22,r2
 4003d24:	e7000044 	addi	fp,fp,1
 4003d28:	400939c0 	call	400939c <__ltdf2>
 4003d2c:	103fc30e 	bge	r2,zero,4003c3c <_dtoa_r+0x1064>
 4003d30:	d9000417 	ldw	r4,16(sp)
 4003d34:	d9000d15 	stw	r4,52(sp)
 4003d38:	003d7106 	br	4003300 <_dtoa_r+0x728>
 4003d3c:	d9801717 	ldw	r6,92(sp)
 4003d40:	00800084 	movi	r2,2
 4003d44:	11bde60e 	bge	r2,r6,40034e0 <_dtoa_r+0x908>
 4003d48:	203cfb1e 	bne	r4,zero,4003138 <_dtoa_r+0x560>
 4003d4c:	d9001617 	ldw	r4,88(sp)
 4003d50:	900b883a 	mov	r5,r18
 4003d54:	01800144 	movi	r6,5
 4003d58:	000f883a 	mov	r7,zero
 4003d5c:	4006a200 	call	4006a20 <__multadd>
 4003d60:	d9000717 	ldw	r4,28(sp)
 4003d64:	100b883a 	mov	r5,r2
 4003d68:	1025883a 	mov	r18,r2
 4003d6c:	4005ec80 	call	4005ec8 <__mcmp>
 4003d70:	00bcf10e 	bge	zero,r2,4003138 <_dtoa_r+0x560>
 4003d74:	d8c00d17 	ldw	r3,52(sp)
 4003d78:	d9000517 	ldw	r4,20(sp)
 4003d7c:	d8000615 	stw	zero,24(sp)
 4003d80:	18c00044 	addi	r3,r3,1
 4003d84:	d8c00d15 	stw	r3,52(sp)
 4003d88:	00800c44 	movi	r2,49
 4003d8c:	27000044 	addi	fp,r4,1
 4003d90:	20800005 	stb	r2,0(r4)
 4003d94:	003e8906 	br	40037bc <_dtoa_r+0xbe4>
 4003d98:	d8c00517 	ldw	r3,20(sp)
 4003d9c:	003bc206 	br	4002ca8 <_dtoa_r+0xd0>
 4003da0:	01810074 	movhi	r6,1025
 4003da4:	319b0204 	addi	r6,r6,27656
 4003da8:	30c00917 	ldw	r3,36(r6)
 4003dac:	30800817 	ldw	r2,32(r6)
 4003db0:	d9001217 	ldw	r4,72(sp)
 4003db4:	d9401317 	ldw	r5,76(sp)
 4003db8:	180f883a 	mov	r7,r3
 4003dbc:	100d883a 	mov	r6,r2
 4003dc0:	4008f240 	call	4008f24 <__divdf3>
 4003dc4:	948003cc 	andi	r18,r18,15
 4003dc8:	058000c4 	movi	r22,3
 4003dcc:	1029883a 	mov	r20,r2
 4003dd0:	182b883a 	mov	r21,r3
 4003dd4:	003c8906 	br	4002ffc <_dtoa_r+0x424>
 4003dd8:	d9001017 	ldw	r4,64(sp)
 4003ddc:	d9800917 	ldw	r6,36(sp)
 4003de0:	0025883a 	mov	r18,zero
 4003de4:	1105c83a 	sub	r2,r2,r4
 4003de8:	2089883a 	add	r4,r4,r2
 4003dec:	308d883a 	add	r6,r6,r2
 4003df0:	d9001015 	stw	r4,64(sp)
 4003df4:	d9800915 	stw	r6,36(sp)
 4003df8:	003e3206 	br	40036c4 <_dtoa_r+0xaec>
 4003dfc:	28800044 	addi	r2,r5,1
 4003e00:	27000044 	addi	fp,r4,1
 4003e04:	20800005 	stb	r2,0(r4)
 4003e08:	003e6c06 	br	40037bc <_dtoa_r+0xbe4>
 4003e0c:	d8800f17 	ldw	r2,60(sp)
 4003e10:	00bce016 	blt	zero,r2,4003194 <_dtoa_r+0x5bc>
 4003e14:	d9800f17 	ldw	r6,60(sp)
 4003e18:	303cc51e 	bne	r6,zero,4003130 <_dtoa_r+0x558>
 4003e1c:	0005883a 	mov	r2,zero
 4003e20:	00d00534 	movhi	r3,16404
 4003e24:	980b883a 	mov	r5,r19
 4003e28:	180f883a 	mov	r7,r3
 4003e2c:	9009883a 	mov	r4,r18
 4003e30:	100d883a 	mov	r6,r2
 4003e34:	4008b600 	call	4008b60 <__muldf3>
 4003e38:	180b883a 	mov	r5,r3
 4003e3c:	a80f883a 	mov	r7,r21
 4003e40:	1009883a 	mov	r4,r2
 4003e44:	a00d883a 	mov	r6,r20
 4003e48:	40093140 	call	4009314 <__gedf2>
 4003e4c:	103cb80e 	bge	r2,zero,4003130 <_dtoa_r+0x558>
 4003e50:	0027883a 	mov	r19,zero
 4003e54:	0025883a 	mov	r18,zero
 4003e58:	003fc606 	br	4003d74 <_dtoa_r+0x119c>
 4003e5c:	99400117 	ldw	r5,4(r19)
 4003e60:	d9001617 	ldw	r4,88(sp)
 4003e64:	40062ec0 	call	40062ec <_Balloc>
 4003e68:	99800417 	ldw	r6,16(r19)
 4003e6c:	11000304 	addi	r4,r2,12
 4003e70:	99400304 	addi	r5,r19,12
 4003e74:	318d883a 	add	r6,r6,r6
 4003e78:	318d883a 	add	r6,r6,r6
 4003e7c:	31800204 	addi	r6,r6,8
 4003e80:	1023883a 	mov	r17,r2
 4003e84:	4005b540 	call	4005b54 <memcpy>
 4003e88:	d9001617 	ldw	r4,88(sp)
 4003e8c:	880b883a 	mov	r5,r17
 4003e90:	01800044 	movi	r6,1
 4003e94:	40066b00 	call	40066b0 <__lshift>
 4003e98:	100b883a 	mov	r5,r2
 4003e9c:	003d9c06 	br	4003510 <_dtoa_r+0x938>
 4003ea0:	00800e44 	movi	r2,57
 4003ea4:	b8807026 	beq	r23,r2,4004068 <_dtoa_r+0x1490>
 4003ea8:	b8800044 	addi	r2,r23,1
 4003eac:	b7000044 	addi	fp,r22,1
 4003eb0:	b0800005 	stb	r2,0(r22)
 4003eb4:	003e4106 	br	40037bc <_dtoa_r+0xbe4>
 4003eb8:	d8800317 	ldw	r2,12(sp)
 4003ebc:	01810074 	movhi	r6,1025
 4003ec0:	319ad004 	addi	r6,r6,27456
 4003ec4:	b009883a 	mov	r4,r22
 4003ec8:	100e90fa 	slli	r7,r2,3
 4003ecc:	b80b883a 	mov	r5,r23
 4003ed0:	398f883a 	add	r7,r7,r6
 4003ed4:	38bffe17 	ldw	r2,-8(r7)
 4003ed8:	d9800517 	ldw	r6,20(sp)
 4003edc:	38ffff17 	ldw	r3,-4(r7)
 4003ee0:	37000044 	addi	fp,r6,1
 4003ee4:	180f883a 	mov	r7,r3
 4003ee8:	100d883a 	mov	r6,r2
 4003eec:	4008b600 	call	4008b60 <__muldf3>
 4003ef0:	a80b883a 	mov	r5,r21
 4003ef4:	a009883a 	mov	r4,r20
 4003ef8:	182f883a 	mov	r23,r3
 4003efc:	102d883a 	mov	r22,r2
 4003f00:	400951c0 	call	400951c <__fixdfsi>
 4003f04:	1009883a 	mov	r4,r2
 4003f08:	1027883a 	mov	r19,r2
 4003f0c:	40094240 	call	4009424 <__floatsidf>
 4003f10:	a80b883a 	mov	r5,r21
 4003f14:	a009883a 	mov	r4,r20
 4003f18:	180f883a 	mov	r7,r3
 4003f1c:	100d883a 	mov	r6,r2
 4003f20:	4008a6c0 	call	4008a6c <__subdf3>
 4003f24:	180b883a 	mov	r5,r3
 4003f28:	d8c00517 	ldw	r3,20(sp)
 4003f2c:	9cc00c04 	addi	r19,r19,48
 4003f30:	1009883a 	mov	r4,r2
 4003f34:	1cc00005 	stb	r19,0(r3)
 4003f38:	2021883a 	mov	r16,r4
 4003f3c:	d9000317 	ldw	r4,12(sp)
 4003f40:	00800044 	movi	r2,1
 4003f44:	2823883a 	mov	r17,r5
 4003f48:	20802226 	beq	r4,r2,4003fd4 <_dtoa_r+0x13fc>
 4003f4c:	1029883a 	mov	r20,r2
 4003f50:	0005883a 	mov	r2,zero
 4003f54:	00d00934 	movhi	r3,16420
 4003f58:	180f883a 	mov	r7,r3
 4003f5c:	100d883a 	mov	r6,r2
 4003f60:	880b883a 	mov	r5,r17
 4003f64:	8009883a 	mov	r4,r16
 4003f68:	4008b600 	call	4008b60 <__muldf3>
 4003f6c:	180b883a 	mov	r5,r3
 4003f70:	1009883a 	mov	r4,r2
 4003f74:	1823883a 	mov	r17,r3
 4003f78:	1021883a 	mov	r16,r2
 4003f7c:	400951c0 	call	400951c <__fixdfsi>
 4003f80:	1009883a 	mov	r4,r2
 4003f84:	102b883a 	mov	r21,r2
 4003f88:	40094240 	call	4009424 <__floatsidf>
 4003f8c:	880b883a 	mov	r5,r17
 4003f90:	8009883a 	mov	r4,r16
 4003f94:	180f883a 	mov	r7,r3
 4003f98:	100d883a 	mov	r6,r2
 4003f9c:	4008a6c0 	call	4008a6c <__subdf3>
 4003fa0:	180b883a 	mov	r5,r3
 4003fa4:	d8c00517 	ldw	r3,20(sp)
 4003fa8:	1009883a 	mov	r4,r2
 4003fac:	ad400c04 	addi	r21,r21,48
 4003fb0:	1d05883a 	add	r2,r3,r20
 4003fb4:	15400005 	stb	r21,0(r2)
 4003fb8:	2021883a 	mov	r16,r4
 4003fbc:	d9000317 	ldw	r4,12(sp)
 4003fc0:	a5000044 	addi	r20,r20,1
 4003fc4:	2823883a 	mov	r17,r5
 4003fc8:	a13fe11e 	bne	r20,r4,4003f50 <_dtoa_r+0x1378>
 4003fcc:	e505883a 	add	r2,fp,r20
 4003fd0:	173fffc4 	addi	fp,r2,-1
 4003fd4:	0025883a 	mov	r18,zero
 4003fd8:	04cff834 	movhi	r19,16352
 4003fdc:	b009883a 	mov	r4,r22
 4003fe0:	b80b883a 	mov	r5,r23
 4003fe4:	900d883a 	mov	r6,r18
 4003fe8:	980f883a 	mov	r7,r19
 4003fec:	4008aec0 	call	4008aec <__adddf3>
 4003ff0:	180b883a 	mov	r5,r3
 4003ff4:	1009883a 	mov	r4,r2
 4003ff8:	800d883a 	mov	r6,r16
 4003ffc:	880f883a 	mov	r7,r17
 4004000:	400939c0 	call	400939c <__ltdf2>
 4004004:	103cab16 	blt	r2,zero,40032b4 <_dtoa_r+0x6dc>
 4004008:	0009883a 	mov	r4,zero
 400400c:	980b883a 	mov	r5,r19
 4004010:	b80f883a 	mov	r7,r23
 4004014:	b00d883a 	mov	r6,r22
 4004018:	4008a6c0 	call	4008a6c <__subdf3>
 400401c:	180b883a 	mov	r5,r3
 4004020:	880f883a 	mov	r7,r17
 4004024:	1009883a 	mov	r4,r2
 4004028:	800d883a 	mov	r6,r16
 400402c:	400928c0 	call	400928c <__gtdf2>
 4004030:	00bc470e 	bge	zero,r2,4003150 <_dtoa_r+0x578>
 4004034:	00c00c04 	movi	r3,48
 4004038:	e73fffc4 	addi	fp,fp,-1
 400403c:	e0800007 	ldb	r2,0(fp)
 4004040:	10fffd26 	beq	r2,r3,4004038 <_dtoa_r+0x1460>
 4004044:	d9800417 	ldw	r6,16(sp)
 4004048:	e7000044 	addi	fp,fp,1
 400404c:	d9800d15 	stw	r6,52(sp)
 4004050:	003cab06 	br	4003300 <_dtoa_r+0x728>
 4004054:	d8c00f17 	ldw	r3,60(sp)
 4004058:	d9001117 	ldw	r4,68(sp)
 400405c:	20e1c83a 	sub	r16,r4,r3
 4004060:	0007883a 	mov	r3,zero
 4004064:	003d9b06 	br	40036d4 <_dtoa_r+0xafc>
 4004068:	00800e44 	movi	r2,57
 400406c:	b0800005 	stb	r2,0(r22)
 4004070:	b5800044 	addi	r22,r22,1
 4004074:	003dc106 	br	400377c <_dtoa_r+0xba4>
 4004078:	05800084 	movi	r22,2
 400407c:	003bf706 	br	400305c <_dtoa_r+0x484>
 4004080:	d9000f17 	ldw	r4,60(sp)
 4004084:	013c000e 	bge	zero,r4,4003088 <_dtoa_r+0x4b0>
 4004088:	d9800e17 	ldw	r6,56(sp)
 400408c:	01bc300e 	bge	zero,r6,4003150 <_dtoa_r+0x578>
 4004090:	0005883a 	mov	r2,zero
 4004094:	00d00934 	movhi	r3,16420
 4004098:	a80b883a 	mov	r5,r21
 400409c:	180f883a 	mov	r7,r3
 40040a0:	a009883a 	mov	r4,r20
 40040a4:	100d883a 	mov	r6,r2
 40040a8:	4008b600 	call	4008b60 <__muldf3>
 40040ac:	b1000044 	addi	r4,r22,1
 40040b0:	1021883a 	mov	r16,r2
 40040b4:	1823883a 	mov	r17,r3
 40040b8:	40094240 	call	4009424 <__floatsidf>
 40040bc:	880b883a 	mov	r5,r17
 40040c0:	8009883a 	mov	r4,r16
 40040c4:	180f883a 	mov	r7,r3
 40040c8:	100d883a 	mov	r6,r2
 40040cc:	4008b600 	call	4008b60 <__muldf3>
 40040d0:	0011883a 	mov	r8,zero
 40040d4:	02500734 	movhi	r9,16412
 40040d8:	180b883a 	mov	r5,r3
 40040dc:	480f883a 	mov	r7,r9
 40040e0:	1009883a 	mov	r4,r2
 40040e4:	400d883a 	mov	r6,r8
 40040e8:	4008aec0 	call	4008aec <__adddf3>
 40040ec:	102d883a 	mov	r22,r2
 40040f0:	00bf3034 	movhi	r2,64704
 40040f4:	10ef883a 	add	r23,r2,r3
 40040f8:	d8800d17 	ldw	r2,52(sp)
 40040fc:	d8c00e17 	ldw	r3,56(sp)
 4004100:	8029883a 	mov	r20,r16
 4004104:	10bfffc4 	addi	r2,r2,-1
 4004108:	882b883a 	mov	r21,r17
 400410c:	d8800415 	stw	r2,16(sp)
 4004110:	d8c00315 	stw	r3,12(sp)
 4004114:	003e8306 	br	4003b24 <_dtoa_r+0xf4c>
 4004118:	d8800117 	ldw	r2,4(sp)
 400411c:	dc001117 	ldw	r16,68(sp)
 4004120:	dc801017 	ldw	r18,64(sp)
 4004124:	00c00d84 	movi	r3,54
 4004128:	1887c83a 	sub	r3,r3,r2
 400412c:	003d6906 	br	40036d4 <_dtoa_r+0xafc>
 4004130:	01800044 	movi	r6,1
 4004134:	3021883a 	mov	r16,r6
 4004138:	d9800f15 	stw	r6,60(sp)
 400413c:	d9802615 	stw	r6,152(sp)
 4004140:	d9800e15 	stw	r6,56(sp)
 4004144:	003b9306 	br	4002f94 <_dtoa_r+0x3bc>
 4004148:	b021883a 	mov	r16,r22
 400414c:	dd800f15 	stw	r22,60(sp)
 4004150:	003b9006 	br	4002f94 <_dtoa_r+0x3bc>
 4004154:	103e221e 	bne	r2,zero,40039e0 <_dtoa_r+0xe08>
 4004158:	b880004c 	andi	r2,r23,1
 400415c:	1005003a 	cmpeq	r2,r2,zero
 4004160:	103e1f1e 	bne	r2,zero,40039e0 <_dtoa_r+0xe08>
 4004164:	003e1b06 	br	40039d4 <_dtoa_r+0xdfc>
 4004168:	d9001617 	ldw	r4,88(sp)
 400416c:	980b883a 	mov	r5,r19
 4004170:	01800284 	movi	r6,10
 4004174:	000f883a 	mov	r7,zero
 4004178:	4006a200 	call	4006a20 <__multadd>
 400417c:	d8c00e17 	ldw	r3,56(sp)
 4004180:	1027883a 	mov	r19,r2
 4004184:	d8c00f15 	stw	r3,60(sp)
 4004188:	003cd306 	br	40034d8 <_dtoa_r+0x900>

0400418c <_fflush_r>:
 400418c:	defffb04 	addi	sp,sp,-20
 4004190:	dcc00315 	stw	r19,12(sp)
 4004194:	dc800215 	stw	r18,8(sp)
 4004198:	dfc00415 	stw	ra,16(sp)
 400419c:	dc400115 	stw	r17,4(sp)
 40041a0:	dc000015 	stw	r16,0(sp)
 40041a4:	2027883a 	mov	r19,r4
 40041a8:	2825883a 	mov	r18,r5
 40041ac:	20000226 	beq	r4,zero,40041b8 <_fflush_r+0x2c>
 40041b0:	20800e17 	ldw	r2,56(r4)
 40041b4:	10005626 	beq	r2,zero,4004310 <_fflush_r+0x184>
 40041b8:	9100030b 	ldhu	r4,12(r18)
 40041bc:	20ffffcc 	andi	r3,r4,65535
 40041c0:	18e0001c 	xori	r3,r3,32768
 40041c4:	18e00004 	addi	r3,r3,-32768
 40041c8:	1880020c 	andi	r2,r3,8
 40041cc:	1000261e 	bne	r2,zero,4004268 <_fflush_r+0xdc>
 40041d0:	90c00117 	ldw	r3,4(r18)
 40041d4:	20820014 	ori	r2,r4,2048
 40041d8:	9080030d 	sth	r2,12(r18)
 40041dc:	1009883a 	mov	r4,r2
 40041e0:	00c0400e 	bge	zero,r3,40042e4 <_fflush_r+0x158>
 40041e4:	92000a17 	ldw	r8,40(r18)
 40041e8:	40004026 	beq	r8,zero,40042ec <_fflush_r+0x160>
 40041ec:	2084000c 	andi	r2,r4,4096
 40041f0:	10005326 	beq	r2,zero,4004340 <_fflush_r+0x1b4>
 40041f4:	94001417 	ldw	r16,80(r18)
 40041f8:	9080030b 	ldhu	r2,12(r18)
 40041fc:	1080010c 	andi	r2,r2,4
 4004200:	1000481e 	bne	r2,zero,4004324 <_fflush_r+0x198>
 4004204:	91400717 	ldw	r5,28(r18)
 4004208:	9809883a 	mov	r4,r19
 400420c:	800d883a 	mov	r6,r16
 4004210:	000f883a 	mov	r7,zero
 4004214:	403ee83a 	callr	r8
 4004218:	8080261e 	bne	r16,r2,40042b4 <_fflush_r+0x128>
 400421c:	9080030b 	ldhu	r2,12(r18)
 4004220:	91000417 	ldw	r4,16(r18)
 4004224:	90000115 	stw	zero,4(r18)
 4004228:	10bdffcc 	andi	r2,r2,63487
 400422c:	10ffffcc 	andi	r3,r2,65535
 4004230:	18c4000c 	andi	r3,r3,4096
 4004234:	9080030d 	sth	r2,12(r18)
 4004238:	91000015 	stw	r4,0(r18)
 400423c:	18002b26 	beq	r3,zero,40042ec <_fflush_r+0x160>
 4004240:	0007883a 	mov	r3,zero
 4004244:	1805883a 	mov	r2,r3
 4004248:	94001415 	stw	r16,80(r18)
 400424c:	dfc00417 	ldw	ra,16(sp)
 4004250:	dcc00317 	ldw	r19,12(sp)
 4004254:	dc800217 	ldw	r18,8(sp)
 4004258:	dc400117 	ldw	r17,4(sp)
 400425c:	dc000017 	ldw	r16,0(sp)
 4004260:	dec00504 	addi	sp,sp,20
 4004264:	f800283a 	ret
 4004268:	94400417 	ldw	r17,16(r18)
 400426c:	88001f26 	beq	r17,zero,40042ec <_fflush_r+0x160>
 4004270:	90800017 	ldw	r2,0(r18)
 4004274:	18c000cc 	andi	r3,r3,3
 4004278:	94400015 	stw	r17,0(r18)
 400427c:	1461c83a 	sub	r16,r2,r17
 4004280:	18002526 	beq	r3,zero,4004318 <_fflush_r+0x18c>
 4004284:	0005883a 	mov	r2,zero
 4004288:	90800215 	stw	r2,8(r18)
 400428c:	0400170e 	bge	zero,r16,40042ec <_fflush_r+0x160>
 4004290:	90c00917 	ldw	r3,36(r18)
 4004294:	91400717 	ldw	r5,28(r18)
 4004298:	880d883a 	mov	r6,r17
 400429c:	800f883a 	mov	r7,r16
 40042a0:	9809883a 	mov	r4,r19
 40042a4:	183ee83a 	callr	r3
 40042a8:	88a3883a 	add	r17,r17,r2
 40042ac:	80a1c83a 	sub	r16,r16,r2
 40042b0:	00bff616 	blt	zero,r2,400428c <_fflush_r+0x100>
 40042b4:	9080030b 	ldhu	r2,12(r18)
 40042b8:	00ffffc4 	movi	r3,-1
 40042bc:	10801014 	ori	r2,r2,64
 40042c0:	9080030d 	sth	r2,12(r18)
 40042c4:	1805883a 	mov	r2,r3
 40042c8:	dfc00417 	ldw	ra,16(sp)
 40042cc:	dcc00317 	ldw	r19,12(sp)
 40042d0:	dc800217 	ldw	r18,8(sp)
 40042d4:	dc400117 	ldw	r17,4(sp)
 40042d8:	dc000017 	ldw	r16,0(sp)
 40042dc:	dec00504 	addi	sp,sp,20
 40042e0:	f800283a 	ret
 40042e4:	90800f17 	ldw	r2,60(r18)
 40042e8:	00bfbe16 	blt	zero,r2,40041e4 <_fflush_r+0x58>
 40042ec:	0007883a 	mov	r3,zero
 40042f0:	1805883a 	mov	r2,r3
 40042f4:	dfc00417 	ldw	ra,16(sp)
 40042f8:	dcc00317 	ldw	r19,12(sp)
 40042fc:	dc800217 	ldw	r18,8(sp)
 4004300:	dc400117 	ldw	r17,4(sp)
 4004304:	dc000017 	ldw	r16,0(sp)
 4004308:	dec00504 	addi	sp,sp,20
 400430c:	f800283a 	ret
 4004310:	40044240 	call	4004424 <__sinit>
 4004314:	003fa806 	br	40041b8 <_fflush_r+0x2c>
 4004318:	90800517 	ldw	r2,20(r18)
 400431c:	90800215 	stw	r2,8(r18)
 4004320:	003fda06 	br	400428c <_fflush_r+0x100>
 4004324:	90800117 	ldw	r2,4(r18)
 4004328:	90c00c17 	ldw	r3,48(r18)
 400432c:	80a1c83a 	sub	r16,r16,r2
 4004330:	183fb426 	beq	r3,zero,4004204 <_fflush_r+0x78>
 4004334:	90800f17 	ldw	r2,60(r18)
 4004338:	80a1c83a 	sub	r16,r16,r2
 400433c:	003fb106 	br	4004204 <_fflush_r+0x78>
 4004340:	91400717 	ldw	r5,28(r18)
 4004344:	9809883a 	mov	r4,r19
 4004348:	000d883a 	mov	r6,zero
 400434c:	01c00044 	movi	r7,1
 4004350:	403ee83a 	callr	r8
 4004354:	1021883a 	mov	r16,r2
 4004358:	00bfffc4 	movi	r2,-1
 400435c:	80800226 	beq	r16,r2,4004368 <_fflush_r+0x1dc>
 4004360:	92000a17 	ldw	r8,40(r18)
 4004364:	003fa406 	br	40041f8 <_fflush_r+0x6c>
 4004368:	98c00017 	ldw	r3,0(r19)
 400436c:	00800744 	movi	r2,29
 4004370:	18bfde26 	beq	r3,r2,40042ec <_fflush_r+0x160>
 4004374:	9080030b 	ldhu	r2,12(r18)
 4004378:	8007883a 	mov	r3,r16
 400437c:	10801014 	ori	r2,r2,64
 4004380:	9080030d 	sth	r2,12(r18)
 4004384:	003fcf06 	br	40042c4 <_fflush_r+0x138>

04004388 <fflush>:
 4004388:	01410034 	movhi	r5,1024
 400438c:	29506304 	addi	r5,r5,16780
 4004390:	2007883a 	mov	r3,r4
 4004394:	20000526 	beq	r4,zero,40043ac <fflush+0x24>
 4004398:	008100b4 	movhi	r2,1026
 400439c:	10a27304 	addi	r2,r2,-30260
 40043a0:	11000017 	ldw	r4,0(r2)
 40043a4:	180b883a 	mov	r5,r3
 40043a8:	400418c1 	jmpi	400418c <_fflush_r>
 40043ac:	008100b4 	movhi	r2,1026
 40043b0:	10a27404 	addi	r2,r2,-30256
 40043b4:	11000017 	ldw	r4,0(r2)
 40043b8:	4004f581 	jmpi	4004f58 <_fwalk_reent>

040043bc <std>:
 40043bc:	00810034 	movhi	r2,1024
 40043c0:	109d0d04 	addi	r2,r2,29748
 40043c4:	20800b15 	stw	r2,44(r4)
 40043c8:	00810034 	movhi	r2,1024
 40043cc:	109d4804 	addi	r2,r2,29984
 40043d0:	20800815 	stw	r2,32(r4)
 40043d4:	00c10034 	movhi	r3,1024
 40043d8:	18dd2904 	addi	r3,r3,29860
 40043dc:	00810034 	movhi	r2,1024
 40043e0:	109d0f04 	addi	r2,r2,29756
 40043e4:	2140030d 	sth	r5,12(r4)
 40043e8:	2180038d 	sth	r6,14(r4)
 40043ec:	20c00915 	stw	r3,36(r4)
 40043f0:	20800a15 	stw	r2,40(r4)
 40043f4:	20000015 	stw	zero,0(r4)
 40043f8:	20000115 	stw	zero,4(r4)
 40043fc:	20000215 	stw	zero,8(r4)
 4004400:	20000415 	stw	zero,16(r4)
 4004404:	20000515 	stw	zero,20(r4)
 4004408:	20000615 	stw	zero,24(r4)
 400440c:	21000715 	stw	r4,28(r4)
 4004410:	f800283a 	ret

04004414 <__sfp_lock_acquire>:
 4004414:	f800283a 	ret

04004418 <__sfp_lock_release>:
 4004418:	f800283a 	ret

0400441c <__sinit_lock_acquire>:
 400441c:	f800283a 	ret

04004420 <__sinit_lock_release>:
 4004420:	f800283a 	ret

04004424 <__sinit>:
 4004424:	20800e17 	ldw	r2,56(r4)
 4004428:	defffd04 	addi	sp,sp,-12
 400442c:	dc400115 	stw	r17,4(sp)
 4004430:	dc000015 	stw	r16,0(sp)
 4004434:	dfc00215 	stw	ra,8(sp)
 4004438:	04400044 	movi	r17,1
 400443c:	01400104 	movi	r5,4
 4004440:	000d883a 	mov	r6,zero
 4004444:	2021883a 	mov	r16,r4
 4004448:	2200bb04 	addi	r8,r4,748
 400444c:	200f883a 	mov	r7,r4
 4004450:	10000526 	beq	r2,zero,4004468 <__sinit+0x44>
 4004454:	dfc00217 	ldw	ra,8(sp)
 4004458:	dc400117 	ldw	r17,4(sp)
 400445c:	dc000017 	ldw	r16,0(sp)
 4004460:	dec00304 	addi	sp,sp,12
 4004464:	f800283a 	ret
 4004468:	21000117 	ldw	r4,4(r4)
 400446c:	00810034 	movhi	r2,1024
 4004470:	10914204 	addi	r2,r2,17672
 4004474:	00c000c4 	movi	r3,3
 4004478:	80800f15 	stw	r2,60(r16)
 400447c:	80c0b915 	stw	r3,740(r16)
 4004480:	8200ba15 	stw	r8,744(r16)
 4004484:	84400e15 	stw	r17,56(r16)
 4004488:	8000b815 	stw	zero,736(r16)
 400448c:	40043bc0 	call	40043bc <std>
 4004490:	81000217 	ldw	r4,8(r16)
 4004494:	880d883a 	mov	r6,r17
 4004498:	800f883a 	mov	r7,r16
 400449c:	01400284 	movi	r5,10
 40044a0:	40043bc0 	call	40043bc <std>
 40044a4:	81000317 	ldw	r4,12(r16)
 40044a8:	800f883a 	mov	r7,r16
 40044ac:	01400484 	movi	r5,18
 40044b0:	01800084 	movi	r6,2
 40044b4:	dfc00217 	ldw	ra,8(sp)
 40044b8:	dc400117 	ldw	r17,4(sp)
 40044bc:	dc000017 	ldw	r16,0(sp)
 40044c0:	dec00304 	addi	sp,sp,12
 40044c4:	40043bc1 	jmpi	40043bc <std>

040044c8 <__fp_lock>:
 40044c8:	0005883a 	mov	r2,zero
 40044cc:	f800283a 	ret

040044d0 <__fp_unlock>:
 40044d0:	0005883a 	mov	r2,zero
 40044d4:	f800283a 	ret

040044d8 <__fp_unlock_all>:
 40044d8:	008100b4 	movhi	r2,1026
 40044dc:	10a27304 	addi	r2,r2,-30260
 40044e0:	11000017 	ldw	r4,0(r2)
 40044e4:	01410034 	movhi	r5,1024
 40044e8:	29513404 	addi	r5,r5,17616
 40044ec:	40050201 	jmpi	4005020 <_fwalk>

040044f0 <__fp_lock_all>:
 40044f0:	008100b4 	movhi	r2,1026
 40044f4:	10a27304 	addi	r2,r2,-30260
 40044f8:	11000017 	ldw	r4,0(r2)
 40044fc:	01410034 	movhi	r5,1024
 4004500:	29513204 	addi	r5,r5,17608
 4004504:	40050201 	jmpi	4005020 <_fwalk>

04004508 <_cleanup_r>:
 4004508:	01410034 	movhi	r5,1024
 400450c:	295e3a04 	addi	r5,r5,30952
 4004510:	40050201 	jmpi	4005020 <_fwalk>

04004514 <_cleanup>:
 4004514:	008100b4 	movhi	r2,1026
 4004518:	10a27404 	addi	r2,r2,-30256
 400451c:	11000017 	ldw	r4,0(r2)
 4004520:	40045081 	jmpi	4004508 <_cleanup_r>

04004524 <__sfmoreglue>:
 4004524:	defffc04 	addi	sp,sp,-16
 4004528:	dc400115 	stw	r17,4(sp)
 400452c:	2c401724 	muli	r17,r5,92
 4004530:	dc800215 	stw	r18,8(sp)
 4004534:	2825883a 	mov	r18,r5
 4004538:	89400304 	addi	r5,r17,12
 400453c:	dc000015 	stw	r16,0(sp)
 4004540:	dfc00315 	stw	ra,12(sp)
 4004544:	40053300 	call	4005330 <_malloc_r>
 4004548:	0021883a 	mov	r16,zero
 400454c:	880d883a 	mov	r6,r17
 4004550:	000b883a 	mov	r5,zero
 4004554:	10000626 	beq	r2,zero,4004570 <__sfmoreglue+0x4c>
 4004558:	11000304 	addi	r4,r2,12
 400455c:	14800115 	stw	r18,4(r2)
 4004560:	10000015 	stw	zero,0(r2)
 4004564:	11000215 	stw	r4,8(r2)
 4004568:	1021883a 	mov	r16,r2
 400456c:	4005cd40 	call	4005cd4 <memset>
 4004570:	8005883a 	mov	r2,r16
 4004574:	dfc00317 	ldw	ra,12(sp)
 4004578:	dc800217 	ldw	r18,8(sp)
 400457c:	dc400117 	ldw	r17,4(sp)
 4004580:	dc000017 	ldw	r16,0(sp)
 4004584:	dec00404 	addi	sp,sp,16
 4004588:	f800283a 	ret

0400458c <__sfp>:
 400458c:	defffd04 	addi	sp,sp,-12
 4004590:	008100b4 	movhi	r2,1026
 4004594:	10a27404 	addi	r2,r2,-30256
 4004598:	dc000015 	stw	r16,0(sp)
 400459c:	14000017 	ldw	r16,0(r2)
 40045a0:	dc400115 	stw	r17,4(sp)
 40045a4:	dfc00215 	stw	ra,8(sp)
 40045a8:	80800e17 	ldw	r2,56(r16)
 40045ac:	2023883a 	mov	r17,r4
 40045b0:	10002626 	beq	r2,zero,400464c <__sfp+0xc0>
 40045b4:	8400b804 	addi	r16,r16,736
 40045b8:	80800117 	ldw	r2,4(r16)
 40045bc:	81000217 	ldw	r4,8(r16)
 40045c0:	10ffffc4 	addi	r3,r2,-1
 40045c4:	18000916 	blt	r3,zero,40045ec <__sfp+0x60>
 40045c8:	2080030f 	ldh	r2,12(r4)
 40045cc:	10000b26 	beq	r2,zero,40045fc <__sfp+0x70>
 40045d0:	017fffc4 	movi	r5,-1
 40045d4:	00000206 	br	40045e0 <__sfp+0x54>
 40045d8:	2080030f 	ldh	r2,12(r4)
 40045dc:	10000726 	beq	r2,zero,40045fc <__sfp+0x70>
 40045e0:	18ffffc4 	addi	r3,r3,-1
 40045e4:	21001704 	addi	r4,r4,92
 40045e8:	197ffb1e 	bne	r3,r5,40045d8 <__sfp+0x4c>
 40045ec:	80800017 	ldw	r2,0(r16)
 40045f0:	10001926 	beq	r2,zero,4004658 <__sfp+0xcc>
 40045f4:	1021883a 	mov	r16,r2
 40045f8:	003fef06 	br	40045b8 <__sfp+0x2c>
 40045fc:	00bfffc4 	movi	r2,-1
 4004600:	00c00044 	movi	r3,1
 4004604:	2080038d 	sth	r2,14(r4)
 4004608:	20c0030d 	sth	r3,12(r4)
 400460c:	20000015 	stw	zero,0(r4)
 4004610:	20000215 	stw	zero,8(r4)
 4004614:	20000115 	stw	zero,4(r4)
 4004618:	20000415 	stw	zero,16(r4)
 400461c:	20000515 	stw	zero,20(r4)
 4004620:	20000615 	stw	zero,24(r4)
 4004624:	20000c15 	stw	zero,48(r4)
 4004628:	20000d15 	stw	zero,52(r4)
 400462c:	20001115 	stw	zero,68(r4)
 4004630:	20001215 	stw	zero,72(r4)
 4004634:	2005883a 	mov	r2,r4
 4004638:	dfc00217 	ldw	ra,8(sp)
 400463c:	dc400117 	ldw	r17,4(sp)
 4004640:	dc000017 	ldw	r16,0(sp)
 4004644:	dec00304 	addi	sp,sp,12
 4004648:	f800283a 	ret
 400464c:	8009883a 	mov	r4,r16
 4004650:	40044240 	call	4004424 <__sinit>
 4004654:	003fd706 	br	40045b4 <__sfp+0x28>
 4004658:	8809883a 	mov	r4,r17
 400465c:	01400104 	movi	r5,4
 4004660:	40045240 	call	4004524 <__sfmoreglue>
 4004664:	80800015 	stw	r2,0(r16)
 4004668:	103fe21e 	bne	r2,zero,40045f4 <__sfp+0x68>
 400466c:	00800304 	movi	r2,12
 4004670:	0009883a 	mov	r4,zero
 4004674:	88800015 	stw	r2,0(r17)
 4004678:	003fee06 	br	4004634 <__sfp+0xa8>

0400467c <_malloc_trim_r>:
 400467c:	defffb04 	addi	sp,sp,-20
 4004680:	dcc00315 	stw	r19,12(sp)
 4004684:	04c10074 	movhi	r19,1025
 4004688:	9cdcb804 	addi	r19,r19,29408
 400468c:	dc800215 	stw	r18,8(sp)
 4004690:	dc400115 	stw	r17,4(sp)
 4004694:	dc000015 	stw	r16,0(sp)
 4004698:	2823883a 	mov	r17,r5
 400469c:	2025883a 	mov	r18,r4
 40046a0:	dfc00415 	stw	ra,16(sp)
 40046a4:	400aa180 	call	400aa18 <__malloc_lock>
 40046a8:	98800217 	ldw	r2,8(r19)
 40046ac:	9009883a 	mov	r4,r18
 40046b0:	000b883a 	mov	r5,zero
 40046b4:	10c00117 	ldw	r3,4(r2)
 40046b8:	00bfff04 	movi	r2,-4
 40046bc:	18a0703a 	and	r16,r3,r2
 40046c0:	8463c83a 	sub	r17,r16,r17
 40046c4:	8c43fbc4 	addi	r17,r17,4079
 40046c8:	8822d33a 	srli	r17,r17,12
 40046cc:	0083ffc4 	movi	r2,4095
 40046d0:	8c7fffc4 	addi	r17,r17,-1
 40046d4:	8822933a 	slli	r17,r17,12
 40046d8:	1440060e 	bge	r2,r17,40046f4 <_malloc_trim_r+0x78>
 40046dc:	40073c40 	call	40073c4 <_sbrk_r>
 40046e0:	98c00217 	ldw	r3,8(r19)
 40046e4:	9009883a 	mov	r4,r18
 40046e8:	044bc83a 	sub	r5,zero,r17
 40046ec:	80c7883a 	add	r3,r16,r3
 40046f0:	10c00926 	beq	r2,r3,4004718 <_malloc_trim_r+0x9c>
 40046f4:	400ab200 	call	400ab20 <__malloc_unlock>
 40046f8:	0005883a 	mov	r2,zero
 40046fc:	dfc00417 	ldw	ra,16(sp)
 4004700:	dcc00317 	ldw	r19,12(sp)
 4004704:	dc800217 	ldw	r18,8(sp)
 4004708:	dc400117 	ldw	r17,4(sp)
 400470c:	dc000017 	ldw	r16,0(sp)
 4004710:	dec00504 	addi	sp,sp,20
 4004714:	f800283a 	ret
 4004718:	9009883a 	mov	r4,r18
 400471c:	40073c40 	call	40073c4 <_sbrk_r>
 4004720:	844dc83a 	sub	r6,r16,r17
 4004724:	00ffffc4 	movi	r3,-1
 4004728:	9009883a 	mov	r4,r18
 400472c:	000b883a 	mov	r5,zero
 4004730:	01c100b4 	movhi	r7,1026
 4004734:	39e2cf04 	addi	r7,r7,-29892
 4004738:	31800054 	ori	r6,r6,1
 400473c:	10c00926 	beq	r2,r3,4004764 <_malloc_trim_r+0xe8>
 4004740:	38800017 	ldw	r2,0(r7)
 4004744:	98c00217 	ldw	r3,8(r19)
 4004748:	9009883a 	mov	r4,r18
 400474c:	1445c83a 	sub	r2,r2,r17
 4004750:	38800015 	stw	r2,0(r7)
 4004754:	19800115 	stw	r6,4(r3)
 4004758:	400ab200 	call	400ab20 <__malloc_unlock>
 400475c:	00800044 	movi	r2,1
 4004760:	003fe606 	br	40046fc <_malloc_trim_r+0x80>
 4004764:	40073c40 	call	40073c4 <_sbrk_r>
 4004768:	99800217 	ldw	r6,8(r19)
 400476c:	100f883a 	mov	r7,r2
 4004770:	9009883a 	mov	r4,r18
 4004774:	1187c83a 	sub	r3,r2,r6
 4004778:	008003c4 	movi	r2,15
 400477c:	19400054 	ori	r5,r3,1
 4004780:	10ffdc0e 	bge	r2,r3,40046f4 <_malloc_trim_r+0x78>
 4004784:	008100b4 	movhi	r2,1026
 4004788:	10a27804 	addi	r2,r2,-30240
 400478c:	10c00017 	ldw	r3,0(r2)
 4004790:	008100b4 	movhi	r2,1026
 4004794:	10a2cf04 	addi	r2,r2,-29892
 4004798:	31400115 	stw	r5,4(r6)
 400479c:	38c7c83a 	sub	r3,r7,r3
 40047a0:	10c00015 	stw	r3,0(r2)
 40047a4:	003fd306 	br	40046f4 <_malloc_trim_r+0x78>

040047a8 <_free_r>:
 40047a8:	defffd04 	addi	sp,sp,-12
 40047ac:	dc400115 	stw	r17,4(sp)
 40047b0:	dc000015 	stw	r16,0(sp)
 40047b4:	dfc00215 	stw	ra,8(sp)
 40047b8:	2821883a 	mov	r16,r5
 40047bc:	2023883a 	mov	r17,r4
 40047c0:	28005a26 	beq	r5,zero,400492c <_free_r+0x184>
 40047c4:	400aa180 	call	400aa18 <__malloc_lock>
 40047c8:	823ffe04 	addi	r8,r16,-8
 40047cc:	41400117 	ldw	r5,4(r8)
 40047d0:	00bfff84 	movi	r2,-2
 40047d4:	02810074 	movhi	r10,1025
 40047d8:	529cb804 	addi	r10,r10,29408
 40047dc:	288e703a 	and	r7,r5,r2
 40047e0:	41cd883a 	add	r6,r8,r7
 40047e4:	30c00117 	ldw	r3,4(r6)
 40047e8:	51000217 	ldw	r4,8(r10)
 40047ec:	00bfff04 	movi	r2,-4
 40047f0:	1892703a 	and	r9,r3,r2
 40047f4:	5017883a 	mov	r11,r10
 40047f8:	31006726 	beq	r6,r4,4004998 <_free_r+0x1f0>
 40047fc:	2880004c 	andi	r2,r5,1
 4004800:	1005003a 	cmpeq	r2,r2,zero
 4004804:	32400115 	stw	r9,4(r6)
 4004808:	10001a1e 	bne	r2,zero,4004874 <_free_r+0xcc>
 400480c:	000b883a 	mov	r5,zero
 4004810:	3247883a 	add	r3,r6,r9
 4004814:	18800117 	ldw	r2,4(r3)
 4004818:	1080004c 	andi	r2,r2,1
 400481c:	1000231e 	bne	r2,zero,40048ac <_free_r+0x104>
 4004820:	280ac03a 	cmpne	r5,r5,zero
 4004824:	3a4f883a 	add	r7,r7,r9
 4004828:	2800451e 	bne	r5,zero,4004940 <_free_r+0x198>
 400482c:	31000217 	ldw	r4,8(r6)
 4004830:	00810074 	movhi	r2,1025
 4004834:	109cba04 	addi	r2,r2,29416
 4004838:	20807b26 	beq	r4,r2,4004a28 <_free_r+0x280>
 400483c:	30800317 	ldw	r2,12(r6)
 4004840:	3a07883a 	add	r3,r7,r8
 4004844:	19c00015 	stw	r7,0(r3)
 4004848:	11000215 	stw	r4,8(r2)
 400484c:	20800315 	stw	r2,12(r4)
 4004850:	38800054 	ori	r2,r7,1
 4004854:	40800115 	stw	r2,4(r8)
 4004858:	28001a26 	beq	r5,zero,40048c4 <_free_r+0x11c>
 400485c:	8809883a 	mov	r4,r17
 4004860:	dfc00217 	ldw	ra,8(sp)
 4004864:	dc400117 	ldw	r17,4(sp)
 4004868:	dc000017 	ldw	r16,0(sp)
 400486c:	dec00304 	addi	sp,sp,12
 4004870:	400ab201 	jmpi	400ab20 <__malloc_unlock>
 4004874:	80bffe17 	ldw	r2,-8(r16)
 4004878:	50c00204 	addi	r3,r10,8
 400487c:	4091c83a 	sub	r8,r8,r2
 4004880:	41000217 	ldw	r4,8(r8)
 4004884:	388f883a 	add	r7,r7,r2
 4004888:	20c06126 	beq	r4,r3,4004a10 <_free_r+0x268>
 400488c:	40800317 	ldw	r2,12(r8)
 4004890:	3247883a 	add	r3,r6,r9
 4004894:	000b883a 	mov	r5,zero
 4004898:	11000215 	stw	r4,8(r2)
 400489c:	20800315 	stw	r2,12(r4)
 40048a0:	18800117 	ldw	r2,4(r3)
 40048a4:	1080004c 	andi	r2,r2,1
 40048a8:	103fdd26 	beq	r2,zero,4004820 <_free_r+0x78>
 40048ac:	38800054 	ori	r2,r7,1
 40048b0:	3a07883a 	add	r3,r7,r8
 40048b4:	280ac03a 	cmpne	r5,r5,zero
 40048b8:	40800115 	stw	r2,4(r8)
 40048bc:	19c00015 	stw	r7,0(r3)
 40048c0:	283fe61e 	bne	r5,zero,400485c <_free_r+0xb4>
 40048c4:	00807fc4 	movi	r2,511
 40048c8:	11c01f2e 	bgeu	r2,r7,4004948 <_free_r+0x1a0>
 40048cc:	3806d27a 	srli	r3,r7,9
 40048d0:	1800481e 	bne	r3,zero,40049f4 <_free_r+0x24c>
 40048d4:	3804d0fa 	srli	r2,r7,3
 40048d8:	100690fa 	slli	r3,r2,3
 40048dc:	1acd883a 	add	r6,r3,r11
 40048e0:	31400217 	ldw	r5,8(r6)
 40048e4:	31405926 	beq	r6,r5,4004a4c <_free_r+0x2a4>
 40048e8:	28800117 	ldw	r2,4(r5)
 40048ec:	00ffff04 	movi	r3,-4
 40048f0:	10c4703a 	and	r2,r2,r3
 40048f4:	3880022e 	bgeu	r7,r2,4004900 <_free_r+0x158>
 40048f8:	29400217 	ldw	r5,8(r5)
 40048fc:	317ffa1e 	bne	r6,r5,40048e8 <_free_r+0x140>
 4004900:	29800317 	ldw	r6,12(r5)
 4004904:	41800315 	stw	r6,12(r8)
 4004908:	41400215 	stw	r5,8(r8)
 400490c:	8809883a 	mov	r4,r17
 4004910:	2a000315 	stw	r8,12(r5)
 4004914:	32000215 	stw	r8,8(r6)
 4004918:	dfc00217 	ldw	ra,8(sp)
 400491c:	dc400117 	ldw	r17,4(sp)
 4004920:	dc000017 	ldw	r16,0(sp)
 4004924:	dec00304 	addi	sp,sp,12
 4004928:	400ab201 	jmpi	400ab20 <__malloc_unlock>
 400492c:	dfc00217 	ldw	ra,8(sp)
 4004930:	dc400117 	ldw	r17,4(sp)
 4004934:	dc000017 	ldw	r16,0(sp)
 4004938:	dec00304 	addi	sp,sp,12
 400493c:	f800283a 	ret
 4004940:	31000217 	ldw	r4,8(r6)
 4004944:	003fbd06 	br	400483c <_free_r+0x94>
 4004948:	3806d0fa 	srli	r3,r7,3
 400494c:	00800044 	movi	r2,1
 4004950:	51400117 	ldw	r5,4(r10)
 4004954:	180890fa 	slli	r4,r3,3
 4004958:	1807d0ba 	srai	r3,r3,2
 400495c:	22c9883a 	add	r4,r4,r11
 4004960:	21800217 	ldw	r6,8(r4)
 4004964:	10c4983a 	sll	r2,r2,r3
 4004968:	41000315 	stw	r4,12(r8)
 400496c:	41800215 	stw	r6,8(r8)
 4004970:	288ab03a 	or	r5,r5,r2
 4004974:	22000215 	stw	r8,8(r4)
 4004978:	8809883a 	mov	r4,r17
 400497c:	51400115 	stw	r5,4(r10)
 4004980:	32000315 	stw	r8,12(r6)
 4004984:	dfc00217 	ldw	ra,8(sp)
 4004988:	dc400117 	ldw	r17,4(sp)
 400498c:	dc000017 	ldw	r16,0(sp)
 4004990:	dec00304 	addi	sp,sp,12
 4004994:	400ab201 	jmpi	400ab20 <__malloc_unlock>
 4004998:	2880004c 	andi	r2,r5,1
 400499c:	3a4d883a 	add	r6,r7,r9
 40049a0:	1000071e 	bne	r2,zero,40049c0 <_free_r+0x218>
 40049a4:	80bffe17 	ldw	r2,-8(r16)
 40049a8:	4091c83a 	sub	r8,r8,r2
 40049ac:	41000317 	ldw	r4,12(r8)
 40049b0:	40c00217 	ldw	r3,8(r8)
 40049b4:	308d883a 	add	r6,r6,r2
 40049b8:	20c00215 	stw	r3,8(r4)
 40049bc:	19000315 	stw	r4,12(r3)
 40049c0:	008100b4 	movhi	r2,1026
 40049c4:	10a27704 	addi	r2,r2,-30244
 40049c8:	11000017 	ldw	r4,0(r2)
 40049cc:	30c00054 	ori	r3,r6,1
 40049d0:	52000215 	stw	r8,8(r10)
 40049d4:	40c00115 	stw	r3,4(r8)
 40049d8:	313fa036 	bltu	r6,r4,400485c <_free_r+0xb4>
 40049dc:	008100b4 	movhi	r2,1026
 40049e0:	10a2ab04 	addi	r2,r2,-30036
 40049e4:	11400017 	ldw	r5,0(r2)
 40049e8:	8809883a 	mov	r4,r17
 40049ec:	400467c0 	call	400467c <_malloc_trim_r>
 40049f0:	003f9a06 	br	400485c <_free_r+0xb4>
 40049f4:	00800104 	movi	r2,4
 40049f8:	10c0072e 	bgeu	r2,r3,4004a18 <_free_r+0x270>
 40049fc:	00800504 	movi	r2,20
 4004a00:	10c01936 	bltu	r2,r3,4004a68 <_free_r+0x2c0>
 4004a04:	188016c4 	addi	r2,r3,91
 4004a08:	100690fa 	slli	r3,r2,3
 4004a0c:	003fb306 	br	40048dc <_free_r+0x134>
 4004a10:	01400044 	movi	r5,1
 4004a14:	003f7e06 	br	4004810 <_free_r+0x68>
 4004a18:	3804d1ba 	srli	r2,r7,6
 4004a1c:	10800e04 	addi	r2,r2,56
 4004a20:	100690fa 	slli	r3,r2,3
 4004a24:	003fad06 	br	40048dc <_free_r+0x134>
 4004a28:	22000315 	stw	r8,12(r4)
 4004a2c:	22000215 	stw	r8,8(r4)
 4004a30:	3a05883a 	add	r2,r7,r8
 4004a34:	38c00054 	ori	r3,r7,1
 4004a38:	11c00015 	stw	r7,0(r2)
 4004a3c:	41000215 	stw	r4,8(r8)
 4004a40:	40c00115 	stw	r3,4(r8)
 4004a44:	41000315 	stw	r4,12(r8)
 4004a48:	003f8406 	br	400485c <_free_r+0xb4>
 4004a4c:	1005d0ba 	srai	r2,r2,2
 4004a50:	00c00044 	movi	r3,1
 4004a54:	51000117 	ldw	r4,4(r10)
 4004a58:	1886983a 	sll	r3,r3,r2
 4004a5c:	20c8b03a 	or	r4,r4,r3
 4004a60:	51000115 	stw	r4,4(r10)
 4004a64:	003fa706 	br	4004904 <_free_r+0x15c>
 4004a68:	00801504 	movi	r2,84
 4004a6c:	10c00436 	bltu	r2,r3,4004a80 <_free_r+0x2d8>
 4004a70:	3804d33a 	srli	r2,r7,12
 4004a74:	10801b84 	addi	r2,r2,110
 4004a78:	100690fa 	slli	r3,r2,3
 4004a7c:	003f9706 	br	40048dc <_free_r+0x134>
 4004a80:	00805504 	movi	r2,340
 4004a84:	10c00436 	bltu	r2,r3,4004a98 <_free_r+0x2f0>
 4004a88:	3804d3fa 	srli	r2,r7,15
 4004a8c:	10801dc4 	addi	r2,r2,119
 4004a90:	100690fa 	slli	r3,r2,3
 4004a94:	003f9106 	br	40048dc <_free_r+0x134>
 4004a98:	00815504 	movi	r2,1364
 4004a9c:	10c0032e 	bgeu	r2,r3,4004aac <_free_r+0x304>
 4004aa0:	00801f84 	movi	r2,126
 4004aa4:	00c0fc04 	movi	r3,1008
 4004aa8:	003f8c06 	br	40048dc <_free_r+0x134>
 4004aac:	3804d4ba 	srli	r2,r7,18
 4004ab0:	10801f04 	addi	r2,r2,124
 4004ab4:	100690fa 	slli	r3,r2,3
 4004ab8:	003f8806 	br	40048dc <_free_r+0x134>

04004abc <__sfvwrite_r>:
 4004abc:	30800217 	ldw	r2,8(r6)
 4004ac0:	defff504 	addi	sp,sp,-44
 4004ac4:	df000915 	stw	fp,36(sp)
 4004ac8:	dd800715 	stw	r22,28(sp)
 4004acc:	dc800315 	stw	r18,12(sp)
 4004ad0:	dfc00a15 	stw	ra,40(sp)
 4004ad4:	ddc00815 	stw	r23,32(sp)
 4004ad8:	dd400615 	stw	r21,24(sp)
 4004adc:	dd000515 	stw	r20,20(sp)
 4004ae0:	dcc00415 	stw	r19,16(sp)
 4004ae4:	dc400215 	stw	r17,8(sp)
 4004ae8:	dc000115 	stw	r16,4(sp)
 4004aec:	302d883a 	mov	r22,r6
 4004af0:	2039883a 	mov	fp,r4
 4004af4:	2825883a 	mov	r18,r5
 4004af8:	10001c26 	beq	r2,zero,4004b6c <__sfvwrite_r+0xb0>
 4004afc:	29c0030b 	ldhu	r7,12(r5)
 4004b00:	3880020c 	andi	r2,r7,8
 4004b04:	10002726 	beq	r2,zero,4004ba4 <__sfvwrite_r+0xe8>
 4004b08:	28800417 	ldw	r2,16(r5)
 4004b0c:	10002526 	beq	r2,zero,4004ba4 <__sfvwrite_r+0xe8>
 4004b10:	3880008c 	andi	r2,r7,2
 4004b14:	b5400017 	ldw	r21,0(r22)
 4004b18:	10002826 	beq	r2,zero,4004bbc <__sfvwrite_r+0x100>
 4004b1c:	0021883a 	mov	r16,zero
 4004b20:	0023883a 	mov	r17,zero
 4004b24:	880d883a 	mov	r6,r17
 4004b28:	e009883a 	mov	r4,fp
 4004b2c:	00810004 	movi	r2,1024
 4004b30:	80006e26 	beq	r16,zero,4004cec <__sfvwrite_r+0x230>
 4004b34:	800f883a 	mov	r7,r16
 4004b38:	91400717 	ldw	r5,28(r18)
 4004b3c:	1400012e 	bgeu	r2,r16,4004b44 <__sfvwrite_r+0x88>
 4004b40:	100f883a 	mov	r7,r2
 4004b44:	90c00917 	ldw	r3,36(r18)
 4004b48:	183ee83a 	callr	r3
 4004b4c:	1007883a 	mov	r3,r2
 4004b50:	80a1c83a 	sub	r16,r16,r2
 4004b54:	88a3883a 	add	r17,r17,r2
 4004b58:	00806d0e 	bge	zero,r2,4004d10 <__sfvwrite_r+0x254>
 4004b5c:	b0800217 	ldw	r2,8(r22)
 4004b60:	10c5c83a 	sub	r2,r2,r3
 4004b64:	b0800215 	stw	r2,8(r22)
 4004b68:	103fee1e 	bne	r2,zero,4004b24 <__sfvwrite_r+0x68>
 4004b6c:	0009883a 	mov	r4,zero
 4004b70:	2005883a 	mov	r2,r4
 4004b74:	dfc00a17 	ldw	ra,40(sp)
 4004b78:	df000917 	ldw	fp,36(sp)
 4004b7c:	ddc00817 	ldw	r23,32(sp)
 4004b80:	dd800717 	ldw	r22,28(sp)
 4004b84:	dd400617 	ldw	r21,24(sp)
 4004b88:	dd000517 	ldw	r20,20(sp)
 4004b8c:	dcc00417 	ldw	r19,16(sp)
 4004b90:	dc800317 	ldw	r18,12(sp)
 4004b94:	dc400217 	ldw	r17,8(sp)
 4004b98:	dc000117 	ldw	r16,4(sp)
 4004b9c:	dec00b04 	addi	sp,sp,44
 4004ba0:	f800283a 	ret
 4004ba4:	40028840 	call	4002884 <__swsetup_r>
 4004ba8:	1000e41e 	bne	r2,zero,4004f3c <__sfvwrite_r+0x480>
 4004bac:	91c0030b 	ldhu	r7,12(r18)
 4004bb0:	b5400017 	ldw	r21,0(r22)
 4004bb4:	3880008c 	andi	r2,r7,2
 4004bb8:	103fd81e 	bne	r2,zero,4004b1c <__sfvwrite_r+0x60>
 4004bbc:	3880004c 	andi	r2,r7,1
 4004bc0:	1005003a 	cmpeq	r2,r2,zero
 4004bc4:	10005726 	beq	r2,zero,4004d24 <__sfvwrite_r+0x268>
 4004bc8:	0029883a 	mov	r20,zero
 4004bcc:	002f883a 	mov	r23,zero
 4004bd0:	a0004226 	beq	r20,zero,4004cdc <__sfvwrite_r+0x220>
 4004bd4:	3880800c 	andi	r2,r7,512
 4004bd8:	94000217 	ldw	r16,8(r18)
 4004bdc:	10008b26 	beq	r2,zero,4004e0c <__sfvwrite_r+0x350>
 4004be0:	800d883a 	mov	r6,r16
 4004be4:	a400a536 	bltu	r20,r16,4004e7c <__sfvwrite_r+0x3c0>
 4004be8:	3881200c 	andi	r2,r7,1152
 4004bec:	10002726 	beq	r2,zero,4004c8c <__sfvwrite_r+0x1d0>
 4004bf0:	90800517 	ldw	r2,20(r18)
 4004bf4:	92000417 	ldw	r8,16(r18)
 4004bf8:	91400017 	ldw	r5,0(r18)
 4004bfc:	1087883a 	add	r3,r2,r2
 4004c00:	1887883a 	add	r3,r3,r2
 4004c04:	1808d7fa 	srli	r4,r3,31
 4004c08:	2a21c83a 	sub	r16,r5,r8
 4004c0c:	80800044 	addi	r2,r16,1
 4004c10:	20c9883a 	add	r4,r4,r3
 4004c14:	2027d07a 	srai	r19,r4,1
 4004c18:	a085883a 	add	r2,r20,r2
 4004c1c:	980d883a 	mov	r6,r19
 4004c20:	9880022e 	bgeu	r19,r2,4004c2c <__sfvwrite_r+0x170>
 4004c24:	1027883a 	mov	r19,r2
 4004c28:	100d883a 	mov	r6,r2
 4004c2c:	3881000c 	andi	r2,r7,1024
 4004c30:	1000b826 	beq	r2,zero,4004f14 <__sfvwrite_r+0x458>
 4004c34:	300b883a 	mov	r5,r6
 4004c38:	e009883a 	mov	r4,fp
 4004c3c:	40053300 	call	4005330 <_malloc_r>
 4004c40:	10003126 	beq	r2,zero,4004d08 <__sfvwrite_r+0x24c>
 4004c44:	91400417 	ldw	r5,16(r18)
 4004c48:	1009883a 	mov	r4,r2
 4004c4c:	800d883a 	mov	r6,r16
 4004c50:	1023883a 	mov	r17,r2
 4004c54:	4005b540 	call	4005b54 <memcpy>
 4004c58:	90c0030b 	ldhu	r3,12(r18)
 4004c5c:	00beffc4 	movi	r2,-1025
 4004c60:	1886703a 	and	r3,r3,r2
 4004c64:	18c02014 	ori	r3,r3,128
 4004c68:	90c0030d 	sth	r3,12(r18)
 4004c6c:	9c07c83a 	sub	r3,r19,r16
 4004c70:	8c05883a 	add	r2,r17,r16
 4004c74:	a00d883a 	mov	r6,r20
 4004c78:	a021883a 	mov	r16,r20
 4004c7c:	90800015 	stw	r2,0(r18)
 4004c80:	90c00215 	stw	r3,8(r18)
 4004c84:	94400415 	stw	r17,16(r18)
 4004c88:	94c00515 	stw	r19,20(r18)
 4004c8c:	91000017 	ldw	r4,0(r18)
 4004c90:	b80b883a 	mov	r5,r23
 4004c94:	a023883a 	mov	r17,r20
 4004c98:	4005bf40 	call	4005bf4 <memmove>
 4004c9c:	90c00217 	ldw	r3,8(r18)
 4004ca0:	90800017 	ldw	r2,0(r18)
 4004ca4:	a027883a 	mov	r19,r20
 4004ca8:	1c07c83a 	sub	r3,r3,r16
 4004cac:	1405883a 	add	r2,r2,r16
 4004cb0:	90c00215 	stw	r3,8(r18)
 4004cb4:	a021883a 	mov	r16,r20
 4004cb8:	90800015 	stw	r2,0(r18)
 4004cbc:	b0800217 	ldw	r2,8(r22)
 4004cc0:	1405c83a 	sub	r2,r2,r16
 4004cc4:	b0800215 	stw	r2,8(r22)
 4004cc8:	103fa826 	beq	r2,zero,4004b6c <__sfvwrite_r+0xb0>
 4004ccc:	a469c83a 	sub	r20,r20,r17
 4004cd0:	91c0030b 	ldhu	r7,12(r18)
 4004cd4:	bcef883a 	add	r23,r23,r19
 4004cd8:	a03fbe1e 	bne	r20,zero,4004bd4 <__sfvwrite_r+0x118>
 4004cdc:	adc00017 	ldw	r23,0(r21)
 4004ce0:	ad000117 	ldw	r20,4(r21)
 4004ce4:	ad400204 	addi	r21,r21,8
 4004ce8:	003fb906 	br	4004bd0 <__sfvwrite_r+0x114>
 4004cec:	ac400017 	ldw	r17,0(r21)
 4004cf0:	ac000117 	ldw	r16,4(r21)
 4004cf4:	ad400204 	addi	r21,r21,8
 4004cf8:	003f8a06 	br	4004b24 <__sfvwrite_r+0x68>
 4004cfc:	91400417 	ldw	r5,16(r18)
 4004d00:	e009883a 	mov	r4,fp
 4004d04:	40047a80 	call	40047a8 <_free_r>
 4004d08:	00800304 	movi	r2,12
 4004d0c:	e0800015 	stw	r2,0(fp)
 4004d10:	9080030b 	ldhu	r2,12(r18)
 4004d14:	013fffc4 	movi	r4,-1
 4004d18:	10801014 	ori	r2,r2,64
 4004d1c:	9080030d 	sth	r2,12(r18)
 4004d20:	003f9306 	br	4004b70 <__sfvwrite_r+0xb4>
 4004d24:	0027883a 	mov	r19,zero
 4004d28:	002f883a 	mov	r23,zero
 4004d2c:	d8000015 	stw	zero,0(sp)
 4004d30:	0029883a 	mov	r20,zero
 4004d34:	98001e26 	beq	r19,zero,4004db0 <__sfvwrite_r+0x2f4>
 4004d38:	d8c00017 	ldw	r3,0(sp)
 4004d3c:	1804c03a 	cmpne	r2,r3,zero
 4004d40:	10005e26 	beq	r2,zero,4004ebc <__sfvwrite_r+0x400>
 4004d44:	9821883a 	mov	r16,r19
 4004d48:	a4c0012e 	bgeu	r20,r19,4004d50 <__sfvwrite_r+0x294>
 4004d4c:	a021883a 	mov	r16,r20
 4004d50:	91000017 	ldw	r4,0(r18)
 4004d54:	90800417 	ldw	r2,16(r18)
 4004d58:	91800217 	ldw	r6,8(r18)
 4004d5c:	91c00517 	ldw	r7,20(r18)
 4004d60:	1100022e 	bgeu	r2,r4,4004d6c <__sfvwrite_r+0x2b0>
 4004d64:	31e3883a 	add	r17,r6,r7
 4004d68:	8c001616 	blt	r17,r16,4004dc4 <__sfvwrite_r+0x308>
 4004d6c:	81c03816 	blt	r16,r7,4004e50 <__sfvwrite_r+0x394>
 4004d70:	90c00917 	ldw	r3,36(r18)
 4004d74:	91400717 	ldw	r5,28(r18)
 4004d78:	e009883a 	mov	r4,fp
 4004d7c:	b80d883a 	mov	r6,r23
 4004d80:	183ee83a 	callr	r3
 4004d84:	1023883a 	mov	r17,r2
 4004d88:	00bfe10e 	bge	zero,r2,4004d10 <__sfvwrite_r+0x254>
 4004d8c:	a469c83a 	sub	r20,r20,r17
 4004d90:	a0001826 	beq	r20,zero,4004df4 <__sfvwrite_r+0x338>
 4004d94:	b0800217 	ldw	r2,8(r22)
 4004d98:	1445c83a 	sub	r2,r2,r17
 4004d9c:	b0800215 	stw	r2,8(r22)
 4004da0:	103f7226 	beq	r2,zero,4004b6c <__sfvwrite_r+0xb0>
 4004da4:	9c67c83a 	sub	r19,r19,r17
 4004da8:	bc6f883a 	add	r23,r23,r17
 4004dac:	983fe21e 	bne	r19,zero,4004d38 <__sfvwrite_r+0x27c>
 4004db0:	adc00017 	ldw	r23,0(r21)
 4004db4:	acc00117 	ldw	r19,4(r21)
 4004db8:	ad400204 	addi	r21,r21,8
 4004dbc:	d8000015 	stw	zero,0(sp)
 4004dc0:	003fdc06 	br	4004d34 <__sfvwrite_r+0x278>
 4004dc4:	b80b883a 	mov	r5,r23
 4004dc8:	880d883a 	mov	r6,r17
 4004dcc:	4005bf40 	call	4005bf4 <memmove>
 4004dd0:	90c00017 	ldw	r3,0(r18)
 4004dd4:	e009883a 	mov	r4,fp
 4004dd8:	900b883a 	mov	r5,r18
 4004ddc:	1c47883a 	add	r3,r3,r17
 4004de0:	90c00015 	stw	r3,0(r18)
 4004de4:	400418c0 	call	400418c <_fflush_r>
 4004de8:	103fc91e 	bne	r2,zero,4004d10 <__sfvwrite_r+0x254>
 4004dec:	a469c83a 	sub	r20,r20,r17
 4004df0:	a03fe81e 	bne	r20,zero,4004d94 <__sfvwrite_r+0x2d8>
 4004df4:	e009883a 	mov	r4,fp
 4004df8:	900b883a 	mov	r5,r18
 4004dfc:	400418c0 	call	400418c <_fflush_r>
 4004e00:	103fc31e 	bne	r2,zero,4004d10 <__sfvwrite_r+0x254>
 4004e04:	d8000015 	stw	zero,0(sp)
 4004e08:	003fe206 	br	4004d94 <__sfvwrite_r+0x2d8>
 4004e0c:	91000017 	ldw	r4,0(r18)
 4004e10:	90800417 	ldw	r2,16(r18)
 4004e14:	1100022e 	bgeu	r2,r4,4004e20 <__sfvwrite_r+0x364>
 4004e18:	8023883a 	mov	r17,r16
 4004e1c:	85003136 	bltu	r16,r20,4004ee4 <__sfvwrite_r+0x428>
 4004e20:	91c00517 	ldw	r7,20(r18)
 4004e24:	a1c01836 	bltu	r20,r7,4004e88 <__sfvwrite_r+0x3cc>
 4004e28:	90c00917 	ldw	r3,36(r18)
 4004e2c:	91400717 	ldw	r5,28(r18)
 4004e30:	e009883a 	mov	r4,fp
 4004e34:	b80d883a 	mov	r6,r23
 4004e38:	183ee83a 	callr	r3
 4004e3c:	1021883a 	mov	r16,r2
 4004e40:	00bfb30e 	bge	zero,r2,4004d10 <__sfvwrite_r+0x254>
 4004e44:	1023883a 	mov	r17,r2
 4004e48:	1027883a 	mov	r19,r2
 4004e4c:	003f9b06 	br	4004cbc <__sfvwrite_r+0x200>
 4004e50:	b80b883a 	mov	r5,r23
 4004e54:	800d883a 	mov	r6,r16
 4004e58:	4005bf40 	call	4005bf4 <memmove>
 4004e5c:	90c00217 	ldw	r3,8(r18)
 4004e60:	90800017 	ldw	r2,0(r18)
 4004e64:	8023883a 	mov	r17,r16
 4004e68:	1c07c83a 	sub	r3,r3,r16
 4004e6c:	1405883a 	add	r2,r2,r16
 4004e70:	90c00215 	stw	r3,8(r18)
 4004e74:	90800015 	stw	r2,0(r18)
 4004e78:	003fc406 	br	4004d8c <__sfvwrite_r+0x2d0>
 4004e7c:	a00d883a 	mov	r6,r20
 4004e80:	a021883a 	mov	r16,r20
 4004e84:	003f8106 	br	4004c8c <__sfvwrite_r+0x1d0>
 4004e88:	b80b883a 	mov	r5,r23
 4004e8c:	a00d883a 	mov	r6,r20
 4004e90:	4005bf40 	call	4005bf4 <memmove>
 4004e94:	90c00217 	ldw	r3,8(r18)
 4004e98:	90800017 	ldw	r2,0(r18)
 4004e9c:	a021883a 	mov	r16,r20
 4004ea0:	1d07c83a 	sub	r3,r3,r20
 4004ea4:	1505883a 	add	r2,r2,r20
 4004ea8:	a023883a 	mov	r17,r20
 4004eac:	a027883a 	mov	r19,r20
 4004eb0:	90c00215 	stw	r3,8(r18)
 4004eb4:	90800015 	stw	r2,0(r18)
 4004eb8:	003f8006 	br	4004cbc <__sfvwrite_r+0x200>
 4004ebc:	b809883a 	mov	r4,r23
 4004ec0:	01400284 	movi	r5,10
 4004ec4:	980d883a 	mov	r6,r19
 4004ec8:	4005a700 	call	4005a70 <memchr>
 4004ecc:	10001726 	beq	r2,zero,4004f2c <__sfvwrite_r+0x470>
 4004ed0:	15c5c83a 	sub	r2,r2,r23
 4004ed4:	15000044 	addi	r20,r2,1
 4004ed8:	00800044 	movi	r2,1
 4004edc:	d8800015 	stw	r2,0(sp)
 4004ee0:	003f9806 	br	4004d44 <__sfvwrite_r+0x288>
 4004ee4:	b80b883a 	mov	r5,r23
 4004ee8:	800d883a 	mov	r6,r16
 4004eec:	4005bf40 	call	4005bf4 <memmove>
 4004ef0:	90c00017 	ldw	r3,0(r18)
 4004ef4:	e009883a 	mov	r4,fp
 4004ef8:	900b883a 	mov	r5,r18
 4004efc:	1c07883a 	add	r3,r3,r16
 4004f00:	90c00015 	stw	r3,0(r18)
 4004f04:	8027883a 	mov	r19,r16
 4004f08:	400418c0 	call	400418c <_fflush_r>
 4004f0c:	103f6b26 	beq	r2,zero,4004cbc <__sfvwrite_r+0x200>
 4004f10:	003f7f06 	br	4004d10 <__sfvwrite_r+0x254>
 4004f14:	400b883a 	mov	r5,r8
 4004f18:	e009883a 	mov	r4,fp
 4004f1c:	4006d600 	call	4006d60 <_realloc_r>
 4004f20:	103f7626 	beq	r2,zero,4004cfc <__sfvwrite_r+0x240>
 4004f24:	1023883a 	mov	r17,r2
 4004f28:	003f5006 	br	4004c6c <__sfvwrite_r+0x1b0>
 4004f2c:	00c00044 	movi	r3,1
 4004f30:	9d000044 	addi	r20,r19,1
 4004f34:	d8c00015 	stw	r3,0(sp)
 4004f38:	003f8206 	br	4004d44 <__sfvwrite_r+0x288>
 4004f3c:	9080030b 	ldhu	r2,12(r18)
 4004f40:	00c00244 	movi	r3,9
 4004f44:	013fffc4 	movi	r4,-1
 4004f48:	10801014 	ori	r2,r2,64
 4004f4c:	9080030d 	sth	r2,12(r18)
 4004f50:	e0c00015 	stw	r3,0(fp)
 4004f54:	003f0606 	br	4004b70 <__sfvwrite_r+0xb4>

04004f58 <_fwalk_reent>:
 4004f58:	defff704 	addi	sp,sp,-36
 4004f5c:	dcc00315 	stw	r19,12(sp)
 4004f60:	24c0b804 	addi	r19,r4,736
 4004f64:	dd800615 	stw	r22,24(sp)
 4004f68:	dd400515 	stw	r21,20(sp)
 4004f6c:	dfc00815 	stw	ra,32(sp)
 4004f70:	ddc00715 	stw	r23,28(sp)
 4004f74:	dd000415 	stw	r20,16(sp)
 4004f78:	dc800215 	stw	r18,8(sp)
 4004f7c:	dc400115 	stw	r17,4(sp)
 4004f80:	dc000015 	stw	r16,0(sp)
 4004f84:	202b883a 	mov	r21,r4
 4004f88:	282d883a 	mov	r22,r5
 4004f8c:	40044140 	call	4004414 <__sfp_lock_acquire>
 4004f90:	98002126 	beq	r19,zero,4005018 <_fwalk_reent+0xc0>
 4004f94:	002f883a 	mov	r23,zero
 4004f98:	9c800117 	ldw	r18,4(r19)
 4004f9c:	9c000217 	ldw	r16,8(r19)
 4004fa0:	90bfffc4 	addi	r2,r18,-1
 4004fa4:	10000d16 	blt	r2,zero,4004fdc <_fwalk_reent+0x84>
 4004fa8:	0023883a 	mov	r17,zero
 4004fac:	053fffc4 	movi	r20,-1
 4004fb0:	8080030f 	ldh	r2,12(r16)
 4004fb4:	8c400044 	addi	r17,r17,1
 4004fb8:	10000626 	beq	r2,zero,4004fd4 <_fwalk_reent+0x7c>
 4004fbc:	8080038f 	ldh	r2,14(r16)
 4004fc0:	800b883a 	mov	r5,r16
 4004fc4:	a809883a 	mov	r4,r21
 4004fc8:	15000226 	beq	r2,r20,4004fd4 <_fwalk_reent+0x7c>
 4004fcc:	b03ee83a 	callr	r22
 4004fd0:	b8aeb03a 	or	r23,r23,r2
 4004fd4:	84001704 	addi	r16,r16,92
 4004fd8:	947ff51e 	bne	r18,r17,4004fb0 <_fwalk_reent+0x58>
 4004fdc:	9cc00017 	ldw	r19,0(r19)
 4004fe0:	983fed1e 	bne	r19,zero,4004f98 <_fwalk_reent+0x40>
 4004fe4:	40044180 	call	4004418 <__sfp_lock_release>
 4004fe8:	b805883a 	mov	r2,r23
 4004fec:	dfc00817 	ldw	ra,32(sp)
 4004ff0:	ddc00717 	ldw	r23,28(sp)
 4004ff4:	dd800617 	ldw	r22,24(sp)
 4004ff8:	dd400517 	ldw	r21,20(sp)
 4004ffc:	dd000417 	ldw	r20,16(sp)
 4005000:	dcc00317 	ldw	r19,12(sp)
 4005004:	dc800217 	ldw	r18,8(sp)
 4005008:	dc400117 	ldw	r17,4(sp)
 400500c:	dc000017 	ldw	r16,0(sp)
 4005010:	dec00904 	addi	sp,sp,36
 4005014:	f800283a 	ret
 4005018:	002f883a 	mov	r23,zero
 400501c:	003ff106 	br	4004fe4 <_fwalk_reent+0x8c>

04005020 <_fwalk>:
 4005020:	defff804 	addi	sp,sp,-32
 4005024:	dcc00315 	stw	r19,12(sp)
 4005028:	24c0b804 	addi	r19,r4,736
 400502c:	dd400515 	stw	r21,20(sp)
 4005030:	dfc00715 	stw	ra,28(sp)
 4005034:	dd800615 	stw	r22,24(sp)
 4005038:	dd000415 	stw	r20,16(sp)
 400503c:	dc800215 	stw	r18,8(sp)
 4005040:	dc400115 	stw	r17,4(sp)
 4005044:	dc000015 	stw	r16,0(sp)
 4005048:	282b883a 	mov	r21,r5
 400504c:	40044140 	call	4004414 <__sfp_lock_acquire>
 4005050:	98001f26 	beq	r19,zero,40050d0 <_fwalk+0xb0>
 4005054:	002d883a 	mov	r22,zero
 4005058:	9c800117 	ldw	r18,4(r19)
 400505c:	9c000217 	ldw	r16,8(r19)
 4005060:	90bfffc4 	addi	r2,r18,-1
 4005064:	10000c16 	blt	r2,zero,4005098 <_fwalk+0x78>
 4005068:	0023883a 	mov	r17,zero
 400506c:	053fffc4 	movi	r20,-1
 4005070:	8080030f 	ldh	r2,12(r16)
 4005074:	8c400044 	addi	r17,r17,1
 4005078:	10000526 	beq	r2,zero,4005090 <_fwalk+0x70>
 400507c:	8080038f 	ldh	r2,14(r16)
 4005080:	8009883a 	mov	r4,r16
 4005084:	15000226 	beq	r2,r20,4005090 <_fwalk+0x70>
 4005088:	a83ee83a 	callr	r21
 400508c:	b0acb03a 	or	r22,r22,r2
 4005090:	84001704 	addi	r16,r16,92
 4005094:	947ff61e 	bne	r18,r17,4005070 <_fwalk+0x50>
 4005098:	9cc00017 	ldw	r19,0(r19)
 400509c:	983fee1e 	bne	r19,zero,4005058 <_fwalk+0x38>
 40050a0:	40044180 	call	4004418 <__sfp_lock_release>
 40050a4:	b005883a 	mov	r2,r22
 40050a8:	dfc00717 	ldw	ra,28(sp)
 40050ac:	dd800617 	ldw	r22,24(sp)
 40050b0:	dd400517 	ldw	r21,20(sp)
 40050b4:	dd000417 	ldw	r20,16(sp)
 40050b8:	dcc00317 	ldw	r19,12(sp)
 40050bc:	dc800217 	ldw	r18,8(sp)
 40050c0:	dc400117 	ldw	r17,4(sp)
 40050c4:	dc000017 	ldw	r16,0(sp)
 40050c8:	dec00804 	addi	sp,sp,32
 40050cc:	f800283a 	ret
 40050d0:	002d883a 	mov	r22,zero
 40050d4:	003ff206 	br	40050a0 <_fwalk+0x80>

040050d8 <__locale_charset>:
 40050d8:	d0a00617 	ldw	r2,-32744(gp)
 40050dc:	f800283a 	ret

040050e0 <_localeconv_r>:
 40050e0:	00810074 	movhi	r2,1025
 40050e4:	109ac404 	addi	r2,r2,27408
 40050e8:	f800283a 	ret

040050ec <localeconv>:
 40050ec:	008100b4 	movhi	r2,1026
 40050f0:	10a27304 	addi	r2,r2,-30260
 40050f4:	11000017 	ldw	r4,0(r2)
 40050f8:	40050e01 	jmpi	40050e0 <_localeconv_r>

040050fc <_setlocale_r>:
 40050fc:	defffc04 	addi	sp,sp,-16
 4005100:	00c10074 	movhi	r3,1025
 4005104:	18dabf04 	addi	r3,r3,27388
 4005108:	dc800215 	stw	r18,8(sp)
 400510c:	dc400115 	stw	r17,4(sp)
 4005110:	dc000015 	stw	r16,0(sp)
 4005114:	2023883a 	mov	r17,r4
 4005118:	2825883a 	mov	r18,r5
 400511c:	dfc00315 	stw	ra,12(sp)
 4005120:	3021883a 	mov	r16,r6
 4005124:	3009883a 	mov	r4,r6
 4005128:	180b883a 	mov	r5,r3
 400512c:	30000926 	beq	r6,zero,4005154 <_setlocale_r+0x58>
 4005130:	40075800 	call	4007580 <strcmp>
 4005134:	8009883a 	mov	r4,r16
 4005138:	01410074 	movhi	r5,1025
 400513c:	295aaa04 	addi	r5,r5,27304
 4005140:	10000b1e 	bne	r2,zero,4005170 <_setlocale_r+0x74>
 4005144:	8c000d15 	stw	r16,52(r17)
 4005148:	8c800c15 	stw	r18,48(r17)
 400514c:	00c10074 	movhi	r3,1025
 4005150:	18dabf04 	addi	r3,r3,27388
 4005154:	1805883a 	mov	r2,r3
 4005158:	dfc00317 	ldw	ra,12(sp)
 400515c:	dc800217 	ldw	r18,8(sp)
 4005160:	dc400117 	ldw	r17,4(sp)
 4005164:	dc000017 	ldw	r16,0(sp)
 4005168:	dec00404 	addi	sp,sp,16
 400516c:	f800283a 	ret
 4005170:	40075800 	call	4007580 <strcmp>
 4005174:	0007883a 	mov	r3,zero
 4005178:	103ff226 	beq	r2,zero,4005144 <_setlocale_r+0x48>
 400517c:	003ff506 	br	4005154 <_setlocale_r+0x58>

04005180 <setlocale>:
 4005180:	018100b4 	movhi	r6,1026
 4005184:	31a27304 	addi	r6,r6,-30260
 4005188:	2007883a 	mov	r3,r4
 400518c:	31000017 	ldw	r4,0(r6)
 4005190:	280d883a 	mov	r6,r5
 4005194:	180b883a 	mov	r5,r3
 4005198:	40050fc1 	jmpi	40050fc <_setlocale_r>

0400519c <__smakebuf_r>:
 400519c:	2880030b 	ldhu	r2,12(r5)
 40051a0:	deffed04 	addi	sp,sp,-76
 40051a4:	dc401015 	stw	r17,64(sp)
 40051a8:	1080008c 	andi	r2,r2,2
 40051ac:	dc000f15 	stw	r16,60(sp)
 40051b0:	dfc01215 	stw	ra,72(sp)
 40051b4:	dc801115 	stw	r18,68(sp)
 40051b8:	2821883a 	mov	r16,r5
 40051bc:	2023883a 	mov	r17,r4
 40051c0:	10000b26 	beq	r2,zero,40051f0 <__smakebuf_r+0x54>
 40051c4:	28c010c4 	addi	r3,r5,67
 40051c8:	00800044 	movi	r2,1
 40051cc:	28800515 	stw	r2,20(r5)
 40051d0:	28c00415 	stw	r3,16(r5)
 40051d4:	28c00015 	stw	r3,0(r5)
 40051d8:	dfc01217 	ldw	ra,72(sp)
 40051dc:	dc801117 	ldw	r18,68(sp)
 40051e0:	dc401017 	ldw	r17,64(sp)
 40051e4:	dc000f17 	ldw	r16,60(sp)
 40051e8:	dec01304 	addi	sp,sp,76
 40051ec:	f800283a 	ret
 40051f0:	2940038f 	ldh	r5,14(r5)
 40051f4:	28002116 	blt	r5,zero,400527c <__smakebuf_r+0xe0>
 40051f8:	d80d883a 	mov	r6,sp
 40051fc:	40078fc0 	call	40078fc <_fstat_r>
 4005200:	10001e16 	blt	r2,zero,400527c <__smakebuf_r+0xe0>
 4005204:	d8800117 	ldw	r2,4(sp)
 4005208:	00e00014 	movui	r3,32768
 400520c:	113c000c 	andi	r4,r2,61440
 4005210:	20c03126 	beq	r4,r3,40052d8 <__smakebuf_r+0x13c>
 4005214:	8080030b 	ldhu	r2,12(r16)
 4005218:	00c80004 	movi	r3,8192
 400521c:	10820014 	ori	r2,r2,2048
 4005220:	8080030d 	sth	r2,12(r16)
 4005224:	20c01e26 	beq	r4,r3,40052a0 <__smakebuf_r+0x104>
 4005228:	04810004 	movi	r18,1024
 400522c:	8809883a 	mov	r4,r17
 4005230:	900b883a 	mov	r5,r18
 4005234:	40053300 	call	4005330 <_malloc_r>
 4005238:	1009883a 	mov	r4,r2
 400523c:	10003126 	beq	r2,zero,4005304 <__smakebuf_r+0x168>
 4005240:	80c0030b 	ldhu	r3,12(r16)
 4005244:	00810034 	movhi	r2,1024
 4005248:	10914204 	addi	r2,r2,17672
 400524c:	88800f15 	stw	r2,60(r17)
 4005250:	18c02014 	ori	r3,r3,128
 4005254:	84800515 	stw	r18,20(r16)
 4005258:	80c0030d 	sth	r3,12(r16)
 400525c:	81000415 	stw	r4,16(r16)
 4005260:	81000015 	stw	r4,0(r16)
 4005264:	dfc01217 	ldw	ra,72(sp)
 4005268:	dc801117 	ldw	r18,68(sp)
 400526c:	dc401017 	ldw	r17,64(sp)
 4005270:	dc000f17 	ldw	r16,60(sp)
 4005274:	dec01304 	addi	sp,sp,76
 4005278:	f800283a 	ret
 400527c:	80c0030b 	ldhu	r3,12(r16)
 4005280:	1880200c 	andi	r2,r3,128
 4005284:	10000426 	beq	r2,zero,4005298 <__smakebuf_r+0xfc>
 4005288:	04801004 	movi	r18,64
 400528c:	18820014 	ori	r2,r3,2048
 4005290:	8080030d 	sth	r2,12(r16)
 4005294:	003fe506 	br	400522c <__smakebuf_r+0x90>
 4005298:	04810004 	movi	r18,1024
 400529c:	003ffb06 	br	400528c <__smakebuf_r+0xf0>
 40052a0:	8140038f 	ldh	r5,14(r16)
 40052a4:	8809883a 	mov	r4,r17
 40052a8:	40079700 	call	4007970 <_isatty_r>
 40052ac:	103fde26 	beq	r2,zero,4005228 <__smakebuf_r+0x8c>
 40052b0:	8080030b 	ldhu	r2,12(r16)
 40052b4:	80c010c4 	addi	r3,r16,67
 40052b8:	04810004 	movi	r18,1024
 40052bc:	10800054 	ori	r2,r2,1
 40052c0:	8080030d 	sth	r2,12(r16)
 40052c4:	00800044 	movi	r2,1
 40052c8:	80c00415 	stw	r3,16(r16)
 40052cc:	80800515 	stw	r2,20(r16)
 40052d0:	80c00015 	stw	r3,0(r16)
 40052d4:	003fd506 	br	400522c <__smakebuf_r+0x90>
 40052d8:	80c00a17 	ldw	r3,40(r16)
 40052dc:	00810034 	movhi	r2,1024
 40052e0:	109d0f04 	addi	r2,r2,29756
 40052e4:	18bfcb1e 	bne	r3,r2,4005214 <__smakebuf_r+0x78>
 40052e8:	8080030b 	ldhu	r2,12(r16)
 40052ec:	00c10004 	movi	r3,1024
 40052f0:	1825883a 	mov	r18,r3
 40052f4:	10c4b03a 	or	r2,r2,r3
 40052f8:	8080030d 	sth	r2,12(r16)
 40052fc:	80c01315 	stw	r3,76(r16)
 4005300:	003fca06 	br	400522c <__smakebuf_r+0x90>
 4005304:	8100030b 	ldhu	r4,12(r16)
 4005308:	2080800c 	andi	r2,r4,512
 400530c:	103fb21e 	bne	r2,zero,40051d8 <__smakebuf_r+0x3c>
 4005310:	80c010c4 	addi	r3,r16,67
 4005314:	21000094 	ori	r4,r4,2
 4005318:	00800044 	movi	r2,1
 400531c:	80800515 	stw	r2,20(r16)
 4005320:	8100030d 	sth	r4,12(r16)
 4005324:	80c00415 	stw	r3,16(r16)
 4005328:	80c00015 	stw	r3,0(r16)
 400532c:	003faa06 	br	40051d8 <__smakebuf_r+0x3c>

04005330 <_malloc_r>:
 4005330:	defff604 	addi	sp,sp,-40
 4005334:	28c002c4 	addi	r3,r5,11
 4005338:	00800584 	movi	r2,22
 400533c:	dc800215 	stw	r18,8(sp)
 4005340:	dfc00915 	stw	ra,36(sp)
 4005344:	df000815 	stw	fp,32(sp)
 4005348:	ddc00715 	stw	r23,28(sp)
 400534c:	dd800615 	stw	r22,24(sp)
 4005350:	dd400515 	stw	r21,20(sp)
 4005354:	dd000415 	stw	r20,16(sp)
 4005358:	dcc00315 	stw	r19,12(sp)
 400535c:	dc400115 	stw	r17,4(sp)
 4005360:	dc000015 	stw	r16,0(sp)
 4005364:	2025883a 	mov	r18,r4
 4005368:	10c01236 	bltu	r2,r3,40053b4 <_malloc_r+0x84>
 400536c:	04400404 	movi	r17,16
 4005370:	8940142e 	bgeu	r17,r5,40053c4 <_malloc_r+0x94>
 4005374:	00800304 	movi	r2,12
 4005378:	0007883a 	mov	r3,zero
 400537c:	90800015 	stw	r2,0(r18)
 4005380:	1805883a 	mov	r2,r3
 4005384:	dfc00917 	ldw	ra,36(sp)
 4005388:	df000817 	ldw	fp,32(sp)
 400538c:	ddc00717 	ldw	r23,28(sp)
 4005390:	dd800617 	ldw	r22,24(sp)
 4005394:	dd400517 	ldw	r21,20(sp)
 4005398:	dd000417 	ldw	r20,16(sp)
 400539c:	dcc00317 	ldw	r19,12(sp)
 40053a0:	dc800217 	ldw	r18,8(sp)
 40053a4:	dc400117 	ldw	r17,4(sp)
 40053a8:	dc000017 	ldw	r16,0(sp)
 40053ac:	dec00a04 	addi	sp,sp,40
 40053b0:	f800283a 	ret
 40053b4:	00bffe04 	movi	r2,-8
 40053b8:	18a2703a 	and	r17,r3,r2
 40053bc:	883fed16 	blt	r17,zero,4005374 <_malloc_r+0x44>
 40053c0:	897fec36 	bltu	r17,r5,4005374 <_malloc_r+0x44>
 40053c4:	9009883a 	mov	r4,r18
 40053c8:	400aa180 	call	400aa18 <__malloc_lock>
 40053cc:	00807dc4 	movi	r2,503
 40053d0:	14402b2e 	bgeu	r2,r17,4005480 <_malloc_r+0x150>
 40053d4:	8806d27a 	srli	r3,r17,9
 40053d8:	18003f1e 	bne	r3,zero,40054d8 <_malloc_r+0x1a8>
 40053dc:	880cd0fa 	srli	r6,r17,3
 40053e0:	300490fa 	slli	r2,r6,3
 40053e4:	02c10074 	movhi	r11,1025
 40053e8:	5adcb804 	addi	r11,r11,29408
 40053ec:	12cb883a 	add	r5,r2,r11
 40053f0:	2c000317 	ldw	r16,12(r5)
 40053f4:	580f883a 	mov	r7,r11
 40053f8:	2c00041e 	bne	r5,r16,400540c <_malloc_r+0xdc>
 40053fc:	00000a06 	br	4005428 <_malloc_r+0xf8>
 4005400:	1800860e 	bge	r3,zero,400561c <_malloc_r+0x2ec>
 4005404:	84000317 	ldw	r16,12(r16)
 4005408:	2c000726 	beq	r5,r16,4005428 <_malloc_r+0xf8>
 400540c:	80800117 	ldw	r2,4(r16)
 4005410:	00ffff04 	movi	r3,-4
 4005414:	10c8703a 	and	r4,r2,r3
 4005418:	2447c83a 	sub	r3,r4,r17
 400541c:	008003c4 	movi	r2,15
 4005420:	10fff70e 	bge	r2,r3,4005400 <_malloc_r+0xd0>
 4005424:	31bfffc4 	addi	r6,r6,-1
 4005428:	32400044 	addi	r9,r6,1
 400542c:	02810074 	movhi	r10,1025
 4005430:	529cba04 	addi	r10,r10,29416
 4005434:	54000217 	ldw	r16,8(r10)
 4005438:	8280a026 	beq	r16,r10,40056bc <_malloc_r+0x38c>
 400543c:	80800117 	ldw	r2,4(r16)
 4005440:	00ffff04 	movi	r3,-4
 4005444:	10ca703a 	and	r5,r2,r3
 4005448:	2c4dc83a 	sub	r6,r5,r17
 400544c:	008003c4 	movi	r2,15
 4005450:	11808316 	blt	r2,r6,4005660 <_malloc_r+0x330>
 4005454:	52800315 	stw	r10,12(r10)
 4005458:	52800215 	stw	r10,8(r10)
 400545c:	30002916 	blt	r6,zero,4005504 <_malloc_r+0x1d4>
 4005460:	8147883a 	add	r3,r16,r5
 4005464:	18800117 	ldw	r2,4(r3)
 4005468:	9009883a 	mov	r4,r18
 400546c:	10800054 	ori	r2,r2,1
 4005470:	18800115 	stw	r2,4(r3)
 4005474:	400ab200 	call	400ab20 <__malloc_unlock>
 4005478:	80c00204 	addi	r3,r16,8
 400547c:	003fc006 	br	4005380 <_malloc_r+0x50>
 4005480:	02c10074 	movhi	r11,1025
 4005484:	5adcb804 	addi	r11,r11,29408
 4005488:	8ac5883a 	add	r2,r17,r11
 400548c:	14000317 	ldw	r16,12(r2)
 4005490:	580f883a 	mov	r7,r11
 4005494:	8806d0fa 	srli	r3,r17,3
 4005498:	14006c26 	beq	r2,r16,400564c <_malloc_r+0x31c>
 400549c:	80c00117 	ldw	r3,4(r16)
 40054a0:	00bfff04 	movi	r2,-4
 40054a4:	81800317 	ldw	r6,12(r16)
 40054a8:	1886703a 	and	r3,r3,r2
 40054ac:	80c7883a 	add	r3,r16,r3
 40054b0:	18800117 	ldw	r2,4(r3)
 40054b4:	81400217 	ldw	r5,8(r16)
 40054b8:	9009883a 	mov	r4,r18
 40054bc:	10800054 	ori	r2,r2,1
 40054c0:	18800115 	stw	r2,4(r3)
 40054c4:	31400215 	stw	r5,8(r6)
 40054c8:	29800315 	stw	r6,12(r5)
 40054cc:	400ab200 	call	400ab20 <__malloc_unlock>
 40054d0:	80c00204 	addi	r3,r16,8
 40054d4:	003faa06 	br	4005380 <_malloc_r+0x50>
 40054d8:	00800104 	movi	r2,4
 40054dc:	10c0052e 	bgeu	r2,r3,40054f4 <_malloc_r+0x1c4>
 40054e0:	00800504 	movi	r2,20
 40054e4:	10c07836 	bltu	r2,r3,40056c8 <_malloc_r+0x398>
 40054e8:	198016c4 	addi	r6,r3,91
 40054ec:	300490fa 	slli	r2,r6,3
 40054f0:	003fbc06 	br	40053e4 <_malloc_r+0xb4>
 40054f4:	8804d1ba 	srli	r2,r17,6
 40054f8:	11800e04 	addi	r6,r2,56
 40054fc:	300490fa 	slli	r2,r6,3
 4005500:	003fb806 	br	40053e4 <_malloc_r+0xb4>
 4005504:	00807fc4 	movi	r2,511
 4005508:	1140bb36 	bltu	r2,r5,40057f8 <_malloc_r+0x4c8>
 400550c:	2806d0fa 	srli	r3,r5,3
 4005510:	573ffe04 	addi	fp,r10,-8
 4005514:	00800044 	movi	r2,1
 4005518:	180890fa 	slli	r4,r3,3
 400551c:	1807d0ba 	srai	r3,r3,2
 4005520:	e1c00117 	ldw	r7,4(fp)
 4005524:	5909883a 	add	r4,r11,r4
 4005528:	21400217 	ldw	r5,8(r4)
 400552c:	10c4983a 	sll	r2,r2,r3
 4005530:	81000315 	stw	r4,12(r16)
 4005534:	81400215 	stw	r5,8(r16)
 4005538:	388eb03a 	or	r7,r7,r2
 400553c:	2c000315 	stw	r16,12(r5)
 4005540:	24000215 	stw	r16,8(r4)
 4005544:	e1c00115 	stw	r7,4(fp)
 4005548:	4807883a 	mov	r3,r9
 400554c:	4800cd16 	blt	r9,zero,4005884 <_malloc_r+0x554>
 4005550:	1807d0ba 	srai	r3,r3,2
 4005554:	00800044 	movi	r2,1
 4005558:	10c8983a 	sll	r4,r2,r3
 400555c:	39004436 	bltu	r7,r4,4005670 <_malloc_r+0x340>
 4005560:	21c4703a 	and	r2,r4,r7
 4005564:	10000a1e 	bne	r2,zero,4005590 <_malloc_r+0x260>
 4005568:	2109883a 	add	r4,r4,r4
 400556c:	00bfff04 	movi	r2,-4
 4005570:	4884703a 	and	r2,r9,r2
 4005574:	3906703a 	and	r3,r7,r4
 4005578:	12400104 	addi	r9,r2,4
 400557c:	1800041e 	bne	r3,zero,4005590 <_malloc_r+0x260>
 4005580:	2109883a 	add	r4,r4,r4
 4005584:	3904703a 	and	r2,r7,r4
 4005588:	4a400104 	addi	r9,r9,4
 400558c:	103ffc26 	beq	r2,zero,4005580 <_malloc_r+0x250>
 4005590:	480490fa 	slli	r2,r9,3
 4005594:	4819883a 	mov	r12,r9
 4005598:	023fff04 	movi	r8,-4
 400559c:	589b883a 	add	r13,r11,r2
 40055a0:	6807883a 	mov	r3,r13
 40055a4:	014003c4 	movi	r5,15
 40055a8:	1c000317 	ldw	r16,12(r3)
 40055ac:	1c00041e 	bne	r3,r16,40055c0 <_malloc_r+0x290>
 40055b0:	0000a706 	br	4005850 <_malloc_r+0x520>
 40055b4:	3000ab0e 	bge	r6,zero,4005864 <_malloc_r+0x534>
 40055b8:	84000317 	ldw	r16,12(r16)
 40055bc:	1c00a426 	beq	r3,r16,4005850 <_malloc_r+0x520>
 40055c0:	80800117 	ldw	r2,4(r16)
 40055c4:	1204703a 	and	r2,r2,r8
 40055c8:	144dc83a 	sub	r6,r2,r17
 40055cc:	29bff90e 	bge	r5,r6,40055b4 <_malloc_r+0x284>
 40055d0:	81000317 	ldw	r4,12(r16)
 40055d4:	80c00217 	ldw	r3,8(r16)
 40055d8:	89400054 	ori	r5,r17,1
 40055dc:	8445883a 	add	r2,r16,r17
 40055e0:	20c00215 	stw	r3,8(r4)
 40055e4:	19000315 	stw	r4,12(r3)
 40055e8:	81400115 	stw	r5,4(r16)
 40055ec:	1187883a 	add	r3,r2,r6
 40055f0:	31000054 	ori	r4,r6,1
 40055f4:	50800315 	stw	r2,12(r10)
 40055f8:	50800215 	stw	r2,8(r10)
 40055fc:	19800015 	stw	r6,0(r3)
 4005600:	11000115 	stw	r4,4(r2)
 4005604:	12800215 	stw	r10,8(r2)
 4005608:	12800315 	stw	r10,12(r2)
 400560c:	9009883a 	mov	r4,r18
 4005610:	400ab200 	call	400ab20 <__malloc_unlock>
 4005614:	80c00204 	addi	r3,r16,8
 4005618:	003f5906 	br	4005380 <_malloc_r+0x50>
 400561c:	8109883a 	add	r4,r16,r4
 4005620:	20800117 	ldw	r2,4(r4)
 4005624:	80c00217 	ldw	r3,8(r16)
 4005628:	81400317 	ldw	r5,12(r16)
 400562c:	10800054 	ori	r2,r2,1
 4005630:	20800115 	stw	r2,4(r4)
 4005634:	28c00215 	stw	r3,8(r5)
 4005638:	19400315 	stw	r5,12(r3)
 400563c:	9009883a 	mov	r4,r18
 4005640:	400ab200 	call	400ab20 <__malloc_unlock>
 4005644:	80c00204 	addi	r3,r16,8
 4005648:	003f4d06 	br	4005380 <_malloc_r+0x50>
 400564c:	80800204 	addi	r2,r16,8
 4005650:	14000317 	ldw	r16,12(r2)
 4005654:	143f911e 	bne	r2,r16,400549c <_malloc_r+0x16c>
 4005658:	1a400084 	addi	r9,r3,2
 400565c:	003f7306 	br	400542c <_malloc_r+0xfc>
 4005660:	88c00054 	ori	r3,r17,1
 4005664:	8445883a 	add	r2,r16,r17
 4005668:	80c00115 	stw	r3,4(r16)
 400566c:	003fdf06 	br	40055ec <_malloc_r+0x2bc>
 4005670:	e4000217 	ldw	r16,8(fp)
 4005674:	00bfff04 	movi	r2,-4
 4005678:	80c00117 	ldw	r3,4(r16)
 400567c:	802d883a 	mov	r22,r16
 4005680:	18aa703a 	and	r21,r3,r2
 4005684:	ac401636 	bltu	r21,r17,40056e0 <_malloc_r+0x3b0>
 4005688:	ac49c83a 	sub	r4,r21,r17
 400568c:	008003c4 	movi	r2,15
 4005690:	1100130e 	bge	r2,r4,40056e0 <_malloc_r+0x3b0>
 4005694:	88800054 	ori	r2,r17,1
 4005698:	8447883a 	add	r3,r16,r17
 400569c:	80800115 	stw	r2,4(r16)
 40056a0:	20800054 	ori	r2,r4,1
 40056a4:	18800115 	stw	r2,4(r3)
 40056a8:	e0c00215 	stw	r3,8(fp)
 40056ac:	9009883a 	mov	r4,r18
 40056b0:	400ab200 	call	400ab20 <__malloc_unlock>
 40056b4:	80c00204 	addi	r3,r16,8
 40056b8:	003f3106 	br	4005380 <_malloc_r+0x50>
 40056bc:	39c00117 	ldw	r7,4(r7)
 40056c0:	573ffe04 	addi	fp,r10,-8
 40056c4:	003fa006 	br	4005548 <_malloc_r+0x218>
 40056c8:	00801504 	movi	r2,84
 40056cc:	10c06736 	bltu	r2,r3,400586c <_malloc_r+0x53c>
 40056d0:	8804d33a 	srli	r2,r17,12
 40056d4:	11801b84 	addi	r6,r2,110
 40056d8:	300490fa 	slli	r2,r6,3
 40056dc:	003f4106 	br	40053e4 <_malloc_r+0xb4>
 40056e0:	d0a03b17 	ldw	r2,-32532(gp)
 40056e4:	d0e00817 	ldw	r3,-32736(gp)
 40056e8:	053fffc4 	movi	r20,-1
 40056ec:	10800404 	addi	r2,r2,16
 40056f0:	88a7883a 	add	r19,r17,r2
 40056f4:	1d000326 	beq	r3,r20,4005704 <_malloc_r+0x3d4>
 40056f8:	98c3ffc4 	addi	r3,r19,4095
 40056fc:	00bc0004 	movi	r2,-4096
 4005700:	18a6703a 	and	r19,r3,r2
 4005704:	9009883a 	mov	r4,r18
 4005708:	980b883a 	mov	r5,r19
 400570c:	40073c40 	call	40073c4 <_sbrk_r>
 4005710:	1009883a 	mov	r4,r2
 4005714:	15000426 	beq	r2,r20,4005728 <_malloc_r+0x3f8>
 4005718:	854b883a 	add	r5,r16,r21
 400571c:	1029883a 	mov	r20,r2
 4005720:	11405a2e 	bgeu	r2,r5,400588c <_malloc_r+0x55c>
 4005724:	87000c26 	beq	r16,fp,4005758 <_malloc_r+0x428>
 4005728:	e4000217 	ldw	r16,8(fp)
 400572c:	80c00117 	ldw	r3,4(r16)
 4005730:	00bfff04 	movi	r2,-4
 4005734:	1884703a 	and	r2,r3,r2
 4005738:	14400336 	bltu	r2,r17,4005748 <_malloc_r+0x418>
 400573c:	1449c83a 	sub	r4,r2,r17
 4005740:	008003c4 	movi	r2,15
 4005744:	113fd316 	blt	r2,r4,4005694 <_malloc_r+0x364>
 4005748:	9009883a 	mov	r4,r18
 400574c:	400ab200 	call	400ab20 <__malloc_unlock>
 4005750:	0007883a 	mov	r3,zero
 4005754:	003f0a06 	br	4005380 <_malloc_r+0x50>
 4005758:	05c100b4 	movhi	r23,1026
 400575c:	bde2cf04 	addi	r23,r23,-29892
 4005760:	b8800017 	ldw	r2,0(r23)
 4005764:	988d883a 	add	r6,r19,r2
 4005768:	b9800015 	stw	r6,0(r23)
 400576c:	d0e00817 	ldw	r3,-32736(gp)
 4005770:	00bfffc4 	movi	r2,-1
 4005774:	18808e26 	beq	r3,r2,40059b0 <_malloc_r+0x680>
 4005778:	2145c83a 	sub	r2,r4,r5
 400577c:	3085883a 	add	r2,r6,r2
 4005780:	b8800015 	stw	r2,0(r23)
 4005784:	20c001cc 	andi	r3,r4,7
 4005788:	18005f1e 	bne	r3,zero,4005908 <_malloc_r+0x5d8>
 400578c:	000b883a 	mov	r5,zero
 4005790:	a4c5883a 	add	r2,r20,r19
 4005794:	1083ffcc 	andi	r2,r2,4095
 4005798:	00c40004 	movi	r3,4096
 400579c:	1887c83a 	sub	r3,r3,r2
 40057a0:	28e7883a 	add	r19,r5,r3
 40057a4:	9009883a 	mov	r4,r18
 40057a8:	980b883a 	mov	r5,r19
 40057ac:	40073c40 	call	40073c4 <_sbrk_r>
 40057b0:	1007883a 	mov	r3,r2
 40057b4:	00bfffc4 	movi	r2,-1
 40057b8:	18807a26 	beq	r3,r2,40059a4 <_malloc_r+0x674>
 40057bc:	1d05c83a 	sub	r2,r3,r20
 40057c0:	9885883a 	add	r2,r19,r2
 40057c4:	10c00054 	ori	r3,r2,1
 40057c8:	b8800017 	ldw	r2,0(r23)
 40057cc:	a021883a 	mov	r16,r20
 40057d0:	a0c00115 	stw	r3,4(r20)
 40057d4:	9885883a 	add	r2,r19,r2
 40057d8:	b8800015 	stw	r2,0(r23)
 40057dc:	e5000215 	stw	r20,8(fp)
 40057e0:	b7003626 	beq	r22,fp,40058bc <_malloc_r+0x58c>
 40057e4:	018003c4 	movi	r6,15
 40057e8:	35404b36 	bltu	r6,r21,4005918 <_malloc_r+0x5e8>
 40057ec:	00800044 	movi	r2,1
 40057f0:	a0800115 	stw	r2,4(r20)
 40057f4:	003fcd06 	br	400572c <_malloc_r+0x3fc>
 40057f8:	2808d27a 	srli	r4,r5,9
 40057fc:	2000371e 	bne	r4,zero,40058dc <_malloc_r+0x5ac>
 4005800:	2808d0fa 	srli	r4,r5,3
 4005804:	200690fa 	slli	r3,r4,3
 4005808:	1ad1883a 	add	r8,r3,r11
 400580c:	41800217 	ldw	r6,8(r8)
 4005810:	41805b26 	beq	r8,r6,4005980 <_malloc_r+0x650>
 4005814:	30800117 	ldw	r2,4(r6)
 4005818:	00ffff04 	movi	r3,-4
 400581c:	10c4703a 	and	r2,r2,r3
 4005820:	2880022e 	bgeu	r5,r2,400582c <_malloc_r+0x4fc>
 4005824:	31800217 	ldw	r6,8(r6)
 4005828:	41bffa1e 	bne	r8,r6,4005814 <_malloc_r+0x4e4>
 400582c:	32000317 	ldw	r8,12(r6)
 4005830:	39c00117 	ldw	r7,4(r7)
 4005834:	82000315 	stw	r8,12(r16)
 4005838:	81800215 	stw	r6,8(r16)
 400583c:	07010074 	movhi	fp,1025
 4005840:	e71cb804 	addi	fp,fp,29408
 4005844:	34000315 	stw	r16,12(r6)
 4005848:	44000215 	stw	r16,8(r8)
 400584c:	003f3e06 	br	4005548 <_malloc_r+0x218>
 4005850:	63000044 	addi	r12,r12,1
 4005854:	608000cc 	andi	r2,r12,3
 4005858:	10005d26 	beq	r2,zero,40059d0 <_malloc_r+0x6a0>
 400585c:	18c00204 	addi	r3,r3,8
 4005860:	003f5106 	br	40055a8 <_malloc_r+0x278>
 4005864:	8089883a 	add	r4,r16,r2
 4005868:	003f6d06 	br	4005620 <_malloc_r+0x2f0>
 400586c:	00805504 	movi	r2,340
 4005870:	10c02036 	bltu	r2,r3,40058f4 <_malloc_r+0x5c4>
 4005874:	8804d3fa 	srli	r2,r17,15
 4005878:	11801dc4 	addi	r6,r2,119
 400587c:	300490fa 	slli	r2,r6,3
 4005880:	003ed806 	br	40053e4 <_malloc_r+0xb4>
 4005884:	48c000c4 	addi	r3,r9,3
 4005888:	003f3106 	br	4005550 <_malloc_r+0x220>
 400588c:	05c100b4 	movhi	r23,1026
 4005890:	bde2cf04 	addi	r23,r23,-29892
 4005894:	b8800017 	ldw	r2,0(r23)
 4005898:	988d883a 	add	r6,r19,r2
 400589c:	b9800015 	stw	r6,0(r23)
 40058a0:	293fb21e 	bne	r5,r4,400576c <_malloc_r+0x43c>
 40058a4:	2083ffcc 	andi	r2,r4,4095
 40058a8:	103fb01e 	bne	r2,zero,400576c <_malloc_r+0x43c>
 40058ac:	e4000217 	ldw	r16,8(fp)
 40058b0:	9d45883a 	add	r2,r19,r21
 40058b4:	10800054 	ori	r2,r2,1
 40058b8:	80800115 	stw	r2,4(r16)
 40058bc:	b8c00017 	ldw	r3,0(r23)
 40058c0:	d0a03c17 	ldw	r2,-32528(gp)
 40058c4:	10c0012e 	bgeu	r2,r3,40058cc <_malloc_r+0x59c>
 40058c8:	d0e03c15 	stw	r3,-32528(gp)
 40058cc:	d0a03d17 	ldw	r2,-32524(gp)
 40058d0:	10ff962e 	bgeu	r2,r3,400572c <_malloc_r+0x3fc>
 40058d4:	d0e03d15 	stw	r3,-32524(gp)
 40058d8:	003f9406 	br	400572c <_malloc_r+0x3fc>
 40058dc:	00800104 	movi	r2,4
 40058e0:	11001e36 	bltu	r2,r4,400595c <_malloc_r+0x62c>
 40058e4:	2804d1ba 	srli	r2,r5,6
 40058e8:	11000e04 	addi	r4,r2,56
 40058ec:	200690fa 	slli	r3,r4,3
 40058f0:	003fc506 	br	4005808 <_malloc_r+0x4d8>
 40058f4:	00815504 	movi	r2,1364
 40058f8:	10c01d2e 	bgeu	r2,r3,4005970 <_malloc_r+0x640>
 40058fc:	01801f84 	movi	r6,126
 4005900:	0080fc04 	movi	r2,1008
 4005904:	003eb706 	br	40053e4 <_malloc_r+0xb4>
 4005908:	00800204 	movi	r2,8
 400590c:	10cbc83a 	sub	r5,r2,r3
 4005910:	2169883a 	add	r20,r4,r5
 4005914:	003f9e06 	br	4005790 <_malloc_r+0x460>
 4005918:	00bffe04 	movi	r2,-8
 400591c:	a93ffd04 	addi	r4,r21,-12
 4005920:	2088703a 	and	r4,r4,r2
 4005924:	b10b883a 	add	r5,r22,r4
 4005928:	00c00144 	movi	r3,5
 400592c:	28c00215 	stw	r3,8(r5)
 4005930:	28c00115 	stw	r3,4(r5)
 4005934:	b0800117 	ldw	r2,4(r22)
 4005938:	1080004c 	andi	r2,r2,1
 400593c:	2084b03a 	or	r2,r4,r2
 4005940:	b0800115 	stw	r2,4(r22)
 4005944:	313fdd2e 	bgeu	r6,r4,40058bc <_malloc_r+0x58c>
 4005948:	b1400204 	addi	r5,r22,8
 400594c:	9009883a 	mov	r4,r18
 4005950:	40047a80 	call	40047a8 <_free_r>
 4005954:	e4000217 	ldw	r16,8(fp)
 4005958:	003fd806 	br	40058bc <_malloc_r+0x58c>
 400595c:	00800504 	movi	r2,20
 4005960:	11001536 	bltu	r2,r4,40059b8 <_malloc_r+0x688>
 4005964:	210016c4 	addi	r4,r4,91
 4005968:	200690fa 	slli	r3,r4,3
 400596c:	003fa606 	br	4005808 <_malloc_r+0x4d8>
 4005970:	8804d4ba 	srli	r2,r17,18
 4005974:	11801f04 	addi	r6,r2,124
 4005978:	300490fa 	slli	r2,r6,3
 400597c:	003e9906 	br	40053e4 <_malloc_r+0xb4>
 4005980:	2009d0ba 	srai	r4,r4,2
 4005984:	01410074 	movhi	r5,1025
 4005988:	295cb804 	addi	r5,r5,29408
 400598c:	00c00044 	movi	r3,1
 4005990:	28800117 	ldw	r2,4(r5)
 4005994:	1906983a 	sll	r3,r3,r4
 4005998:	10c4b03a 	or	r2,r2,r3
 400599c:	28800115 	stw	r2,4(r5)
 40059a0:	003fa306 	br	4005830 <_malloc_r+0x500>
 40059a4:	0027883a 	mov	r19,zero
 40059a8:	00c00044 	movi	r3,1
 40059ac:	003f8606 	br	40057c8 <_malloc_r+0x498>
 40059b0:	d1200815 	stw	r4,-32736(gp)
 40059b4:	003f7306 	br	4005784 <_malloc_r+0x454>
 40059b8:	00801504 	movi	r2,84
 40059bc:	11001936 	bltu	r2,r4,4005a24 <_malloc_r+0x6f4>
 40059c0:	2804d33a 	srli	r2,r5,12
 40059c4:	11001b84 	addi	r4,r2,110
 40059c8:	200690fa 	slli	r3,r4,3
 40059cc:	003f8e06 	br	4005808 <_malloc_r+0x4d8>
 40059d0:	480b883a 	mov	r5,r9
 40059d4:	6807883a 	mov	r3,r13
 40059d8:	288000cc 	andi	r2,r5,3
 40059dc:	18fffe04 	addi	r3,r3,-8
 40059e0:	297fffc4 	addi	r5,r5,-1
 40059e4:	10001526 	beq	r2,zero,4005a3c <_malloc_r+0x70c>
 40059e8:	18800217 	ldw	r2,8(r3)
 40059ec:	10fffa26 	beq	r2,r3,40059d8 <_malloc_r+0x6a8>
 40059f0:	2109883a 	add	r4,r4,r4
 40059f4:	393f1e36 	bltu	r7,r4,4005670 <_malloc_r+0x340>
 40059f8:	203f1d26 	beq	r4,zero,4005670 <_malloc_r+0x340>
 40059fc:	21c4703a 	and	r2,r4,r7
 4005a00:	10000226 	beq	r2,zero,4005a0c <_malloc_r+0x6dc>
 4005a04:	6013883a 	mov	r9,r12
 4005a08:	003ee106 	br	4005590 <_malloc_r+0x260>
 4005a0c:	2109883a 	add	r4,r4,r4
 4005a10:	3904703a 	and	r2,r7,r4
 4005a14:	63000104 	addi	r12,r12,4
 4005a18:	103ffc26 	beq	r2,zero,4005a0c <_malloc_r+0x6dc>
 4005a1c:	6013883a 	mov	r9,r12
 4005a20:	003edb06 	br	4005590 <_malloc_r+0x260>
 4005a24:	00805504 	movi	r2,340
 4005a28:	11000836 	bltu	r2,r4,4005a4c <_malloc_r+0x71c>
 4005a2c:	2804d3fa 	srli	r2,r5,15
 4005a30:	11001dc4 	addi	r4,r2,119
 4005a34:	200690fa 	slli	r3,r4,3
 4005a38:	003f7306 	br	4005808 <_malloc_r+0x4d8>
 4005a3c:	0104303a 	nor	r2,zero,r4
 4005a40:	388e703a 	and	r7,r7,r2
 4005a44:	e1c00115 	stw	r7,4(fp)
 4005a48:	003fe906 	br	40059f0 <_malloc_r+0x6c0>
 4005a4c:	00815504 	movi	r2,1364
 4005a50:	1100032e 	bgeu	r2,r4,4005a60 <_malloc_r+0x730>
 4005a54:	01001f84 	movi	r4,126
 4005a58:	00c0fc04 	movi	r3,1008
 4005a5c:	003f6a06 	br	4005808 <_malloc_r+0x4d8>
 4005a60:	2804d4ba 	srli	r2,r5,18
 4005a64:	11001f04 	addi	r4,r2,124
 4005a68:	200690fa 	slli	r3,r4,3
 4005a6c:	003f6606 	br	4005808 <_malloc_r+0x4d8>

04005a70 <memchr>:
 4005a70:	008000c4 	movi	r2,3
 4005a74:	29403fcc 	andi	r5,r5,255
 4005a78:	2007883a 	mov	r3,r4
 4005a7c:	1180022e 	bgeu	r2,r6,4005a88 <memchr+0x18>
 4005a80:	2084703a 	and	r2,r4,r2
 4005a84:	10000b26 	beq	r2,zero,4005ab4 <memchr+0x44>
 4005a88:	313fffc4 	addi	r4,r6,-1
 4005a8c:	3000051e 	bne	r6,zero,4005aa4 <memchr+0x34>
 4005a90:	00002c06 	br	4005b44 <memchr+0xd4>
 4005a94:	213fffc4 	addi	r4,r4,-1
 4005a98:	00bfffc4 	movi	r2,-1
 4005a9c:	18c00044 	addi	r3,r3,1
 4005aa0:	20802826 	beq	r4,r2,4005b44 <memchr+0xd4>
 4005aa4:	18800003 	ldbu	r2,0(r3)
 4005aa8:	28bffa1e 	bne	r5,r2,4005a94 <memchr+0x24>
 4005aac:	1805883a 	mov	r2,r3
 4005ab0:	f800283a 	ret
 4005ab4:	0011883a 	mov	r8,zero
 4005ab8:	0007883a 	mov	r3,zero
 4005abc:	01c00104 	movi	r7,4
 4005ac0:	4004923a 	slli	r2,r8,8
 4005ac4:	18c00044 	addi	r3,r3,1
 4005ac8:	1151883a 	add	r8,r2,r5
 4005acc:	19fffc1e 	bne	r3,r7,4005ac0 <memchr+0x50>
 4005ad0:	02bfbff4 	movhi	r10,65279
 4005ad4:	52bfbfc4 	addi	r10,r10,-257
 4005ad8:	02602074 	movhi	r9,32897
 4005adc:	4a602004 	addi	r9,r9,-32640
 4005ae0:	02c000c4 	movi	r11,3
 4005ae4:	20800017 	ldw	r2,0(r4)
 4005ae8:	31bfff04 	addi	r6,r6,-4
 4005aec:	200f883a 	mov	r7,r4
 4005af0:	1204f03a 	xor	r2,r2,r8
 4005af4:	1287883a 	add	r3,r2,r10
 4005af8:	1a46703a 	and	r3,r3,r9
 4005afc:	0084303a 	nor	r2,zero,r2
 4005b00:	10c4703a 	and	r2,r2,r3
 4005b04:	10000b26 	beq	r2,zero,4005b34 <memchr+0xc4>
 4005b08:	20800003 	ldbu	r2,0(r4)
 4005b0c:	28800f26 	beq	r5,r2,4005b4c <memchr+0xdc>
 4005b10:	20800043 	ldbu	r2,1(r4)
 4005b14:	21c00044 	addi	r7,r4,1
 4005b18:	28800c26 	beq	r5,r2,4005b4c <memchr+0xdc>
 4005b1c:	20800083 	ldbu	r2,2(r4)
 4005b20:	21c00084 	addi	r7,r4,2
 4005b24:	28800926 	beq	r5,r2,4005b4c <memchr+0xdc>
 4005b28:	208000c3 	ldbu	r2,3(r4)
 4005b2c:	21c000c4 	addi	r7,r4,3
 4005b30:	28800626 	beq	r5,r2,4005b4c <memchr+0xdc>
 4005b34:	21000104 	addi	r4,r4,4
 4005b38:	59bfea36 	bltu	r11,r6,4005ae4 <memchr+0x74>
 4005b3c:	2007883a 	mov	r3,r4
 4005b40:	003fd106 	br	4005a88 <memchr+0x18>
 4005b44:	0005883a 	mov	r2,zero
 4005b48:	f800283a 	ret
 4005b4c:	3805883a 	mov	r2,r7
 4005b50:	f800283a 	ret

04005b54 <memcpy>:
 4005b54:	01c003c4 	movi	r7,15
 4005b58:	2007883a 	mov	r3,r4
 4005b5c:	3980032e 	bgeu	r7,r6,4005b6c <memcpy+0x18>
 4005b60:	2904b03a 	or	r2,r5,r4
 4005b64:	108000cc 	andi	r2,r2,3
 4005b68:	10000926 	beq	r2,zero,4005b90 <memcpy+0x3c>
 4005b6c:	30000626 	beq	r6,zero,4005b88 <memcpy+0x34>
 4005b70:	30cd883a 	add	r6,r6,r3
 4005b74:	28800003 	ldbu	r2,0(r5)
 4005b78:	29400044 	addi	r5,r5,1
 4005b7c:	18800005 	stb	r2,0(r3)
 4005b80:	18c00044 	addi	r3,r3,1
 4005b84:	30fffb1e 	bne	r6,r3,4005b74 <memcpy+0x20>
 4005b88:	2005883a 	mov	r2,r4
 4005b8c:	f800283a 	ret
 4005b90:	3811883a 	mov	r8,r7
 4005b94:	200f883a 	mov	r7,r4
 4005b98:	28c00017 	ldw	r3,0(r5)
 4005b9c:	31bffc04 	addi	r6,r6,-16
 4005ba0:	38c00015 	stw	r3,0(r7)
 4005ba4:	28800117 	ldw	r2,4(r5)
 4005ba8:	38800115 	stw	r2,4(r7)
 4005bac:	28c00217 	ldw	r3,8(r5)
 4005bb0:	38c00215 	stw	r3,8(r7)
 4005bb4:	28800317 	ldw	r2,12(r5)
 4005bb8:	29400404 	addi	r5,r5,16
 4005bbc:	38800315 	stw	r2,12(r7)
 4005bc0:	39c00404 	addi	r7,r7,16
 4005bc4:	41bff436 	bltu	r8,r6,4005b98 <memcpy+0x44>
 4005bc8:	008000c4 	movi	r2,3
 4005bcc:	1180072e 	bgeu	r2,r6,4005bec <memcpy+0x98>
 4005bd0:	1007883a 	mov	r3,r2
 4005bd4:	28800017 	ldw	r2,0(r5)
 4005bd8:	31bfff04 	addi	r6,r6,-4
 4005bdc:	29400104 	addi	r5,r5,4
 4005be0:	38800015 	stw	r2,0(r7)
 4005be4:	39c00104 	addi	r7,r7,4
 4005be8:	19bffa36 	bltu	r3,r6,4005bd4 <memcpy+0x80>
 4005bec:	3807883a 	mov	r3,r7
 4005bf0:	003fde06 	br	4005b6c <memcpy+0x18>

04005bf4 <memmove>:
 4005bf4:	2807883a 	mov	r3,r5
 4005bf8:	2011883a 	mov	r8,r4
 4005bfc:	29000c2e 	bgeu	r5,r4,4005c30 <memmove+0x3c>
 4005c00:	298f883a 	add	r7,r5,r6
 4005c04:	21c00a2e 	bgeu	r4,r7,4005c30 <memmove+0x3c>
 4005c08:	30000726 	beq	r6,zero,4005c28 <memmove+0x34>
 4005c0c:	2187883a 	add	r3,r4,r6
 4005c10:	198dc83a 	sub	r6,r3,r6
 4005c14:	39ffffc4 	addi	r7,r7,-1
 4005c18:	38800003 	ldbu	r2,0(r7)
 4005c1c:	18ffffc4 	addi	r3,r3,-1
 4005c20:	18800005 	stb	r2,0(r3)
 4005c24:	19bffb1e 	bne	r3,r6,4005c14 <memmove+0x20>
 4005c28:	2005883a 	mov	r2,r4
 4005c2c:	f800283a 	ret
 4005c30:	01c003c4 	movi	r7,15
 4005c34:	39800a36 	bltu	r7,r6,4005c60 <memmove+0x6c>
 4005c38:	303ffb26 	beq	r6,zero,4005c28 <memmove+0x34>
 4005c3c:	400f883a 	mov	r7,r8
 4005c40:	320d883a 	add	r6,r6,r8
 4005c44:	28800003 	ldbu	r2,0(r5)
 4005c48:	29400044 	addi	r5,r5,1
 4005c4c:	38800005 	stb	r2,0(r7)
 4005c50:	39c00044 	addi	r7,r7,1
 4005c54:	39bffb1e 	bne	r7,r6,4005c44 <memmove+0x50>
 4005c58:	2005883a 	mov	r2,r4
 4005c5c:	f800283a 	ret
 4005c60:	1904b03a 	or	r2,r3,r4
 4005c64:	108000cc 	andi	r2,r2,3
 4005c68:	103ff31e 	bne	r2,zero,4005c38 <memmove+0x44>
 4005c6c:	3811883a 	mov	r8,r7
 4005c70:	180b883a 	mov	r5,r3
 4005c74:	200f883a 	mov	r7,r4
 4005c78:	28c00017 	ldw	r3,0(r5)
 4005c7c:	31bffc04 	addi	r6,r6,-16
 4005c80:	38c00015 	stw	r3,0(r7)
 4005c84:	28800117 	ldw	r2,4(r5)
 4005c88:	38800115 	stw	r2,4(r7)
 4005c8c:	28c00217 	ldw	r3,8(r5)
 4005c90:	38c00215 	stw	r3,8(r7)
 4005c94:	28800317 	ldw	r2,12(r5)
 4005c98:	29400404 	addi	r5,r5,16
 4005c9c:	38800315 	stw	r2,12(r7)
 4005ca0:	39c00404 	addi	r7,r7,16
 4005ca4:	41bff436 	bltu	r8,r6,4005c78 <memmove+0x84>
 4005ca8:	008000c4 	movi	r2,3
 4005cac:	1180072e 	bgeu	r2,r6,4005ccc <memmove+0xd8>
 4005cb0:	1007883a 	mov	r3,r2
 4005cb4:	28800017 	ldw	r2,0(r5)
 4005cb8:	31bfff04 	addi	r6,r6,-4
 4005cbc:	29400104 	addi	r5,r5,4
 4005cc0:	38800015 	stw	r2,0(r7)
 4005cc4:	39c00104 	addi	r7,r7,4
 4005cc8:	19bffa36 	bltu	r3,r6,4005cb4 <memmove+0xc0>
 4005ccc:	3811883a 	mov	r8,r7
 4005cd0:	003fd906 	br	4005c38 <memmove+0x44>

04005cd4 <memset>:
 4005cd4:	008000c4 	movi	r2,3
 4005cd8:	29403fcc 	andi	r5,r5,255
 4005cdc:	2007883a 	mov	r3,r4
 4005ce0:	1180022e 	bgeu	r2,r6,4005cec <memset+0x18>
 4005ce4:	2084703a 	and	r2,r4,r2
 4005ce8:	10000826 	beq	r2,zero,4005d0c <memset+0x38>
 4005cec:	30000526 	beq	r6,zero,4005d04 <memset+0x30>
 4005cf0:	2805883a 	mov	r2,r5
 4005cf4:	30cd883a 	add	r6,r6,r3
 4005cf8:	18800005 	stb	r2,0(r3)
 4005cfc:	18c00044 	addi	r3,r3,1
 4005d00:	19bffd1e 	bne	r3,r6,4005cf8 <memset+0x24>
 4005d04:	2005883a 	mov	r2,r4
 4005d08:	f800283a 	ret
 4005d0c:	2804923a 	slli	r2,r5,8
 4005d10:	020003c4 	movi	r8,15
 4005d14:	200f883a 	mov	r7,r4
 4005d18:	2884b03a 	or	r2,r5,r2
 4005d1c:	1006943a 	slli	r3,r2,16
 4005d20:	10c6b03a 	or	r3,r2,r3
 4005d24:	41800a2e 	bgeu	r8,r6,4005d50 <memset+0x7c>
 4005d28:	4005883a 	mov	r2,r8
 4005d2c:	31bffc04 	addi	r6,r6,-16
 4005d30:	38c00015 	stw	r3,0(r7)
 4005d34:	38c00115 	stw	r3,4(r7)
 4005d38:	38c00215 	stw	r3,8(r7)
 4005d3c:	38c00315 	stw	r3,12(r7)
 4005d40:	39c00404 	addi	r7,r7,16
 4005d44:	11bff936 	bltu	r2,r6,4005d2c <memset+0x58>
 4005d48:	008000c4 	movi	r2,3
 4005d4c:	1180052e 	bgeu	r2,r6,4005d64 <memset+0x90>
 4005d50:	31bfff04 	addi	r6,r6,-4
 4005d54:	008000c4 	movi	r2,3
 4005d58:	38c00015 	stw	r3,0(r7)
 4005d5c:	39c00104 	addi	r7,r7,4
 4005d60:	11bffb36 	bltu	r2,r6,4005d50 <memset+0x7c>
 4005d64:	3807883a 	mov	r3,r7
 4005d68:	003fe006 	br	4005cec <memset+0x18>

04005d6c <_Bfree>:
 4005d6c:	28000826 	beq	r5,zero,4005d90 <_Bfree+0x24>
 4005d70:	28800117 	ldw	r2,4(r5)
 4005d74:	21001317 	ldw	r4,76(r4)
 4005d78:	1085883a 	add	r2,r2,r2
 4005d7c:	1085883a 	add	r2,r2,r2
 4005d80:	1105883a 	add	r2,r2,r4
 4005d84:	10c00017 	ldw	r3,0(r2)
 4005d88:	28c00015 	stw	r3,0(r5)
 4005d8c:	11400015 	stw	r5,0(r2)
 4005d90:	f800283a 	ret

04005d94 <__hi0bits>:
 4005d94:	20bfffec 	andhi	r2,r4,65535
 4005d98:	10001426 	beq	r2,zero,4005dec <__hi0bits+0x58>
 4005d9c:	0007883a 	mov	r3,zero
 4005da0:	20bfc02c 	andhi	r2,r4,65280
 4005da4:	1000021e 	bne	r2,zero,4005db0 <__hi0bits+0x1c>
 4005da8:	2008923a 	slli	r4,r4,8
 4005dac:	18c00204 	addi	r3,r3,8
 4005db0:	20bc002c 	andhi	r2,r4,61440
 4005db4:	1000021e 	bne	r2,zero,4005dc0 <__hi0bits+0x2c>
 4005db8:	2008913a 	slli	r4,r4,4
 4005dbc:	18c00104 	addi	r3,r3,4
 4005dc0:	20b0002c 	andhi	r2,r4,49152
 4005dc4:	1000031e 	bne	r2,zero,4005dd4 <__hi0bits+0x40>
 4005dc8:	2105883a 	add	r2,r4,r4
 4005dcc:	18c00084 	addi	r3,r3,2
 4005dd0:	1089883a 	add	r4,r2,r2
 4005dd4:	20000316 	blt	r4,zero,4005de4 <__hi0bits+0x50>
 4005dd8:	2090002c 	andhi	r2,r4,16384
 4005ddc:	10000626 	beq	r2,zero,4005df8 <__hi0bits+0x64>
 4005de0:	18c00044 	addi	r3,r3,1
 4005de4:	1805883a 	mov	r2,r3
 4005de8:	f800283a 	ret
 4005dec:	2008943a 	slli	r4,r4,16
 4005df0:	00c00404 	movi	r3,16
 4005df4:	003fea06 	br	4005da0 <__hi0bits+0xc>
 4005df8:	00c00804 	movi	r3,32
 4005dfc:	1805883a 	mov	r2,r3
 4005e00:	f800283a 	ret

04005e04 <__lo0bits>:
 4005e04:	20c00017 	ldw	r3,0(r4)
 4005e08:	188001cc 	andi	r2,r3,7
 4005e0c:	10000a26 	beq	r2,zero,4005e38 <__lo0bits+0x34>
 4005e10:	1880004c 	andi	r2,r3,1
 4005e14:	1005003a 	cmpeq	r2,r2,zero
 4005e18:	10002126 	beq	r2,zero,4005ea0 <__lo0bits+0x9c>
 4005e1c:	1880008c 	andi	r2,r3,2
 4005e20:	1000251e 	bne	r2,zero,4005eb8 <__lo0bits+0xb4>
 4005e24:	1804d0ba 	srli	r2,r3,2
 4005e28:	01400084 	movi	r5,2
 4005e2c:	20800015 	stw	r2,0(r4)
 4005e30:	2805883a 	mov	r2,r5
 4005e34:	f800283a 	ret
 4005e38:	18bfffcc 	andi	r2,r3,65535
 4005e3c:	10001526 	beq	r2,zero,4005e94 <__lo0bits+0x90>
 4005e40:	000b883a 	mov	r5,zero
 4005e44:	18803fcc 	andi	r2,r3,255
 4005e48:	1000021e 	bne	r2,zero,4005e54 <__lo0bits+0x50>
 4005e4c:	1806d23a 	srli	r3,r3,8
 4005e50:	29400204 	addi	r5,r5,8
 4005e54:	188003cc 	andi	r2,r3,15
 4005e58:	1000021e 	bne	r2,zero,4005e64 <__lo0bits+0x60>
 4005e5c:	1806d13a 	srli	r3,r3,4
 4005e60:	29400104 	addi	r5,r5,4
 4005e64:	188000cc 	andi	r2,r3,3
 4005e68:	1000021e 	bne	r2,zero,4005e74 <__lo0bits+0x70>
 4005e6c:	1806d0ba 	srli	r3,r3,2
 4005e70:	29400084 	addi	r5,r5,2
 4005e74:	1880004c 	andi	r2,r3,1
 4005e78:	1000031e 	bne	r2,zero,4005e88 <__lo0bits+0x84>
 4005e7c:	1806d07a 	srli	r3,r3,1
 4005e80:	18000a26 	beq	r3,zero,4005eac <__lo0bits+0xa8>
 4005e84:	29400044 	addi	r5,r5,1
 4005e88:	2805883a 	mov	r2,r5
 4005e8c:	20c00015 	stw	r3,0(r4)
 4005e90:	f800283a 	ret
 4005e94:	1806d43a 	srli	r3,r3,16
 4005e98:	01400404 	movi	r5,16
 4005e9c:	003fe906 	br	4005e44 <__lo0bits+0x40>
 4005ea0:	000b883a 	mov	r5,zero
 4005ea4:	2805883a 	mov	r2,r5
 4005ea8:	f800283a 	ret
 4005eac:	01400804 	movi	r5,32
 4005eb0:	2805883a 	mov	r2,r5
 4005eb4:	f800283a 	ret
 4005eb8:	1804d07a 	srli	r2,r3,1
 4005ebc:	01400044 	movi	r5,1
 4005ec0:	20800015 	stw	r2,0(r4)
 4005ec4:	003fda06 	br	4005e30 <__lo0bits+0x2c>

04005ec8 <__mcmp>:
 4005ec8:	20800417 	ldw	r2,16(r4)
 4005ecc:	28c00417 	ldw	r3,16(r5)
 4005ed0:	10cfc83a 	sub	r7,r2,r3
 4005ed4:	38000c1e 	bne	r7,zero,4005f08 <__mcmp+0x40>
 4005ed8:	18c5883a 	add	r2,r3,r3
 4005edc:	1085883a 	add	r2,r2,r2
 4005ee0:	10c00504 	addi	r3,r2,20
 4005ee4:	21000504 	addi	r4,r4,20
 4005ee8:	28cb883a 	add	r5,r5,r3
 4005eec:	2085883a 	add	r2,r4,r2
 4005ef0:	10bfff04 	addi	r2,r2,-4
 4005ef4:	297fff04 	addi	r5,r5,-4
 4005ef8:	11800017 	ldw	r6,0(r2)
 4005efc:	28c00017 	ldw	r3,0(r5)
 4005f00:	30c0031e 	bne	r6,r3,4005f10 <__mcmp+0x48>
 4005f04:	20bffa36 	bltu	r4,r2,4005ef0 <__mcmp+0x28>
 4005f08:	3805883a 	mov	r2,r7
 4005f0c:	f800283a 	ret
 4005f10:	30c00336 	bltu	r6,r3,4005f20 <__mcmp+0x58>
 4005f14:	01c00044 	movi	r7,1
 4005f18:	3805883a 	mov	r2,r7
 4005f1c:	f800283a 	ret
 4005f20:	01ffffc4 	movi	r7,-1
 4005f24:	003ff806 	br	4005f08 <__mcmp+0x40>

04005f28 <__ulp>:
 4005f28:	295ffc2c 	andhi	r5,r5,32752
 4005f2c:	013f3034 	movhi	r4,64704
 4005f30:	290b883a 	add	r5,r5,r4
 4005f34:	0145c83a 	sub	r2,zero,r5
 4005f38:	1007d53a 	srai	r3,r2,20
 4005f3c:	000d883a 	mov	r6,zero
 4005f40:	0140040e 	bge	zero,r5,4005f54 <__ulp+0x2c>
 4005f44:	280f883a 	mov	r7,r5
 4005f48:	3807883a 	mov	r3,r7
 4005f4c:	3005883a 	mov	r2,r6
 4005f50:	f800283a 	ret
 4005f54:	008004c4 	movi	r2,19
 4005f58:	193ffb04 	addi	r4,r3,-20
 4005f5c:	10c00c0e 	bge	r2,r3,4005f90 <__ulp+0x68>
 4005f60:	008007c4 	movi	r2,31
 4005f64:	1107c83a 	sub	r3,r2,r4
 4005f68:	00800784 	movi	r2,30
 4005f6c:	01400044 	movi	r5,1
 4005f70:	11000216 	blt	r2,r4,4005f7c <__ulp+0x54>
 4005f74:	00800044 	movi	r2,1
 4005f78:	10ca983a 	sll	r5,r2,r3
 4005f7c:	000f883a 	mov	r7,zero
 4005f80:	280d883a 	mov	r6,r5
 4005f84:	3807883a 	mov	r3,r7
 4005f88:	3005883a 	mov	r2,r6
 4005f8c:	f800283a 	ret
 4005f90:	00800234 	movhi	r2,8
 4005f94:	10cfd83a 	sra	r7,r2,r3
 4005f98:	000d883a 	mov	r6,zero
 4005f9c:	3005883a 	mov	r2,r6
 4005fa0:	3807883a 	mov	r3,r7
 4005fa4:	f800283a 	ret

04005fa8 <__b2d>:
 4005fa8:	20800417 	ldw	r2,16(r4)
 4005fac:	defff904 	addi	sp,sp,-28
 4005fb0:	dd000415 	stw	r20,16(sp)
 4005fb4:	1085883a 	add	r2,r2,r2
 4005fb8:	25000504 	addi	r20,r4,20
 4005fbc:	1085883a 	add	r2,r2,r2
 4005fc0:	dc000015 	stw	r16,0(sp)
 4005fc4:	a0a1883a 	add	r16,r20,r2
 4005fc8:	dd400515 	stw	r21,20(sp)
 4005fcc:	857fff17 	ldw	r21,-4(r16)
 4005fd0:	dc400115 	stw	r17,4(sp)
 4005fd4:	dfc00615 	stw	ra,24(sp)
 4005fd8:	a809883a 	mov	r4,r21
 4005fdc:	2823883a 	mov	r17,r5
 4005fe0:	dcc00315 	stw	r19,12(sp)
 4005fe4:	dc800215 	stw	r18,8(sp)
 4005fe8:	4005d940 	call	4005d94 <__hi0bits>
 4005fec:	100b883a 	mov	r5,r2
 4005ff0:	00800804 	movi	r2,32
 4005ff4:	1145c83a 	sub	r2,r2,r5
 4005ff8:	88800015 	stw	r2,0(r17)
 4005ffc:	00800284 	movi	r2,10
 4006000:	80ffff04 	addi	r3,r16,-4
 4006004:	11401416 	blt	r2,r5,4006058 <__b2d+0xb0>
 4006008:	008002c4 	movi	r2,11
 400600c:	1149c83a 	sub	r4,r2,r5
 4006010:	a0c02736 	bltu	r20,r3,40060b0 <__b2d+0x108>
 4006014:	000d883a 	mov	r6,zero
 4006018:	28800544 	addi	r2,r5,21
 400601c:	a906d83a 	srl	r3,r21,r4
 4006020:	a884983a 	sll	r2,r21,r2
 4006024:	1ccffc34 	orhi	r19,r3,16368
 4006028:	11a4b03a 	or	r18,r2,r6
 400602c:	9005883a 	mov	r2,r18
 4006030:	9807883a 	mov	r3,r19
 4006034:	dfc00617 	ldw	ra,24(sp)
 4006038:	dd400517 	ldw	r21,20(sp)
 400603c:	dd000417 	ldw	r20,16(sp)
 4006040:	dcc00317 	ldw	r19,12(sp)
 4006044:	dc800217 	ldw	r18,8(sp)
 4006048:	dc400117 	ldw	r17,4(sp)
 400604c:	dc000017 	ldw	r16,0(sp)
 4006050:	dec00704 	addi	sp,sp,28
 4006054:	f800283a 	ret
 4006058:	a0c00e36 	bltu	r20,r3,4006094 <__b2d+0xec>
 400605c:	293ffd44 	addi	r4,r5,-11
 4006060:	000d883a 	mov	r6,zero
 4006064:	20000f26 	beq	r4,zero,40060a4 <__b2d+0xfc>
 4006068:	00800804 	movi	r2,32
 400606c:	110bc83a 	sub	r5,r2,r4
 4006070:	a0c01236 	bltu	r20,r3,40060bc <__b2d+0x114>
 4006074:	000f883a 	mov	r7,zero
 4006078:	a904983a 	sll	r2,r21,r4
 400607c:	3146d83a 	srl	r3,r6,r5
 4006080:	3108983a 	sll	r4,r6,r4
 4006084:	108ffc34 	orhi	r2,r2,16368
 4006088:	18a6b03a 	or	r19,r3,r2
 400608c:	3924b03a 	or	r18,r7,r4
 4006090:	003fe606 	br	400602c <__b2d+0x84>
 4006094:	293ffd44 	addi	r4,r5,-11
 4006098:	81bffe17 	ldw	r6,-8(r16)
 400609c:	80fffe04 	addi	r3,r16,-8
 40060a0:	203ff11e 	bne	r4,zero,4006068 <__b2d+0xc0>
 40060a4:	accffc34 	orhi	r19,r21,16368
 40060a8:	3025883a 	mov	r18,r6
 40060ac:	003fdf06 	br	400602c <__b2d+0x84>
 40060b0:	18bfff17 	ldw	r2,-4(r3)
 40060b4:	110cd83a 	srl	r6,r2,r4
 40060b8:	003fd706 	br	4006018 <__b2d+0x70>
 40060bc:	18bfff17 	ldw	r2,-4(r3)
 40060c0:	114ed83a 	srl	r7,r2,r5
 40060c4:	003fec06 	br	4006078 <__b2d+0xd0>

040060c8 <__ratio>:
 40060c8:	defff904 	addi	sp,sp,-28
 40060cc:	dc400215 	stw	r17,8(sp)
 40060d0:	2823883a 	mov	r17,r5
 40060d4:	d80b883a 	mov	r5,sp
 40060d8:	dfc00615 	stw	ra,24(sp)
 40060dc:	dd000515 	stw	r20,20(sp)
 40060e0:	dcc00415 	stw	r19,16(sp)
 40060e4:	dc800315 	stw	r18,12(sp)
 40060e8:	2025883a 	mov	r18,r4
 40060ec:	4005fa80 	call	4005fa8 <__b2d>
 40060f0:	8809883a 	mov	r4,r17
 40060f4:	d9400104 	addi	r5,sp,4
 40060f8:	1027883a 	mov	r19,r2
 40060fc:	1829883a 	mov	r20,r3
 4006100:	4005fa80 	call	4005fa8 <__b2d>
 4006104:	89000417 	ldw	r4,16(r17)
 4006108:	91c00417 	ldw	r7,16(r18)
 400610c:	d9800117 	ldw	r6,4(sp)
 4006110:	180b883a 	mov	r5,r3
 4006114:	390fc83a 	sub	r7,r7,r4
 4006118:	1009883a 	mov	r4,r2
 400611c:	d8800017 	ldw	r2,0(sp)
 4006120:	380e917a 	slli	r7,r7,5
 4006124:	2011883a 	mov	r8,r4
 4006128:	1185c83a 	sub	r2,r2,r6
 400612c:	11c5883a 	add	r2,r2,r7
 4006130:	1006953a 	slli	r3,r2,20
 4006134:	2813883a 	mov	r9,r5
 4006138:	00800d0e 	bge	zero,r2,4006170 <__ratio+0xa8>
 400613c:	1d29883a 	add	r20,r3,r20
 4006140:	a00b883a 	mov	r5,r20
 4006144:	480f883a 	mov	r7,r9
 4006148:	9809883a 	mov	r4,r19
 400614c:	400d883a 	mov	r6,r8
 4006150:	4008f240 	call	4008f24 <__divdf3>
 4006154:	dfc00617 	ldw	ra,24(sp)
 4006158:	dd000517 	ldw	r20,20(sp)
 400615c:	dcc00417 	ldw	r19,16(sp)
 4006160:	dc800317 	ldw	r18,12(sp)
 4006164:	dc400217 	ldw	r17,8(sp)
 4006168:	dec00704 	addi	sp,sp,28
 400616c:	f800283a 	ret
 4006170:	28d3c83a 	sub	r9,r5,r3
 4006174:	003ff206 	br	4006140 <__ratio+0x78>

04006178 <_mprec_log10>:
 4006178:	defffe04 	addi	sp,sp,-8
 400617c:	008005c4 	movi	r2,23
 4006180:	dc000015 	stw	r16,0(sp)
 4006184:	dfc00115 	stw	ra,4(sp)
 4006188:	2021883a 	mov	r16,r4
 400618c:	11000c16 	blt	r2,r4,40061c0 <_mprec_log10+0x48>
 4006190:	200490fa 	slli	r2,r4,3
 4006194:	00c10074 	movhi	r3,1025
 4006198:	18dad004 	addi	r3,r3,27456
 400619c:	10c5883a 	add	r2,r2,r3
 40061a0:	12400117 	ldw	r9,4(r2)
 40061a4:	12000017 	ldw	r8,0(r2)
 40061a8:	4807883a 	mov	r3,r9
 40061ac:	4005883a 	mov	r2,r8
 40061b0:	dfc00117 	ldw	ra,4(sp)
 40061b4:	dc000017 	ldw	r16,0(sp)
 40061b8:	dec00204 	addi	sp,sp,8
 40061bc:	f800283a 	ret
 40061c0:	0011883a 	mov	r8,zero
 40061c4:	024ffc34 	movhi	r9,16368
 40061c8:	0005883a 	mov	r2,zero
 40061cc:	00d00934 	movhi	r3,16420
 40061d0:	480b883a 	mov	r5,r9
 40061d4:	4009883a 	mov	r4,r8
 40061d8:	180f883a 	mov	r7,r3
 40061dc:	100d883a 	mov	r6,r2
 40061e0:	4008b600 	call	4008b60 <__muldf3>
 40061e4:	843fffc4 	addi	r16,r16,-1
 40061e8:	1011883a 	mov	r8,r2
 40061ec:	1813883a 	mov	r9,r3
 40061f0:	803ff51e 	bne	r16,zero,40061c8 <_mprec_log10+0x50>
 40061f4:	4005883a 	mov	r2,r8
 40061f8:	4807883a 	mov	r3,r9
 40061fc:	dfc00117 	ldw	ra,4(sp)
 4006200:	dc000017 	ldw	r16,0(sp)
 4006204:	dec00204 	addi	sp,sp,8
 4006208:	f800283a 	ret

0400620c <__copybits>:
 400620c:	297fffc4 	addi	r5,r5,-1
 4006210:	30800417 	ldw	r2,16(r6)
 4006214:	280bd17a 	srai	r5,r5,5
 4006218:	31800504 	addi	r6,r6,20
 400621c:	1085883a 	add	r2,r2,r2
 4006220:	294b883a 	add	r5,r5,r5
 4006224:	294b883a 	add	r5,r5,r5
 4006228:	1085883a 	add	r2,r2,r2
 400622c:	290b883a 	add	r5,r5,r4
 4006230:	3087883a 	add	r3,r6,r2
 4006234:	29400104 	addi	r5,r5,4
 4006238:	30c0052e 	bgeu	r6,r3,4006250 <__copybits+0x44>
 400623c:	30800017 	ldw	r2,0(r6)
 4006240:	31800104 	addi	r6,r6,4
 4006244:	20800015 	stw	r2,0(r4)
 4006248:	21000104 	addi	r4,r4,4
 400624c:	30fffb36 	bltu	r6,r3,400623c <__copybits+0x30>
 4006250:	2140032e 	bgeu	r4,r5,4006260 <__copybits+0x54>
 4006254:	20000015 	stw	zero,0(r4)
 4006258:	21000104 	addi	r4,r4,4
 400625c:	217ffd36 	bltu	r4,r5,4006254 <__copybits+0x48>
 4006260:	f800283a 	ret

04006264 <__any_on>:
 4006264:	20800417 	ldw	r2,16(r4)
 4006268:	2807d17a 	srai	r3,r5,5
 400626c:	21000504 	addi	r4,r4,20
 4006270:	10c00d0e 	bge	r2,r3,40062a8 <__any_on+0x44>
 4006274:	1085883a 	add	r2,r2,r2
 4006278:	1085883a 	add	r2,r2,r2
 400627c:	208d883a 	add	r6,r4,r2
 4006280:	2180182e 	bgeu	r4,r6,40062e4 <__any_on+0x80>
 4006284:	30bfff17 	ldw	r2,-4(r6)
 4006288:	30ffff04 	addi	r3,r6,-4
 400628c:	1000041e 	bne	r2,zero,40062a0 <__any_on+0x3c>
 4006290:	20c0142e 	bgeu	r4,r3,40062e4 <__any_on+0x80>
 4006294:	18ffff04 	addi	r3,r3,-4
 4006298:	18800017 	ldw	r2,0(r3)
 400629c:	103ffc26 	beq	r2,zero,4006290 <__any_on+0x2c>
 40062a0:	00800044 	movi	r2,1
 40062a4:	f800283a 	ret
 40062a8:	18800a0e 	bge	r3,r2,40062d4 <__any_on+0x70>
 40062ac:	294007cc 	andi	r5,r5,31
 40062b0:	28000826 	beq	r5,zero,40062d4 <__any_on+0x70>
 40062b4:	18c5883a 	add	r2,r3,r3
 40062b8:	1085883a 	add	r2,r2,r2
 40062bc:	208d883a 	add	r6,r4,r2
 40062c0:	30c00017 	ldw	r3,0(r6)
 40062c4:	1944d83a 	srl	r2,r3,r5
 40062c8:	1144983a 	sll	r2,r2,r5
 40062cc:	18bff41e 	bne	r3,r2,40062a0 <__any_on+0x3c>
 40062d0:	003feb06 	br	4006280 <__any_on+0x1c>
 40062d4:	18c5883a 	add	r2,r3,r3
 40062d8:	1085883a 	add	r2,r2,r2
 40062dc:	208d883a 	add	r6,r4,r2
 40062e0:	003fe706 	br	4006280 <__any_on+0x1c>
 40062e4:	0005883a 	mov	r2,zero
 40062e8:	f800283a 	ret

040062ec <_Balloc>:
 40062ec:	20c01317 	ldw	r3,76(r4)
 40062f0:	defffb04 	addi	sp,sp,-20
 40062f4:	dcc00315 	stw	r19,12(sp)
 40062f8:	dc800215 	stw	r18,8(sp)
 40062fc:	dfc00415 	stw	ra,16(sp)
 4006300:	2825883a 	mov	r18,r5
 4006304:	dc400115 	stw	r17,4(sp)
 4006308:	dc000015 	stw	r16,0(sp)
 400630c:	2027883a 	mov	r19,r4
 4006310:	01800404 	movi	r6,16
 4006314:	01400104 	movi	r5,4
 4006318:	18001726 	beq	r3,zero,4006378 <_Balloc+0x8c>
 400631c:	01400044 	movi	r5,1
 4006320:	9485883a 	add	r2,r18,r18
 4006324:	2ca2983a 	sll	r17,r5,r18
 4006328:	1085883a 	add	r2,r2,r2
 400632c:	10c7883a 	add	r3,r2,r3
 4006330:	1c000017 	ldw	r16,0(r3)
 4006334:	8c4d883a 	add	r6,r17,r17
 4006338:	318d883a 	add	r6,r6,r6
 400633c:	9809883a 	mov	r4,r19
 4006340:	31800504 	addi	r6,r6,20
 4006344:	80001226 	beq	r16,zero,4006390 <_Balloc+0xa4>
 4006348:	80800017 	ldw	r2,0(r16)
 400634c:	18800015 	stw	r2,0(r3)
 4006350:	80000415 	stw	zero,16(r16)
 4006354:	80000315 	stw	zero,12(r16)
 4006358:	8005883a 	mov	r2,r16
 400635c:	dfc00417 	ldw	ra,16(sp)
 4006360:	dcc00317 	ldw	r19,12(sp)
 4006364:	dc800217 	ldw	r18,8(sp)
 4006368:	dc400117 	ldw	r17,4(sp)
 400636c:	dc000017 	ldw	r16,0(sp)
 4006370:	dec00504 	addi	sp,sp,20
 4006374:	f800283a 	ret
 4006378:	40076b40 	call	40076b4 <_calloc_r>
 400637c:	1007883a 	mov	r3,r2
 4006380:	0021883a 	mov	r16,zero
 4006384:	98801315 	stw	r2,76(r19)
 4006388:	103fe41e 	bne	r2,zero,400631c <_Balloc+0x30>
 400638c:	003ff206 	br	4006358 <_Balloc+0x6c>
 4006390:	40076b40 	call	40076b4 <_calloc_r>
 4006394:	103ff026 	beq	r2,zero,4006358 <_Balloc+0x6c>
 4006398:	1021883a 	mov	r16,r2
 400639c:	14800115 	stw	r18,4(r2)
 40063a0:	14400215 	stw	r17,8(r2)
 40063a4:	003fea06 	br	4006350 <_Balloc+0x64>

040063a8 <__d2b>:
 40063a8:	defff504 	addi	sp,sp,-44
 40063ac:	dcc00515 	stw	r19,20(sp)
 40063b0:	04c00044 	movi	r19,1
 40063b4:	dc000215 	stw	r16,8(sp)
 40063b8:	2821883a 	mov	r16,r5
 40063bc:	980b883a 	mov	r5,r19
 40063c0:	ddc00915 	stw	r23,36(sp)
 40063c4:	dd800815 	stw	r22,32(sp)
 40063c8:	dd400715 	stw	r21,28(sp)
 40063cc:	dd000615 	stw	r20,24(sp)
 40063d0:	dc800415 	stw	r18,16(sp)
 40063d4:	dc400315 	stw	r17,12(sp)
 40063d8:	dfc00a15 	stw	ra,40(sp)
 40063dc:	3023883a 	mov	r17,r6
 40063e0:	382d883a 	mov	r22,r7
 40063e4:	ddc00b17 	ldw	r23,44(sp)
 40063e8:	40062ec0 	call	40062ec <_Balloc>
 40063ec:	1025883a 	mov	r18,r2
 40063f0:	00a00034 	movhi	r2,32768
 40063f4:	10bfffc4 	addi	r2,r2,-1
 40063f8:	8888703a 	and	r4,r17,r2
 40063fc:	202ad53a 	srli	r21,r4,20
 4006400:	00800434 	movhi	r2,16
 4006404:	10bfffc4 	addi	r2,r2,-1
 4006408:	8886703a 	and	r3,r17,r2
 400640c:	a829003a 	cmpeq	r20,r21,zero
 4006410:	800b883a 	mov	r5,r16
 4006414:	d8c00115 	stw	r3,4(sp)
 4006418:	94000504 	addi	r16,r18,20
 400641c:	a000021e 	bne	r20,zero,4006428 <__d2b+0x80>
 4006420:	18c00434 	orhi	r3,r3,16
 4006424:	d8c00115 	stw	r3,4(sp)
 4006428:	28002726 	beq	r5,zero,40064c8 <__d2b+0x120>
 400642c:	d809883a 	mov	r4,sp
 4006430:	d9400015 	stw	r5,0(sp)
 4006434:	4005e040 	call	4005e04 <__lo0bits>
 4006438:	100d883a 	mov	r6,r2
 400643c:	10003526 	beq	r2,zero,4006514 <__d2b+0x16c>
 4006440:	d8c00117 	ldw	r3,4(sp)
 4006444:	00800804 	movi	r2,32
 4006448:	1185c83a 	sub	r2,r2,r6
 400644c:	d9000017 	ldw	r4,0(sp)
 4006450:	1886983a 	sll	r3,r3,r2
 4006454:	1906b03a 	or	r3,r3,r4
 4006458:	90c00515 	stw	r3,20(r18)
 400645c:	d8c00117 	ldw	r3,4(sp)
 4006460:	1986d83a 	srl	r3,r3,r6
 4006464:	d8c00115 	stw	r3,4(sp)
 4006468:	180b003a 	cmpeq	r5,r3,zero
 400646c:	00800084 	movi	r2,2
 4006470:	114bc83a 	sub	r5,r2,r5
 4006474:	80c00115 	stw	r3,4(r16)
 4006478:	91400415 	stw	r5,16(r18)
 400647c:	a0001a1e 	bne	r20,zero,40064e8 <__d2b+0x140>
 4006480:	3545883a 	add	r2,r6,r21
 4006484:	10bef344 	addi	r2,r2,-1075
 4006488:	00c00d44 	movi	r3,53
 400648c:	b0800015 	stw	r2,0(r22)
 4006490:	1987c83a 	sub	r3,r3,r6
 4006494:	b8c00015 	stw	r3,0(r23)
 4006498:	9005883a 	mov	r2,r18
 400649c:	dfc00a17 	ldw	ra,40(sp)
 40064a0:	ddc00917 	ldw	r23,36(sp)
 40064a4:	dd800817 	ldw	r22,32(sp)
 40064a8:	dd400717 	ldw	r21,28(sp)
 40064ac:	dd000617 	ldw	r20,24(sp)
 40064b0:	dcc00517 	ldw	r19,20(sp)
 40064b4:	dc800417 	ldw	r18,16(sp)
 40064b8:	dc400317 	ldw	r17,12(sp)
 40064bc:	dc000217 	ldw	r16,8(sp)
 40064c0:	dec00b04 	addi	sp,sp,44
 40064c4:	f800283a 	ret
 40064c8:	d9000104 	addi	r4,sp,4
 40064cc:	4005e040 	call	4005e04 <__lo0bits>
 40064d0:	11800804 	addi	r6,r2,32
 40064d4:	d8800117 	ldw	r2,4(sp)
 40064d8:	94c00415 	stw	r19,16(r18)
 40064dc:	980b883a 	mov	r5,r19
 40064e0:	90800515 	stw	r2,20(r18)
 40064e4:	a03fe626 	beq	r20,zero,4006480 <__d2b+0xd8>
 40064e8:	2945883a 	add	r2,r5,r5
 40064ec:	1085883a 	add	r2,r2,r2
 40064f0:	1405883a 	add	r2,r2,r16
 40064f4:	113fff17 	ldw	r4,-4(r2)
 40064f8:	30fef384 	addi	r3,r6,-1074
 40064fc:	2820917a 	slli	r16,r5,5
 4006500:	b0c00015 	stw	r3,0(r22)
 4006504:	4005d940 	call	4005d94 <__hi0bits>
 4006508:	80a1c83a 	sub	r16,r16,r2
 400650c:	bc000015 	stw	r16,0(r23)
 4006510:	003fe106 	br	4006498 <__d2b+0xf0>
 4006514:	d8800017 	ldw	r2,0(sp)
 4006518:	90800515 	stw	r2,20(r18)
 400651c:	d8c00117 	ldw	r3,4(sp)
 4006520:	003fd106 	br	4006468 <__d2b+0xc0>

04006524 <__mdiff>:
 4006524:	defffb04 	addi	sp,sp,-20
 4006528:	dc000015 	stw	r16,0(sp)
 400652c:	2821883a 	mov	r16,r5
 4006530:	dc800215 	stw	r18,8(sp)
 4006534:	300b883a 	mov	r5,r6
 4006538:	2025883a 	mov	r18,r4
 400653c:	8009883a 	mov	r4,r16
 4006540:	dc400115 	stw	r17,4(sp)
 4006544:	dfc00415 	stw	ra,16(sp)
 4006548:	dcc00315 	stw	r19,12(sp)
 400654c:	3023883a 	mov	r17,r6
 4006550:	4005ec80 	call	4005ec8 <__mcmp>
 4006554:	10004226 	beq	r2,zero,4006660 <__mdiff+0x13c>
 4006558:	10005016 	blt	r2,zero,400669c <__mdiff+0x178>
 400655c:	0027883a 	mov	r19,zero
 4006560:	81400117 	ldw	r5,4(r16)
 4006564:	9009883a 	mov	r4,r18
 4006568:	40062ec0 	call	40062ec <_Balloc>
 400656c:	1019883a 	mov	r12,r2
 4006570:	82800417 	ldw	r10,16(r16)
 4006574:	88800417 	ldw	r2,16(r17)
 4006578:	81800504 	addi	r6,r16,20
 400657c:	5287883a 	add	r3,r10,r10
 4006580:	1085883a 	add	r2,r2,r2
 4006584:	18c7883a 	add	r3,r3,r3
 4006588:	1085883a 	add	r2,r2,r2
 400658c:	8a000504 	addi	r8,r17,20
 4006590:	64c00315 	stw	r19,12(r12)
 4006594:	30db883a 	add	r13,r6,r3
 4006598:	4097883a 	add	r11,r8,r2
 400659c:	61c00504 	addi	r7,r12,20
 40065a0:	0013883a 	mov	r9,zero
 40065a4:	31000017 	ldw	r4,0(r6)
 40065a8:	41400017 	ldw	r5,0(r8)
 40065ac:	42000104 	addi	r8,r8,4
 40065b0:	20bfffcc 	andi	r2,r4,65535
 40065b4:	28ffffcc 	andi	r3,r5,65535
 40065b8:	10c5c83a 	sub	r2,r2,r3
 40065bc:	1245883a 	add	r2,r2,r9
 40065c0:	2008d43a 	srli	r4,r4,16
 40065c4:	280ad43a 	srli	r5,r5,16
 40065c8:	1007d43a 	srai	r3,r2,16
 40065cc:	3880000d 	sth	r2,0(r7)
 40065d0:	2149c83a 	sub	r4,r4,r5
 40065d4:	20c9883a 	add	r4,r4,r3
 40065d8:	3900008d 	sth	r4,2(r7)
 40065dc:	31800104 	addi	r6,r6,4
 40065e0:	39c00104 	addi	r7,r7,4
 40065e4:	2013d43a 	srai	r9,r4,16
 40065e8:	42ffee36 	bltu	r8,r11,40065a4 <__mdiff+0x80>
 40065ec:	33400c2e 	bgeu	r6,r13,4006620 <__mdiff+0xfc>
 40065f0:	30800017 	ldw	r2,0(r6)
 40065f4:	31800104 	addi	r6,r6,4
 40065f8:	10ffffcc 	andi	r3,r2,65535
 40065fc:	1a47883a 	add	r3,r3,r9
 4006600:	1004d43a 	srli	r2,r2,16
 4006604:	1809d43a 	srai	r4,r3,16
 4006608:	38c0000d 	sth	r3,0(r7)
 400660c:	1105883a 	add	r2,r2,r4
 4006610:	3880008d 	sth	r2,2(r7)
 4006614:	1013d43a 	srai	r9,r2,16
 4006618:	39c00104 	addi	r7,r7,4
 400661c:	337ff436 	bltu	r6,r13,40065f0 <__mdiff+0xcc>
 4006620:	38bfff17 	ldw	r2,-4(r7)
 4006624:	38ffff04 	addi	r3,r7,-4
 4006628:	1000041e 	bne	r2,zero,400663c <__mdiff+0x118>
 400662c:	18ffff04 	addi	r3,r3,-4
 4006630:	18800017 	ldw	r2,0(r3)
 4006634:	52bfffc4 	addi	r10,r10,-1
 4006638:	103ffc26 	beq	r2,zero,400662c <__mdiff+0x108>
 400663c:	6005883a 	mov	r2,r12
 4006640:	62800415 	stw	r10,16(r12)
 4006644:	dfc00417 	ldw	ra,16(sp)
 4006648:	dcc00317 	ldw	r19,12(sp)
 400664c:	dc800217 	ldw	r18,8(sp)
 4006650:	dc400117 	ldw	r17,4(sp)
 4006654:	dc000017 	ldw	r16,0(sp)
 4006658:	dec00504 	addi	sp,sp,20
 400665c:	f800283a 	ret
 4006660:	9009883a 	mov	r4,r18
 4006664:	000b883a 	mov	r5,zero
 4006668:	40062ec0 	call	40062ec <_Balloc>
 400666c:	1019883a 	mov	r12,r2
 4006670:	00800044 	movi	r2,1
 4006674:	60800415 	stw	r2,16(r12)
 4006678:	6005883a 	mov	r2,r12
 400667c:	60000515 	stw	zero,20(r12)
 4006680:	dfc00417 	ldw	ra,16(sp)
 4006684:	dcc00317 	ldw	r19,12(sp)
 4006688:	dc800217 	ldw	r18,8(sp)
 400668c:	dc400117 	ldw	r17,4(sp)
 4006690:	dc000017 	ldw	r16,0(sp)
 4006694:	dec00504 	addi	sp,sp,20
 4006698:	f800283a 	ret
 400669c:	880d883a 	mov	r6,r17
 40066a0:	04c00044 	movi	r19,1
 40066a4:	8023883a 	mov	r17,r16
 40066a8:	3021883a 	mov	r16,r6
 40066ac:	003fac06 	br	4006560 <__mdiff+0x3c>

040066b0 <__lshift>:
 40066b0:	defff904 	addi	sp,sp,-28
 40066b4:	28800417 	ldw	r2,16(r5)
 40066b8:	dc000015 	stw	r16,0(sp)
 40066bc:	3021d17a 	srai	r16,r6,5
 40066c0:	28c00217 	ldw	r3,8(r5)
 40066c4:	10800044 	addi	r2,r2,1
 40066c8:	dc400115 	stw	r17,4(sp)
 40066cc:	80a3883a 	add	r17,r16,r2
 40066d0:	dd400515 	stw	r21,20(sp)
 40066d4:	dd000415 	stw	r20,16(sp)
 40066d8:	dc800215 	stw	r18,8(sp)
 40066dc:	dfc00615 	stw	ra,24(sp)
 40066e0:	2825883a 	mov	r18,r5
 40066e4:	dcc00315 	stw	r19,12(sp)
 40066e8:	3029883a 	mov	r20,r6
 40066ec:	202b883a 	mov	r21,r4
 40066f0:	29400117 	ldw	r5,4(r5)
 40066f4:	1c40030e 	bge	r3,r17,4006704 <__lshift+0x54>
 40066f8:	18c7883a 	add	r3,r3,r3
 40066fc:	29400044 	addi	r5,r5,1
 4006700:	1c7ffd16 	blt	r3,r17,40066f8 <__lshift+0x48>
 4006704:	a809883a 	mov	r4,r21
 4006708:	40062ec0 	call	40062ec <_Balloc>
 400670c:	1027883a 	mov	r19,r2
 4006710:	11400504 	addi	r5,r2,20
 4006714:	0400090e 	bge	zero,r16,400673c <__lshift+0x8c>
 4006718:	2805883a 	mov	r2,r5
 400671c:	0007883a 	mov	r3,zero
 4006720:	18c00044 	addi	r3,r3,1
 4006724:	10000015 	stw	zero,0(r2)
 4006728:	10800104 	addi	r2,r2,4
 400672c:	80fffc1e 	bne	r16,r3,4006720 <__lshift+0x70>
 4006730:	8405883a 	add	r2,r16,r16
 4006734:	1085883a 	add	r2,r2,r2
 4006738:	288b883a 	add	r5,r5,r2
 400673c:	90800417 	ldw	r2,16(r18)
 4006740:	91000504 	addi	r4,r18,20
 4006744:	a18007cc 	andi	r6,r20,31
 4006748:	1085883a 	add	r2,r2,r2
 400674c:	1085883a 	add	r2,r2,r2
 4006750:	208f883a 	add	r7,r4,r2
 4006754:	30001e26 	beq	r6,zero,40067d0 <__lshift+0x120>
 4006758:	00800804 	movi	r2,32
 400675c:	1191c83a 	sub	r8,r2,r6
 4006760:	0007883a 	mov	r3,zero
 4006764:	20800017 	ldw	r2,0(r4)
 4006768:	1184983a 	sll	r2,r2,r6
 400676c:	1884b03a 	or	r2,r3,r2
 4006770:	28800015 	stw	r2,0(r5)
 4006774:	20c00017 	ldw	r3,0(r4)
 4006778:	21000104 	addi	r4,r4,4
 400677c:	29400104 	addi	r5,r5,4
 4006780:	1a06d83a 	srl	r3,r3,r8
 4006784:	21fff736 	bltu	r4,r7,4006764 <__lshift+0xb4>
 4006788:	28c00015 	stw	r3,0(r5)
 400678c:	18000126 	beq	r3,zero,4006794 <__lshift+0xe4>
 4006790:	8c400044 	addi	r17,r17,1
 4006794:	88bfffc4 	addi	r2,r17,-1
 4006798:	98800415 	stw	r2,16(r19)
 400679c:	a809883a 	mov	r4,r21
 40067a0:	900b883a 	mov	r5,r18
 40067a4:	4005d6c0 	call	4005d6c <_Bfree>
 40067a8:	9805883a 	mov	r2,r19
 40067ac:	dfc00617 	ldw	ra,24(sp)
 40067b0:	dd400517 	ldw	r21,20(sp)
 40067b4:	dd000417 	ldw	r20,16(sp)
 40067b8:	dcc00317 	ldw	r19,12(sp)
 40067bc:	dc800217 	ldw	r18,8(sp)
 40067c0:	dc400117 	ldw	r17,4(sp)
 40067c4:	dc000017 	ldw	r16,0(sp)
 40067c8:	dec00704 	addi	sp,sp,28
 40067cc:	f800283a 	ret
 40067d0:	20800017 	ldw	r2,0(r4)
 40067d4:	21000104 	addi	r4,r4,4
 40067d8:	28800015 	stw	r2,0(r5)
 40067dc:	29400104 	addi	r5,r5,4
 40067e0:	21ffec2e 	bgeu	r4,r7,4006794 <__lshift+0xe4>
 40067e4:	20800017 	ldw	r2,0(r4)
 40067e8:	21000104 	addi	r4,r4,4
 40067ec:	28800015 	stw	r2,0(r5)
 40067f0:	29400104 	addi	r5,r5,4
 40067f4:	21fff636 	bltu	r4,r7,40067d0 <__lshift+0x120>
 40067f8:	003fe606 	br	4006794 <__lshift+0xe4>

040067fc <__multiply>:
 40067fc:	defff904 	addi	sp,sp,-28
 4006800:	dcc00315 	stw	r19,12(sp)
 4006804:	dc800215 	stw	r18,8(sp)
 4006808:	2cc00417 	ldw	r19,16(r5)
 400680c:	34800417 	ldw	r18,16(r6)
 4006810:	dd000415 	stw	r20,16(sp)
 4006814:	dc400115 	stw	r17,4(sp)
 4006818:	dfc00615 	stw	ra,24(sp)
 400681c:	dd400515 	stw	r21,20(sp)
 4006820:	dc000015 	stw	r16,0(sp)
 4006824:	2823883a 	mov	r17,r5
 4006828:	3029883a 	mov	r20,r6
 400682c:	9c80040e 	bge	r19,r18,4006840 <__multiply+0x44>
 4006830:	9027883a 	mov	r19,r18
 4006834:	2c800417 	ldw	r18,16(r5)
 4006838:	2829883a 	mov	r20,r5
 400683c:	3023883a 	mov	r17,r6
 4006840:	88800217 	ldw	r2,8(r17)
 4006844:	9ca1883a 	add	r16,r19,r18
 4006848:	89400117 	ldw	r5,4(r17)
 400684c:	1400010e 	bge	r2,r16,4006854 <__multiply+0x58>
 4006850:	29400044 	addi	r5,r5,1
 4006854:	40062ec0 	call	40062ec <_Balloc>
 4006858:	102b883a 	mov	r21,r2
 400685c:	8405883a 	add	r2,r16,r16
 4006860:	1085883a 	add	r2,r2,r2
 4006864:	a9000504 	addi	r4,r21,20
 4006868:	209d883a 	add	r14,r4,r2
 400686c:	2380042e 	bgeu	r4,r14,4006880 <__multiply+0x84>
 4006870:	2005883a 	mov	r2,r4
 4006874:	10000015 	stw	zero,0(r2)
 4006878:	10800104 	addi	r2,r2,4
 400687c:	13bffd36 	bltu	r2,r14,4006874 <__multiply+0x78>
 4006880:	9485883a 	add	r2,r18,r18
 4006884:	9cc7883a 	add	r3,r19,r19
 4006888:	a1800504 	addi	r6,r20,20
 400688c:	1085883a 	add	r2,r2,r2
 4006890:	8b400504 	addi	r13,r17,20
 4006894:	18c7883a 	add	r3,r3,r3
 4006898:	309f883a 	add	r15,r6,r2
 400689c:	68d7883a 	add	r11,r13,r3
 40068a0:	33c03b2e 	bgeu	r6,r15,4006990 <__multiply+0x194>
 40068a4:	2019883a 	mov	r12,r4
 40068a8:	30800017 	ldw	r2,0(r6)
 40068ac:	127fffcc 	andi	r9,r2,65535
 40068b0:	48001826 	beq	r9,zero,4006914 <__multiply+0x118>
 40068b4:	6811883a 	mov	r8,r13
 40068b8:	600f883a 	mov	r7,r12
 40068bc:	0015883a 	mov	r10,zero
 40068c0:	40c00017 	ldw	r3,0(r8)
 40068c4:	39400017 	ldw	r5,0(r7)
 40068c8:	42000104 	addi	r8,r8,4
 40068cc:	193fffcc 	andi	r4,r3,65535
 40068d0:	4909383a 	mul	r4,r9,r4
 40068d4:	1806d43a 	srli	r3,r3,16
 40068d8:	28bfffcc 	andi	r2,r5,65535
 40068dc:	5085883a 	add	r2,r10,r2
 40068e0:	2089883a 	add	r4,r4,r2
 40068e4:	48c7383a 	mul	r3,r9,r3
 40068e8:	280ad43a 	srli	r5,r5,16
 40068ec:	2004d43a 	srli	r2,r4,16
 40068f0:	3900000d 	sth	r4,0(r7)
 40068f4:	1947883a 	add	r3,r3,r5
 40068f8:	10c5883a 	add	r2,r2,r3
 40068fc:	3880008d 	sth	r2,2(r7)
 4006900:	1014d43a 	srli	r10,r2,16
 4006904:	39c00104 	addi	r7,r7,4
 4006908:	42ffed36 	bltu	r8,r11,40068c0 <__multiply+0xc4>
 400690c:	3a800015 	stw	r10,0(r7)
 4006910:	30800017 	ldw	r2,0(r6)
 4006914:	1012d43a 	srli	r9,r2,16
 4006918:	48001926 	beq	r9,zero,4006980 <__multiply+0x184>
 400691c:	60800017 	ldw	r2,0(r12)
 4006920:	6811883a 	mov	r8,r13
 4006924:	600f883a 	mov	r7,r12
 4006928:	0015883a 	mov	r10,zero
 400692c:	100b883a 	mov	r5,r2
 4006930:	41000017 	ldw	r4,0(r8)
 4006934:	2806d43a 	srli	r3,r5,16
 4006938:	3880000d 	sth	r2,0(r7)
 400693c:	20bfffcc 	andi	r2,r4,65535
 4006940:	4885383a 	mul	r2,r9,r2
 4006944:	50c7883a 	add	r3,r10,r3
 4006948:	2008d43a 	srli	r4,r4,16
 400694c:	10c5883a 	add	r2,r2,r3
 4006950:	3880008d 	sth	r2,2(r7)
 4006954:	39c00104 	addi	r7,r7,4
 4006958:	39400017 	ldw	r5,0(r7)
 400695c:	4909383a 	mul	r4,r9,r4
 4006960:	1004d43a 	srli	r2,r2,16
 4006964:	28ffffcc 	andi	r3,r5,65535
 4006968:	20c9883a 	add	r4,r4,r3
 400696c:	1105883a 	add	r2,r2,r4
 4006970:	42000104 	addi	r8,r8,4
 4006974:	1014d43a 	srli	r10,r2,16
 4006978:	42ffed36 	bltu	r8,r11,4006930 <__multiply+0x134>
 400697c:	38800015 	stw	r2,0(r7)
 4006980:	31800104 	addi	r6,r6,4
 4006984:	33c0022e 	bgeu	r6,r15,4006990 <__multiply+0x194>
 4006988:	63000104 	addi	r12,r12,4
 400698c:	003fc606 	br	40068a8 <__multiply+0xac>
 4006990:	0400090e 	bge	zero,r16,40069b8 <__multiply+0x1bc>
 4006994:	70bfff17 	ldw	r2,-4(r14)
 4006998:	70ffff04 	addi	r3,r14,-4
 400699c:	10000326 	beq	r2,zero,40069ac <__multiply+0x1b0>
 40069a0:	00000506 	br	40069b8 <__multiply+0x1bc>
 40069a4:	18800017 	ldw	r2,0(r3)
 40069a8:	1000031e 	bne	r2,zero,40069b8 <__multiply+0x1bc>
 40069ac:	843fffc4 	addi	r16,r16,-1
 40069b0:	18ffff04 	addi	r3,r3,-4
 40069b4:	803ffb1e 	bne	r16,zero,40069a4 <__multiply+0x1a8>
 40069b8:	a805883a 	mov	r2,r21
 40069bc:	ac000415 	stw	r16,16(r21)
 40069c0:	dfc00617 	ldw	ra,24(sp)
 40069c4:	dd400517 	ldw	r21,20(sp)
 40069c8:	dd000417 	ldw	r20,16(sp)
 40069cc:	dcc00317 	ldw	r19,12(sp)
 40069d0:	dc800217 	ldw	r18,8(sp)
 40069d4:	dc400117 	ldw	r17,4(sp)
 40069d8:	dc000017 	ldw	r16,0(sp)
 40069dc:	dec00704 	addi	sp,sp,28
 40069e0:	f800283a 	ret

040069e4 <__i2b>:
 40069e4:	defffd04 	addi	sp,sp,-12
 40069e8:	dc000015 	stw	r16,0(sp)
 40069ec:	04000044 	movi	r16,1
 40069f0:	dc800115 	stw	r18,4(sp)
 40069f4:	2825883a 	mov	r18,r5
 40069f8:	800b883a 	mov	r5,r16
 40069fc:	dfc00215 	stw	ra,8(sp)
 4006a00:	40062ec0 	call	40062ec <_Balloc>
 4006a04:	14000415 	stw	r16,16(r2)
 4006a08:	14800515 	stw	r18,20(r2)
 4006a0c:	dfc00217 	ldw	ra,8(sp)
 4006a10:	dc800117 	ldw	r18,4(sp)
 4006a14:	dc000017 	ldw	r16,0(sp)
 4006a18:	dec00304 	addi	sp,sp,12
 4006a1c:	f800283a 	ret

04006a20 <__multadd>:
 4006a20:	defffa04 	addi	sp,sp,-24
 4006a24:	dc800215 	stw	r18,8(sp)
 4006a28:	2c800417 	ldw	r18,16(r5)
 4006a2c:	dd000415 	stw	r20,16(sp)
 4006a30:	dcc00315 	stw	r19,12(sp)
 4006a34:	dc000015 	stw	r16,0(sp)
 4006a38:	dfc00515 	stw	ra,20(sp)
 4006a3c:	3821883a 	mov	r16,r7
 4006a40:	dc400115 	stw	r17,4(sp)
 4006a44:	2827883a 	mov	r19,r5
 4006a48:	2029883a 	mov	r20,r4
 4006a4c:	2a000504 	addi	r8,r5,20
 4006a50:	000f883a 	mov	r7,zero
 4006a54:	40800017 	ldw	r2,0(r8)
 4006a58:	39c00044 	addi	r7,r7,1
 4006a5c:	10ffffcc 	andi	r3,r2,65535
 4006a60:	1987383a 	mul	r3,r3,r6
 4006a64:	1004d43a 	srli	r2,r2,16
 4006a68:	1c07883a 	add	r3,r3,r16
 4006a6c:	180ad43a 	srli	r5,r3,16
 4006a70:	1185383a 	mul	r2,r2,r6
 4006a74:	18ffffcc 	andi	r3,r3,65535
 4006a78:	1145883a 	add	r2,r2,r5
 4006a7c:	1008943a 	slli	r4,r2,16
 4006a80:	1020d43a 	srli	r16,r2,16
 4006a84:	20c9883a 	add	r4,r4,r3
 4006a88:	41000015 	stw	r4,0(r8)
 4006a8c:	42000104 	addi	r8,r8,4
 4006a90:	3cbff016 	blt	r7,r18,4006a54 <__multadd+0x34>
 4006a94:	80000826 	beq	r16,zero,4006ab8 <__multadd+0x98>
 4006a98:	98800217 	ldw	r2,8(r19)
 4006a9c:	90800f0e 	bge	r18,r2,4006adc <__multadd+0xbc>
 4006aa0:	9485883a 	add	r2,r18,r18
 4006aa4:	1085883a 	add	r2,r2,r2
 4006aa8:	14c5883a 	add	r2,r2,r19
 4006aac:	90c00044 	addi	r3,r18,1
 4006ab0:	14000515 	stw	r16,20(r2)
 4006ab4:	98c00415 	stw	r3,16(r19)
 4006ab8:	9805883a 	mov	r2,r19
 4006abc:	dfc00517 	ldw	ra,20(sp)
 4006ac0:	dd000417 	ldw	r20,16(sp)
 4006ac4:	dcc00317 	ldw	r19,12(sp)
 4006ac8:	dc800217 	ldw	r18,8(sp)
 4006acc:	dc400117 	ldw	r17,4(sp)
 4006ad0:	dc000017 	ldw	r16,0(sp)
 4006ad4:	dec00604 	addi	sp,sp,24
 4006ad8:	f800283a 	ret
 4006adc:	99400117 	ldw	r5,4(r19)
 4006ae0:	a009883a 	mov	r4,r20
 4006ae4:	29400044 	addi	r5,r5,1
 4006ae8:	40062ec0 	call	40062ec <_Balloc>
 4006aec:	99800417 	ldw	r6,16(r19)
 4006af0:	99400304 	addi	r5,r19,12
 4006af4:	11000304 	addi	r4,r2,12
 4006af8:	318d883a 	add	r6,r6,r6
 4006afc:	318d883a 	add	r6,r6,r6
 4006b00:	31800204 	addi	r6,r6,8
 4006b04:	1023883a 	mov	r17,r2
 4006b08:	4005b540 	call	4005b54 <memcpy>
 4006b0c:	980b883a 	mov	r5,r19
 4006b10:	a009883a 	mov	r4,r20
 4006b14:	4005d6c0 	call	4005d6c <_Bfree>
 4006b18:	8827883a 	mov	r19,r17
 4006b1c:	003fe006 	br	4006aa0 <__multadd+0x80>

04006b20 <__pow5mult>:
 4006b20:	defffa04 	addi	sp,sp,-24
 4006b24:	308000cc 	andi	r2,r6,3
 4006b28:	dd000415 	stw	r20,16(sp)
 4006b2c:	dcc00315 	stw	r19,12(sp)
 4006b30:	dc000015 	stw	r16,0(sp)
 4006b34:	dfc00515 	stw	ra,20(sp)
 4006b38:	dc800215 	stw	r18,8(sp)
 4006b3c:	dc400115 	stw	r17,4(sp)
 4006b40:	3021883a 	mov	r16,r6
 4006b44:	2027883a 	mov	r19,r4
 4006b48:	2829883a 	mov	r20,r5
 4006b4c:	10002b1e 	bne	r2,zero,4006bfc <__pow5mult+0xdc>
 4006b50:	8025d0ba 	srai	r18,r16,2
 4006b54:	90001b26 	beq	r18,zero,4006bc4 <__pow5mult+0xa4>
 4006b58:	9c001217 	ldw	r16,72(r19)
 4006b5c:	8000081e 	bne	r16,zero,4006b80 <__pow5mult+0x60>
 4006b60:	00003006 	br	4006c24 <__pow5mult+0x104>
 4006b64:	800b883a 	mov	r5,r16
 4006b68:	800d883a 	mov	r6,r16
 4006b6c:	9809883a 	mov	r4,r19
 4006b70:	90001426 	beq	r18,zero,4006bc4 <__pow5mult+0xa4>
 4006b74:	80800017 	ldw	r2,0(r16)
 4006b78:	10001b26 	beq	r2,zero,4006be8 <__pow5mult+0xc8>
 4006b7c:	1021883a 	mov	r16,r2
 4006b80:	9080004c 	andi	r2,r18,1
 4006b84:	1005003a 	cmpeq	r2,r2,zero
 4006b88:	9025d07a 	srai	r18,r18,1
 4006b8c:	800d883a 	mov	r6,r16
 4006b90:	9809883a 	mov	r4,r19
 4006b94:	a00b883a 	mov	r5,r20
 4006b98:	103ff21e 	bne	r2,zero,4006b64 <__pow5mult+0x44>
 4006b9c:	40067fc0 	call	40067fc <__multiply>
 4006ba0:	a00b883a 	mov	r5,r20
 4006ba4:	9809883a 	mov	r4,r19
 4006ba8:	1023883a 	mov	r17,r2
 4006bac:	4005d6c0 	call	4005d6c <_Bfree>
 4006bb0:	8829883a 	mov	r20,r17
 4006bb4:	800b883a 	mov	r5,r16
 4006bb8:	800d883a 	mov	r6,r16
 4006bbc:	9809883a 	mov	r4,r19
 4006bc0:	903fec1e 	bne	r18,zero,4006b74 <__pow5mult+0x54>
 4006bc4:	a005883a 	mov	r2,r20
 4006bc8:	dfc00517 	ldw	ra,20(sp)
 4006bcc:	dd000417 	ldw	r20,16(sp)
 4006bd0:	dcc00317 	ldw	r19,12(sp)
 4006bd4:	dc800217 	ldw	r18,8(sp)
 4006bd8:	dc400117 	ldw	r17,4(sp)
 4006bdc:	dc000017 	ldw	r16,0(sp)
 4006be0:	dec00604 	addi	sp,sp,24
 4006be4:	f800283a 	ret
 4006be8:	40067fc0 	call	40067fc <__multiply>
 4006bec:	80800015 	stw	r2,0(r16)
 4006bf0:	1021883a 	mov	r16,r2
 4006bf4:	10000015 	stw	zero,0(r2)
 4006bf8:	003fe106 	br	4006b80 <__pow5mult+0x60>
 4006bfc:	1085883a 	add	r2,r2,r2
 4006c00:	00c10074 	movhi	r3,1025
 4006c04:	18db1604 	addi	r3,r3,27736
 4006c08:	1085883a 	add	r2,r2,r2
 4006c0c:	10c5883a 	add	r2,r2,r3
 4006c10:	11bfff17 	ldw	r6,-4(r2)
 4006c14:	000f883a 	mov	r7,zero
 4006c18:	4006a200 	call	4006a20 <__multadd>
 4006c1c:	1029883a 	mov	r20,r2
 4006c20:	003fcb06 	br	4006b50 <__pow5mult+0x30>
 4006c24:	9809883a 	mov	r4,r19
 4006c28:	01409c44 	movi	r5,625
 4006c2c:	40069e40 	call	40069e4 <__i2b>
 4006c30:	98801215 	stw	r2,72(r19)
 4006c34:	1021883a 	mov	r16,r2
 4006c38:	10000015 	stw	zero,0(r2)
 4006c3c:	003fd006 	br	4006b80 <__pow5mult+0x60>

04006c40 <__s2b>:
 4006c40:	defff904 	addi	sp,sp,-28
 4006c44:	dcc00315 	stw	r19,12(sp)
 4006c48:	dc800215 	stw	r18,8(sp)
 4006c4c:	2827883a 	mov	r19,r5
 4006c50:	2025883a 	mov	r18,r4
 4006c54:	01400244 	movi	r5,9
 4006c58:	39000204 	addi	r4,r7,8
 4006c5c:	dd000415 	stw	r20,16(sp)
 4006c60:	dc400115 	stw	r17,4(sp)
 4006c64:	dfc00615 	stw	ra,24(sp)
 4006c68:	dd400515 	stw	r21,20(sp)
 4006c6c:	dc000015 	stw	r16,0(sp)
 4006c70:	3829883a 	mov	r20,r7
 4006c74:	3023883a 	mov	r17,r6
 4006c78:	40098040 	call	4009804 <__divsi3>
 4006c7c:	00c00044 	movi	r3,1
 4006c80:	1880350e 	bge	r3,r2,4006d58 <__s2b+0x118>
 4006c84:	000b883a 	mov	r5,zero
 4006c88:	18c7883a 	add	r3,r3,r3
 4006c8c:	29400044 	addi	r5,r5,1
 4006c90:	18bffd16 	blt	r3,r2,4006c88 <__s2b+0x48>
 4006c94:	9009883a 	mov	r4,r18
 4006c98:	40062ec0 	call	40062ec <_Balloc>
 4006c9c:	1011883a 	mov	r8,r2
 4006ca0:	d8800717 	ldw	r2,28(sp)
 4006ca4:	00c00044 	movi	r3,1
 4006ca8:	01800244 	movi	r6,9
 4006cac:	40800515 	stw	r2,20(r8)
 4006cb0:	40c00415 	stw	r3,16(r8)
 4006cb4:	3440260e 	bge	r6,r17,4006d50 <__s2b+0x110>
 4006cb8:	3021883a 	mov	r16,r6
 4006cbc:	99ab883a 	add	r21,r19,r6
 4006cc0:	9c05883a 	add	r2,r19,r16
 4006cc4:	11c00007 	ldb	r7,0(r2)
 4006cc8:	400b883a 	mov	r5,r8
 4006ccc:	9009883a 	mov	r4,r18
 4006cd0:	39fff404 	addi	r7,r7,-48
 4006cd4:	01800284 	movi	r6,10
 4006cd8:	4006a200 	call	4006a20 <__multadd>
 4006cdc:	84000044 	addi	r16,r16,1
 4006ce0:	1011883a 	mov	r8,r2
 4006ce4:	8c3ff61e 	bne	r17,r16,4006cc0 <__s2b+0x80>
 4006ce8:	ac45883a 	add	r2,r21,r17
 4006cec:	117ffe04 	addi	r5,r2,-8
 4006cf0:	880d883a 	mov	r6,r17
 4006cf4:	35000c0e 	bge	r6,r20,4006d28 <__s2b+0xe8>
 4006cf8:	a185c83a 	sub	r2,r20,r6
 4006cfc:	2821883a 	mov	r16,r5
 4006d00:	28a3883a 	add	r17,r5,r2
 4006d04:	81c00007 	ldb	r7,0(r16)
 4006d08:	400b883a 	mov	r5,r8
 4006d0c:	9009883a 	mov	r4,r18
 4006d10:	39fff404 	addi	r7,r7,-48
 4006d14:	01800284 	movi	r6,10
 4006d18:	4006a200 	call	4006a20 <__multadd>
 4006d1c:	84000044 	addi	r16,r16,1
 4006d20:	1011883a 	mov	r8,r2
 4006d24:	847ff71e 	bne	r16,r17,4006d04 <__s2b+0xc4>
 4006d28:	4005883a 	mov	r2,r8
 4006d2c:	dfc00617 	ldw	ra,24(sp)
 4006d30:	dd400517 	ldw	r21,20(sp)
 4006d34:	dd000417 	ldw	r20,16(sp)
 4006d38:	dcc00317 	ldw	r19,12(sp)
 4006d3c:	dc800217 	ldw	r18,8(sp)
 4006d40:	dc400117 	ldw	r17,4(sp)
 4006d44:	dc000017 	ldw	r16,0(sp)
 4006d48:	dec00704 	addi	sp,sp,28
 4006d4c:	f800283a 	ret
 4006d50:	99400284 	addi	r5,r19,10
 4006d54:	003fe706 	br	4006cf4 <__s2b+0xb4>
 4006d58:	000b883a 	mov	r5,zero
 4006d5c:	003fcd06 	br	4006c94 <__s2b+0x54>

04006d60 <_realloc_r>:
 4006d60:	defff404 	addi	sp,sp,-48
 4006d64:	dd800815 	stw	r22,32(sp)
 4006d68:	dc800415 	stw	r18,16(sp)
 4006d6c:	dc400315 	stw	r17,12(sp)
 4006d70:	dfc00b15 	stw	ra,44(sp)
 4006d74:	df000a15 	stw	fp,40(sp)
 4006d78:	ddc00915 	stw	r23,36(sp)
 4006d7c:	dd400715 	stw	r21,28(sp)
 4006d80:	dd000615 	stw	r20,24(sp)
 4006d84:	dcc00515 	stw	r19,20(sp)
 4006d88:	dc000215 	stw	r16,8(sp)
 4006d8c:	2825883a 	mov	r18,r5
 4006d90:	3023883a 	mov	r17,r6
 4006d94:	202d883a 	mov	r22,r4
 4006d98:	2800c926 	beq	r5,zero,40070c0 <_realloc_r+0x360>
 4006d9c:	400aa180 	call	400aa18 <__malloc_lock>
 4006da0:	943ffe04 	addi	r16,r18,-8
 4006da4:	88c002c4 	addi	r3,r17,11
 4006da8:	00800584 	movi	r2,22
 4006dac:	82000117 	ldw	r8,4(r16)
 4006db0:	10c01b2e 	bgeu	r2,r3,4006e20 <_realloc_r+0xc0>
 4006db4:	00bffe04 	movi	r2,-8
 4006db8:	188e703a 	and	r7,r3,r2
 4006dbc:	3839883a 	mov	fp,r7
 4006dc0:	38001a16 	blt	r7,zero,4006e2c <_realloc_r+0xcc>
 4006dc4:	e4401936 	bltu	fp,r17,4006e2c <_realloc_r+0xcc>
 4006dc8:	013fff04 	movi	r4,-4
 4006dcc:	4126703a 	and	r19,r8,r4
 4006dd0:	99c02616 	blt	r19,r7,4006e6c <_realloc_r+0x10c>
 4006dd4:	802b883a 	mov	r21,r16
 4006dd8:	9829883a 	mov	r20,r19
 4006ddc:	84000204 	addi	r16,r16,8
 4006de0:	a80f883a 	mov	r7,r21
 4006de4:	a70dc83a 	sub	r6,r20,fp
 4006de8:	008003c4 	movi	r2,15
 4006dec:	1180c136 	bltu	r2,r6,40070f4 <_realloc_r+0x394>
 4006df0:	38800117 	ldw	r2,4(r7)
 4006df4:	a549883a 	add	r4,r20,r21
 4006df8:	1080004c 	andi	r2,r2,1
 4006dfc:	a084b03a 	or	r2,r20,r2
 4006e00:	38800115 	stw	r2,4(r7)
 4006e04:	20c00117 	ldw	r3,4(r4)
 4006e08:	18c00054 	ori	r3,r3,1
 4006e0c:	20c00115 	stw	r3,4(r4)
 4006e10:	b009883a 	mov	r4,r22
 4006e14:	400ab200 	call	400ab20 <__malloc_unlock>
 4006e18:	8023883a 	mov	r17,r16
 4006e1c:	00000606 	br	4006e38 <_realloc_r+0xd8>
 4006e20:	01c00404 	movi	r7,16
 4006e24:	3839883a 	mov	fp,r7
 4006e28:	e47fe72e 	bgeu	fp,r17,4006dc8 <_realloc_r+0x68>
 4006e2c:	00800304 	movi	r2,12
 4006e30:	0023883a 	mov	r17,zero
 4006e34:	b0800015 	stw	r2,0(r22)
 4006e38:	8805883a 	mov	r2,r17
 4006e3c:	dfc00b17 	ldw	ra,44(sp)
 4006e40:	df000a17 	ldw	fp,40(sp)
 4006e44:	ddc00917 	ldw	r23,36(sp)
 4006e48:	dd800817 	ldw	r22,32(sp)
 4006e4c:	dd400717 	ldw	r21,28(sp)
 4006e50:	dd000617 	ldw	r20,24(sp)
 4006e54:	dcc00517 	ldw	r19,20(sp)
 4006e58:	dc800417 	ldw	r18,16(sp)
 4006e5c:	dc400317 	ldw	r17,12(sp)
 4006e60:	dc000217 	ldw	r16,8(sp)
 4006e64:	dec00c04 	addi	sp,sp,48
 4006e68:	f800283a 	ret
 4006e6c:	00810074 	movhi	r2,1025
 4006e70:	109cb804 	addi	r2,r2,29408
 4006e74:	12400217 	ldw	r9,8(r2)
 4006e78:	84cd883a 	add	r6,r16,r19
 4006e7c:	802b883a 	mov	r21,r16
 4006e80:	3240b926 	beq	r6,r9,4007168 <_realloc_r+0x408>
 4006e84:	31400117 	ldw	r5,4(r6)
 4006e88:	00bfff84 	movi	r2,-2
 4006e8c:	2884703a 	and	r2,r5,r2
 4006e90:	1185883a 	add	r2,r2,r6
 4006e94:	10c00117 	ldw	r3,4(r2)
 4006e98:	18c0004c 	andi	r3,r3,1
 4006e9c:	1807003a 	cmpeq	r3,r3,zero
 4006ea0:	1800a326 	beq	r3,zero,4007130 <_realloc_r+0x3d0>
 4006ea4:	2908703a 	and	r4,r5,r4
 4006ea8:	9929883a 	add	r20,r19,r4
 4006eac:	a1c0a30e 	bge	r20,r7,400713c <_realloc_r+0x3dc>
 4006eb0:	4080004c 	andi	r2,r8,1
 4006eb4:	1000551e 	bne	r2,zero,400700c <_realloc_r+0x2ac>
 4006eb8:	80800017 	ldw	r2,0(r16)
 4006ebc:	80afc83a 	sub	r23,r16,r2
 4006ec0:	b8c00117 	ldw	r3,4(r23)
 4006ec4:	00bfff04 	movi	r2,-4
 4006ec8:	1884703a 	and	r2,r3,r2
 4006ecc:	30002e26 	beq	r6,zero,4006f88 <_realloc_r+0x228>
 4006ed0:	3240b926 	beq	r6,r9,40071b8 <_realloc_r+0x458>
 4006ed4:	98a9883a 	add	r20,r19,r2
 4006ed8:	2509883a 	add	r4,r4,r20
 4006edc:	d9000015 	stw	r4,0(sp)
 4006ee0:	21c02a16 	blt	r4,r7,4006f8c <_realloc_r+0x22c>
 4006ee4:	30800317 	ldw	r2,12(r6)
 4006ee8:	30c00217 	ldw	r3,8(r6)
 4006eec:	01400904 	movi	r5,36
 4006ef0:	99bfff04 	addi	r6,r19,-4
 4006ef4:	18800315 	stw	r2,12(r3)
 4006ef8:	10c00215 	stw	r3,8(r2)
 4006efc:	b9000317 	ldw	r4,12(r23)
 4006f00:	b8800217 	ldw	r2,8(r23)
 4006f04:	b82b883a 	mov	r21,r23
 4006f08:	bc000204 	addi	r16,r23,8
 4006f0c:	20800215 	stw	r2,8(r4)
 4006f10:	11000315 	stw	r4,12(r2)
 4006f14:	2980e436 	bltu	r5,r6,40072a8 <_realloc_r+0x548>
 4006f18:	008004c4 	movi	r2,19
 4006f1c:	9009883a 	mov	r4,r18
 4006f20:	8011883a 	mov	r8,r16
 4006f24:	11800f2e 	bgeu	r2,r6,4006f64 <_realloc_r+0x204>
 4006f28:	90800017 	ldw	r2,0(r18)
 4006f2c:	ba000404 	addi	r8,r23,16
 4006f30:	91000204 	addi	r4,r18,8
 4006f34:	b8800215 	stw	r2,8(r23)
 4006f38:	90c00117 	ldw	r3,4(r18)
 4006f3c:	008006c4 	movi	r2,27
 4006f40:	b8c00315 	stw	r3,12(r23)
 4006f44:	1180072e 	bgeu	r2,r6,4006f64 <_realloc_r+0x204>
 4006f48:	90c00217 	ldw	r3,8(r18)
 4006f4c:	ba000604 	addi	r8,r23,24
 4006f50:	91000404 	addi	r4,r18,16
 4006f54:	b8c00415 	stw	r3,16(r23)
 4006f58:	90800317 	ldw	r2,12(r18)
 4006f5c:	b8800515 	stw	r2,20(r23)
 4006f60:	3140e726 	beq	r6,r5,4007300 <_realloc_r+0x5a0>
 4006f64:	20800017 	ldw	r2,0(r4)
 4006f68:	dd000017 	ldw	r20,0(sp)
 4006f6c:	b80f883a 	mov	r7,r23
 4006f70:	40800015 	stw	r2,0(r8)
 4006f74:	20c00117 	ldw	r3,4(r4)
 4006f78:	40c00115 	stw	r3,4(r8)
 4006f7c:	20800217 	ldw	r2,8(r4)
 4006f80:	40800215 	stw	r2,8(r8)
 4006f84:	003f9706 	br	4006de4 <_realloc_r+0x84>
 4006f88:	98a9883a 	add	r20,r19,r2
 4006f8c:	a1c01f16 	blt	r20,r7,400700c <_realloc_r+0x2ac>
 4006f90:	b8c00317 	ldw	r3,12(r23)
 4006f94:	b8800217 	ldw	r2,8(r23)
 4006f98:	99bfff04 	addi	r6,r19,-4
 4006f9c:	01400904 	movi	r5,36
 4006fa0:	b82b883a 	mov	r21,r23
 4006fa4:	18800215 	stw	r2,8(r3)
 4006fa8:	10c00315 	stw	r3,12(r2)
 4006fac:	bc000204 	addi	r16,r23,8
 4006fb0:	2980c336 	bltu	r5,r6,40072c0 <_realloc_r+0x560>
 4006fb4:	008004c4 	movi	r2,19
 4006fb8:	9009883a 	mov	r4,r18
 4006fbc:	8011883a 	mov	r8,r16
 4006fc0:	11800f2e 	bgeu	r2,r6,4007000 <_realloc_r+0x2a0>
 4006fc4:	90800017 	ldw	r2,0(r18)
 4006fc8:	ba000404 	addi	r8,r23,16
 4006fcc:	91000204 	addi	r4,r18,8
 4006fd0:	b8800215 	stw	r2,8(r23)
 4006fd4:	90c00117 	ldw	r3,4(r18)
 4006fd8:	008006c4 	movi	r2,27
 4006fdc:	b8c00315 	stw	r3,12(r23)
 4006fe0:	1180072e 	bgeu	r2,r6,4007000 <_realloc_r+0x2a0>
 4006fe4:	90c00217 	ldw	r3,8(r18)
 4006fe8:	ba000604 	addi	r8,r23,24
 4006fec:	91000404 	addi	r4,r18,16
 4006ff0:	b8c00415 	stw	r3,16(r23)
 4006ff4:	90800317 	ldw	r2,12(r18)
 4006ff8:	b8800515 	stw	r2,20(r23)
 4006ffc:	3140c726 	beq	r6,r5,400731c <_realloc_r+0x5bc>
 4007000:	20800017 	ldw	r2,0(r4)
 4007004:	b80f883a 	mov	r7,r23
 4007008:	003fd906 	br	4006f70 <_realloc_r+0x210>
 400700c:	880b883a 	mov	r5,r17
 4007010:	b009883a 	mov	r4,r22
 4007014:	40053300 	call	4005330 <_malloc_r>
 4007018:	1023883a 	mov	r17,r2
 400701c:	10002526 	beq	r2,zero,40070b4 <_realloc_r+0x354>
 4007020:	80800117 	ldw	r2,4(r16)
 4007024:	00ffff84 	movi	r3,-2
 4007028:	893ffe04 	addi	r4,r17,-8
 400702c:	10c4703a 	and	r2,r2,r3
 4007030:	8085883a 	add	r2,r16,r2
 4007034:	20809526 	beq	r4,r2,400728c <_realloc_r+0x52c>
 4007038:	99bfff04 	addi	r6,r19,-4
 400703c:	01c00904 	movi	r7,36
 4007040:	39804536 	bltu	r7,r6,4007158 <_realloc_r+0x3f8>
 4007044:	008004c4 	movi	r2,19
 4007048:	9009883a 	mov	r4,r18
 400704c:	880b883a 	mov	r5,r17
 4007050:	11800f2e 	bgeu	r2,r6,4007090 <_realloc_r+0x330>
 4007054:	90800017 	ldw	r2,0(r18)
 4007058:	89400204 	addi	r5,r17,8
 400705c:	91000204 	addi	r4,r18,8
 4007060:	88800015 	stw	r2,0(r17)
 4007064:	90c00117 	ldw	r3,4(r18)
 4007068:	008006c4 	movi	r2,27
 400706c:	88c00115 	stw	r3,4(r17)
 4007070:	1180072e 	bgeu	r2,r6,4007090 <_realloc_r+0x330>
 4007074:	90c00217 	ldw	r3,8(r18)
 4007078:	89400404 	addi	r5,r17,16
 400707c:	91000404 	addi	r4,r18,16
 4007080:	88c00215 	stw	r3,8(r17)
 4007084:	90800317 	ldw	r2,12(r18)
 4007088:	88800315 	stw	r2,12(r17)
 400708c:	31c09126 	beq	r6,r7,40072d4 <_realloc_r+0x574>
 4007090:	20800017 	ldw	r2,0(r4)
 4007094:	28800015 	stw	r2,0(r5)
 4007098:	20c00117 	ldw	r3,4(r4)
 400709c:	28c00115 	stw	r3,4(r5)
 40070a0:	20800217 	ldw	r2,8(r4)
 40070a4:	28800215 	stw	r2,8(r5)
 40070a8:	900b883a 	mov	r5,r18
 40070ac:	b009883a 	mov	r4,r22
 40070b0:	40047a80 	call	40047a8 <_free_r>
 40070b4:	b009883a 	mov	r4,r22
 40070b8:	400ab200 	call	400ab20 <__malloc_unlock>
 40070bc:	003f5e06 	br	4006e38 <_realloc_r+0xd8>
 40070c0:	300b883a 	mov	r5,r6
 40070c4:	dfc00b17 	ldw	ra,44(sp)
 40070c8:	df000a17 	ldw	fp,40(sp)
 40070cc:	ddc00917 	ldw	r23,36(sp)
 40070d0:	dd800817 	ldw	r22,32(sp)
 40070d4:	dd400717 	ldw	r21,28(sp)
 40070d8:	dd000617 	ldw	r20,24(sp)
 40070dc:	dcc00517 	ldw	r19,20(sp)
 40070e0:	dc800417 	ldw	r18,16(sp)
 40070e4:	dc400317 	ldw	r17,12(sp)
 40070e8:	dc000217 	ldw	r16,8(sp)
 40070ec:	dec00c04 	addi	sp,sp,48
 40070f0:	40053301 	jmpi	4005330 <_malloc_r>
 40070f4:	38800117 	ldw	r2,4(r7)
 40070f8:	e54b883a 	add	r5,fp,r21
 40070fc:	31000054 	ori	r4,r6,1
 4007100:	1080004c 	andi	r2,r2,1
 4007104:	1704b03a 	or	r2,r2,fp
 4007108:	38800115 	stw	r2,4(r7)
 400710c:	29000115 	stw	r4,4(r5)
 4007110:	2987883a 	add	r3,r5,r6
 4007114:	18800117 	ldw	r2,4(r3)
 4007118:	29400204 	addi	r5,r5,8
 400711c:	b009883a 	mov	r4,r22
 4007120:	10800054 	ori	r2,r2,1
 4007124:	18800115 	stw	r2,4(r3)
 4007128:	40047a80 	call	40047a8 <_free_r>
 400712c:	003f3806 	br	4006e10 <_realloc_r+0xb0>
 4007130:	000d883a 	mov	r6,zero
 4007134:	0009883a 	mov	r4,zero
 4007138:	003f5d06 	br	4006eb0 <_realloc_r+0x150>
 400713c:	30c00217 	ldw	r3,8(r6)
 4007140:	30800317 	ldw	r2,12(r6)
 4007144:	800f883a 	mov	r7,r16
 4007148:	84000204 	addi	r16,r16,8
 400714c:	10c00215 	stw	r3,8(r2)
 4007150:	18800315 	stw	r2,12(r3)
 4007154:	003f2306 	br	4006de4 <_realloc_r+0x84>
 4007158:	8809883a 	mov	r4,r17
 400715c:	900b883a 	mov	r5,r18
 4007160:	4005bf40 	call	4005bf4 <memmove>
 4007164:	003fd006 	br	40070a8 <_realloc_r+0x348>
 4007168:	30800117 	ldw	r2,4(r6)
 400716c:	e0c00404 	addi	r3,fp,16
 4007170:	1108703a 	and	r4,r2,r4
 4007174:	9905883a 	add	r2,r19,r4
 4007178:	10ff4d16 	blt	r2,r3,4006eb0 <_realloc_r+0x150>
 400717c:	1705c83a 	sub	r2,r2,fp
 4007180:	870b883a 	add	r5,r16,fp
 4007184:	10800054 	ori	r2,r2,1
 4007188:	28800115 	stw	r2,4(r5)
 400718c:	80c00117 	ldw	r3,4(r16)
 4007190:	00810074 	movhi	r2,1025
 4007194:	109cb804 	addi	r2,r2,29408
 4007198:	b009883a 	mov	r4,r22
 400719c:	18c0004c 	andi	r3,r3,1
 40071a0:	e0c6b03a 	or	r3,fp,r3
 40071a4:	11400215 	stw	r5,8(r2)
 40071a8:	80c00115 	stw	r3,4(r16)
 40071ac:	400ab200 	call	400ab20 <__malloc_unlock>
 40071b0:	84400204 	addi	r17,r16,8
 40071b4:	003f2006 	br	4006e38 <_realloc_r+0xd8>
 40071b8:	98a9883a 	add	r20,r19,r2
 40071bc:	2509883a 	add	r4,r4,r20
 40071c0:	e0800404 	addi	r2,fp,16
 40071c4:	d9000115 	stw	r4,4(sp)
 40071c8:	20bf7016 	blt	r4,r2,4006f8c <_realloc_r+0x22c>
 40071cc:	b8c00317 	ldw	r3,12(r23)
 40071d0:	b8800217 	ldw	r2,8(r23)
 40071d4:	99bfff04 	addi	r6,r19,-4
 40071d8:	01400904 	movi	r5,36
 40071dc:	18800215 	stw	r2,8(r3)
 40071e0:	10c00315 	stw	r3,12(r2)
 40071e4:	bc400204 	addi	r17,r23,8
 40071e8:	29804136 	bltu	r5,r6,40072f0 <_realloc_r+0x590>
 40071ec:	008004c4 	movi	r2,19
 40071f0:	9009883a 	mov	r4,r18
 40071f4:	880f883a 	mov	r7,r17
 40071f8:	11800f2e 	bgeu	r2,r6,4007238 <_realloc_r+0x4d8>
 40071fc:	90800017 	ldw	r2,0(r18)
 4007200:	b9c00404 	addi	r7,r23,16
 4007204:	91000204 	addi	r4,r18,8
 4007208:	b8800215 	stw	r2,8(r23)
 400720c:	90c00117 	ldw	r3,4(r18)
 4007210:	008006c4 	movi	r2,27
 4007214:	b8c00315 	stw	r3,12(r23)
 4007218:	1180072e 	bgeu	r2,r6,4007238 <_realloc_r+0x4d8>
 400721c:	90c00217 	ldw	r3,8(r18)
 4007220:	b9c00604 	addi	r7,r23,24
 4007224:	91000404 	addi	r4,r18,16
 4007228:	b8c00415 	stw	r3,16(r23)
 400722c:	90800317 	ldw	r2,12(r18)
 4007230:	b8800515 	stw	r2,20(r23)
 4007234:	31404026 	beq	r6,r5,4007338 <_realloc_r+0x5d8>
 4007238:	20800017 	ldw	r2,0(r4)
 400723c:	38800015 	stw	r2,0(r7)
 4007240:	20c00117 	ldw	r3,4(r4)
 4007244:	38c00115 	stw	r3,4(r7)
 4007248:	20800217 	ldw	r2,8(r4)
 400724c:	38800215 	stw	r2,8(r7)
 4007250:	d8c00117 	ldw	r3,4(sp)
 4007254:	bf0b883a 	add	r5,r23,fp
 4007258:	b009883a 	mov	r4,r22
 400725c:	1f05c83a 	sub	r2,r3,fp
 4007260:	10800054 	ori	r2,r2,1
 4007264:	28800115 	stw	r2,4(r5)
 4007268:	b8c00117 	ldw	r3,4(r23)
 400726c:	00810074 	movhi	r2,1025
 4007270:	109cb804 	addi	r2,r2,29408
 4007274:	11400215 	stw	r5,8(r2)
 4007278:	18c0004c 	andi	r3,r3,1
 400727c:	e0c6b03a 	or	r3,fp,r3
 4007280:	b8c00115 	stw	r3,4(r23)
 4007284:	400ab200 	call	400ab20 <__malloc_unlock>
 4007288:	003eeb06 	br	4006e38 <_realloc_r+0xd8>
 400728c:	20800117 	ldw	r2,4(r4)
 4007290:	00ffff04 	movi	r3,-4
 4007294:	800f883a 	mov	r7,r16
 4007298:	10c4703a 	and	r2,r2,r3
 400729c:	98a9883a 	add	r20,r19,r2
 40072a0:	84000204 	addi	r16,r16,8
 40072a4:	003ecf06 	br	4006de4 <_realloc_r+0x84>
 40072a8:	900b883a 	mov	r5,r18
 40072ac:	8009883a 	mov	r4,r16
 40072b0:	4005bf40 	call	4005bf4 <memmove>
 40072b4:	dd000017 	ldw	r20,0(sp)
 40072b8:	b80f883a 	mov	r7,r23
 40072bc:	003ec906 	br	4006de4 <_realloc_r+0x84>
 40072c0:	900b883a 	mov	r5,r18
 40072c4:	8009883a 	mov	r4,r16
 40072c8:	4005bf40 	call	4005bf4 <memmove>
 40072cc:	b80f883a 	mov	r7,r23
 40072d0:	003ec406 	br	4006de4 <_realloc_r+0x84>
 40072d4:	90c00417 	ldw	r3,16(r18)
 40072d8:	89400604 	addi	r5,r17,24
 40072dc:	91000604 	addi	r4,r18,24
 40072e0:	88c00415 	stw	r3,16(r17)
 40072e4:	90800517 	ldw	r2,20(r18)
 40072e8:	88800515 	stw	r2,20(r17)
 40072ec:	003f6806 	br	4007090 <_realloc_r+0x330>
 40072f0:	900b883a 	mov	r5,r18
 40072f4:	8809883a 	mov	r4,r17
 40072f8:	4005bf40 	call	4005bf4 <memmove>
 40072fc:	003fd406 	br	4007250 <_realloc_r+0x4f0>
 4007300:	90c00417 	ldw	r3,16(r18)
 4007304:	91000604 	addi	r4,r18,24
 4007308:	ba000804 	addi	r8,r23,32
 400730c:	b8c00615 	stw	r3,24(r23)
 4007310:	90800517 	ldw	r2,20(r18)
 4007314:	b8800715 	stw	r2,28(r23)
 4007318:	003f1206 	br	4006f64 <_realloc_r+0x204>
 400731c:	90c00417 	ldw	r3,16(r18)
 4007320:	91000604 	addi	r4,r18,24
 4007324:	ba000804 	addi	r8,r23,32
 4007328:	b8c00615 	stw	r3,24(r23)
 400732c:	90800517 	ldw	r2,20(r18)
 4007330:	b8800715 	stw	r2,28(r23)
 4007334:	003f3206 	br	4007000 <_realloc_r+0x2a0>
 4007338:	90c00417 	ldw	r3,16(r18)
 400733c:	91000604 	addi	r4,r18,24
 4007340:	b9c00804 	addi	r7,r23,32
 4007344:	b8c00615 	stw	r3,24(r23)
 4007348:	90800517 	ldw	r2,20(r18)
 400734c:	b8800715 	stw	r2,28(r23)
 4007350:	003fb906 	br	4007238 <_realloc_r+0x4d8>

04007354 <__isinfd>:
 4007354:	200d883a 	mov	r6,r4
 4007358:	0109c83a 	sub	r4,zero,r4
 400735c:	2188b03a 	or	r4,r4,r6
 4007360:	2008d7fa 	srli	r4,r4,31
 4007364:	00a00034 	movhi	r2,32768
 4007368:	10bfffc4 	addi	r2,r2,-1
 400736c:	1144703a 	and	r2,r2,r5
 4007370:	2088b03a 	or	r4,r4,r2
 4007374:	009ffc34 	movhi	r2,32752
 4007378:	1105c83a 	sub	r2,r2,r4
 400737c:	0087c83a 	sub	r3,zero,r2
 4007380:	10c4b03a 	or	r2,r2,r3
 4007384:	1004d7fa 	srli	r2,r2,31
 4007388:	00c00044 	movi	r3,1
 400738c:	1885c83a 	sub	r2,r3,r2
 4007390:	f800283a 	ret

04007394 <__isnand>:
 4007394:	200d883a 	mov	r6,r4
 4007398:	0109c83a 	sub	r4,zero,r4
 400739c:	2188b03a 	or	r4,r4,r6
 40073a0:	2008d7fa 	srli	r4,r4,31
 40073a4:	00a00034 	movhi	r2,32768
 40073a8:	10bfffc4 	addi	r2,r2,-1
 40073ac:	1144703a 	and	r2,r2,r5
 40073b0:	2088b03a 	or	r4,r4,r2
 40073b4:	009ffc34 	movhi	r2,32752
 40073b8:	1105c83a 	sub	r2,r2,r4
 40073bc:	1004d7fa 	srli	r2,r2,31
 40073c0:	f800283a 	ret

040073c4 <_sbrk_r>:
 40073c4:	defffd04 	addi	sp,sp,-12
 40073c8:	dc000015 	stw	r16,0(sp)
 40073cc:	040100b4 	movhi	r16,1026
 40073d0:	8422ae04 	addi	r16,r16,-30024
 40073d4:	dc400115 	stw	r17,4(sp)
 40073d8:	80000015 	stw	zero,0(r16)
 40073dc:	2023883a 	mov	r17,r4
 40073e0:	2809883a 	mov	r4,r5
 40073e4:	dfc00215 	stw	ra,8(sp)
 40073e8:	400a6d40 	call	400a6d4 <sbrk>
 40073ec:	1007883a 	mov	r3,r2
 40073f0:	00bfffc4 	movi	r2,-1
 40073f4:	18800626 	beq	r3,r2,4007410 <_sbrk_r+0x4c>
 40073f8:	1805883a 	mov	r2,r3
 40073fc:	dfc00217 	ldw	ra,8(sp)
 4007400:	dc400117 	ldw	r17,4(sp)
 4007404:	dc000017 	ldw	r16,0(sp)
 4007408:	dec00304 	addi	sp,sp,12
 400740c:	f800283a 	ret
 4007410:	80800017 	ldw	r2,0(r16)
 4007414:	103ff826 	beq	r2,zero,40073f8 <_sbrk_r+0x34>
 4007418:	88800015 	stw	r2,0(r17)
 400741c:	1805883a 	mov	r2,r3
 4007420:	dfc00217 	ldw	ra,8(sp)
 4007424:	dc400117 	ldw	r17,4(sp)
 4007428:	dc000017 	ldw	r16,0(sp)
 400742c:	dec00304 	addi	sp,sp,12
 4007430:	f800283a 	ret

04007434 <__sclose>:
 4007434:	2940038f 	ldh	r5,14(r5)
 4007438:	40077681 	jmpi	4007768 <_close_r>

0400743c <__sseek>:
 400743c:	defffe04 	addi	sp,sp,-8
 4007440:	dc000015 	stw	r16,0(sp)
 4007444:	2821883a 	mov	r16,r5
 4007448:	2940038f 	ldh	r5,14(r5)
 400744c:	dfc00115 	stw	ra,4(sp)
 4007450:	40079e00 	call	40079e0 <_lseek_r>
 4007454:	1007883a 	mov	r3,r2
 4007458:	00bfffc4 	movi	r2,-1
 400745c:	18800926 	beq	r3,r2,4007484 <__sseek+0x48>
 4007460:	8080030b 	ldhu	r2,12(r16)
 4007464:	80c01415 	stw	r3,80(r16)
 4007468:	10840014 	ori	r2,r2,4096
 400746c:	8080030d 	sth	r2,12(r16)
 4007470:	1805883a 	mov	r2,r3
 4007474:	dfc00117 	ldw	ra,4(sp)
 4007478:	dc000017 	ldw	r16,0(sp)
 400747c:	dec00204 	addi	sp,sp,8
 4007480:	f800283a 	ret
 4007484:	8080030b 	ldhu	r2,12(r16)
 4007488:	10bbffcc 	andi	r2,r2,61439
 400748c:	8080030d 	sth	r2,12(r16)
 4007490:	1805883a 	mov	r2,r3
 4007494:	dfc00117 	ldw	ra,4(sp)
 4007498:	dc000017 	ldw	r16,0(sp)
 400749c:	dec00204 	addi	sp,sp,8
 40074a0:	f800283a 	ret

040074a4 <__swrite>:
 40074a4:	2880030b 	ldhu	r2,12(r5)
 40074a8:	defffb04 	addi	sp,sp,-20
 40074ac:	dcc00315 	stw	r19,12(sp)
 40074b0:	1080400c 	andi	r2,r2,256
 40074b4:	dc800215 	stw	r18,8(sp)
 40074b8:	dc400115 	stw	r17,4(sp)
 40074bc:	dc000015 	stw	r16,0(sp)
 40074c0:	3027883a 	mov	r19,r6
 40074c4:	3825883a 	mov	r18,r7
 40074c8:	dfc00415 	stw	ra,16(sp)
 40074cc:	2821883a 	mov	r16,r5
 40074d0:	000d883a 	mov	r6,zero
 40074d4:	01c00084 	movi	r7,2
 40074d8:	2023883a 	mov	r17,r4
 40074dc:	10000226 	beq	r2,zero,40074e8 <__swrite+0x44>
 40074e0:	2940038f 	ldh	r5,14(r5)
 40074e4:	40079e00 	call	40079e0 <_lseek_r>
 40074e8:	8080030b 	ldhu	r2,12(r16)
 40074ec:	8140038f 	ldh	r5,14(r16)
 40074f0:	8809883a 	mov	r4,r17
 40074f4:	10bbffcc 	andi	r2,r2,61439
 40074f8:	980d883a 	mov	r6,r19
 40074fc:	900f883a 	mov	r7,r18
 4007500:	8080030d 	sth	r2,12(r16)
 4007504:	dfc00417 	ldw	ra,16(sp)
 4007508:	dcc00317 	ldw	r19,12(sp)
 400750c:	dc800217 	ldw	r18,8(sp)
 4007510:	dc400117 	ldw	r17,4(sp)
 4007514:	dc000017 	ldw	r16,0(sp)
 4007518:	dec00504 	addi	sp,sp,20
 400751c:	400763c1 	jmpi	400763c <_write_r>

04007520 <__sread>:
 4007520:	defffe04 	addi	sp,sp,-8
 4007524:	dc000015 	stw	r16,0(sp)
 4007528:	2821883a 	mov	r16,r5
 400752c:	2940038f 	ldh	r5,14(r5)
 4007530:	dfc00115 	stw	ra,4(sp)
 4007534:	4007a580 	call	4007a58 <_read_r>
 4007538:	1007883a 	mov	r3,r2
 400753c:	10000816 	blt	r2,zero,4007560 <__sread+0x40>
 4007540:	80801417 	ldw	r2,80(r16)
 4007544:	10c5883a 	add	r2,r2,r3
 4007548:	80801415 	stw	r2,80(r16)
 400754c:	1805883a 	mov	r2,r3
 4007550:	dfc00117 	ldw	ra,4(sp)
 4007554:	dc000017 	ldw	r16,0(sp)
 4007558:	dec00204 	addi	sp,sp,8
 400755c:	f800283a 	ret
 4007560:	8080030b 	ldhu	r2,12(r16)
 4007564:	10bbffcc 	andi	r2,r2,61439
 4007568:	8080030d 	sth	r2,12(r16)
 400756c:	1805883a 	mov	r2,r3
 4007570:	dfc00117 	ldw	ra,4(sp)
 4007574:	dc000017 	ldw	r16,0(sp)
 4007578:	dec00204 	addi	sp,sp,8
 400757c:	f800283a 	ret

04007580 <strcmp>:
 4007580:	2144b03a 	or	r2,r4,r5
 4007584:	108000cc 	andi	r2,r2,3
 4007588:	10001d1e 	bne	r2,zero,4007600 <strcmp+0x80>
 400758c:	200f883a 	mov	r7,r4
 4007590:	28800017 	ldw	r2,0(r5)
 4007594:	21000017 	ldw	r4,0(r4)
 4007598:	280d883a 	mov	r6,r5
 400759c:	2080161e 	bne	r4,r2,40075f8 <strcmp+0x78>
 40075a0:	023fbff4 	movhi	r8,65279
 40075a4:	423fbfc4 	addi	r8,r8,-257
 40075a8:	2207883a 	add	r3,r4,r8
 40075ac:	01602074 	movhi	r5,32897
 40075b0:	29602004 	addi	r5,r5,-32640
 40075b4:	1946703a 	and	r3,r3,r5
 40075b8:	0104303a 	nor	r2,zero,r4
 40075bc:	10c4703a 	and	r2,r2,r3
 40075c0:	10001c1e 	bne	r2,zero,4007634 <strcmp+0xb4>
 40075c4:	4013883a 	mov	r9,r8
 40075c8:	2811883a 	mov	r8,r5
 40075cc:	00000106 	br	40075d4 <strcmp+0x54>
 40075d0:	1800181e 	bne	r3,zero,4007634 <strcmp+0xb4>
 40075d4:	39c00104 	addi	r7,r7,4
 40075d8:	39000017 	ldw	r4,0(r7)
 40075dc:	31800104 	addi	r6,r6,4
 40075e0:	31400017 	ldw	r5,0(r6)
 40075e4:	2245883a 	add	r2,r4,r9
 40075e8:	1204703a 	and	r2,r2,r8
 40075ec:	0106303a 	nor	r3,zero,r4
 40075f0:	1886703a 	and	r3,r3,r2
 40075f4:	217ff626 	beq	r4,r5,40075d0 <strcmp+0x50>
 40075f8:	3809883a 	mov	r4,r7
 40075fc:	300b883a 	mov	r5,r6
 4007600:	20c00007 	ldb	r3,0(r4)
 4007604:	1800051e 	bne	r3,zero,400761c <strcmp+0x9c>
 4007608:	00000606 	br	4007624 <strcmp+0xa4>
 400760c:	21000044 	addi	r4,r4,1
 4007610:	20c00007 	ldb	r3,0(r4)
 4007614:	29400044 	addi	r5,r5,1
 4007618:	18000226 	beq	r3,zero,4007624 <strcmp+0xa4>
 400761c:	28800007 	ldb	r2,0(r5)
 4007620:	18bffa26 	beq	r3,r2,400760c <strcmp+0x8c>
 4007624:	20c00003 	ldbu	r3,0(r4)
 4007628:	28800003 	ldbu	r2,0(r5)
 400762c:	1885c83a 	sub	r2,r3,r2
 4007630:	f800283a 	ret
 4007634:	0005883a 	mov	r2,zero
 4007638:	f800283a 	ret

0400763c <_write_r>:
 400763c:	defffd04 	addi	sp,sp,-12
 4007640:	dc000015 	stw	r16,0(sp)
 4007644:	040100b4 	movhi	r16,1026
 4007648:	8422ae04 	addi	r16,r16,-30024
 400764c:	dc400115 	stw	r17,4(sp)
 4007650:	80000015 	stw	zero,0(r16)
 4007654:	2023883a 	mov	r17,r4
 4007658:	2809883a 	mov	r4,r5
 400765c:	300b883a 	mov	r5,r6
 4007660:	380d883a 	mov	r6,r7
 4007664:	dfc00215 	stw	ra,8(sp)
 4007668:	400a7900 	call	400a790 <write>
 400766c:	1007883a 	mov	r3,r2
 4007670:	00bfffc4 	movi	r2,-1
 4007674:	18800626 	beq	r3,r2,4007690 <_write_r+0x54>
 4007678:	1805883a 	mov	r2,r3
 400767c:	dfc00217 	ldw	ra,8(sp)
 4007680:	dc400117 	ldw	r17,4(sp)
 4007684:	dc000017 	ldw	r16,0(sp)
 4007688:	dec00304 	addi	sp,sp,12
 400768c:	f800283a 	ret
 4007690:	80800017 	ldw	r2,0(r16)
 4007694:	103ff826 	beq	r2,zero,4007678 <_write_r+0x3c>
 4007698:	88800015 	stw	r2,0(r17)
 400769c:	1805883a 	mov	r2,r3
 40076a0:	dfc00217 	ldw	ra,8(sp)
 40076a4:	dc400117 	ldw	r17,4(sp)
 40076a8:	dc000017 	ldw	r16,0(sp)
 40076ac:	dec00304 	addi	sp,sp,12
 40076b0:	f800283a 	ret

040076b4 <_calloc_r>:
 40076b4:	298b383a 	mul	r5,r5,r6
 40076b8:	defffe04 	addi	sp,sp,-8
 40076bc:	dc000015 	stw	r16,0(sp)
 40076c0:	dfc00115 	stw	ra,4(sp)
 40076c4:	40053300 	call	4005330 <_malloc_r>
 40076c8:	1021883a 	mov	r16,r2
 40076cc:	01c00904 	movi	r7,36
 40076d0:	10000d26 	beq	r2,zero,4007708 <_calloc_r+0x54>
 40076d4:	10ffff17 	ldw	r3,-4(r2)
 40076d8:	1009883a 	mov	r4,r2
 40076dc:	00bfff04 	movi	r2,-4
 40076e0:	1886703a 	and	r3,r3,r2
 40076e4:	1887883a 	add	r3,r3,r2
 40076e8:	180d883a 	mov	r6,r3
 40076ec:	000b883a 	mov	r5,zero
 40076f0:	38c01736 	bltu	r7,r3,4007750 <_calloc_r+0x9c>
 40076f4:	008004c4 	movi	r2,19
 40076f8:	10c00836 	bltu	r2,r3,400771c <_calloc_r+0x68>
 40076fc:	20000215 	stw	zero,8(r4)
 4007700:	20000015 	stw	zero,0(r4)
 4007704:	20000115 	stw	zero,4(r4)
 4007708:	8005883a 	mov	r2,r16
 400770c:	dfc00117 	ldw	ra,4(sp)
 4007710:	dc000017 	ldw	r16,0(sp)
 4007714:	dec00204 	addi	sp,sp,8
 4007718:	f800283a 	ret
 400771c:	008006c4 	movi	r2,27
 4007720:	80000015 	stw	zero,0(r16)
 4007724:	80000115 	stw	zero,4(r16)
 4007728:	81000204 	addi	r4,r16,8
 400772c:	10fff32e 	bgeu	r2,r3,40076fc <_calloc_r+0x48>
 4007730:	80000215 	stw	zero,8(r16)
 4007734:	80000315 	stw	zero,12(r16)
 4007738:	81000404 	addi	r4,r16,16
 400773c:	19ffef1e 	bne	r3,r7,40076fc <_calloc_r+0x48>
 4007740:	81000604 	addi	r4,r16,24
 4007744:	80000415 	stw	zero,16(r16)
 4007748:	80000515 	stw	zero,20(r16)
 400774c:	003feb06 	br	40076fc <_calloc_r+0x48>
 4007750:	4005cd40 	call	4005cd4 <memset>
 4007754:	8005883a 	mov	r2,r16
 4007758:	dfc00117 	ldw	ra,4(sp)
 400775c:	dc000017 	ldw	r16,0(sp)
 4007760:	dec00204 	addi	sp,sp,8
 4007764:	f800283a 	ret

04007768 <_close_r>:
 4007768:	defffd04 	addi	sp,sp,-12
 400776c:	dc000015 	stw	r16,0(sp)
 4007770:	040100b4 	movhi	r16,1026
 4007774:	8422ae04 	addi	r16,r16,-30024
 4007778:	dc400115 	stw	r17,4(sp)
 400777c:	80000015 	stw	zero,0(r16)
 4007780:	2023883a 	mov	r17,r4
 4007784:	2809883a 	mov	r4,r5
 4007788:	dfc00215 	stw	ra,8(sp)
 400778c:	4009f000 	call	4009f00 <close>
 4007790:	1007883a 	mov	r3,r2
 4007794:	00bfffc4 	movi	r2,-1
 4007798:	18800626 	beq	r3,r2,40077b4 <_close_r+0x4c>
 400779c:	1805883a 	mov	r2,r3
 40077a0:	dfc00217 	ldw	ra,8(sp)
 40077a4:	dc400117 	ldw	r17,4(sp)
 40077a8:	dc000017 	ldw	r16,0(sp)
 40077ac:	dec00304 	addi	sp,sp,12
 40077b0:	f800283a 	ret
 40077b4:	80800017 	ldw	r2,0(r16)
 40077b8:	103ff826 	beq	r2,zero,400779c <_close_r+0x34>
 40077bc:	88800015 	stw	r2,0(r17)
 40077c0:	1805883a 	mov	r2,r3
 40077c4:	dfc00217 	ldw	ra,8(sp)
 40077c8:	dc400117 	ldw	r17,4(sp)
 40077cc:	dc000017 	ldw	r16,0(sp)
 40077d0:	dec00304 	addi	sp,sp,12
 40077d4:	f800283a 	ret

040077d8 <_fclose_r>:
 40077d8:	defffc04 	addi	sp,sp,-16
 40077dc:	dc400115 	stw	r17,4(sp)
 40077e0:	dc000015 	stw	r16,0(sp)
 40077e4:	dfc00315 	stw	ra,12(sp)
 40077e8:	dc800215 	stw	r18,8(sp)
 40077ec:	2821883a 	mov	r16,r5
 40077f0:	2023883a 	mov	r17,r4
 40077f4:	28002926 	beq	r5,zero,400789c <_fclose_r+0xc4>
 40077f8:	40044140 	call	4004414 <__sfp_lock_acquire>
 40077fc:	88000226 	beq	r17,zero,4007808 <_fclose_r+0x30>
 4007800:	88800e17 	ldw	r2,56(r17)
 4007804:	10002d26 	beq	r2,zero,40078bc <_fclose_r+0xe4>
 4007808:	8080030f 	ldh	r2,12(r16)
 400780c:	10002226 	beq	r2,zero,4007898 <_fclose_r+0xc0>
 4007810:	8809883a 	mov	r4,r17
 4007814:	800b883a 	mov	r5,r16
 4007818:	400418c0 	call	400418c <_fflush_r>
 400781c:	1025883a 	mov	r18,r2
 4007820:	80800b17 	ldw	r2,44(r16)
 4007824:	10000426 	beq	r2,zero,4007838 <_fclose_r+0x60>
 4007828:	81400717 	ldw	r5,28(r16)
 400782c:	8809883a 	mov	r4,r17
 4007830:	103ee83a 	callr	r2
 4007834:	10002a16 	blt	r2,zero,40078e0 <_fclose_r+0x108>
 4007838:	8080030b 	ldhu	r2,12(r16)
 400783c:	1080200c 	andi	r2,r2,128
 4007840:	1000231e 	bne	r2,zero,40078d0 <_fclose_r+0xf8>
 4007844:	81400c17 	ldw	r5,48(r16)
 4007848:	28000526 	beq	r5,zero,4007860 <_fclose_r+0x88>
 400784c:	80801004 	addi	r2,r16,64
 4007850:	28800226 	beq	r5,r2,400785c <_fclose_r+0x84>
 4007854:	8809883a 	mov	r4,r17
 4007858:	40047a80 	call	40047a8 <_free_r>
 400785c:	80000c15 	stw	zero,48(r16)
 4007860:	81401117 	ldw	r5,68(r16)
 4007864:	28000326 	beq	r5,zero,4007874 <_fclose_r+0x9c>
 4007868:	8809883a 	mov	r4,r17
 400786c:	40047a80 	call	40047a8 <_free_r>
 4007870:	80001115 	stw	zero,68(r16)
 4007874:	8000030d 	sth	zero,12(r16)
 4007878:	40044180 	call	4004418 <__sfp_lock_release>
 400787c:	9005883a 	mov	r2,r18
 4007880:	dfc00317 	ldw	ra,12(sp)
 4007884:	dc800217 	ldw	r18,8(sp)
 4007888:	dc400117 	ldw	r17,4(sp)
 400788c:	dc000017 	ldw	r16,0(sp)
 4007890:	dec00404 	addi	sp,sp,16
 4007894:	f800283a 	ret
 4007898:	40044180 	call	4004418 <__sfp_lock_release>
 400789c:	0025883a 	mov	r18,zero
 40078a0:	9005883a 	mov	r2,r18
 40078a4:	dfc00317 	ldw	ra,12(sp)
 40078a8:	dc800217 	ldw	r18,8(sp)
 40078ac:	dc400117 	ldw	r17,4(sp)
 40078b0:	dc000017 	ldw	r16,0(sp)
 40078b4:	dec00404 	addi	sp,sp,16
 40078b8:	f800283a 	ret
 40078bc:	8809883a 	mov	r4,r17
 40078c0:	40044240 	call	4004424 <__sinit>
 40078c4:	8080030f 	ldh	r2,12(r16)
 40078c8:	103fd11e 	bne	r2,zero,4007810 <_fclose_r+0x38>
 40078cc:	003ff206 	br	4007898 <_fclose_r+0xc0>
 40078d0:	81400417 	ldw	r5,16(r16)
 40078d4:	8809883a 	mov	r4,r17
 40078d8:	40047a80 	call	40047a8 <_free_r>
 40078dc:	003fd906 	br	4007844 <_fclose_r+0x6c>
 40078e0:	04bfffc4 	movi	r18,-1
 40078e4:	003fd406 	br	4007838 <_fclose_r+0x60>

040078e8 <fclose>:
 40078e8:	008100b4 	movhi	r2,1026
 40078ec:	10a27304 	addi	r2,r2,-30260
 40078f0:	200b883a 	mov	r5,r4
 40078f4:	11000017 	ldw	r4,0(r2)
 40078f8:	40077d81 	jmpi	40077d8 <_fclose_r>

040078fc <_fstat_r>:
 40078fc:	defffd04 	addi	sp,sp,-12
 4007900:	dc000015 	stw	r16,0(sp)
 4007904:	040100b4 	movhi	r16,1026
 4007908:	8422ae04 	addi	r16,r16,-30024
 400790c:	dc400115 	stw	r17,4(sp)
 4007910:	80000015 	stw	zero,0(r16)
 4007914:	2023883a 	mov	r17,r4
 4007918:	2809883a 	mov	r4,r5
 400791c:	300b883a 	mov	r5,r6
 4007920:	dfc00215 	stw	ra,8(sp)
 4007924:	400a0880 	call	400a088 <fstat>
 4007928:	1007883a 	mov	r3,r2
 400792c:	00bfffc4 	movi	r2,-1
 4007930:	18800626 	beq	r3,r2,400794c <_fstat_r+0x50>
 4007934:	1805883a 	mov	r2,r3
 4007938:	dfc00217 	ldw	ra,8(sp)
 400793c:	dc400117 	ldw	r17,4(sp)
 4007940:	dc000017 	ldw	r16,0(sp)
 4007944:	dec00304 	addi	sp,sp,12
 4007948:	f800283a 	ret
 400794c:	80800017 	ldw	r2,0(r16)
 4007950:	103ff826 	beq	r2,zero,4007934 <_fstat_r+0x38>
 4007954:	88800015 	stw	r2,0(r17)
 4007958:	1805883a 	mov	r2,r3
 400795c:	dfc00217 	ldw	ra,8(sp)
 4007960:	dc400117 	ldw	r17,4(sp)
 4007964:	dc000017 	ldw	r16,0(sp)
 4007968:	dec00304 	addi	sp,sp,12
 400796c:	f800283a 	ret

04007970 <_isatty_r>:
 4007970:	defffd04 	addi	sp,sp,-12
 4007974:	dc000015 	stw	r16,0(sp)
 4007978:	040100b4 	movhi	r16,1026
 400797c:	8422ae04 	addi	r16,r16,-30024
 4007980:	dc400115 	stw	r17,4(sp)
 4007984:	80000015 	stw	zero,0(r16)
 4007988:	2023883a 	mov	r17,r4
 400798c:	2809883a 	mov	r4,r5
 4007990:	dfc00215 	stw	ra,8(sp)
 4007994:	400a1bc0 	call	400a1bc <isatty>
 4007998:	1007883a 	mov	r3,r2
 400799c:	00bfffc4 	movi	r2,-1
 40079a0:	18800626 	beq	r3,r2,40079bc <_isatty_r+0x4c>
 40079a4:	1805883a 	mov	r2,r3
 40079a8:	dfc00217 	ldw	ra,8(sp)
 40079ac:	dc400117 	ldw	r17,4(sp)
 40079b0:	dc000017 	ldw	r16,0(sp)
 40079b4:	dec00304 	addi	sp,sp,12
 40079b8:	f800283a 	ret
 40079bc:	80800017 	ldw	r2,0(r16)
 40079c0:	103ff826 	beq	r2,zero,40079a4 <_isatty_r+0x34>
 40079c4:	88800015 	stw	r2,0(r17)
 40079c8:	1805883a 	mov	r2,r3
 40079cc:	dfc00217 	ldw	ra,8(sp)
 40079d0:	dc400117 	ldw	r17,4(sp)
 40079d4:	dc000017 	ldw	r16,0(sp)
 40079d8:	dec00304 	addi	sp,sp,12
 40079dc:	f800283a 	ret

040079e0 <_lseek_r>:
 40079e0:	defffd04 	addi	sp,sp,-12
 40079e4:	dc000015 	stw	r16,0(sp)
 40079e8:	040100b4 	movhi	r16,1026
 40079ec:	8422ae04 	addi	r16,r16,-30024
 40079f0:	dc400115 	stw	r17,4(sp)
 40079f4:	80000015 	stw	zero,0(r16)
 40079f8:	2023883a 	mov	r17,r4
 40079fc:	2809883a 	mov	r4,r5
 4007a00:	300b883a 	mov	r5,r6
 4007a04:	380d883a 	mov	r6,r7
 4007a08:	dfc00215 	stw	ra,8(sp)
 4007a0c:	400a2dc0 	call	400a2dc <lseek>
 4007a10:	1007883a 	mov	r3,r2
 4007a14:	00bfffc4 	movi	r2,-1
 4007a18:	18800626 	beq	r3,r2,4007a34 <_lseek_r+0x54>
 4007a1c:	1805883a 	mov	r2,r3
 4007a20:	dfc00217 	ldw	ra,8(sp)
 4007a24:	dc400117 	ldw	r17,4(sp)
 4007a28:	dc000017 	ldw	r16,0(sp)
 4007a2c:	dec00304 	addi	sp,sp,12
 4007a30:	f800283a 	ret
 4007a34:	80800017 	ldw	r2,0(r16)
 4007a38:	103ff826 	beq	r2,zero,4007a1c <_lseek_r+0x3c>
 4007a3c:	88800015 	stw	r2,0(r17)
 4007a40:	1805883a 	mov	r2,r3
 4007a44:	dfc00217 	ldw	ra,8(sp)
 4007a48:	dc400117 	ldw	r17,4(sp)
 4007a4c:	dc000017 	ldw	r16,0(sp)
 4007a50:	dec00304 	addi	sp,sp,12
 4007a54:	f800283a 	ret

04007a58 <_read_r>:
 4007a58:	defffd04 	addi	sp,sp,-12
 4007a5c:	dc000015 	stw	r16,0(sp)
 4007a60:	040100b4 	movhi	r16,1026
 4007a64:	8422ae04 	addi	r16,r16,-30024
 4007a68:	dc400115 	stw	r17,4(sp)
 4007a6c:	80000015 	stw	zero,0(r16)
 4007a70:	2023883a 	mov	r17,r4
 4007a74:	2809883a 	mov	r4,r5
 4007a78:	300b883a 	mov	r5,r6
 4007a7c:	380d883a 	mov	r6,r7
 4007a80:	dfc00215 	stw	ra,8(sp)
 4007a84:	400a4f40 	call	400a4f4 <read>
 4007a88:	1007883a 	mov	r3,r2
 4007a8c:	00bfffc4 	movi	r2,-1
 4007a90:	18800626 	beq	r3,r2,4007aac <_read_r+0x54>
 4007a94:	1805883a 	mov	r2,r3
 4007a98:	dfc00217 	ldw	ra,8(sp)
 4007a9c:	dc400117 	ldw	r17,4(sp)
 4007aa0:	dc000017 	ldw	r16,0(sp)
 4007aa4:	dec00304 	addi	sp,sp,12
 4007aa8:	f800283a 	ret
 4007aac:	80800017 	ldw	r2,0(r16)
 4007ab0:	103ff826 	beq	r2,zero,4007a94 <_read_r+0x3c>
 4007ab4:	88800015 	stw	r2,0(r17)
 4007ab8:	1805883a 	mov	r2,r3
 4007abc:	dfc00217 	ldw	ra,8(sp)
 4007ac0:	dc400117 	ldw	r17,4(sp)
 4007ac4:	dc000017 	ldw	r16,0(sp)
 4007ac8:	dec00304 	addi	sp,sp,12
 4007acc:	f800283a 	ret

04007ad0 <__udivdi3>:
 4007ad0:	defff004 	addi	sp,sp,-64
 4007ad4:	2005883a 	mov	r2,r4
 4007ad8:	3011883a 	mov	r8,r6
 4007adc:	df000e15 	stw	fp,56(sp)
 4007ae0:	dd000a15 	stw	r20,40(sp)
 4007ae4:	dc000615 	stw	r16,24(sp)
 4007ae8:	dfc00f15 	stw	ra,60(sp)
 4007aec:	ddc00d15 	stw	r23,52(sp)
 4007af0:	dd800c15 	stw	r22,48(sp)
 4007af4:	dd400b15 	stw	r21,44(sp)
 4007af8:	dcc00915 	stw	r19,36(sp)
 4007afc:	dc800815 	stw	r18,32(sp)
 4007b00:	dc400715 	stw	r17,28(sp)
 4007b04:	4021883a 	mov	r16,r8
 4007b08:	1039883a 	mov	fp,r2
 4007b0c:	2829883a 	mov	r20,r5
 4007b10:	38003b1e 	bne	r7,zero,4007c00 <__udivdi3+0x130>
 4007b14:	2a005c36 	bltu	r5,r8,4007c88 <__udivdi3+0x1b8>
 4007b18:	4000a626 	beq	r8,zero,4007db4 <__udivdi3+0x2e4>
 4007b1c:	00bfffd4 	movui	r2,65535
 4007b20:	14009e36 	bltu	r2,r16,4007d9c <__udivdi3+0x2cc>
 4007b24:	00803fc4 	movi	r2,255
 4007b28:	14013d36 	bltu	r2,r16,4008020 <__udivdi3+0x550>
 4007b2c:	000b883a 	mov	r5,zero
 4007b30:	0005883a 	mov	r2,zero
 4007b34:	8084d83a 	srl	r2,r16,r2
 4007b38:	01010074 	movhi	r4,1025
 4007b3c:	211b1e04 	addi	r4,r4,27768
 4007b40:	01800804 	movi	r6,32
 4007b44:	1105883a 	add	r2,r2,r4
 4007b48:	10c00003 	ldbu	r3,0(r2)
 4007b4c:	28c7883a 	add	r3,r5,r3
 4007b50:	30edc83a 	sub	r22,r6,r3
 4007b54:	b000ee1e 	bne	r22,zero,4007f10 <__udivdi3+0x440>
 4007b58:	802ad43a 	srli	r21,r16,16
 4007b5c:	00800044 	movi	r2,1
 4007b60:	a423c83a 	sub	r17,r20,r16
 4007b64:	85ffffcc 	andi	r23,r16,65535
 4007b68:	d8800315 	stw	r2,12(sp)
 4007b6c:	8809883a 	mov	r4,r17
 4007b70:	a80b883a 	mov	r5,r21
 4007b74:	40098c40 	call	40098c4 <__udivsi3>
 4007b78:	8809883a 	mov	r4,r17
 4007b7c:	a80b883a 	mov	r5,r21
 4007b80:	102d883a 	mov	r22,r2
 4007b84:	40098cc0 	call	40098cc <__umodsi3>
 4007b88:	1004943a 	slli	r2,r2,16
 4007b8c:	e006d43a 	srli	r3,fp,16
 4007b90:	bda3383a 	mul	r17,r23,r22
 4007b94:	10c4b03a 	or	r2,r2,r3
 4007b98:	1440042e 	bgeu	r2,r17,4007bac <__udivdi3+0xdc>
 4007b9c:	1405883a 	add	r2,r2,r16
 4007ba0:	b5bfffc4 	addi	r22,r22,-1
 4007ba4:	14000136 	bltu	r2,r16,4007bac <__udivdi3+0xdc>
 4007ba8:	14413d36 	bltu	r2,r17,40080a0 <__udivdi3+0x5d0>
 4007bac:	1463c83a 	sub	r17,r2,r17
 4007bb0:	8809883a 	mov	r4,r17
 4007bb4:	a80b883a 	mov	r5,r21
 4007bb8:	40098c40 	call	40098c4 <__udivsi3>
 4007bbc:	8809883a 	mov	r4,r17
 4007bc0:	a80b883a 	mov	r5,r21
 4007bc4:	1029883a 	mov	r20,r2
 4007bc8:	40098cc0 	call	40098cc <__umodsi3>
 4007bcc:	1004943a 	slli	r2,r2,16
 4007bd0:	bd09383a 	mul	r4,r23,r20
 4007bd4:	e0ffffcc 	andi	r3,fp,65535
 4007bd8:	10c4b03a 	or	r2,r2,r3
 4007bdc:	1100042e 	bgeu	r2,r4,4007bf0 <__udivdi3+0x120>
 4007be0:	8085883a 	add	r2,r16,r2
 4007be4:	a53fffc4 	addi	r20,r20,-1
 4007be8:	14000136 	bltu	r2,r16,4007bf0 <__udivdi3+0x120>
 4007bec:	11012036 	bltu	r2,r4,4008070 <__udivdi3+0x5a0>
 4007bf0:	b004943a 	slli	r2,r22,16
 4007bf4:	d9000317 	ldw	r4,12(sp)
 4007bf8:	a084b03a 	or	r2,r20,r2
 4007bfc:	00001506 	br	4007c54 <__udivdi3+0x184>
 4007c00:	380d883a 	mov	r6,r7
 4007c04:	29c06236 	bltu	r5,r7,4007d90 <__udivdi3+0x2c0>
 4007c08:	00bfffd4 	movui	r2,65535
 4007c0c:	11c05a36 	bltu	r2,r7,4007d78 <__udivdi3+0x2a8>
 4007c10:	00803fc4 	movi	r2,255
 4007c14:	11c0fc36 	bltu	r2,r7,4008008 <__udivdi3+0x538>
 4007c18:	000b883a 	mov	r5,zero
 4007c1c:	0005883a 	mov	r2,zero
 4007c20:	3084d83a 	srl	r2,r6,r2
 4007c24:	01010074 	movhi	r4,1025
 4007c28:	211b1e04 	addi	r4,r4,27768
 4007c2c:	01c00804 	movi	r7,32
 4007c30:	1105883a 	add	r2,r2,r4
 4007c34:	10c00003 	ldbu	r3,0(r2)
 4007c38:	28c7883a 	add	r3,r5,r3
 4007c3c:	38efc83a 	sub	r23,r7,r3
 4007c40:	b800691e 	bne	r23,zero,4007de8 <__udivdi3+0x318>
 4007c44:	35000136 	bltu	r6,r20,4007c4c <__udivdi3+0x17c>
 4007c48:	e4005136 	bltu	fp,r16,4007d90 <__udivdi3+0x2c0>
 4007c4c:	00800044 	movi	r2,1
 4007c50:	0009883a 	mov	r4,zero
 4007c54:	2007883a 	mov	r3,r4
 4007c58:	dfc00f17 	ldw	ra,60(sp)
 4007c5c:	df000e17 	ldw	fp,56(sp)
 4007c60:	ddc00d17 	ldw	r23,52(sp)
 4007c64:	dd800c17 	ldw	r22,48(sp)
 4007c68:	dd400b17 	ldw	r21,44(sp)
 4007c6c:	dd000a17 	ldw	r20,40(sp)
 4007c70:	dcc00917 	ldw	r19,36(sp)
 4007c74:	dc800817 	ldw	r18,32(sp)
 4007c78:	dc400717 	ldw	r17,28(sp)
 4007c7c:	dc000617 	ldw	r16,24(sp)
 4007c80:	dec01004 	addi	sp,sp,64
 4007c84:	f800283a 	ret
 4007c88:	00bfffd4 	movui	r2,65535
 4007c8c:	12005036 	bltu	r2,r8,4007dd0 <__udivdi3+0x300>
 4007c90:	00803fc4 	movi	r2,255
 4007c94:	1200e836 	bltu	r2,r8,4008038 <__udivdi3+0x568>
 4007c98:	000b883a 	mov	r5,zero
 4007c9c:	0005883a 	mov	r2,zero
 4007ca0:	8084d83a 	srl	r2,r16,r2
 4007ca4:	01010074 	movhi	r4,1025
 4007ca8:	211b1e04 	addi	r4,r4,27768
 4007cac:	01800804 	movi	r6,32
 4007cb0:	1105883a 	add	r2,r2,r4
 4007cb4:	10c00003 	ldbu	r3,0(r2)
 4007cb8:	28c7883a 	add	r3,r5,r3
 4007cbc:	30cbc83a 	sub	r5,r6,r3
 4007cc0:	28000626 	beq	r5,zero,4007cdc <__udivdi3+0x20c>
 4007cc4:	3145c83a 	sub	r2,r6,r5
 4007cc8:	e084d83a 	srl	r2,fp,r2
 4007ccc:	a146983a 	sll	r3,r20,r5
 4007cd0:	e178983a 	sll	fp,fp,r5
 4007cd4:	8160983a 	sll	r16,r16,r5
 4007cd8:	18a8b03a 	or	r20,r3,r2
 4007cdc:	802ad43a 	srli	r21,r16,16
 4007ce0:	a009883a 	mov	r4,r20
 4007ce4:	85ffffcc 	andi	r23,r16,65535
 4007ce8:	a80b883a 	mov	r5,r21
 4007cec:	40098c40 	call	40098c4 <__udivsi3>
 4007cf0:	a009883a 	mov	r4,r20
 4007cf4:	a80b883a 	mov	r5,r21
 4007cf8:	102d883a 	mov	r22,r2
 4007cfc:	40098cc0 	call	40098cc <__umodsi3>
 4007d00:	1004943a 	slli	r2,r2,16
 4007d04:	e006d43a 	srli	r3,fp,16
 4007d08:	bda3383a 	mul	r17,r23,r22
 4007d0c:	10c4b03a 	or	r2,r2,r3
 4007d10:	1440042e 	bgeu	r2,r17,4007d24 <__udivdi3+0x254>
 4007d14:	1405883a 	add	r2,r2,r16
 4007d18:	b5bfffc4 	addi	r22,r22,-1
 4007d1c:	14000136 	bltu	r2,r16,4007d24 <__udivdi3+0x254>
 4007d20:	1440d536 	bltu	r2,r17,4008078 <__udivdi3+0x5a8>
 4007d24:	1463c83a 	sub	r17,r2,r17
 4007d28:	8809883a 	mov	r4,r17
 4007d2c:	a80b883a 	mov	r5,r21
 4007d30:	40098c40 	call	40098c4 <__udivsi3>
 4007d34:	8809883a 	mov	r4,r17
 4007d38:	a80b883a 	mov	r5,r21
 4007d3c:	1029883a 	mov	r20,r2
 4007d40:	40098cc0 	call	40098cc <__umodsi3>
 4007d44:	1004943a 	slli	r2,r2,16
 4007d48:	bd09383a 	mul	r4,r23,r20
 4007d4c:	e0ffffcc 	andi	r3,fp,65535
 4007d50:	10c4b03a 	or	r2,r2,r3
 4007d54:	1100042e 	bgeu	r2,r4,4007d68 <__udivdi3+0x298>
 4007d58:	8085883a 	add	r2,r16,r2
 4007d5c:	a53fffc4 	addi	r20,r20,-1
 4007d60:	14000136 	bltu	r2,r16,4007d68 <__udivdi3+0x298>
 4007d64:	1100c736 	bltu	r2,r4,4008084 <__udivdi3+0x5b4>
 4007d68:	b004943a 	slli	r2,r22,16
 4007d6c:	0009883a 	mov	r4,zero
 4007d70:	a084b03a 	or	r2,r20,r2
 4007d74:	003fb706 	br	4007c54 <__udivdi3+0x184>
 4007d78:	00804034 	movhi	r2,256
 4007d7c:	10bfffc4 	addi	r2,r2,-1
 4007d80:	11c0a436 	bltu	r2,r7,4008014 <__udivdi3+0x544>
 4007d84:	01400404 	movi	r5,16
 4007d88:	2805883a 	mov	r2,r5
 4007d8c:	003fa406 	br	4007c20 <__udivdi3+0x150>
 4007d90:	0005883a 	mov	r2,zero
 4007d94:	0009883a 	mov	r4,zero
 4007d98:	003fae06 	br	4007c54 <__udivdi3+0x184>
 4007d9c:	00804034 	movhi	r2,256
 4007da0:	10bfffc4 	addi	r2,r2,-1
 4007da4:	1400a136 	bltu	r2,r16,400802c <__udivdi3+0x55c>
 4007da8:	01400404 	movi	r5,16
 4007dac:	2805883a 	mov	r2,r5
 4007db0:	003f6006 	br	4007b34 <__udivdi3+0x64>
 4007db4:	01000044 	movi	r4,1
 4007db8:	000b883a 	mov	r5,zero
 4007dbc:	40098c40 	call	40098c4 <__udivsi3>
 4007dc0:	1021883a 	mov	r16,r2
 4007dc4:	00bfffd4 	movui	r2,65535
 4007dc8:	143ff436 	bltu	r2,r16,4007d9c <__udivdi3+0x2cc>
 4007dcc:	003f5506 	br	4007b24 <__udivdi3+0x54>
 4007dd0:	00804034 	movhi	r2,256
 4007dd4:	10bfffc4 	addi	r2,r2,-1
 4007dd8:	12009a36 	bltu	r2,r8,4008044 <__udivdi3+0x574>
 4007ddc:	01400404 	movi	r5,16
 4007de0:	2805883a 	mov	r2,r5
 4007de4:	003fae06 	br	4007ca0 <__udivdi3+0x1d0>
 4007de8:	3dc5c83a 	sub	r2,r7,r23
 4007dec:	35c8983a 	sll	r4,r6,r23
 4007df0:	8086d83a 	srl	r3,r16,r2
 4007df4:	a0a2d83a 	srl	r17,r20,r2
 4007df8:	e084d83a 	srl	r2,fp,r2
 4007dfc:	20eab03a 	or	r21,r4,r3
 4007e00:	a82cd43a 	srli	r22,r21,16
 4007e04:	a5c6983a 	sll	r3,r20,r23
 4007e08:	8809883a 	mov	r4,r17
 4007e0c:	b00b883a 	mov	r5,r22
 4007e10:	1886b03a 	or	r3,r3,r2
 4007e14:	d8c00215 	stw	r3,8(sp)
 4007e18:	40098c40 	call	40098c4 <__udivsi3>
 4007e1c:	8809883a 	mov	r4,r17
 4007e20:	b00b883a 	mov	r5,r22
 4007e24:	1029883a 	mov	r20,r2
 4007e28:	40098cc0 	call	40098cc <__umodsi3>
 4007e2c:	a8ffffcc 	andi	r3,r21,65535
 4007e30:	d8c00515 	stw	r3,20(sp)
 4007e34:	d9000217 	ldw	r4,8(sp)
 4007e38:	d9400517 	ldw	r5,20(sp)
 4007e3c:	1004943a 	slli	r2,r2,16
 4007e40:	2006d43a 	srli	r3,r4,16
 4007e44:	85e0983a 	sll	r16,r16,r23
 4007e48:	2d23383a 	mul	r17,r5,r20
 4007e4c:	10c4b03a 	or	r2,r2,r3
 4007e50:	dc000015 	stw	r16,0(sp)
 4007e54:	1440032e 	bgeu	r2,r17,4007e64 <__udivdi3+0x394>
 4007e58:	1545883a 	add	r2,r2,r21
 4007e5c:	a53fffc4 	addi	r20,r20,-1
 4007e60:	15407f2e 	bgeu	r2,r21,4008060 <__udivdi3+0x590>
 4007e64:	1463c83a 	sub	r17,r2,r17
 4007e68:	8809883a 	mov	r4,r17
 4007e6c:	b00b883a 	mov	r5,r22
 4007e70:	40098c40 	call	40098c4 <__udivsi3>
 4007e74:	8809883a 	mov	r4,r17
 4007e78:	b00b883a 	mov	r5,r22
 4007e7c:	1021883a 	mov	r16,r2
 4007e80:	40098cc0 	call	40098cc <__umodsi3>
 4007e84:	d8c00517 	ldw	r3,20(sp)
 4007e88:	d9000217 	ldw	r4,8(sp)
 4007e8c:	1004943a 	slli	r2,r2,16
 4007e90:	1c0f383a 	mul	r7,r3,r16
 4007e94:	20ffffcc 	andi	r3,r4,65535
 4007e98:	10e2b03a 	or	r17,r2,r3
 4007e9c:	89c0032e 	bgeu	r17,r7,4007eac <__udivdi3+0x3dc>
 4007ea0:	8d63883a 	add	r17,r17,r21
 4007ea4:	843fffc4 	addi	r16,r16,-1
 4007ea8:	8d40692e 	bgeu	r17,r21,4008050 <__udivdi3+0x580>
 4007eac:	a008943a 	slli	r4,r20,16
 4007eb0:	d9400017 	ldw	r5,0(sp)
 4007eb4:	89e3c83a 	sub	r17,r17,r7
 4007eb8:	8110b03a 	or	r8,r16,r4
 4007ebc:	280cd43a 	srli	r6,r5,16
 4007ec0:	28ffffcc 	andi	r3,r5,65535
 4007ec4:	40bfffcc 	andi	r2,r8,65535
 4007ec8:	400ad43a 	srli	r5,r8,16
 4007ecc:	10d3383a 	mul	r9,r2,r3
 4007ed0:	1185383a 	mul	r2,r2,r6
 4007ed4:	28c7383a 	mul	r3,r5,r3
 4007ed8:	4808d43a 	srli	r4,r9,16
 4007edc:	298b383a 	mul	r5,r5,r6
 4007ee0:	10c5883a 	add	r2,r2,r3
 4007ee4:	2089883a 	add	r4,r4,r2
 4007ee8:	20c0022e 	bgeu	r4,r3,4007ef4 <__udivdi3+0x424>
 4007eec:	00800074 	movhi	r2,1
 4007ef0:	288b883a 	add	r5,r5,r2
 4007ef4:	2004d43a 	srli	r2,r4,16
 4007ef8:	288b883a 	add	r5,r5,r2
 4007efc:	89403f36 	bltu	r17,r5,4007ffc <__udivdi3+0x52c>
 4007f00:	89403926 	beq	r17,r5,4007fe8 <__udivdi3+0x518>
 4007f04:	4005883a 	mov	r2,r8
 4007f08:	0009883a 	mov	r4,zero
 4007f0c:	003f5106 	br	4007c54 <__udivdi3+0x184>
 4007f10:	85a0983a 	sll	r16,r16,r22
 4007f14:	3585c83a 	sub	r2,r6,r22
 4007f18:	a0a2d83a 	srl	r17,r20,r2
 4007f1c:	802ad43a 	srli	r21,r16,16
 4007f20:	e084d83a 	srl	r2,fp,r2
 4007f24:	a586983a 	sll	r3,r20,r22
 4007f28:	8809883a 	mov	r4,r17
 4007f2c:	a80b883a 	mov	r5,r21
 4007f30:	1886b03a 	or	r3,r3,r2
 4007f34:	d8c00115 	stw	r3,4(sp)
 4007f38:	40098c40 	call	40098c4 <__udivsi3>
 4007f3c:	8809883a 	mov	r4,r17
 4007f40:	a80b883a 	mov	r5,r21
 4007f44:	d8800415 	stw	r2,16(sp)
 4007f48:	40098cc0 	call	40098cc <__umodsi3>
 4007f4c:	d9000117 	ldw	r4,4(sp)
 4007f50:	d9400417 	ldw	r5,16(sp)
 4007f54:	1004943a 	slli	r2,r2,16
 4007f58:	85ffffcc 	andi	r23,r16,65535
 4007f5c:	2006d43a 	srli	r3,r4,16
 4007f60:	b963383a 	mul	r17,r23,r5
 4007f64:	10c4b03a 	or	r2,r2,r3
 4007f68:	1440042e 	bgeu	r2,r17,4007f7c <__udivdi3+0x4ac>
 4007f6c:	297fffc4 	addi	r5,r5,-1
 4007f70:	1405883a 	add	r2,r2,r16
 4007f74:	d9400415 	stw	r5,16(sp)
 4007f78:	1400442e 	bgeu	r2,r16,400808c <__udivdi3+0x5bc>
 4007f7c:	1463c83a 	sub	r17,r2,r17
 4007f80:	8809883a 	mov	r4,r17
 4007f84:	a80b883a 	mov	r5,r21
 4007f88:	40098c40 	call	40098c4 <__udivsi3>
 4007f8c:	8809883a 	mov	r4,r17
 4007f90:	a80b883a 	mov	r5,r21
 4007f94:	1029883a 	mov	r20,r2
 4007f98:	40098cc0 	call	40098cc <__umodsi3>
 4007f9c:	d9400117 	ldw	r5,4(sp)
 4007fa0:	1004943a 	slli	r2,r2,16
 4007fa4:	bd09383a 	mul	r4,r23,r20
 4007fa8:	28ffffcc 	andi	r3,r5,65535
 4007fac:	10c6b03a 	or	r3,r2,r3
 4007fb0:	1900062e 	bgeu	r3,r4,4007fcc <__udivdi3+0x4fc>
 4007fb4:	1c07883a 	add	r3,r3,r16
 4007fb8:	a53fffc4 	addi	r20,r20,-1
 4007fbc:	1c000336 	bltu	r3,r16,4007fcc <__udivdi3+0x4fc>
 4007fc0:	1900022e 	bgeu	r3,r4,4007fcc <__udivdi3+0x4fc>
 4007fc4:	a53fffc4 	addi	r20,r20,-1
 4007fc8:	1c07883a 	add	r3,r3,r16
 4007fcc:	d9400417 	ldw	r5,16(sp)
 4007fd0:	e5b8983a 	sll	fp,fp,r22
 4007fd4:	1923c83a 	sub	r17,r3,r4
 4007fd8:	2804943a 	slli	r2,r5,16
 4007fdc:	a0a8b03a 	or	r20,r20,r2
 4007fe0:	dd000315 	stw	r20,12(sp)
 4007fe4:	003ee106 	br	4007b6c <__udivdi3+0x9c>
 4007fe8:	2004943a 	slli	r2,r4,16
 4007fec:	e5c8983a 	sll	r4,fp,r23
 4007ff0:	48ffffcc 	andi	r3,r9,65535
 4007ff4:	10c5883a 	add	r2,r2,r3
 4007ff8:	20bfc22e 	bgeu	r4,r2,4007f04 <__udivdi3+0x434>
 4007ffc:	40bfffc4 	addi	r2,r8,-1
 4008000:	0009883a 	mov	r4,zero
 4008004:	003f1306 	br	4007c54 <__udivdi3+0x184>
 4008008:	01400204 	movi	r5,8
 400800c:	2805883a 	mov	r2,r5
 4008010:	003f0306 	br	4007c20 <__udivdi3+0x150>
 4008014:	01400604 	movi	r5,24
 4008018:	2805883a 	mov	r2,r5
 400801c:	003f0006 	br	4007c20 <__udivdi3+0x150>
 4008020:	01400204 	movi	r5,8
 4008024:	2805883a 	mov	r2,r5
 4008028:	003ec206 	br	4007b34 <__udivdi3+0x64>
 400802c:	01400604 	movi	r5,24
 4008030:	2805883a 	mov	r2,r5
 4008034:	003ebf06 	br	4007b34 <__udivdi3+0x64>
 4008038:	01400204 	movi	r5,8
 400803c:	2805883a 	mov	r2,r5
 4008040:	003f1706 	br	4007ca0 <__udivdi3+0x1d0>
 4008044:	01400604 	movi	r5,24
 4008048:	2805883a 	mov	r2,r5
 400804c:	003f1406 	br	4007ca0 <__udivdi3+0x1d0>
 4008050:	89ff962e 	bgeu	r17,r7,4007eac <__udivdi3+0x3dc>
 4008054:	8d63883a 	add	r17,r17,r21
 4008058:	843fffc4 	addi	r16,r16,-1
 400805c:	003f9306 	br	4007eac <__udivdi3+0x3dc>
 4008060:	147f802e 	bgeu	r2,r17,4007e64 <__udivdi3+0x394>
 4008064:	a53fffc4 	addi	r20,r20,-1
 4008068:	1545883a 	add	r2,r2,r21
 400806c:	003f7d06 	br	4007e64 <__udivdi3+0x394>
 4008070:	a53fffc4 	addi	r20,r20,-1
 4008074:	003ede06 	br	4007bf0 <__udivdi3+0x120>
 4008078:	b5bfffc4 	addi	r22,r22,-1
 400807c:	1405883a 	add	r2,r2,r16
 4008080:	003f2806 	br	4007d24 <__udivdi3+0x254>
 4008084:	a53fffc4 	addi	r20,r20,-1
 4008088:	003f3706 	br	4007d68 <__udivdi3+0x298>
 400808c:	147fbb2e 	bgeu	r2,r17,4007f7c <__udivdi3+0x4ac>
 4008090:	297fffc4 	addi	r5,r5,-1
 4008094:	1405883a 	add	r2,r2,r16
 4008098:	d9400415 	stw	r5,16(sp)
 400809c:	003fb706 	br	4007f7c <__udivdi3+0x4ac>
 40080a0:	b5bfffc4 	addi	r22,r22,-1
 40080a4:	1405883a 	add	r2,r2,r16
 40080a8:	003ec006 	br	4007bac <__udivdi3+0xdc>

040080ac <__umoddi3>:
 40080ac:	defff104 	addi	sp,sp,-60
 40080b0:	dd800b15 	stw	r22,44(sp)
 40080b4:	dd000915 	stw	r20,36(sp)
 40080b8:	dc000515 	stw	r16,20(sp)
 40080bc:	dfc00e15 	stw	ra,56(sp)
 40080c0:	df000d15 	stw	fp,52(sp)
 40080c4:	ddc00c15 	stw	r23,48(sp)
 40080c8:	dd400a15 	stw	r21,40(sp)
 40080cc:	dcc00815 	stw	r19,32(sp)
 40080d0:	dc800715 	stw	r18,28(sp)
 40080d4:	dc400615 	stw	r17,24(sp)
 40080d8:	3021883a 	mov	r16,r6
 40080dc:	202d883a 	mov	r22,r4
 40080e0:	2829883a 	mov	r20,r5
 40080e4:	38002b1e 	bne	r7,zero,4008194 <__umoddi3+0xe8>
 40080e8:	29805036 	bltu	r5,r6,400822c <__umoddi3+0x180>
 40080ec:	30008a26 	beq	r6,zero,4008318 <__umoddi3+0x26c>
 40080f0:	00bfffd4 	movui	r2,65535
 40080f4:	14008236 	bltu	r2,r16,4008300 <__umoddi3+0x254>
 40080f8:	00803fc4 	movi	r2,255
 40080fc:	14013636 	bltu	r2,r16,40085d8 <__umoddi3+0x52c>
 4008100:	000b883a 	mov	r5,zero
 4008104:	0005883a 	mov	r2,zero
 4008108:	8084d83a 	srl	r2,r16,r2
 400810c:	01010074 	movhi	r4,1025
 4008110:	211b1e04 	addi	r4,r4,27768
 4008114:	01800804 	movi	r6,32
 4008118:	1105883a 	add	r2,r2,r4
 400811c:	10c00003 	ldbu	r3,0(r2)
 4008120:	28c7883a 	add	r3,r5,r3
 4008124:	30efc83a 	sub	r23,r6,r3
 4008128:	b800941e 	bne	r23,zero,400837c <__umoddi3+0x2d0>
 400812c:	802ad43a 	srli	r21,r16,16
 4008130:	a423c83a 	sub	r17,r20,r16
 4008134:	0039883a 	mov	fp,zero
 4008138:	853fffcc 	andi	r20,r16,65535
 400813c:	8809883a 	mov	r4,r17
 4008140:	a80b883a 	mov	r5,r21
 4008144:	40098c40 	call	40098c4 <__udivsi3>
 4008148:	8809883a 	mov	r4,r17
 400814c:	a80b883a 	mov	r5,r21
 4008150:	a0a3383a 	mul	r17,r20,r2
 4008154:	40098cc0 	call	40098cc <__umodsi3>
 4008158:	1004943a 	slli	r2,r2,16
 400815c:	b006d43a 	srli	r3,r22,16
 4008160:	10c4b03a 	or	r2,r2,r3
 4008164:	1440032e 	bgeu	r2,r17,4008174 <__umoddi3+0xc8>
 4008168:	1405883a 	add	r2,r2,r16
 400816c:	14000136 	bltu	r2,r16,4008174 <__umoddi3+0xc8>
 4008170:	14413536 	bltu	r2,r17,4008648 <__umoddi3+0x59c>
 4008174:	1463c83a 	sub	r17,r2,r17
 4008178:	8809883a 	mov	r4,r17
 400817c:	a80b883a 	mov	r5,r21
 4008180:	40098c40 	call	40098c4 <__udivsi3>
 4008184:	8809883a 	mov	r4,r17
 4008188:	a0a3383a 	mul	r17,r20,r2
 400818c:	a80b883a 	mov	r5,r21
 4008190:	00004d06 	br	40082c8 <__umoddi3+0x21c>
 4008194:	380d883a 	mov	r6,r7
 4008198:	29c0102e 	bgeu	r5,r7,40081dc <__umoddi3+0x130>
 400819c:	2011883a 	mov	r8,r4
 40081a0:	2813883a 	mov	r9,r5
 40081a4:	4005883a 	mov	r2,r8
 40081a8:	4807883a 	mov	r3,r9
 40081ac:	dfc00e17 	ldw	ra,56(sp)
 40081b0:	df000d17 	ldw	fp,52(sp)
 40081b4:	ddc00c17 	ldw	r23,48(sp)
 40081b8:	dd800b17 	ldw	r22,44(sp)
 40081bc:	dd400a17 	ldw	r21,40(sp)
 40081c0:	dd000917 	ldw	r20,36(sp)
 40081c4:	dcc00817 	ldw	r19,32(sp)
 40081c8:	dc800717 	ldw	r18,28(sp)
 40081cc:	dc400617 	ldw	r17,24(sp)
 40081d0:	dc000517 	ldw	r16,20(sp)
 40081d4:	dec00f04 	addi	sp,sp,60
 40081d8:	f800283a 	ret
 40081dc:	00bfffd4 	movui	r2,65535
 40081e0:	11c05a36 	bltu	r2,r7,400834c <__umoddi3+0x2a0>
 40081e4:	00803fc4 	movi	r2,255
 40081e8:	11c0fe36 	bltu	r2,r7,40085e4 <__umoddi3+0x538>
 40081ec:	000b883a 	mov	r5,zero
 40081f0:	0005883a 	mov	r2,zero
 40081f4:	3084d83a 	srl	r2,r6,r2
 40081f8:	01010074 	movhi	r4,1025
 40081fc:	211b1e04 	addi	r4,r4,27768
 4008200:	01c00804 	movi	r7,32
 4008204:	1105883a 	add	r2,r2,r4
 4008208:	10c00003 	ldbu	r3,0(r2)
 400820c:	28c7883a 	add	r3,r5,r3
 4008210:	38ebc83a 	sub	r21,r7,r3
 4008214:	a800851e 	bne	r21,zero,400842c <__umoddi3+0x380>
 4008218:	35005236 	bltu	r6,r20,4008364 <__umoddi3+0x2b8>
 400821c:	b400512e 	bgeu	r22,r16,4008364 <__umoddi3+0x2b8>
 4008220:	b011883a 	mov	r8,r22
 4008224:	a013883a 	mov	r9,r20
 4008228:	003fde06 	br	40081a4 <__umoddi3+0xf8>
 400822c:	00bfffd4 	movui	r2,65535
 4008230:	11804036 	bltu	r2,r6,4008334 <__umoddi3+0x288>
 4008234:	00803fc4 	movi	r2,255
 4008238:	1180ed36 	bltu	r2,r6,40085f0 <__umoddi3+0x544>
 400823c:	000b883a 	mov	r5,zero
 4008240:	0005883a 	mov	r2,zero
 4008244:	8084d83a 	srl	r2,r16,r2
 4008248:	01010074 	movhi	r4,1025
 400824c:	211b1e04 	addi	r4,r4,27768
 4008250:	01800804 	movi	r6,32
 4008254:	1105883a 	add	r2,r2,r4
 4008258:	10c00003 	ldbu	r3,0(r2)
 400825c:	28c7883a 	add	r3,r5,r3
 4008260:	30c7c83a 	sub	r3,r6,r3
 4008264:	1800bf1e 	bne	r3,zero,4008564 <__umoddi3+0x4b8>
 4008268:	0039883a 	mov	fp,zero
 400826c:	802ad43a 	srli	r21,r16,16
 4008270:	a009883a 	mov	r4,r20
 4008274:	85ffffcc 	andi	r23,r16,65535
 4008278:	a80b883a 	mov	r5,r21
 400827c:	40098c40 	call	40098c4 <__udivsi3>
 4008280:	a009883a 	mov	r4,r20
 4008284:	a80b883a 	mov	r5,r21
 4008288:	b8a3383a 	mul	r17,r23,r2
 400828c:	40098cc0 	call	40098cc <__umodsi3>
 4008290:	1004943a 	slli	r2,r2,16
 4008294:	b006d43a 	srli	r3,r22,16
 4008298:	10c4b03a 	or	r2,r2,r3
 400829c:	1440032e 	bgeu	r2,r17,40082ac <__umoddi3+0x200>
 40082a0:	1405883a 	add	r2,r2,r16
 40082a4:	14000136 	bltu	r2,r16,40082ac <__umoddi3+0x200>
 40082a8:	1440e536 	bltu	r2,r17,4008640 <__umoddi3+0x594>
 40082ac:	1463c83a 	sub	r17,r2,r17
 40082b0:	8809883a 	mov	r4,r17
 40082b4:	a80b883a 	mov	r5,r21
 40082b8:	40098c40 	call	40098c4 <__udivsi3>
 40082bc:	8809883a 	mov	r4,r17
 40082c0:	b8a3383a 	mul	r17,r23,r2
 40082c4:	a80b883a 	mov	r5,r21
 40082c8:	40098cc0 	call	40098cc <__umodsi3>
 40082cc:	1004943a 	slli	r2,r2,16
 40082d0:	b0ffffcc 	andi	r3,r22,65535
 40082d4:	10c4b03a 	or	r2,r2,r3
 40082d8:	1440042e 	bgeu	r2,r17,40082ec <__umoddi3+0x240>
 40082dc:	1405883a 	add	r2,r2,r16
 40082e0:	14000236 	bltu	r2,r16,40082ec <__umoddi3+0x240>
 40082e4:	1440012e 	bgeu	r2,r17,40082ec <__umoddi3+0x240>
 40082e8:	1405883a 	add	r2,r2,r16
 40082ec:	1445c83a 	sub	r2,r2,r17
 40082f0:	1724d83a 	srl	r18,r2,fp
 40082f4:	0013883a 	mov	r9,zero
 40082f8:	9011883a 	mov	r8,r18
 40082fc:	003fa906 	br	40081a4 <__umoddi3+0xf8>
 4008300:	00804034 	movhi	r2,256
 4008304:	10bfffc4 	addi	r2,r2,-1
 4008308:	1400b036 	bltu	r2,r16,40085cc <__umoddi3+0x520>
 400830c:	01400404 	movi	r5,16
 4008310:	2805883a 	mov	r2,r5
 4008314:	003f7c06 	br	4008108 <__umoddi3+0x5c>
 4008318:	01000044 	movi	r4,1
 400831c:	000b883a 	mov	r5,zero
 4008320:	40098c40 	call	40098c4 <__udivsi3>
 4008324:	1021883a 	mov	r16,r2
 4008328:	00bfffd4 	movui	r2,65535
 400832c:	143ff436 	bltu	r2,r16,4008300 <__umoddi3+0x254>
 4008330:	003f7106 	br	40080f8 <__umoddi3+0x4c>
 4008334:	00804034 	movhi	r2,256
 4008338:	10bfffc4 	addi	r2,r2,-1
 400833c:	1180af36 	bltu	r2,r6,40085fc <__umoddi3+0x550>
 4008340:	01400404 	movi	r5,16
 4008344:	2805883a 	mov	r2,r5
 4008348:	003fbe06 	br	4008244 <__umoddi3+0x198>
 400834c:	00804034 	movhi	r2,256
 4008350:	10bfffc4 	addi	r2,r2,-1
 4008354:	11c0ac36 	bltu	r2,r7,4008608 <__umoddi3+0x55c>
 4008358:	01400404 	movi	r5,16
 400835c:	2805883a 	mov	r2,r5
 4008360:	003fa406 	br	40081f4 <__umoddi3+0x148>
 4008364:	b409c83a 	sub	r4,r22,r16
 4008368:	b105803a 	cmpltu	r2,r22,r4
 400836c:	a187c83a 	sub	r3,r20,r6
 4008370:	18a9c83a 	sub	r20,r3,r2
 4008374:	202d883a 	mov	r22,r4
 4008378:	003fa906 	br	4008220 <__umoddi3+0x174>
 400837c:	85e0983a 	sll	r16,r16,r23
 4008380:	35c5c83a 	sub	r2,r6,r23
 4008384:	a0a2d83a 	srl	r17,r20,r2
 4008388:	802ad43a 	srli	r21,r16,16
 400838c:	b084d83a 	srl	r2,r22,r2
 4008390:	a5c6983a 	sll	r3,r20,r23
 4008394:	8809883a 	mov	r4,r17
 4008398:	a80b883a 	mov	r5,r21
 400839c:	1886b03a 	or	r3,r3,r2
 40083a0:	d8c00115 	stw	r3,4(sp)
 40083a4:	853fffcc 	andi	r20,r16,65535
 40083a8:	40098c40 	call	40098c4 <__udivsi3>
 40083ac:	8809883a 	mov	r4,r17
 40083b0:	a80b883a 	mov	r5,r21
 40083b4:	a0a3383a 	mul	r17,r20,r2
 40083b8:	40098cc0 	call	40098cc <__umodsi3>
 40083bc:	d9000117 	ldw	r4,4(sp)
 40083c0:	1004943a 	slli	r2,r2,16
 40083c4:	b839883a 	mov	fp,r23
 40083c8:	2006d43a 	srli	r3,r4,16
 40083cc:	10c4b03a 	or	r2,r2,r3
 40083d0:	1440022e 	bgeu	r2,r17,40083dc <__umoddi3+0x330>
 40083d4:	1405883a 	add	r2,r2,r16
 40083d8:	1400962e 	bgeu	r2,r16,4008634 <__umoddi3+0x588>
 40083dc:	1463c83a 	sub	r17,r2,r17
 40083e0:	8809883a 	mov	r4,r17
 40083e4:	a80b883a 	mov	r5,r21
 40083e8:	40098c40 	call	40098c4 <__udivsi3>
 40083ec:	8809883a 	mov	r4,r17
 40083f0:	a80b883a 	mov	r5,r21
 40083f4:	a0a3383a 	mul	r17,r20,r2
 40083f8:	40098cc0 	call	40098cc <__umodsi3>
 40083fc:	d9400117 	ldw	r5,4(sp)
 4008400:	1004943a 	slli	r2,r2,16
 4008404:	28ffffcc 	andi	r3,r5,65535
 4008408:	10c4b03a 	or	r2,r2,r3
 400840c:	1440042e 	bgeu	r2,r17,4008420 <__umoddi3+0x374>
 4008410:	1405883a 	add	r2,r2,r16
 4008414:	14000236 	bltu	r2,r16,4008420 <__umoddi3+0x374>
 4008418:	1440012e 	bgeu	r2,r17,4008420 <__umoddi3+0x374>
 400841c:	1405883a 	add	r2,r2,r16
 4008420:	b5ec983a 	sll	r22,r22,r23
 4008424:	1463c83a 	sub	r17,r2,r17
 4008428:	003f4406 	br	400813c <__umoddi3+0x90>
 400842c:	3d4fc83a 	sub	r7,r7,r21
 4008430:	3546983a 	sll	r3,r6,r21
 4008434:	81c4d83a 	srl	r2,r16,r7
 4008438:	a1e2d83a 	srl	r17,r20,r7
 400843c:	a54c983a 	sll	r6,r20,r21
 4008440:	18aeb03a 	or	r23,r3,r2
 4008444:	b828d43a 	srli	r20,r23,16
 4008448:	b1c4d83a 	srl	r2,r22,r7
 400844c:	8809883a 	mov	r4,r17
 4008450:	a00b883a 	mov	r5,r20
 4008454:	308cb03a 	or	r6,r6,r2
 4008458:	d9c00315 	stw	r7,12(sp)
 400845c:	d9800215 	stw	r6,8(sp)
 4008460:	40098c40 	call	40098c4 <__udivsi3>
 4008464:	8809883a 	mov	r4,r17
 4008468:	a00b883a 	mov	r5,r20
 400846c:	1039883a 	mov	fp,r2
 4008470:	40098cc0 	call	40098cc <__umodsi3>
 4008474:	b8ffffcc 	andi	r3,r23,65535
 4008478:	d8c00415 	stw	r3,16(sp)
 400847c:	d9000217 	ldw	r4,8(sp)
 4008480:	d9400417 	ldw	r5,16(sp)
 4008484:	1004943a 	slli	r2,r2,16
 4008488:	2006d43a 	srli	r3,r4,16
 400848c:	8560983a 	sll	r16,r16,r21
 4008490:	2f23383a 	mul	r17,r5,fp
 4008494:	10c4b03a 	or	r2,r2,r3
 4008498:	dc000015 	stw	r16,0(sp)
 400849c:	b56c983a 	sll	r22,r22,r21
 40084a0:	1440032e 	bgeu	r2,r17,40084b0 <__umoddi3+0x404>
 40084a4:	15c5883a 	add	r2,r2,r23
 40084a8:	e73fffc4 	addi	fp,fp,-1
 40084ac:	15c05d2e 	bgeu	r2,r23,4008624 <__umoddi3+0x578>
 40084b0:	1463c83a 	sub	r17,r2,r17
 40084b4:	8809883a 	mov	r4,r17
 40084b8:	a00b883a 	mov	r5,r20
 40084bc:	40098c40 	call	40098c4 <__udivsi3>
 40084c0:	8809883a 	mov	r4,r17
 40084c4:	a00b883a 	mov	r5,r20
 40084c8:	1021883a 	mov	r16,r2
 40084cc:	40098cc0 	call	40098cc <__umodsi3>
 40084d0:	d8c00417 	ldw	r3,16(sp)
 40084d4:	d9000217 	ldw	r4,8(sp)
 40084d8:	1004943a 	slli	r2,r2,16
 40084dc:	1c23383a 	mul	r17,r3,r16
 40084e0:	20ffffcc 	andi	r3,r4,65535
 40084e4:	10ceb03a 	or	r7,r2,r3
 40084e8:	3c40032e 	bgeu	r7,r17,40084f8 <__umoddi3+0x44c>
 40084ec:	3dcf883a 	add	r7,r7,r23
 40084f0:	843fffc4 	addi	r16,r16,-1
 40084f4:	3dc0472e 	bgeu	r7,r23,4008614 <__umoddi3+0x568>
 40084f8:	e004943a 	slli	r2,fp,16
 40084fc:	d9400017 	ldw	r5,0(sp)
 4008500:	3c4fc83a 	sub	r7,r7,r17
 4008504:	8084b03a 	or	r2,r16,r2
 4008508:	28ffffcc 	andi	r3,r5,65535
 400850c:	280cd43a 	srli	r6,r5,16
 4008510:	100ad43a 	srli	r5,r2,16
 4008514:	10bfffcc 	andi	r2,r2,65535
 4008518:	10d1383a 	mul	r8,r2,r3
 400851c:	28c7383a 	mul	r3,r5,r3
 4008520:	1185383a 	mul	r2,r2,r6
 4008524:	4008d43a 	srli	r4,r8,16
 4008528:	298b383a 	mul	r5,r5,r6
 400852c:	10c5883a 	add	r2,r2,r3
 4008530:	2089883a 	add	r4,r4,r2
 4008534:	20c0022e 	bgeu	r4,r3,4008540 <__umoddi3+0x494>
 4008538:	00800074 	movhi	r2,1
 400853c:	288b883a 	add	r5,r5,r2
 4008540:	2004d43a 	srli	r2,r4,16
 4008544:	2008943a 	slli	r4,r4,16
 4008548:	40ffffcc 	andi	r3,r8,65535
 400854c:	288b883a 	add	r5,r5,r2
 4008550:	20c9883a 	add	r4,r4,r3
 4008554:	39400b36 	bltu	r7,r5,4008584 <__umoddi3+0x4d8>
 4008558:	39403d26 	beq	r7,r5,4008650 <__umoddi3+0x5a4>
 400855c:	394bc83a 	sub	r5,r7,r5
 4008560:	00000f06 	br	40085a0 <__umoddi3+0x4f4>
 4008564:	30c5c83a 	sub	r2,r6,r3
 4008568:	1839883a 	mov	fp,r3
 400856c:	b084d83a 	srl	r2,r22,r2
 4008570:	a0c6983a 	sll	r3,r20,r3
 4008574:	8720983a 	sll	r16,r16,fp
 4008578:	b72c983a 	sll	r22,r22,fp
 400857c:	18a8b03a 	or	r20,r3,r2
 4008580:	003f3a06 	br	400826c <__umoddi3+0x1c0>
 4008584:	d8c00017 	ldw	r3,0(sp)
 4008588:	20c5c83a 	sub	r2,r4,r3
 400858c:	2089803a 	cmpltu	r4,r4,r2
 4008590:	2dc7c83a 	sub	r3,r5,r23
 4008594:	1907c83a 	sub	r3,r3,r4
 4008598:	38cbc83a 	sub	r5,r7,r3
 400859c:	1009883a 	mov	r4,r2
 40085a0:	b105c83a 	sub	r2,r22,r4
 40085a4:	b087803a 	cmpltu	r3,r22,r2
 40085a8:	28c7c83a 	sub	r3,r5,r3
 40085ac:	d9400317 	ldw	r5,12(sp)
 40085b0:	1544d83a 	srl	r2,r2,r21
 40085b4:	1948983a 	sll	r4,r3,r5
 40085b8:	1d46d83a 	srl	r3,r3,r21
 40085bc:	20a4b03a 	or	r18,r4,r2
 40085c0:	9011883a 	mov	r8,r18
 40085c4:	1813883a 	mov	r9,r3
 40085c8:	003ef606 	br	40081a4 <__umoddi3+0xf8>
 40085cc:	01400604 	movi	r5,24
 40085d0:	2805883a 	mov	r2,r5
 40085d4:	003ecc06 	br	4008108 <__umoddi3+0x5c>
 40085d8:	01400204 	movi	r5,8
 40085dc:	2805883a 	mov	r2,r5
 40085e0:	003ec906 	br	4008108 <__umoddi3+0x5c>
 40085e4:	01400204 	movi	r5,8
 40085e8:	2805883a 	mov	r2,r5
 40085ec:	003f0106 	br	40081f4 <__umoddi3+0x148>
 40085f0:	01400204 	movi	r5,8
 40085f4:	2805883a 	mov	r2,r5
 40085f8:	003f1206 	br	4008244 <__umoddi3+0x198>
 40085fc:	01400604 	movi	r5,24
 4008600:	2805883a 	mov	r2,r5
 4008604:	003f0f06 	br	4008244 <__umoddi3+0x198>
 4008608:	01400604 	movi	r5,24
 400860c:	2805883a 	mov	r2,r5
 4008610:	003ef806 	br	40081f4 <__umoddi3+0x148>
 4008614:	3c7fb82e 	bgeu	r7,r17,40084f8 <__umoddi3+0x44c>
 4008618:	843fffc4 	addi	r16,r16,-1
 400861c:	3dcf883a 	add	r7,r7,r23
 4008620:	003fb506 	br	40084f8 <__umoddi3+0x44c>
 4008624:	147fa22e 	bgeu	r2,r17,40084b0 <__umoddi3+0x404>
 4008628:	e73fffc4 	addi	fp,fp,-1
 400862c:	15c5883a 	add	r2,r2,r23
 4008630:	003f9f06 	br	40084b0 <__umoddi3+0x404>
 4008634:	147f692e 	bgeu	r2,r17,40083dc <__umoddi3+0x330>
 4008638:	1405883a 	add	r2,r2,r16
 400863c:	003f6706 	br	40083dc <__umoddi3+0x330>
 4008640:	1405883a 	add	r2,r2,r16
 4008644:	003f1906 	br	40082ac <__umoddi3+0x200>
 4008648:	1405883a 	add	r2,r2,r16
 400864c:	003ec906 	br	4008174 <__umoddi3+0xc8>
 4008650:	b13fcc36 	bltu	r22,r4,4008584 <__umoddi3+0x4d8>
 4008654:	000b883a 	mov	r5,zero
 4008658:	003fd106 	br	40085a0 <__umoddi3+0x4f4>

0400865c <_fpadd_parts>:
 400865c:	defff804 	addi	sp,sp,-32
 4008660:	dcc00315 	stw	r19,12(sp)
 4008664:	2027883a 	mov	r19,r4
 4008668:	21000017 	ldw	r4,0(r4)
 400866c:	00c00044 	movi	r3,1
 4008670:	dd400515 	stw	r21,20(sp)
 4008674:	dd000415 	stw	r20,16(sp)
 4008678:	ddc00715 	stw	r23,28(sp)
 400867c:	dd800615 	stw	r22,24(sp)
 4008680:	dc800215 	stw	r18,8(sp)
 4008684:	dc400115 	stw	r17,4(sp)
 4008688:	dc000015 	stw	r16,0(sp)
 400868c:	282b883a 	mov	r21,r5
 4008690:	3029883a 	mov	r20,r6
 4008694:	1900632e 	bgeu	r3,r4,4008824 <_fpadd_parts+0x1c8>
 4008698:	28800017 	ldw	r2,0(r5)
 400869c:	1880812e 	bgeu	r3,r2,40088a4 <_fpadd_parts+0x248>
 40086a0:	00c00104 	movi	r3,4
 40086a4:	20c0dc26 	beq	r4,r3,4008a18 <_fpadd_parts+0x3bc>
 40086a8:	10c07e26 	beq	r2,r3,40088a4 <_fpadd_parts+0x248>
 40086ac:	00c00084 	movi	r3,2
 40086b0:	10c06726 	beq	r2,r3,4008850 <_fpadd_parts+0x1f4>
 40086b4:	20c07b26 	beq	r4,r3,40088a4 <_fpadd_parts+0x248>
 40086b8:	9dc00217 	ldw	r23,8(r19)
 40086bc:	28c00217 	ldw	r3,8(r5)
 40086c0:	9c400317 	ldw	r17,12(r19)
 40086c4:	2bc00317 	ldw	r15,12(r5)
 40086c8:	b8cdc83a 	sub	r6,r23,r3
 40086cc:	9c800417 	ldw	r18,16(r19)
 40086d0:	2c000417 	ldw	r16,16(r5)
 40086d4:	3009883a 	mov	r4,r6
 40086d8:	30009716 	blt	r6,zero,4008938 <_fpadd_parts+0x2dc>
 40086dc:	00800fc4 	movi	r2,63
 40086e0:	11806b16 	blt	r2,r6,4008890 <_fpadd_parts+0x234>
 40086e4:	0100a40e 	bge	zero,r4,4008978 <_fpadd_parts+0x31c>
 40086e8:	35bff804 	addi	r22,r6,-32
 40086ec:	b000bc16 	blt	r22,zero,40089e0 <_fpadd_parts+0x384>
 40086f0:	8596d83a 	srl	r11,r16,r22
 40086f4:	0019883a 	mov	r12,zero
 40086f8:	0013883a 	mov	r9,zero
 40086fc:	01000044 	movi	r4,1
 4008700:	0015883a 	mov	r10,zero
 4008704:	b000be16 	blt	r22,zero,4008a00 <_fpadd_parts+0x3a4>
 4008708:	2590983a 	sll	r8,r4,r22
 400870c:	000f883a 	mov	r7,zero
 4008710:	00bfffc4 	movi	r2,-1
 4008714:	3889883a 	add	r4,r7,r2
 4008718:	408b883a 	add	r5,r8,r2
 400871c:	21cd803a 	cmpltu	r6,r4,r7
 4008720:	314b883a 	add	r5,r6,r5
 4008724:	7904703a 	and	r2,r15,r4
 4008728:	8146703a 	and	r3,r16,r5
 400872c:	10c4b03a 	or	r2,r2,r3
 4008730:	10000226 	beq	r2,zero,400873c <_fpadd_parts+0xe0>
 4008734:	02400044 	movi	r9,1
 4008738:	0015883a 	mov	r10,zero
 400873c:	5a5eb03a 	or	r15,r11,r9
 4008740:	62a0b03a 	or	r16,r12,r10
 4008744:	99400117 	ldw	r5,4(r19)
 4008748:	a8800117 	ldw	r2,4(r21)
 400874c:	28806e26 	beq	r5,r2,4008908 <_fpadd_parts+0x2ac>
 4008750:	28006626 	beq	r5,zero,40088ec <_fpadd_parts+0x290>
 4008754:	7c45c83a 	sub	r2,r15,r17
 4008758:	7889803a 	cmpltu	r4,r15,r2
 400875c:	8487c83a 	sub	r3,r16,r18
 4008760:	1909c83a 	sub	r4,r3,r4
 4008764:	100d883a 	mov	r6,r2
 4008768:	200f883a 	mov	r7,r4
 400876c:	38007716 	blt	r7,zero,400894c <_fpadd_parts+0x2f0>
 4008770:	a5c00215 	stw	r23,8(r20)
 4008774:	a1c00415 	stw	r7,16(r20)
 4008778:	a0000115 	stw	zero,4(r20)
 400877c:	a1800315 	stw	r6,12(r20)
 4008780:	a2000317 	ldw	r8,12(r20)
 4008784:	a2400417 	ldw	r9,16(r20)
 4008788:	00bfffc4 	movi	r2,-1
 400878c:	408b883a 	add	r5,r8,r2
 4008790:	2a09803a 	cmpltu	r4,r5,r8
 4008794:	488d883a 	add	r6,r9,r2
 4008798:	01c40034 	movhi	r7,4096
 400879c:	39ffffc4 	addi	r7,r7,-1
 40087a0:	218d883a 	add	r6,r4,r6
 40087a4:	39801736 	bltu	r7,r6,4008804 <_fpadd_parts+0x1a8>
 40087a8:	31c06526 	beq	r6,r7,4008940 <_fpadd_parts+0x2e4>
 40087ac:	a3000217 	ldw	r12,8(r20)
 40087b0:	4209883a 	add	r4,r8,r8
 40087b4:	00bfffc4 	movi	r2,-1
 40087b8:	220f803a 	cmpltu	r7,r4,r8
 40087bc:	4a4b883a 	add	r5,r9,r9
 40087c0:	394f883a 	add	r7,r7,r5
 40087c4:	2095883a 	add	r10,r4,r2
 40087c8:	3897883a 	add	r11,r7,r2
 40087cc:	510d803a 	cmpltu	r6,r10,r4
 40087d0:	6099883a 	add	r12,r12,r2
 40087d4:	32d7883a 	add	r11,r6,r11
 40087d8:	00840034 	movhi	r2,4096
 40087dc:	10bfffc4 	addi	r2,r2,-1
 40087e0:	2011883a 	mov	r8,r4
 40087e4:	3813883a 	mov	r9,r7
 40087e8:	a1000315 	stw	r4,12(r20)
 40087ec:	a1c00415 	stw	r7,16(r20)
 40087f0:	a3000215 	stw	r12,8(r20)
 40087f4:	12c00336 	bltu	r2,r11,4008804 <_fpadd_parts+0x1a8>
 40087f8:	58bfed1e 	bne	r11,r2,40087b0 <_fpadd_parts+0x154>
 40087fc:	00bfff84 	movi	r2,-2
 4008800:	12bfeb2e 	bgeu	r2,r10,40087b0 <_fpadd_parts+0x154>
 4008804:	a2800417 	ldw	r10,16(r20)
 4008808:	008000c4 	movi	r2,3
 400880c:	00c80034 	movhi	r3,8192
 4008810:	18ffffc4 	addi	r3,r3,-1
 4008814:	a2400317 	ldw	r9,12(r20)
 4008818:	a0800015 	stw	r2,0(r20)
 400881c:	1a802336 	bltu	r3,r10,40088ac <_fpadd_parts+0x250>
 4008820:	a027883a 	mov	r19,r20
 4008824:	9805883a 	mov	r2,r19
 4008828:	ddc00717 	ldw	r23,28(sp)
 400882c:	dd800617 	ldw	r22,24(sp)
 4008830:	dd400517 	ldw	r21,20(sp)
 4008834:	dd000417 	ldw	r20,16(sp)
 4008838:	dcc00317 	ldw	r19,12(sp)
 400883c:	dc800217 	ldw	r18,8(sp)
 4008840:	dc400117 	ldw	r17,4(sp)
 4008844:	dc000017 	ldw	r16,0(sp)
 4008848:	dec00804 	addi	sp,sp,32
 400884c:	f800283a 	ret
 4008850:	20fff41e 	bne	r4,r3,4008824 <_fpadd_parts+0x1c8>
 4008854:	31000015 	stw	r4,0(r6)
 4008858:	98800117 	ldw	r2,4(r19)
 400885c:	30800115 	stw	r2,4(r6)
 4008860:	98c00217 	ldw	r3,8(r19)
 4008864:	30c00215 	stw	r3,8(r6)
 4008868:	98800317 	ldw	r2,12(r19)
 400886c:	30800315 	stw	r2,12(r6)
 4008870:	98c00417 	ldw	r3,16(r19)
 4008874:	30c00415 	stw	r3,16(r6)
 4008878:	98800117 	ldw	r2,4(r19)
 400887c:	28c00117 	ldw	r3,4(r5)
 4008880:	3027883a 	mov	r19,r6
 4008884:	10c4703a 	and	r2,r2,r3
 4008888:	30800115 	stw	r2,4(r6)
 400888c:	003fe506 	br	4008824 <_fpadd_parts+0x1c8>
 4008890:	1dc02616 	blt	r3,r23,400892c <_fpadd_parts+0x2d0>
 4008894:	0023883a 	mov	r17,zero
 4008898:	182f883a 	mov	r23,r3
 400889c:	0025883a 	mov	r18,zero
 40088a0:	003fa806 	br	4008744 <_fpadd_parts+0xe8>
 40088a4:	a827883a 	mov	r19,r21
 40088a8:	003fde06 	br	4008824 <_fpadd_parts+0x1c8>
 40088ac:	01800044 	movi	r6,1
 40088b0:	500497fa 	slli	r2,r10,31
 40088b4:	4808d07a 	srli	r4,r9,1
 40088b8:	518ad83a 	srl	r5,r10,r6
 40088bc:	a2000217 	ldw	r8,8(r20)
 40088c0:	1108b03a 	or	r4,r2,r4
 40088c4:	0007883a 	mov	r3,zero
 40088c8:	4984703a 	and	r2,r9,r6
 40088cc:	208cb03a 	or	r6,r4,r2
 40088d0:	28ceb03a 	or	r7,r5,r3
 40088d4:	42000044 	addi	r8,r8,1
 40088d8:	a027883a 	mov	r19,r20
 40088dc:	a1c00415 	stw	r7,16(r20)
 40088e0:	a2000215 	stw	r8,8(r20)
 40088e4:	a1800315 	stw	r6,12(r20)
 40088e8:	003fce06 	br	4008824 <_fpadd_parts+0x1c8>
 40088ec:	8bc5c83a 	sub	r2,r17,r15
 40088f0:	8889803a 	cmpltu	r4,r17,r2
 40088f4:	9407c83a 	sub	r3,r18,r16
 40088f8:	1909c83a 	sub	r4,r3,r4
 40088fc:	100d883a 	mov	r6,r2
 4008900:	200f883a 	mov	r7,r4
 4008904:	003f9906 	br	400876c <_fpadd_parts+0x110>
 4008908:	8bc5883a 	add	r2,r17,r15
 400890c:	1449803a 	cmpltu	r4,r2,r17
 4008910:	9407883a 	add	r3,r18,r16
 4008914:	20c9883a 	add	r4,r4,r3
 4008918:	a1400115 	stw	r5,4(r20)
 400891c:	a5c00215 	stw	r23,8(r20)
 4008920:	a0800315 	stw	r2,12(r20)
 4008924:	a1000415 	stw	r4,16(r20)
 4008928:	003fb606 	br	4008804 <_fpadd_parts+0x1a8>
 400892c:	001f883a 	mov	r15,zero
 4008930:	0021883a 	mov	r16,zero
 4008934:	003f8306 	br	4008744 <_fpadd_parts+0xe8>
 4008938:	018dc83a 	sub	r6,zero,r6
 400893c:	003f6706 	br	40086dc <_fpadd_parts+0x80>
 4008940:	00bfff84 	movi	r2,-2
 4008944:	117faf36 	bltu	r2,r5,4008804 <_fpadd_parts+0x1a8>
 4008948:	003f9806 	br	40087ac <_fpadd_parts+0x150>
 400894c:	0005883a 	mov	r2,zero
 4008950:	1189c83a 	sub	r4,r2,r6
 4008954:	1105803a 	cmpltu	r2,r2,r4
 4008958:	01cbc83a 	sub	r5,zero,r7
 400895c:	2885c83a 	sub	r2,r5,r2
 4008960:	01800044 	movi	r6,1
 4008964:	a1800115 	stw	r6,4(r20)
 4008968:	a5c00215 	stw	r23,8(r20)
 400896c:	a1000315 	stw	r4,12(r20)
 4008970:	a0800415 	stw	r2,16(r20)
 4008974:	003f8206 	br	4008780 <_fpadd_parts+0x124>
 4008978:	203f7226 	beq	r4,zero,4008744 <_fpadd_parts+0xe8>
 400897c:	35bff804 	addi	r22,r6,-32
 4008980:	b9af883a 	add	r23,r23,r6
 4008984:	b0003116 	blt	r22,zero,4008a4c <_fpadd_parts+0x3f0>
 4008988:	959ad83a 	srl	r13,r18,r22
 400898c:	001d883a 	mov	r14,zero
 4008990:	000f883a 	mov	r7,zero
 4008994:	01000044 	movi	r4,1
 4008998:	0011883a 	mov	r8,zero
 400899c:	b0002516 	blt	r22,zero,4008a34 <_fpadd_parts+0x3d8>
 40089a0:	2594983a 	sll	r10,r4,r22
 40089a4:	0013883a 	mov	r9,zero
 40089a8:	00bfffc4 	movi	r2,-1
 40089ac:	4889883a 	add	r4,r9,r2
 40089b0:	508b883a 	add	r5,r10,r2
 40089b4:	224d803a 	cmpltu	r6,r4,r9
 40089b8:	314b883a 	add	r5,r6,r5
 40089bc:	8904703a 	and	r2,r17,r4
 40089c0:	9146703a 	and	r3,r18,r5
 40089c4:	10c4b03a 	or	r2,r2,r3
 40089c8:	10000226 	beq	r2,zero,40089d4 <_fpadd_parts+0x378>
 40089cc:	01c00044 	movi	r7,1
 40089d0:	0011883a 	mov	r8,zero
 40089d4:	69e2b03a 	or	r17,r13,r7
 40089d8:	7224b03a 	or	r18,r14,r8
 40089dc:	003f5906 	br	4008744 <_fpadd_parts+0xe8>
 40089e0:	8407883a 	add	r3,r16,r16
 40089e4:	008007c4 	movi	r2,31
 40089e8:	1185c83a 	sub	r2,r2,r6
 40089ec:	1886983a 	sll	r3,r3,r2
 40089f0:	7996d83a 	srl	r11,r15,r6
 40089f4:	8198d83a 	srl	r12,r16,r6
 40089f8:	1ad6b03a 	or	r11,r3,r11
 40089fc:	003f3e06 	br	40086f8 <_fpadd_parts+0x9c>
 4008a00:	2006d07a 	srli	r3,r4,1
 4008a04:	008007c4 	movi	r2,31
 4008a08:	1185c83a 	sub	r2,r2,r6
 4008a0c:	1890d83a 	srl	r8,r3,r2
 4008a10:	218e983a 	sll	r7,r4,r6
 4008a14:	003f3e06 	br	4008710 <_fpadd_parts+0xb4>
 4008a18:	113f821e 	bne	r2,r4,4008824 <_fpadd_parts+0x1c8>
 4008a1c:	28c00117 	ldw	r3,4(r5)
 4008a20:	98800117 	ldw	r2,4(r19)
 4008a24:	10ff7f26 	beq	r2,r3,4008824 <_fpadd_parts+0x1c8>
 4008a28:	04c10074 	movhi	r19,1025
 4008a2c:	9cdb1904 	addi	r19,r19,27748
 4008a30:	003f7c06 	br	4008824 <_fpadd_parts+0x1c8>
 4008a34:	2006d07a 	srli	r3,r4,1
 4008a38:	008007c4 	movi	r2,31
 4008a3c:	1185c83a 	sub	r2,r2,r6
 4008a40:	1894d83a 	srl	r10,r3,r2
 4008a44:	2192983a 	sll	r9,r4,r6
 4008a48:	003fd706 	br	40089a8 <_fpadd_parts+0x34c>
 4008a4c:	9487883a 	add	r3,r18,r18
 4008a50:	008007c4 	movi	r2,31
 4008a54:	1185c83a 	sub	r2,r2,r6
 4008a58:	1886983a 	sll	r3,r3,r2
 4008a5c:	899ad83a 	srl	r13,r17,r6
 4008a60:	919cd83a 	srl	r14,r18,r6
 4008a64:	1b5ab03a 	or	r13,r3,r13
 4008a68:	003fc906 	br	4008990 <_fpadd_parts+0x334>

04008a6c <__subdf3>:
 4008a6c:	deffea04 	addi	sp,sp,-88
 4008a70:	dcc01415 	stw	r19,80(sp)
 4008a74:	dcc00404 	addi	r19,sp,16
 4008a78:	2011883a 	mov	r8,r4
 4008a7c:	2813883a 	mov	r9,r5
 4008a80:	dc401315 	stw	r17,76(sp)
 4008a84:	d809883a 	mov	r4,sp
 4008a88:	980b883a 	mov	r5,r19
 4008a8c:	dc400904 	addi	r17,sp,36
 4008a90:	dfc01515 	stw	ra,84(sp)
 4008a94:	da400115 	stw	r9,4(sp)
 4008a98:	d9c00315 	stw	r7,12(sp)
 4008a9c:	da000015 	stw	r8,0(sp)
 4008aa0:	d9800215 	stw	r6,8(sp)
 4008aa4:	4009d000 	call	4009d00 <__unpack_d>
 4008aa8:	d9000204 	addi	r4,sp,8
 4008aac:	880b883a 	mov	r5,r17
 4008ab0:	4009d000 	call	4009d00 <__unpack_d>
 4008ab4:	d8800a17 	ldw	r2,40(sp)
 4008ab8:	880b883a 	mov	r5,r17
 4008abc:	9809883a 	mov	r4,r19
 4008ac0:	d9800e04 	addi	r6,sp,56
 4008ac4:	1080005c 	xori	r2,r2,1
 4008ac8:	d8800a15 	stw	r2,40(sp)
 4008acc:	400865c0 	call	400865c <_fpadd_parts>
 4008ad0:	1009883a 	mov	r4,r2
 4008ad4:	40099ec0 	call	40099ec <__pack_d>
 4008ad8:	dfc01517 	ldw	ra,84(sp)
 4008adc:	dcc01417 	ldw	r19,80(sp)
 4008ae0:	dc401317 	ldw	r17,76(sp)
 4008ae4:	dec01604 	addi	sp,sp,88
 4008ae8:	f800283a 	ret

04008aec <__adddf3>:
 4008aec:	deffea04 	addi	sp,sp,-88
 4008af0:	dcc01415 	stw	r19,80(sp)
 4008af4:	dcc00404 	addi	r19,sp,16
 4008af8:	2011883a 	mov	r8,r4
 4008afc:	2813883a 	mov	r9,r5
 4008b00:	dc401315 	stw	r17,76(sp)
 4008b04:	d809883a 	mov	r4,sp
 4008b08:	980b883a 	mov	r5,r19
 4008b0c:	dc400904 	addi	r17,sp,36
 4008b10:	dfc01515 	stw	ra,84(sp)
 4008b14:	da400115 	stw	r9,4(sp)
 4008b18:	d9c00315 	stw	r7,12(sp)
 4008b1c:	da000015 	stw	r8,0(sp)
 4008b20:	d9800215 	stw	r6,8(sp)
 4008b24:	4009d000 	call	4009d00 <__unpack_d>
 4008b28:	d9000204 	addi	r4,sp,8
 4008b2c:	880b883a 	mov	r5,r17
 4008b30:	4009d000 	call	4009d00 <__unpack_d>
 4008b34:	d9800e04 	addi	r6,sp,56
 4008b38:	9809883a 	mov	r4,r19
 4008b3c:	880b883a 	mov	r5,r17
 4008b40:	400865c0 	call	400865c <_fpadd_parts>
 4008b44:	1009883a 	mov	r4,r2
 4008b48:	40099ec0 	call	40099ec <__pack_d>
 4008b4c:	dfc01517 	ldw	ra,84(sp)
 4008b50:	dcc01417 	ldw	r19,80(sp)
 4008b54:	dc401317 	ldw	r17,76(sp)
 4008b58:	dec01604 	addi	sp,sp,88
 4008b5c:	f800283a 	ret

04008b60 <__muldf3>:
 4008b60:	deffe004 	addi	sp,sp,-128
 4008b64:	dc401815 	stw	r17,96(sp)
 4008b68:	dc400404 	addi	r17,sp,16
 4008b6c:	2011883a 	mov	r8,r4
 4008b70:	2813883a 	mov	r9,r5
 4008b74:	dc001715 	stw	r16,92(sp)
 4008b78:	d809883a 	mov	r4,sp
 4008b7c:	880b883a 	mov	r5,r17
 4008b80:	dc000904 	addi	r16,sp,36
 4008b84:	dfc01f15 	stw	ra,124(sp)
 4008b88:	da400115 	stw	r9,4(sp)
 4008b8c:	d9c00315 	stw	r7,12(sp)
 4008b90:	da000015 	stw	r8,0(sp)
 4008b94:	d9800215 	stw	r6,8(sp)
 4008b98:	ddc01e15 	stw	r23,120(sp)
 4008b9c:	dd801d15 	stw	r22,116(sp)
 4008ba0:	dd401c15 	stw	r21,112(sp)
 4008ba4:	dd001b15 	stw	r20,108(sp)
 4008ba8:	dcc01a15 	stw	r19,104(sp)
 4008bac:	dc801915 	stw	r18,100(sp)
 4008bb0:	4009d000 	call	4009d00 <__unpack_d>
 4008bb4:	d9000204 	addi	r4,sp,8
 4008bb8:	800b883a 	mov	r5,r16
 4008bbc:	4009d000 	call	4009d00 <__unpack_d>
 4008bc0:	d9000417 	ldw	r4,16(sp)
 4008bc4:	00800044 	movi	r2,1
 4008bc8:	1100102e 	bgeu	r2,r4,4008c0c <__muldf3+0xac>
 4008bcc:	d8c00917 	ldw	r3,36(sp)
 4008bd0:	10c0062e 	bgeu	r2,r3,4008bec <__muldf3+0x8c>
 4008bd4:	00800104 	movi	r2,4
 4008bd8:	20800a26 	beq	r4,r2,4008c04 <__muldf3+0xa4>
 4008bdc:	1880cc26 	beq	r3,r2,4008f10 <__muldf3+0x3b0>
 4008be0:	00800084 	movi	r2,2
 4008be4:	20800926 	beq	r4,r2,4008c0c <__muldf3+0xac>
 4008be8:	1880191e 	bne	r3,r2,4008c50 <__muldf3+0xf0>
 4008bec:	d8c00a17 	ldw	r3,40(sp)
 4008bf0:	d8800517 	ldw	r2,20(sp)
 4008bf4:	8009883a 	mov	r4,r16
 4008bf8:	10c4c03a 	cmpne	r2,r2,r3
 4008bfc:	d8800a15 	stw	r2,40(sp)
 4008c00:	00000706 	br	4008c20 <__muldf3+0xc0>
 4008c04:	00800084 	movi	r2,2
 4008c08:	1880c326 	beq	r3,r2,4008f18 <__muldf3+0x3b8>
 4008c0c:	d8800517 	ldw	r2,20(sp)
 4008c10:	d8c00a17 	ldw	r3,40(sp)
 4008c14:	8809883a 	mov	r4,r17
 4008c18:	10c4c03a 	cmpne	r2,r2,r3
 4008c1c:	d8800515 	stw	r2,20(sp)
 4008c20:	40099ec0 	call	40099ec <__pack_d>
 4008c24:	dfc01f17 	ldw	ra,124(sp)
 4008c28:	ddc01e17 	ldw	r23,120(sp)
 4008c2c:	dd801d17 	ldw	r22,116(sp)
 4008c30:	dd401c17 	ldw	r21,112(sp)
 4008c34:	dd001b17 	ldw	r20,108(sp)
 4008c38:	dcc01a17 	ldw	r19,104(sp)
 4008c3c:	dc801917 	ldw	r18,100(sp)
 4008c40:	dc401817 	ldw	r17,96(sp)
 4008c44:	dc001717 	ldw	r16,92(sp)
 4008c48:	dec02004 	addi	sp,sp,128
 4008c4c:	f800283a 	ret
 4008c50:	dd800717 	ldw	r22,28(sp)
 4008c54:	dc800c17 	ldw	r18,48(sp)
 4008c58:	002b883a 	mov	r21,zero
 4008c5c:	0023883a 	mov	r17,zero
 4008c60:	a80b883a 	mov	r5,r21
 4008c64:	b00d883a 	mov	r6,r22
 4008c68:	880f883a 	mov	r7,r17
 4008c6c:	ddc00817 	ldw	r23,32(sp)
 4008c70:	dcc00d17 	ldw	r19,52(sp)
 4008c74:	9009883a 	mov	r4,r18
 4008c78:	40098d40 	call	40098d4 <__muldi3>
 4008c7c:	001b883a 	mov	r13,zero
 4008c80:	680f883a 	mov	r7,r13
 4008c84:	b009883a 	mov	r4,r22
 4008c88:	000b883a 	mov	r5,zero
 4008c8c:	980d883a 	mov	r6,r19
 4008c90:	b82d883a 	mov	r22,r23
 4008c94:	002f883a 	mov	r23,zero
 4008c98:	db401615 	stw	r13,88(sp)
 4008c9c:	d8801315 	stw	r2,76(sp)
 4008ca0:	d8c01415 	stw	r3,80(sp)
 4008ca4:	dcc01515 	stw	r19,84(sp)
 4008ca8:	40098d40 	call	40098d4 <__muldi3>
 4008cac:	b00d883a 	mov	r6,r22
 4008cb0:	000b883a 	mov	r5,zero
 4008cb4:	9009883a 	mov	r4,r18
 4008cb8:	b80f883a 	mov	r7,r23
 4008cbc:	1021883a 	mov	r16,r2
 4008cc0:	1823883a 	mov	r17,r3
 4008cc4:	40098d40 	call	40098d4 <__muldi3>
 4008cc8:	8085883a 	add	r2,r16,r2
 4008ccc:	140d803a 	cmpltu	r6,r2,r16
 4008cd0:	88c7883a 	add	r3,r17,r3
 4008cd4:	30cd883a 	add	r6,r6,r3
 4008cd8:	1029883a 	mov	r20,r2
 4008cdc:	302b883a 	mov	r21,r6
 4008ce0:	da801317 	ldw	r10,76(sp)
 4008ce4:	dac01417 	ldw	r11,80(sp)
 4008ce8:	db001517 	ldw	r12,84(sp)
 4008cec:	db401617 	ldw	r13,88(sp)
 4008cf0:	3440612e 	bgeu	r6,r17,4008e78 <__muldf3+0x318>
 4008cf4:	0009883a 	mov	r4,zero
 4008cf8:	5105883a 	add	r2,r10,r4
 4008cfc:	128d803a 	cmpltu	r6,r2,r10
 4008d00:	5d07883a 	add	r3,r11,r20
 4008d04:	30cd883a 	add	r6,r6,r3
 4008d08:	0021883a 	mov	r16,zero
 4008d0c:	04400044 	movi	r17,1
 4008d10:	1025883a 	mov	r18,r2
 4008d14:	3027883a 	mov	r19,r6
 4008d18:	32c06236 	bltu	r6,r11,4008ea4 <__muldf3+0x344>
 4008d1c:	59807a26 	beq	r11,r6,4008f08 <__muldf3+0x3a8>
 4008d20:	680b883a 	mov	r5,r13
 4008d24:	b80f883a 	mov	r7,r23
 4008d28:	6009883a 	mov	r4,r12
 4008d2c:	b00d883a 	mov	r6,r22
 4008d30:	40098d40 	call	40098d4 <__muldi3>
 4008d34:	1009883a 	mov	r4,r2
 4008d38:	000f883a 	mov	r7,zero
 4008d3c:	1545883a 	add	r2,r2,r21
 4008d40:	1111803a 	cmpltu	r8,r2,r4
 4008d44:	19c7883a 	add	r3,r3,r7
 4008d48:	40c7883a 	add	r3,r8,r3
 4008d4c:	88cb883a 	add	r5,r17,r3
 4008d50:	d8c00617 	ldw	r3,24(sp)
 4008d54:	8089883a 	add	r4,r16,r2
 4008d58:	d8800b17 	ldw	r2,44(sp)
 4008d5c:	18c00104 	addi	r3,r3,4
 4008d60:	240d803a 	cmpltu	r6,r4,r16
 4008d64:	10c7883a 	add	r3,r2,r3
 4008d68:	2013883a 	mov	r9,r4
 4008d6c:	d8800a17 	ldw	r2,40(sp)
 4008d70:	d9000517 	ldw	r4,20(sp)
 4008d74:	314d883a 	add	r6,r6,r5
 4008d78:	3015883a 	mov	r10,r6
 4008d7c:	2088c03a 	cmpne	r4,r4,r2
 4008d80:	00880034 	movhi	r2,8192
 4008d84:	10bfffc4 	addi	r2,r2,-1
 4008d88:	d9000f15 	stw	r4,60(sp)
 4008d8c:	d8c01015 	stw	r3,64(sp)
 4008d90:	1180162e 	bgeu	r2,r6,4008dec <__muldf3+0x28c>
 4008d94:	1811883a 	mov	r8,r3
 4008d98:	101f883a 	mov	r15,r2
 4008d9c:	980497fa 	slli	r2,r19,31
 4008da0:	9016d07a 	srli	r11,r18,1
 4008da4:	500697fa 	slli	r3,r10,31
 4008da8:	480cd07a 	srli	r6,r9,1
 4008dac:	500ed07a 	srli	r7,r10,1
 4008db0:	12d6b03a 	or	r11,r2,r11
 4008db4:	00800044 	movi	r2,1
 4008db8:	198cb03a 	or	r6,r3,r6
 4008dbc:	4888703a 	and	r4,r9,r2
 4008dc0:	9818d07a 	srli	r12,r19,1
 4008dc4:	001b883a 	mov	r13,zero
 4008dc8:	03a00034 	movhi	r14,32768
 4008dcc:	3013883a 	mov	r9,r6
 4008dd0:	3815883a 	mov	r10,r7
 4008dd4:	4091883a 	add	r8,r8,r2
 4008dd8:	20000226 	beq	r4,zero,4008de4 <__muldf3+0x284>
 4008ddc:	5b64b03a 	or	r18,r11,r13
 4008de0:	63a6b03a 	or	r19,r12,r14
 4008de4:	7abfed36 	bltu	r15,r10,4008d9c <__muldf3+0x23c>
 4008de8:	da001015 	stw	r8,64(sp)
 4008dec:	00840034 	movhi	r2,4096
 4008df0:	10bfffc4 	addi	r2,r2,-1
 4008df4:	12801436 	bltu	r2,r10,4008e48 <__muldf3+0x2e8>
 4008df8:	da001017 	ldw	r8,64(sp)
 4008dfc:	101f883a 	mov	r15,r2
 4008e00:	4a45883a 	add	r2,r9,r9
 4008e04:	124d803a 	cmpltu	r6,r2,r9
 4008e08:	5287883a 	add	r3,r10,r10
 4008e0c:	9497883a 	add	r11,r18,r18
 4008e10:	5c8f803a 	cmpltu	r7,r11,r18
 4008e14:	9cd9883a 	add	r12,r19,r19
 4008e18:	01000044 	movi	r4,1
 4008e1c:	30cd883a 	add	r6,r6,r3
 4008e20:	3b0f883a 	add	r7,r7,r12
 4008e24:	423fffc4 	addi	r8,r8,-1
 4008e28:	1013883a 	mov	r9,r2
 4008e2c:	3015883a 	mov	r10,r6
 4008e30:	111ab03a 	or	r13,r2,r4
 4008e34:	98003016 	blt	r19,zero,4008ef8 <__muldf3+0x398>
 4008e38:	5825883a 	mov	r18,r11
 4008e3c:	3827883a 	mov	r19,r7
 4008e40:	7abfef2e 	bgeu	r15,r10,4008e00 <__muldf3+0x2a0>
 4008e44:	da001015 	stw	r8,64(sp)
 4008e48:	00803fc4 	movi	r2,255
 4008e4c:	488e703a 	and	r7,r9,r2
 4008e50:	00802004 	movi	r2,128
 4008e54:	0007883a 	mov	r3,zero
 4008e58:	0011883a 	mov	r8,zero
 4008e5c:	38801826 	beq	r7,r2,4008ec0 <__muldf3+0x360>
 4008e60:	008000c4 	movi	r2,3
 4008e64:	d9000e04 	addi	r4,sp,56
 4008e68:	da801215 	stw	r10,72(sp)
 4008e6c:	d8800e15 	stw	r2,56(sp)
 4008e70:	da401115 	stw	r9,68(sp)
 4008e74:	003f6a06 	br	4008c20 <__muldf3+0xc0>
 4008e78:	89802126 	beq	r17,r6,4008f00 <__muldf3+0x3a0>
 4008e7c:	0009883a 	mov	r4,zero
 4008e80:	5105883a 	add	r2,r10,r4
 4008e84:	128d803a 	cmpltu	r6,r2,r10
 4008e88:	5d07883a 	add	r3,r11,r20
 4008e8c:	30cd883a 	add	r6,r6,r3
 4008e90:	0021883a 	mov	r16,zero
 4008e94:	0023883a 	mov	r17,zero
 4008e98:	1025883a 	mov	r18,r2
 4008e9c:	3027883a 	mov	r19,r6
 4008ea0:	32ff9e2e 	bgeu	r6,r11,4008d1c <__muldf3+0x1bc>
 4008ea4:	00800044 	movi	r2,1
 4008ea8:	8089883a 	add	r4,r16,r2
 4008eac:	240d803a 	cmpltu	r6,r4,r16
 4008eb0:	344d883a 	add	r6,r6,r17
 4008eb4:	2021883a 	mov	r16,r4
 4008eb8:	3023883a 	mov	r17,r6
 4008ebc:	003f9806 	br	4008d20 <__muldf3+0x1c0>
 4008ec0:	403fe71e 	bne	r8,zero,4008e60 <__muldf3+0x300>
 4008ec4:	01004004 	movi	r4,256
 4008ec8:	4904703a 	and	r2,r9,r4
 4008ecc:	10c4b03a 	or	r2,r2,r3
 4008ed0:	103fe31e 	bne	r2,zero,4008e60 <__muldf3+0x300>
 4008ed4:	94c4b03a 	or	r2,r18,r19
 4008ed8:	103fe126 	beq	r2,zero,4008e60 <__muldf3+0x300>
 4008edc:	49c5883a 	add	r2,r9,r7
 4008ee0:	1251803a 	cmpltu	r8,r2,r9
 4008ee4:	4291883a 	add	r8,r8,r10
 4008ee8:	013fc004 	movi	r4,-256
 4008eec:	1112703a 	and	r9,r2,r4
 4008ef0:	4015883a 	mov	r10,r8
 4008ef4:	003fda06 	br	4008e60 <__muldf3+0x300>
 4008ef8:	6813883a 	mov	r9,r13
 4008efc:	003fce06 	br	4008e38 <__muldf3+0x2d8>
 4008f00:	143f7c36 	bltu	r2,r16,4008cf4 <__muldf3+0x194>
 4008f04:	003fdd06 	br	4008e7c <__muldf3+0x31c>
 4008f08:	12bf852e 	bgeu	r2,r10,4008d20 <__muldf3+0x1c0>
 4008f0c:	003fe506 	br	4008ea4 <__muldf3+0x344>
 4008f10:	00800084 	movi	r2,2
 4008f14:	20bf351e 	bne	r4,r2,4008bec <__muldf3+0x8c>
 4008f18:	01010074 	movhi	r4,1025
 4008f1c:	211b1904 	addi	r4,r4,27748
 4008f20:	003f3f06 	br	4008c20 <__muldf3+0xc0>

04008f24 <__divdf3>:
 4008f24:	deffed04 	addi	sp,sp,-76
 4008f28:	dcc01115 	stw	r19,68(sp)
 4008f2c:	dcc00404 	addi	r19,sp,16
 4008f30:	2011883a 	mov	r8,r4
 4008f34:	2813883a 	mov	r9,r5
 4008f38:	dc000e15 	stw	r16,56(sp)
 4008f3c:	d809883a 	mov	r4,sp
 4008f40:	980b883a 	mov	r5,r19
 4008f44:	dc000904 	addi	r16,sp,36
 4008f48:	dfc01215 	stw	ra,72(sp)
 4008f4c:	da400115 	stw	r9,4(sp)
 4008f50:	d9c00315 	stw	r7,12(sp)
 4008f54:	da000015 	stw	r8,0(sp)
 4008f58:	d9800215 	stw	r6,8(sp)
 4008f5c:	dc801015 	stw	r18,64(sp)
 4008f60:	dc400f15 	stw	r17,60(sp)
 4008f64:	4009d000 	call	4009d00 <__unpack_d>
 4008f68:	d9000204 	addi	r4,sp,8
 4008f6c:	800b883a 	mov	r5,r16
 4008f70:	4009d000 	call	4009d00 <__unpack_d>
 4008f74:	d9000417 	ldw	r4,16(sp)
 4008f78:	00800044 	movi	r2,1
 4008f7c:	11000b2e 	bgeu	r2,r4,4008fac <__divdf3+0x88>
 4008f80:	d9400917 	ldw	r5,36(sp)
 4008f84:	1140762e 	bgeu	r2,r5,4009160 <__divdf3+0x23c>
 4008f88:	d8800517 	ldw	r2,20(sp)
 4008f8c:	d8c00a17 	ldw	r3,40(sp)
 4008f90:	01800104 	movi	r6,4
 4008f94:	10c4f03a 	xor	r2,r2,r3
 4008f98:	d8800515 	stw	r2,20(sp)
 4008f9c:	21800226 	beq	r4,r6,4008fa8 <__divdf3+0x84>
 4008fa0:	00800084 	movi	r2,2
 4008fa4:	2080141e 	bne	r4,r2,4008ff8 <__divdf3+0xd4>
 4008fa8:	29000926 	beq	r5,r4,4008fd0 <__divdf3+0xac>
 4008fac:	9809883a 	mov	r4,r19
 4008fb0:	40099ec0 	call	40099ec <__pack_d>
 4008fb4:	dfc01217 	ldw	ra,72(sp)
 4008fb8:	dcc01117 	ldw	r19,68(sp)
 4008fbc:	dc801017 	ldw	r18,64(sp)
 4008fc0:	dc400f17 	ldw	r17,60(sp)
 4008fc4:	dc000e17 	ldw	r16,56(sp)
 4008fc8:	dec01304 	addi	sp,sp,76
 4008fcc:	f800283a 	ret
 4008fd0:	01010074 	movhi	r4,1025
 4008fd4:	211b1904 	addi	r4,r4,27748
 4008fd8:	40099ec0 	call	40099ec <__pack_d>
 4008fdc:	dfc01217 	ldw	ra,72(sp)
 4008fe0:	dcc01117 	ldw	r19,68(sp)
 4008fe4:	dc801017 	ldw	r18,64(sp)
 4008fe8:	dc400f17 	ldw	r17,60(sp)
 4008fec:	dc000e17 	ldw	r16,56(sp)
 4008ff0:	dec01304 	addi	sp,sp,76
 4008ff4:	f800283a 	ret
 4008ff8:	29805b26 	beq	r5,r6,4009168 <__divdf3+0x244>
 4008ffc:	28802d26 	beq	r5,r2,40090b4 <__divdf3+0x190>
 4009000:	d8c00617 	ldw	r3,24(sp)
 4009004:	d8800b17 	ldw	r2,44(sp)
 4009008:	d9c00817 	ldw	r7,32(sp)
 400900c:	dc400d17 	ldw	r17,52(sp)
 4009010:	188bc83a 	sub	r5,r3,r2
 4009014:	d9800717 	ldw	r6,28(sp)
 4009018:	dc000c17 	ldw	r16,48(sp)
 400901c:	d9400615 	stw	r5,24(sp)
 4009020:	3c403836 	bltu	r7,r17,4009104 <__divdf3+0x1e0>
 4009024:	89c03626 	beq	r17,r7,4009100 <__divdf3+0x1dc>
 4009028:	0015883a 	mov	r10,zero
 400902c:	001d883a 	mov	r14,zero
 4009030:	02c40034 	movhi	r11,4096
 4009034:	001f883a 	mov	r15,zero
 4009038:	003f883a 	mov	ra,zero
 400903c:	04800f44 	movi	r18,61
 4009040:	00000f06 	br	4009080 <__divdf3+0x15c>
 4009044:	601d883a 	mov	r14,r12
 4009048:	681f883a 	mov	r15,r13
 400904c:	400d883a 	mov	r6,r8
 4009050:	100f883a 	mov	r7,r2
 4009054:	3191883a 	add	r8,r6,r6
 4009058:	5808d07a 	srli	r4,r11,1
 400905c:	4185803a 	cmpltu	r2,r8,r6
 4009060:	39d3883a 	add	r9,r7,r7
 4009064:	28c6b03a 	or	r3,r5,r3
 4009068:	1245883a 	add	r2,r2,r9
 400906c:	1815883a 	mov	r10,r3
 4009070:	2017883a 	mov	r11,r4
 4009074:	400d883a 	mov	r6,r8
 4009078:	100f883a 	mov	r7,r2
 400907c:	fc801726 	beq	ra,r18,40090dc <__divdf3+0x1b8>
 4009080:	580a97fa 	slli	r5,r11,31
 4009084:	5006d07a 	srli	r3,r10,1
 4009088:	ffc00044 	addi	ra,ra,1
 400908c:	3c7ff136 	bltu	r7,r17,4009054 <__divdf3+0x130>
 4009090:	3411c83a 	sub	r8,r6,r16
 4009094:	3205803a 	cmpltu	r2,r6,r8
 4009098:	3c53c83a 	sub	r9,r7,r17
 400909c:	7298b03a 	or	r12,r14,r10
 40090a0:	7adab03a 	or	r13,r15,r11
 40090a4:	4885c83a 	sub	r2,r9,r2
 40090a8:	89ffe61e 	bne	r17,r7,4009044 <__divdf3+0x120>
 40090ac:	343fe936 	bltu	r6,r16,4009054 <__divdf3+0x130>
 40090b0:	003fe406 	br	4009044 <__divdf3+0x120>
 40090b4:	9809883a 	mov	r4,r19
 40090b8:	d9800415 	stw	r6,16(sp)
 40090bc:	40099ec0 	call	40099ec <__pack_d>
 40090c0:	dfc01217 	ldw	ra,72(sp)
 40090c4:	dcc01117 	ldw	r19,68(sp)
 40090c8:	dc801017 	ldw	r18,64(sp)
 40090cc:	dc400f17 	ldw	r17,60(sp)
 40090d0:	dc000e17 	ldw	r16,56(sp)
 40090d4:	dec01304 	addi	sp,sp,76
 40090d8:	f800283a 	ret
 40090dc:	00803fc4 	movi	r2,255
 40090e0:	7090703a 	and	r8,r14,r2
 40090e4:	00802004 	movi	r2,128
 40090e8:	0007883a 	mov	r3,zero
 40090ec:	0013883a 	mov	r9,zero
 40090f0:	40800d26 	beq	r8,r2,4009128 <__divdf3+0x204>
 40090f4:	dbc00815 	stw	r15,32(sp)
 40090f8:	db800715 	stw	r14,28(sp)
 40090fc:	003fab06 	br	4008fac <__divdf3+0x88>
 4009100:	343fc92e 	bgeu	r6,r16,4009028 <__divdf3+0x104>
 4009104:	3185883a 	add	r2,r6,r6
 4009108:	1189803a 	cmpltu	r4,r2,r6
 400910c:	39c7883a 	add	r3,r7,r7
 4009110:	20c9883a 	add	r4,r4,r3
 4009114:	297fffc4 	addi	r5,r5,-1
 4009118:	100d883a 	mov	r6,r2
 400911c:	200f883a 	mov	r7,r4
 4009120:	d9400615 	stw	r5,24(sp)
 4009124:	003fc006 	br	4009028 <__divdf3+0x104>
 4009128:	483ff21e 	bne	r9,zero,40090f4 <__divdf3+0x1d0>
 400912c:	01004004 	movi	r4,256
 4009130:	7104703a 	and	r2,r14,r4
 4009134:	10c4b03a 	or	r2,r2,r3
 4009138:	103fee1e 	bne	r2,zero,40090f4 <__divdf3+0x1d0>
 400913c:	31c4b03a 	or	r2,r6,r7
 4009140:	103fec26 	beq	r2,zero,40090f4 <__divdf3+0x1d0>
 4009144:	7205883a 	add	r2,r14,r8
 4009148:	1391803a 	cmpltu	r8,r2,r14
 400914c:	43d1883a 	add	r8,r8,r15
 4009150:	013fc004 	movi	r4,-256
 4009154:	111c703a 	and	r14,r2,r4
 4009158:	401f883a 	mov	r15,r8
 400915c:	003fe506 	br	40090f4 <__divdf3+0x1d0>
 4009160:	8009883a 	mov	r4,r16
 4009164:	003f9206 	br	4008fb0 <__divdf3+0x8c>
 4009168:	9809883a 	mov	r4,r19
 400916c:	d8000715 	stw	zero,28(sp)
 4009170:	d8000815 	stw	zero,32(sp)
 4009174:	d8000615 	stw	zero,24(sp)
 4009178:	003f8d06 	br	4008fb0 <__divdf3+0x8c>

0400917c <__eqdf2>:
 400917c:	deffef04 	addi	sp,sp,-68
 4009180:	dc400f15 	stw	r17,60(sp)
 4009184:	dc400404 	addi	r17,sp,16
 4009188:	2005883a 	mov	r2,r4
 400918c:	2807883a 	mov	r3,r5
 4009190:	dc000e15 	stw	r16,56(sp)
 4009194:	d809883a 	mov	r4,sp
 4009198:	880b883a 	mov	r5,r17
 400919c:	dc000904 	addi	r16,sp,36
 40091a0:	d8c00115 	stw	r3,4(sp)
 40091a4:	d8800015 	stw	r2,0(sp)
 40091a8:	d9800215 	stw	r6,8(sp)
 40091ac:	dfc01015 	stw	ra,64(sp)
 40091b0:	d9c00315 	stw	r7,12(sp)
 40091b4:	4009d000 	call	4009d00 <__unpack_d>
 40091b8:	d9000204 	addi	r4,sp,8
 40091bc:	800b883a 	mov	r5,r16
 40091c0:	4009d000 	call	4009d00 <__unpack_d>
 40091c4:	d8800417 	ldw	r2,16(sp)
 40091c8:	00c00044 	movi	r3,1
 40091cc:	180d883a 	mov	r6,r3
 40091d0:	1880062e 	bgeu	r3,r2,40091ec <__eqdf2+0x70>
 40091d4:	d8800917 	ldw	r2,36(sp)
 40091d8:	8809883a 	mov	r4,r17
 40091dc:	800b883a 	mov	r5,r16
 40091e0:	1880022e 	bgeu	r3,r2,40091ec <__eqdf2+0x70>
 40091e4:	4009e380 	call	4009e38 <__fpcmp_parts_d>
 40091e8:	100d883a 	mov	r6,r2
 40091ec:	3005883a 	mov	r2,r6
 40091f0:	dfc01017 	ldw	ra,64(sp)
 40091f4:	dc400f17 	ldw	r17,60(sp)
 40091f8:	dc000e17 	ldw	r16,56(sp)
 40091fc:	dec01104 	addi	sp,sp,68
 4009200:	f800283a 	ret

04009204 <__nedf2>:
 4009204:	deffef04 	addi	sp,sp,-68
 4009208:	dc400f15 	stw	r17,60(sp)
 400920c:	dc400404 	addi	r17,sp,16
 4009210:	2005883a 	mov	r2,r4
 4009214:	2807883a 	mov	r3,r5
 4009218:	dc000e15 	stw	r16,56(sp)
 400921c:	d809883a 	mov	r4,sp
 4009220:	880b883a 	mov	r5,r17
 4009224:	dc000904 	addi	r16,sp,36
 4009228:	d8c00115 	stw	r3,4(sp)
 400922c:	d8800015 	stw	r2,0(sp)
 4009230:	d9800215 	stw	r6,8(sp)
 4009234:	dfc01015 	stw	ra,64(sp)
 4009238:	d9c00315 	stw	r7,12(sp)
 400923c:	4009d000 	call	4009d00 <__unpack_d>
 4009240:	d9000204 	addi	r4,sp,8
 4009244:	800b883a 	mov	r5,r16
 4009248:	4009d000 	call	4009d00 <__unpack_d>
 400924c:	d8800417 	ldw	r2,16(sp)
 4009250:	00c00044 	movi	r3,1
 4009254:	180d883a 	mov	r6,r3
 4009258:	1880062e 	bgeu	r3,r2,4009274 <__nedf2+0x70>
 400925c:	d8800917 	ldw	r2,36(sp)
 4009260:	8809883a 	mov	r4,r17
 4009264:	800b883a 	mov	r5,r16
 4009268:	1880022e 	bgeu	r3,r2,4009274 <__nedf2+0x70>
 400926c:	4009e380 	call	4009e38 <__fpcmp_parts_d>
 4009270:	100d883a 	mov	r6,r2
 4009274:	3005883a 	mov	r2,r6
 4009278:	dfc01017 	ldw	ra,64(sp)
 400927c:	dc400f17 	ldw	r17,60(sp)
 4009280:	dc000e17 	ldw	r16,56(sp)
 4009284:	dec01104 	addi	sp,sp,68
 4009288:	f800283a 	ret

0400928c <__gtdf2>:
 400928c:	deffef04 	addi	sp,sp,-68
 4009290:	dc400f15 	stw	r17,60(sp)
 4009294:	dc400404 	addi	r17,sp,16
 4009298:	2005883a 	mov	r2,r4
 400929c:	2807883a 	mov	r3,r5
 40092a0:	dc000e15 	stw	r16,56(sp)
 40092a4:	d809883a 	mov	r4,sp
 40092a8:	880b883a 	mov	r5,r17
 40092ac:	dc000904 	addi	r16,sp,36
 40092b0:	d8c00115 	stw	r3,4(sp)
 40092b4:	d8800015 	stw	r2,0(sp)
 40092b8:	d9800215 	stw	r6,8(sp)
 40092bc:	dfc01015 	stw	ra,64(sp)
 40092c0:	d9c00315 	stw	r7,12(sp)
 40092c4:	4009d000 	call	4009d00 <__unpack_d>
 40092c8:	d9000204 	addi	r4,sp,8
 40092cc:	800b883a 	mov	r5,r16
 40092d0:	4009d000 	call	4009d00 <__unpack_d>
 40092d4:	d8800417 	ldw	r2,16(sp)
 40092d8:	00c00044 	movi	r3,1
 40092dc:	01bfffc4 	movi	r6,-1
 40092e0:	1880062e 	bgeu	r3,r2,40092fc <__gtdf2+0x70>
 40092e4:	d8800917 	ldw	r2,36(sp)
 40092e8:	8809883a 	mov	r4,r17
 40092ec:	800b883a 	mov	r5,r16
 40092f0:	1880022e 	bgeu	r3,r2,40092fc <__gtdf2+0x70>
 40092f4:	4009e380 	call	4009e38 <__fpcmp_parts_d>
 40092f8:	100d883a 	mov	r6,r2
 40092fc:	3005883a 	mov	r2,r6
 4009300:	dfc01017 	ldw	ra,64(sp)
 4009304:	dc400f17 	ldw	r17,60(sp)
 4009308:	dc000e17 	ldw	r16,56(sp)
 400930c:	dec01104 	addi	sp,sp,68
 4009310:	f800283a 	ret

04009314 <__gedf2>:
 4009314:	deffef04 	addi	sp,sp,-68
 4009318:	dc400f15 	stw	r17,60(sp)
 400931c:	dc400404 	addi	r17,sp,16
 4009320:	2005883a 	mov	r2,r4
 4009324:	2807883a 	mov	r3,r5
 4009328:	dc000e15 	stw	r16,56(sp)
 400932c:	d809883a 	mov	r4,sp
 4009330:	880b883a 	mov	r5,r17
 4009334:	dc000904 	addi	r16,sp,36
 4009338:	d8c00115 	stw	r3,4(sp)
 400933c:	d8800015 	stw	r2,0(sp)
 4009340:	d9800215 	stw	r6,8(sp)
 4009344:	dfc01015 	stw	ra,64(sp)
 4009348:	d9c00315 	stw	r7,12(sp)
 400934c:	4009d000 	call	4009d00 <__unpack_d>
 4009350:	d9000204 	addi	r4,sp,8
 4009354:	800b883a 	mov	r5,r16
 4009358:	4009d000 	call	4009d00 <__unpack_d>
 400935c:	d8800417 	ldw	r2,16(sp)
 4009360:	00c00044 	movi	r3,1
 4009364:	01bfffc4 	movi	r6,-1
 4009368:	1880062e 	bgeu	r3,r2,4009384 <__gedf2+0x70>
 400936c:	d8800917 	ldw	r2,36(sp)
 4009370:	8809883a 	mov	r4,r17
 4009374:	800b883a 	mov	r5,r16
 4009378:	1880022e 	bgeu	r3,r2,4009384 <__gedf2+0x70>
 400937c:	4009e380 	call	4009e38 <__fpcmp_parts_d>
 4009380:	100d883a 	mov	r6,r2
 4009384:	3005883a 	mov	r2,r6
 4009388:	dfc01017 	ldw	ra,64(sp)
 400938c:	dc400f17 	ldw	r17,60(sp)
 4009390:	dc000e17 	ldw	r16,56(sp)
 4009394:	dec01104 	addi	sp,sp,68
 4009398:	f800283a 	ret

0400939c <__ltdf2>:
 400939c:	deffef04 	addi	sp,sp,-68
 40093a0:	dc400f15 	stw	r17,60(sp)
 40093a4:	dc400404 	addi	r17,sp,16
 40093a8:	2005883a 	mov	r2,r4
 40093ac:	2807883a 	mov	r3,r5
 40093b0:	dc000e15 	stw	r16,56(sp)
 40093b4:	d809883a 	mov	r4,sp
 40093b8:	880b883a 	mov	r5,r17
 40093bc:	dc000904 	addi	r16,sp,36
 40093c0:	d8c00115 	stw	r3,4(sp)
 40093c4:	d8800015 	stw	r2,0(sp)
 40093c8:	d9800215 	stw	r6,8(sp)
 40093cc:	dfc01015 	stw	ra,64(sp)
 40093d0:	d9c00315 	stw	r7,12(sp)
 40093d4:	4009d000 	call	4009d00 <__unpack_d>
 40093d8:	d9000204 	addi	r4,sp,8
 40093dc:	800b883a 	mov	r5,r16
 40093e0:	4009d000 	call	4009d00 <__unpack_d>
 40093e4:	d8800417 	ldw	r2,16(sp)
 40093e8:	00c00044 	movi	r3,1
 40093ec:	180d883a 	mov	r6,r3
 40093f0:	1880062e 	bgeu	r3,r2,400940c <__ltdf2+0x70>
 40093f4:	d8800917 	ldw	r2,36(sp)
 40093f8:	8809883a 	mov	r4,r17
 40093fc:	800b883a 	mov	r5,r16
 4009400:	1880022e 	bgeu	r3,r2,400940c <__ltdf2+0x70>
 4009404:	4009e380 	call	4009e38 <__fpcmp_parts_d>
 4009408:	100d883a 	mov	r6,r2
 400940c:	3005883a 	mov	r2,r6
 4009410:	dfc01017 	ldw	ra,64(sp)
 4009414:	dc400f17 	ldw	r17,60(sp)
 4009418:	dc000e17 	ldw	r16,56(sp)
 400941c:	dec01104 	addi	sp,sp,68
 4009420:	f800283a 	ret

04009424 <__floatsidf>:
 4009424:	2006d7fa 	srli	r3,r4,31
 4009428:	defff604 	addi	sp,sp,-40
 400942c:	008000c4 	movi	r2,3
 4009430:	dfc00915 	stw	ra,36(sp)
 4009434:	dcc00815 	stw	r19,32(sp)
 4009438:	dc800715 	stw	r18,28(sp)
 400943c:	dc400615 	stw	r17,24(sp)
 4009440:	dc000515 	stw	r16,20(sp)
 4009444:	d8800015 	stw	r2,0(sp)
 4009448:	d8c00115 	stw	r3,4(sp)
 400944c:	20000f1e 	bne	r4,zero,400948c <__floatsidf+0x68>
 4009450:	00800084 	movi	r2,2
 4009454:	d8800015 	stw	r2,0(sp)
 4009458:	d809883a 	mov	r4,sp
 400945c:	40099ec0 	call	40099ec <__pack_d>
 4009460:	1009883a 	mov	r4,r2
 4009464:	180b883a 	mov	r5,r3
 4009468:	2005883a 	mov	r2,r4
 400946c:	2807883a 	mov	r3,r5
 4009470:	dfc00917 	ldw	ra,36(sp)
 4009474:	dcc00817 	ldw	r19,32(sp)
 4009478:	dc800717 	ldw	r18,28(sp)
 400947c:	dc400617 	ldw	r17,24(sp)
 4009480:	dc000517 	ldw	r16,20(sp)
 4009484:	dec00a04 	addi	sp,sp,40
 4009488:	f800283a 	ret
 400948c:	00800f04 	movi	r2,60
 4009490:	1807003a 	cmpeq	r3,r3,zero
 4009494:	d8800215 	stw	r2,8(sp)
 4009498:	18001126 	beq	r3,zero,40094e0 <__floatsidf+0xbc>
 400949c:	0027883a 	mov	r19,zero
 40094a0:	2025883a 	mov	r18,r4
 40094a4:	d9000315 	stw	r4,12(sp)
 40094a8:	dcc00415 	stw	r19,16(sp)
 40094ac:	400996c0 	call	400996c <__clzsi2>
 40094b0:	11000744 	addi	r4,r2,29
 40094b4:	013fe80e 	bge	zero,r4,4009458 <__floatsidf+0x34>
 40094b8:	10bfff44 	addi	r2,r2,-3
 40094bc:	10000c16 	blt	r2,zero,40094f0 <__floatsidf+0xcc>
 40094c0:	90a2983a 	sll	r17,r18,r2
 40094c4:	0021883a 	mov	r16,zero
 40094c8:	d8800217 	ldw	r2,8(sp)
 40094cc:	dc400415 	stw	r17,16(sp)
 40094d0:	dc000315 	stw	r16,12(sp)
 40094d4:	1105c83a 	sub	r2,r2,r4
 40094d8:	d8800215 	stw	r2,8(sp)
 40094dc:	003fde06 	br	4009458 <__floatsidf+0x34>
 40094e0:	00a00034 	movhi	r2,32768
 40094e4:	20800a26 	beq	r4,r2,4009510 <__floatsidf+0xec>
 40094e8:	0109c83a 	sub	r4,zero,r4
 40094ec:	003feb06 	br	400949c <__floatsidf+0x78>
 40094f0:	9006d07a 	srli	r3,r18,1
 40094f4:	008007c4 	movi	r2,31
 40094f8:	1105c83a 	sub	r2,r2,r4
 40094fc:	1886d83a 	srl	r3,r3,r2
 4009500:	9922983a 	sll	r17,r19,r4
 4009504:	9120983a 	sll	r16,r18,r4
 4009508:	1c62b03a 	or	r17,r3,r17
 400950c:	003fee06 	br	40094c8 <__floatsidf+0xa4>
 4009510:	0009883a 	mov	r4,zero
 4009514:	01707834 	movhi	r5,49632
 4009518:	003fd306 	br	4009468 <__floatsidf+0x44>

0400951c <__fixdfsi>:
 400951c:	defff804 	addi	sp,sp,-32
 4009520:	2005883a 	mov	r2,r4
 4009524:	2807883a 	mov	r3,r5
 4009528:	d809883a 	mov	r4,sp
 400952c:	d9400204 	addi	r5,sp,8
 4009530:	d8c00115 	stw	r3,4(sp)
 4009534:	d8800015 	stw	r2,0(sp)
 4009538:	dfc00715 	stw	ra,28(sp)
 400953c:	4009d000 	call	4009d00 <__unpack_d>
 4009540:	d8c00217 	ldw	r3,8(sp)
 4009544:	00800084 	movi	r2,2
 4009548:	1880051e 	bne	r3,r2,4009560 <__fixdfsi+0x44>
 400954c:	0007883a 	mov	r3,zero
 4009550:	1805883a 	mov	r2,r3
 4009554:	dfc00717 	ldw	ra,28(sp)
 4009558:	dec00804 	addi	sp,sp,32
 400955c:	f800283a 	ret
 4009560:	00800044 	movi	r2,1
 4009564:	10fff92e 	bgeu	r2,r3,400954c <__fixdfsi+0x30>
 4009568:	00800104 	movi	r2,4
 400956c:	18800426 	beq	r3,r2,4009580 <__fixdfsi+0x64>
 4009570:	d8c00417 	ldw	r3,16(sp)
 4009574:	183ff516 	blt	r3,zero,400954c <__fixdfsi+0x30>
 4009578:	00800784 	movi	r2,30
 400957c:	10c0080e 	bge	r2,r3,40095a0 <__fixdfsi+0x84>
 4009580:	d8800317 	ldw	r2,12(sp)
 4009584:	1000121e 	bne	r2,zero,40095d0 <__fixdfsi+0xb4>
 4009588:	00e00034 	movhi	r3,32768
 400958c:	18ffffc4 	addi	r3,r3,-1
 4009590:	1805883a 	mov	r2,r3
 4009594:	dfc00717 	ldw	ra,28(sp)
 4009598:	dec00804 	addi	sp,sp,32
 400959c:	f800283a 	ret
 40095a0:	00800f04 	movi	r2,60
 40095a4:	10d1c83a 	sub	r8,r2,r3
 40095a8:	40bff804 	addi	r2,r8,-32
 40095ac:	d9800517 	ldw	r6,20(sp)
 40095b0:	d9c00617 	ldw	r7,24(sp)
 40095b4:	10000816 	blt	r2,zero,40095d8 <__fixdfsi+0xbc>
 40095b8:	3888d83a 	srl	r4,r7,r2
 40095bc:	d8800317 	ldw	r2,12(sp)
 40095c0:	2007883a 	mov	r3,r4
 40095c4:	103fe226 	beq	r2,zero,4009550 <__fixdfsi+0x34>
 40095c8:	0107c83a 	sub	r3,zero,r4
 40095cc:	003fe006 	br	4009550 <__fixdfsi+0x34>
 40095d0:	00e00034 	movhi	r3,32768
 40095d4:	003fde06 	br	4009550 <__fixdfsi+0x34>
 40095d8:	39c7883a 	add	r3,r7,r7
 40095dc:	008007c4 	movi	r2,31
 40095e0:	1205c83a 	sub	r2,r2,r8
 40095e4:	1886983a 	sll	r3,r3,r2
 40095e8:	3208d83a 	srl	r4,r6,r8
 40095ec:	1908b03a 	or	r4,r3,r4
 40095f0:	003ff206 	br	40095bc <__fixdfsi+0xa0>

040095f4 <__floatunsidf>:
 40095f4:	defff204 	addi	sp,sp,-56
 40095f8:	dfc00d15 	stw	ra,52(sp)
 40095fc:	ddc00c15 	stw	r23,48(sp)
 4009600:	dd800b15 	stw	r22,44(sp)
 4009604:	dd400a15 	stw	r21,40(sp)
 4009608:	dd000915 	stw	r20,36(sp)
 400960c:	dcc00815 	stw	r19,32(sp)
 4009610:	dc800715 	stw	r18,28(sp)
 4009614:	dc400615 	stw	r17,24(sp)
 4009618:	dc000515 	stw	r16,20(sp)
 400961c:	d8000115 	stw	zero,4(sp)
 4009620:	20000f1e 	bne	r4,zero,4009660 <__floatunsidf+0x6c>
 4009624:	00800084 	movi	r2,2
 4009628:	d8800015 	stw	r2,0(sp)
 400962c:	d809883a 	mov	r4,sp
 4009630:	40099ec0 	call	40099ec <__pack_d>
 4009634:	dfc00d17 	ldw	ra,52(sp)
 4009638:	ddc00c17 	ldw	r23,48(sp)
 400963c:	dd800b17 	ldw	r22,44(sp)
 4009640:	dd400a17 	ldw	r21,40(sp)
 4009644:	dd000917 	ldw	r20,36(sp)
 4009648:	dcc00817 	ldw	r19,32(sp)
 400964c:	dc800717 	ldw	r18,28(sp)
 4009650:	dc400617 	ldw	r17,24(sp)
 4009654:	dc000517 	ldw	r16,20(sp)
 4009658:	dec00e04 	addi	sp,sp,56
 400965c:	f800283a 	ret
 4009660:	008000c4 	movi	r2,3
 4009664:	00c00f04 	movi	r3,60
 4009668:	002f883a 	mov	r23,zero
 400966c:	202d883a 	mov	r22,r4
 4009670:	d8800015 	stw	r2,0(sp)
 4009674:	d8c00215 	stw	r3,8(sp)
 4009678:	d9000315 	stw	r4,12(sp)
 400967c:	ddc00415 	stw	r23,16(sp)
 4009680:	400996c0 	call	400996c <__clzsi2>
 4009684:	12400744 	addi	r9,r2,29
 4009688:	48000b16 	blt	r9,zero,40096b8 <__floatunsidf+0xc4>
 400968c:	483fe726 	beq	r9,zero,400962c <__floatunsidf+0x38>
 4009690:	10bfff44 	addi	r2,r2,-3
 4009694:	10002e16 	blt	r2,zero,4009750 <__floatunsidf+0x15c>
 4009698:	b0a2983a 	sll	r17,r22,r2
 400969c:	0021883a 	mov	r16,zero
 40096a0:	d8800217 	ldw	r2,8(sp)
 40096a4:	dc400415 	stw	r17,16(sp)
 40096a8:	dc000315 	stw	r16,12(sp)
 40096ac:	1245c83a 	sub	r2,r2,r9
 40096b0:	d8800215 	stw	r2,8(sp)
 40096b4:	003fdd06 	br	400962c <__floatunsidf+0x38>
 40096b8:	0255c83a 	sub	r10,zero,r9
 40096bc:	51bff804 	addi	r6,r10,-32
 40096c0:	30001b16 	blt	r6,zero,4009730 <__floatunsidf+0x13c>
 40096c4:	b9a8d83a 	srl	r20,r23,r6
 40096c8:	002b883a 	mov	r21,zero
 40096cc:	000f883a 	mov	r7,zero
 40096d0:	01000044 	movi	r4,1
 40096d4:	0011883a 	mov	r8,zero
 40096d8:	30002516 	blt	r6,zero,4009770 <__floatunsidf+0x17c>
 40096dc:	21a6983a 	sll	r19,r4,r6
 40096e0:	0025883a 	mov	r18,zero
 40096e4:	00bfffc4 	movi	r2,-1
 40096e8:	9089883a 	add	r4,r18,r2
 40096ec:	988b883a 	add	r5,r19,r2
 40096f0:	248d803a 	cmpltu	r6,r4,r18
 40096f4:	314b883a 	add	r5,r6,r5
 40096f8:	b104703a 	and	r2,r22,r4
 40096fc:	b946703a 	and	r3,r23,r5
 4009700:	10c4b03a 	or	r2,r2,r3
 4009704:	10000226 	beq	r2,zero,4009710 <__floatunsidf+0x11c>
 4009708:	01c00044 	movi	r7,1
 400970c:	0011883a 	mov	r8,zero
 4009710:	d9000217 	ldw	r4,8(sp)
 4009714:	a1c4b03a 	or	r2,r20,r7
 4009718:	aa06b03a 	or	r3,r21,r8
 400971c:	2249c83a 	sub	r4,r4,r9
 4009720:	d8c00415 	stw	r3,16(sp)
 4009724:	d9000215 	stw	r4,8(sp)
 4009728:	d8800315 	stw	r2,12(sp)
 400972c:	003fbf06 	br	400962c <__floatunsidf+0x38>
 4009730:	bdc7883a 	add	r3,r23,r23
 4009734:	008007c4 	movi	r2,31
 4009738:	1285c83a 	sub	r2,r2,r10
 400973c:	1886983a 	sll	r3,r3,r2
 4009740:	b2a8d83a 	srl	r20,r22,r10
 4009744:	baaad83a 	srl	r21,r23,r10
 4009748:	1d28b03a 	or	r20,r3,r20
 400974c:	003fdf06 	br	40096cc <__floatunsidf+0xd8>
 4009750:	b006d07a 	srli	r3,r22,1
 4009754:	008007c4 	movi	r2,31
 4009758:	1245c83a 	sub	r2,r2,r9
 400975c:	1886d83a 	srl	r3,r3,r2
 4009760:	ba62983a 	sll	r17,r23,r9
 4009764:	b260983a 	sll	r16,r22,r9
 4009768:	1c62b03a 	or	r17,r3,r17
 400976c:	003fcc06 	br	40096a0 <__floatunsidf+0xac>
 4009770:	2006d07a 	srli	r3,r4,1
 4009774:	008007c4 	movi	r2,31
 4009778:	1285c83a 	sub	r2,r2,r10
 400977c:	18a6d83a 	srl	r19,r3,r2
 4009780:	22a4983a 	sll	r18,r4,r10
 4009784:	003fd706 	br	40096e4 <__floatunsidf+0xf0>

04009788 <udivmodsi4>:
 4009788:	29001b2e 	bgeu	r5,r4,40097f8 <udivmodsi4+0x70>
 400978c:	28001a16 	blt	r5,zero,40097f8 <udivmodsi4+0x70>
 4009790:	00800044 	movi	r2,1
 4009794:	0007883a 	mov	r3,zero
 4009798:	01c007c4 	movi	r7,31
 400979c:	00000306 	br	40097ac <udivmodsi4+0x24>
 40097a0:	19c01326 	beq	r3,r7,40097f0 <udivmodsi4+0x68>
 40097a4:	18c00044 	addi	r3,r3,1
 40097a8:	28000416 	blt	r5,zero,40097bc <udivmodsi4+0x34>
 40097ac:	294b883a 	add	r5,r5,r5
 40097b0:	1085883a 	add	r2,r2,r2
 40097b4:	293ffa36 	bltu	r5,r4,40097a0 <udivmodsi4+0x18>
 40097b8:	10000d26 	beq	r2,zero,40097f0 <udivmodsi4+0x68>
 40097bc:	0007883a 	mov	r3,zero
 40097c0:	21400236 	bltu	r4,r5,40097cc <udivmodsi4+0x44>
 40097c4:	2149c83a 	sub	r4,r4,r5
 40097c8:	1886b03a 	or	r3,r3,r2
 40097cc:	1004d07a 	srli	r2,r2,1
 40097d0:	280ad07a 	srli	r5,r5,1
 40097d4:	103ffa1e 	bne	r2,zero,40097c0 <udivmodsi4+0x38>
 40097d8:	30000226 	beq	r6,zero,40097e4 <udivmodsi4+0x5c>
 40097dc:	2005883a 	mov	r2,r4
 40097e0:	f800283a 	ret
 40097e4:	1809883a 	mov	r4,r3
 40097e8:	2005883a 	mov	r2,r4
 40097ec:	f800283a 	ret
 40097f0:	0007883a 	mov	r3,zero
 40097f4:	003ff806 	br	40097d8 <udivmodsi4+0x50>
 40097f8:	00800044 	movi	r2,1
 40097fc:	0007883a 	mov	r3,zero
 4009800:	003fef06 	br	40097c0 <udivmodsi4+0x38>

04009804 <__divsi3>:
 4009804:	defffe04 	addi	sp,sp,-8
 4009808:	dc000015 	stw	r16,0(sp)
 400980c:	dfc00115 	stw	ra,4(sp)
 4009810:	0021883a 	mov	r16,zero
 4009814:	20000c16 	blt	r4,zero,4009848 <__divsi3+0x44>
 4009818:	000d883a 	mov	r6,zero
 400981c:	28000e16 	blt	r5,zero,4009858 <__divsi3+0x54>
 4009820:	40097880 	call	4009788 <udivmodsi4>
 4009824:	1007883a 	mov	r3,r2
 4009828:	8005003a 	cmpeq	r2,r16,zero
 400982c:	1000011e 	bne	r2,zero,4009834 <__divsi3+0x30>
 4009830:	00c7c83a 	sub	r3,zero,r3
 4009834:	1805883a 	mov	r2,r3
 4009838:	dfc00117 	ldw	ra,4(sp)
 400983c:	dc000017 	ldw	r16,0(sp)
 4009840:	dec00204 	addi	sp,sp,8
 4009844:	f800283a 	ret
 4009848:	0109c83a 	sub	r4,zero,r4
 400984c:	04000044 	movi	r16,1
 4009850:	000d883a 	mov	r6,zero
 4009854:	283ff20e 	bge	r5,zero,4009820 <__divsi3+0x1c>
 4009858:	014bc83a 	sub	r5,zero,r5
 400985c:	8021003a 	cmpeq	r16,r16,zero
 4009860:	003fef06 	br	4009820 <__divsi3+0x1c>

04009864 <__modsi3>:
 4009864:	deffff04 	addi	sp,sp,-4
 4009868:	dfc00015 	stw	ra,0(sp)
 400986c:	01800044 	movi	r6,1
 4009870:	2807883a 	mov	r3,r5
 4009874:	20000416 	blt	r4,zero,4009888 <__modsi3+0x24>
 4009878:	28000c16 	blt	r5,zero,40098ac <__modsi3+0x48>
 400987c:	dfc00017 	ldw	ra,0(sp)
 4009880:	dec00104 	addi	sp,sp,4
 4009884:	40097881 	jmpi	4009788 <udivmodsi4>
 4009888:	0109c83a 	sub	r4,zero,r4
 400988c:	28000b16 	blt	r5,zero,40098bc <__modsi3+0x58>
 4009890:	180b883a 	mov	r5,r3
 4009894:	01800044 	movi	r6,1
 4009898:	40097880 	call	4009788 <udivmodsi4>
 400989c:	0085c83a 	sub	r2,zero,r2
 40098a0:	dfc00017 	ldw	ra,0(sp)
 40098a4:	dec00104 	addi	sp,sp,4
 40098a8:	f800283a 	ret
 40098ac:	014bc83a 	sub	r5,zero,r5
 40098b0:	dfc00017 	ldw	ra,0(sp)
 40098b4:	dec00104 	addi	sp,sp,4
 40098b8:	40097881 	jmpi	4009788 <udivmodsi4>
 40098bc:	0147c83a 	sub	r3,zero,r5
 40098c0:	003ff306 	br	4009890 <__modsi3+0x2c>

040098c4 <__udivsi3>:
 40098c4:	000d883a 	mov	r6,zero
 40098c8:	40097881 	jmpi	4009788 <udivmodsi4>

040098cc <__umodsi3>:
 40098cc:	01800044 	movi	r6,1
 40098d0:	40097881 	jmpi	4009788 <udivmodsi4>

040098d4 <__muldi3>:
 40098d4:	2011883a 	mov	r8,r4
 40098d8:	427fffcc 	andi	r9,r8,65535
 40098dc:	4018d43a 	srli	r12,r8,16
 40098e0:	32bfffcc 	andi	r10,r6,65535
 40098e4:	3016d43a 	srli	r11,r6,16
 40098e8:	4a85383a 	mul	r2,r9,r10
 40098ec:	6295383a 	mul	r10,r12,r10
 40098f0:	4ad3383a 	mul	r9,r9,r11
 40098f4:	113fffcc 	andi	r4,r2,65535
 40098f8:	1004d43a 	srli	r2,r2,16
 40098fc:	4a93883a 	add	r9,r9,r10
 4009900:	3807883a 	mov	r3,r7
 4009904:	1245883a 	add	r2,r2,r9
 4009908:	280f883a 	mov	r7,r5
 400990c:	180b883a 	mov	r5,r3
 4009910:	1006943a 	slli	r3,r2,16
 4009914:	defffd04 	addi	sp,sp,-12
 4009918:	dc800215 	stw	r18,8(sp)
 400991c:	1907883a 	add	r3,r3,r4
 4009920:	dc400115 	stw	r17,4(sp)
 4009924:	dc000015 	stw	r16,0(sp)
 4009928:	4165383a 	mul	r18,r8,r5
 400992c:	31e3383a 	mul	r17,r6,r7
 4009930:	1012d43a 	srli	r9,r2,16
 4009934:	62d9383a 	mul	r12,r12,r11
 4009938:	181f883a 	mov	r15,r3
 400993c:	1280022e 	bgeu	r2,r10,4009948 <__muldi3+0x74>
 4009940:	00800074 	movhi	r2,1
 4009944:	6099883a 	add	r12,r12,r2
 4009948:	624d883a 	add	r6,r12,r9
 400994c:	9187883a 	add	r3,r18,r6
 4009950:	88c7883a 	add	r3,r17,r3
 4009954:	7805883a 	mov	r2,r15
 4009958:	dc800217 	ldw	r18,8(sp)
 400995c:	dc400117 	ldw	r17,4(sp)
 4009960:	dc000017 	ldw	r16,0(sp)
 4009964:	dec00304 	addi	sp,sp,12
 4009968:	f800283a 	ret

0400996c <__clzsi2>:
 400996c:	00bfffd4 	movui	r2,65535
 4009970:	11000e36 	bltu	r2,r4,40099ac <__clzsi2+0x40>
 4009974:	00803fc4 	movi	r2,255
 4009978:	01400204 	movi	r5,8
 400997c:	0007883a 	mov	r3,zero
 4009980:	11001036 	bltu	r2,r4,40099c4 <__clzsi2+0x58>
 4009984:	000b883a 	mov	r5,zero
 4009988:	20c6d83a 	srl	r3,r4,r3
 400998c:	00810074 	movhi	r2,1025
 4009990:	109b1e04 	addi	r2,r2,27768
 4009994:	1887883a 	add	r3,r3,r2
 4009998:	18800003 	ldbu	r2,0(r3)
 400999c:	00c00804 	movi	r3,32
 40099a0:	2885883a 	add	r2,r5,r2
 40099a4:	1885c83a 	sub	r2,r3,r2
 40099a8:	f800283a 	ret
 40099ac:	01400404 	movi	r5,16
 40099b0:	00804034 	movhi	r2,256
 40099b4:	10bfffc4 	addi	r2,r2,-1
 40099b8:	2807883a 	mov	r3,r5
 40099bc:	113ff22e 	bgeu	r2,r4,4009988 <__clzsi2+0x1c>
 40099c0:	01400604 	movi	r5,24
 40099c4:	2807883a 	mov	r3,r5
 40099c8:	20c6d83a 	srl	r3,r4,r3
 40099cc:	00810074 	movhi	r2,1025
 40099d0:	109b1e04 	addi	r2,r2,27768
 40099d4:	1887883a 	add	r3,r3,r2
 40099d8:	18800003 	ldbu	r2,0(r3)
 40099dc:	00c00804 	movi	r3,32
 40099e0:	2885883a 	add	r2,r5,r2
 40099e4:	1885c83a 	sub	r2,r3,r2
 40099e8:	f800283a 	ret

040099ec <__pack_d>:
 40099ec:	20c00017 	ldw	r3,0(r4)
 40099f0:	defffd04 	addi	sp,sp,-12
 40099f4:	dc000015 	stw	r16,0(sp)
 40099f8:	dc800215 	stw	r18,8(sp)
 40099fc:	dc400115 	stw	r17,4(sp)
 4009a00:	00800044 	movi	r2,1
 4009a04:	22000317 	ldw	r8,12(r4)
 4009a08:	001f883a 	mov	r15,zero
 4009a0c:	22400417 	ldw	r9,16(r4)
 4009a10:	24000117 	ldw	r16,4(r4)
 4009a14:	10c0552e 	bgeu	r2,r3,4009b6c <__pack_d+0x180>
 4009a18:	00800104 	movi	r2,4
 4009a1c:	18804f26 	beq	r3,r2,4009b5c <__pack_d+0x170>
 4009a20:	00800084 	movi	r2,2
 4009a24:	18800226 	beq	r3,r2,4009a30 <__pack_d+0x44>
 4009a28:	4244b03a 	or	r2,r8,r9
 4009a2c:	10001a1e 	bne	r2,zero,4009a98 <__pack_d+0xac>
 4009a30:	000d883a 	mov	r6,zero
 4009a34:	000f883a 	mov	r7,zero
 4009a38:	0011883a 	mov	r8,zero
 4009a3c:	00800434 	movhi	r2,16
 4009a40:	10bfffc4 	addi	r2,r2,-1
 4009a44:	301d883a 	mov	r14,r6
 4009a48:	3884703a 	and	r2,r7,r2
 4009a4c:	400a953a 	slli	r5,r8,20
 4009a50:	79bffc2c 	andhi	r6,r15,65520
 4009a54:	308cb03a 	or	r6,r6,r2
 4009a58:	00e00434 	movhi	r3,32784
 4009a5c:	18ffffc4 	addi	r3,r3,-1
 4009a60:	800497fa 	slli	r2,r16,31
 4009a64:	30c6703a 	and	r3,r6,r3
 4009a68:	1946b03a 	or	r3,r3,r5
 4009a6c:	01600034 	movhi	r5,32768
 4009a70:	297fffc4 	addi	r5,r5,-1
 4009a74:	194a703a 	and	r5,r3,r5
 4009a78:	288ab03a 	or	r5,r5,r2
 4009a7c:	2807883a 	mov	r3,r5
 4009a80:	7005883a 	mov	r2,r14
 4009a84:	dc800217 	ldw	r18,8(sp)
 4009a88:	dc400117 	ldw	r17,4(sp)
 4009a8c:	dc000017 	ldw	r16,0(sp)
 4009a90:	dec00304 	addi	sp,sp,12
 4009a94:	f800283a 	ret
 4009a98:	21000217 	ldw	r4,8(r4)
 4009a9c:	00bf0084 	movi	r2,-1022
 4009aa0:	20803f16 	blt	r4,r2,4009ba0 <__pack_d+0x1b4>
 4009aa4:	0080ffc4 	movi	r2,1023
 4009aa8:	11002c16 	blt	r2,r4,4009b5c <__pack_d+0x170>
 4009aac:	00803fc4 	movi	r2,255
 4009ab0:	408c703a 	and	r6,r8,r2
 4009ab4:	00802004 	movi	r2,128
 4009ab8:	0007883a 	mov	r3,zero
 4009abc:	000f883a 	mov	r7,zero
 4009ac0:	2280ffc4 	addi	r10,r4,1023
 4009ac4:	30801e26 	beq	r6,r2,4009b40 <__pack_d+0x154>
 4009ac8:	00801fc4 	movi	r2,127
 4009acc:	4089883a 	add	r4,r8,r2
 4009ad0:	220d803a 	cmpltu	r6,r4,r8
 4009ad4:	324d883a 	add	r6,r6,r9
 4009ad8:	2011883a 	mov	r8,r4
 4009adc:	3013883a 	mov	r9,r6
 4009ae0:	00880034 	movhi	r2,8192
 4009ae4:	10bfffc4 	addi	r2,r2,-1
 4009ae8:	12400d36 	bltu	r2,r9,4009b20 <__pack_d+0x134>
 4009aec:	4804963a 	slli	r2,r9,24
 4009af0:	400cd23a 	srli	r6,r8,8
 4009af4:	480ed23a 	srli	r7,r9,8
 4009af8:	013fffc4 	movi	r4,-1
 4009afc:	118cb03a 	or	r6,r2,r6
 4009b00:	01400434 	movhi	r5,16
 4009b04:	297fffc4 	addi	r5,r5,-1
 4009b08:	3104703a 	and	r2,r6,r4
 4009b0c:	3946703a 	and	r3,r7,r5
 4009b10:	5201ffcc 	andi	r8,r10,2047
 4009b14:	100d883a 	mov	r6,r2
 4009b18:	180f883a 	mov	r7,r3
 4009b1c:	003fc706 	br	4009a3c <__pack_d+0x50>
 4009b20:	480897fa 	slli	r4,r9,31
 4009b24:	4004d07a 	srli	r2,r8,1
 4009b28:	4806d07a 	srli	r3,r9,1
 4009b2c:	52800044 	addi	r10,r10,1
 4009b30:	2084b03a 	or	r2,r4,r2
 4009b34:	1011883a 	mov	r8,r2
 4009b38:	1813883a 	mov	r9,r3
 4009b3c:	003feb06 	br	4009aec <__pack_d+0x100>
 4009b40:	383fe11e 	bne	r7,zero,4009ac8 <__pack_d+0xdc>
 4009b44:	01004004 	movi	r4,256
 4009b48:	4104703a 	and	r2,r8,r4
 4009b4c:	10c4b03a 	or	r2,r2,r3
 4009b50:	103fe326 	beq	r2,zero,4009ae0 <__pack_d+0xf4>
 4009b54:	3005883a 	mov	r2,r6
 4009b58:	003fdc06 	br	4009acc <__pack_d+0xe0>
 4009b5c:	000d883a 	mov	r6,zero
 4009b60:	000f883a 	mov	r7,zero
 4009b64:	0201ffc4 	movi	r8,2047
 4009b68:	003fb406 	br	4009a3c <__pack_d+0x50>
 4009b6c:	0005883a 	mov	r2,zero
 4009b70:	00c00234 	movhi	r3,8
 4009b74:	408cb03a 	or	r6,r8,r2
 4009b78:	48ceb03a 	or	r7,r9,r3
 4009b7c:	013fffc4 	movi	r4,-1
 4009b80:	01400434 	movhi	r5,16
 4009b84:	297fffc4 	addi	r5,r5,-1
 4009b88:	3104703a 	and	r2,r6,r4
 4009b8c:	3946703a 	and	r3,r7,r5
 4009b90:	100d883a 	mov	r6,r2
 4009b94:	180f883a 	mov	r7,r3
 4009b98:	0201ffc4 	movi	r8,2047
 4009b9c:	003fa706 	br	4009a3c <__pack_d+0x50>
 4009ba0:	1109c83a 	sub	r4,r2,r4
 4009ba4:	00800e04 	movi	r2,56
 4009ba8:	11004316 	blt	r2,r4,4009cb8 <__pack_d+0x2cc>
 4009bac:	21fff804 	addi	r7,r4,-32
 4009bb0:	38004516 	blt	r7,zero,4009cc8 <__pack_d+0x2dc>
 4009bb4:	49d8d83a 	srl	r12,r9,r7
 4009bb8:	001b883a 	mov	r13,zero
 4009bbc:	0023883a 	mov	r17,zero
 4009bc0:	01400044 	movi	r5,1
 4009bc4:	0025883a 	mov	r18,zero
 4009bc8:	38004716 	blt	r7,zero,4009ce8 <__pack_d+0x2fc>
 4009bcc:	29d6983a 	sll	r11,r5,r7
 4009bd0:	0015883a 	mov	r10,zero
 4009bd4:	00bfffc4 	movi	r2,-1
 4009bd8:	5089883a 	add	r4,r10,r2
 4009bdc:	588b883a 	add	r5,r11,r2
 4009be0:	228d803a 	cmpltu	r6,r4,r10
 4009be4:	314b883a 	add	r5,r6,r5
 4009be8:	4104703a 	and	r2,r8,r4
 4009bec:	4946703a 	and	r3,r9,r5
 4009bf0:	10c4b03a 	or	r2,r2,r3
 4009bf4:	10000226 	beq	r2,zero,4009c00 <__pack_d+0x214>
 4009bf8:	04400044 	movi	r17,1
 4009bfc:	0025883a 	mov	r18,zero
 4009c00:	00803fc4 	movi	r2,255
 4009c04:	644eb03a 	or	r7,r12,r17
 4009c08:	3892703a 	and	r9,r7,r2
 4009c0c:	00802004 	movi	r2,128
 4009c10:	6c90b03a 	or	r8,r13,r18
 4009c14:	0015883a 	mov	r10,zero
 4009c18:	48801626 	beq	r9,r2,4009c74 <__pack_d+0x288>
 4009c1c:	01001fc4 	movi	r4,127
 4009c20:	3905883a 	add	r2,r7,r4
 4009c24:	11cd803a 	cmpltu	r6,r2,r7
 4009c28:	320d883a 	add	r6,r6,r8
 4009c2c:	100f883a 	mov	r7,r2
 4009c30:	00840034 	movhi	r2,4096
 4009c34:	10bfffc4 	addi	r2,r2,-1
 4009c38:	3011883a 	mov	r8,r6
 4009c3c:	0007883a 	mov	r3,zero
 4009c40:	11801b36 	bltu	r2,r6,4009cb0 <__pack_d+0x2c4>
 4009c44:	4004963a 	slli	r2,r8,24
 4009c48:	3808d23a 	srli	r4,r7,8
 4009c4c:	400ad23a 	srli	r5,r8,8
 4009c50:	1813883a 	mov	r9,r3
 4009c54:	1108b03a 	or	r4,r2,r4
 4009c58:	00bfffc4 	movi	r2,-1
 4009c5c:	00c00434 	movhi	r3,16
 4009c60:	18ffffc4 	addi	r3,r3,-1
 4009c64:	208c703a 	and	r6,r4,r2
 4009c68:	28ce703a 	and	r7,r5,r3
 4009c6c:	4a01ffcc 	andi	r8,r9,2047
 4009c70:	003f7206 	br	4009a3c <__pack_d+0x50>
 4009c74:	503fe91e 	bne	r10,zero,4009c1c <__pack_d+0x230>
 4009c78:	01004004 	movi	r4,256
 4009c7c:	3904703a 	and	r2,r7,r4
 4009c80:	0007883a 	mov	r3,zero
 4009c84:	10c4b03a 	or	r2,r2,r3
 4009c88:	10000626 	beq	r2,zero,4009ca4 <__pack_d+0x2b8>
 4009c8c:	3a45883a 	add	r2,r7,r9
 4009c90:	11cd803a 	cmpltu	r6,r2,r7
 4009c94:	320d883a 	add	r6,r6,r8
 4009c98:	100f883a 	mov	r7,r2
 4009c9c:	3011883a 	mov	r8,r6
 4009ca0:	0007883a 	mov	r3,zero
 4009ca4:	00840034 	movhi	r2,4096
 4009ca8:	10bfffc4 	addi	r2,r2,-1
 4009cac:	123fe52e 	bgeu	r2,r8,4009c44 <__pack_d+0x258>
 4009cb0:	00c00044 	movi	r3,1
 4009cb4:	003fe306 	br	4009c44 <__pack_d+0x258>
 4009cb8:	0009883a 	mov	r4,zero
 4009cbc:	0013883a 	mov	r9,zero
 4009cc0:	000b883a 	mov	r5,zero
 4009cc4:	003fe406 	br	4009c58 <__pack_d+0x26c>
 4009cc8:	4a47883a 	add	r3,r9,r9
 4009ccc:	008007c4 	movi	r2,31
 4009cd0:	1105c83a 	sub	r2,r2,r4
 4009cd4:	1886983a 	sll	r3,r3,r2
 4009cd8:	4118d83a 	srl	r12,r8,r4
 4009cdc:	491ad83a 	srl	r13,r9,r4
 4009ce0:	1b18b03a 	or	r12,r3,r12
 4009ce4:	003fb506 	br	4009bbc <__pack_d+0x1d0>
 4009ce8:	2806d07a 	srli	r3,r5,1
 4009cec:	008007c4 	movi	r2,31
 4009cf0:	1105c83a 	sub	r2,r2,r4
 4009cf4:	1896d83a 	srl	r11,r3,r2
 4009cf8:	2914983a 	sll	r10,r5,r4
 4009cfc:	003fb506 	br	4009bd4 <__pack_d+0x1e8>

04009d00 <__unpack_d>:
 4009d00:	20c00117 	ldw	r3,4(r4)
 4009d04:	22400017 	ldw	r9,0(r4)
 4009d08:	00800434 	movhi	r2,16
 4009d0c:	10bfffc4 	addi	r2,r2,-1
 4009d10:	1808d53a 	srli	r4,r3,20
 4009d14:	180cd7fa 	srli	r6,r3,31
 4009d18:	1894703a 	and	r10,r3,r2
 4009d1c:	2201ffcc 	andi	r8,r4,2047
 4009d20:	281b883a 	mov	r13,r5
 4009d24:	4817883a 	mov	r11,r9
 4009d28:	29800115 	stw	r6,4(r5)
 4009d2c:	5019883a 	mov	r12,r10
 4009d30:	40001e1e 	bne	r8,zero,4009dac <__unpack_d+0xac>
 4009d34:	4a84b03a 	or	r2,r9,r10
 4009d38:	10001926 	beq	r2,zero,4009da0 <__unpack_d+0xa0>
 4009d3c:	4804d63a 	srli	r2,r9,24
 4009d40:	500c923a 	slli	r6,r10,8
 4009d44:	013f0084 	movi	r4,-1022
 4009d48:	00c40034 	movhi	r3,4096
 4009d4c:	18ffffc4 	addi	r3,r3,-1
 4009d50:	118cb03a 	or	r6,r2,r6
 4009d54:	008000c4 	movi	r2,3
 4009d58:	480a923a 	slli	r5,r9,8
 4009d5c:	68800015 	stw	r2,0(r13)
 4009d60:	69000215 	stw	r4,8(r13)
 4009d64:	19800b36 	bltu	r3,r6,4009d94 <__unpack_d+0x94>
 4009d68:	200f883a 	mov	r7,r4
 4009d6c:	1811883a 	mov	r8,r3
 4009d70:	2945883a 	add	r2,r5,r5
 4009d74:	1149803a 	cmpltu	r4,r2,r5
 4009d78:	3187883a 	add	r3,r6,r6
 4009d7c:	20c9883a 	add	r4,r4,r3
 4009d80:	100b883a 	mov	r5,r2
 4009d84:	200d883a 	mov	r6,r4
 4009d88:	39ffffc4 	addi	r7,r7,-1
 4009d8c:	413ff82e 	bgeu	r8,r4,4009d70 <__unpack_d+0x70>
 4009d90:	69c00215 	stw	r7,8(r13)
 4009d94:	69800415 	stw	r6,16(r13)
 4009d98:	69400315 	stw	r5,12(r13)
 4009d9c:	f800283a 	ret
 4009da0:	00800084 	movi	r2,2
 4009da4:	28800015 	stw	r2,0(r5)
 4009da8:	f800283a 	ret
 4009dac:	0081ffc4 	movi	r2,2047
 4009db0:	40800f26 	beq	r8,r2,4009df0 <__unpack_d+0xf0>
 4009db4:	480cd63a 	srli	r6,r9,24
 4009db8:	5006923a 	slli	r3,r10,8
 4009dbc:	4804923a 	slli	r2,r9,8
 4009dc0:	0009883a 	mov	r4,zero
 4009dc4:	30c6b03a 	or	r3,r6,r3
 4009dc8:	01440034 	movhi	r5,4096
 4009dcc:	110cb03a 	or	r6,r2,r4
 4009dd0:	423f0044 	addi	r8,r8,-1023
 4009dd4:	194eb03a 	or	r7,r3,r5
 4009dd8:	008000c4 	movi	r2,3
 4009ddc:	69c00415 	stw	r7,16(r13)
 4009de0:	6a000215 	stw	r8,8(r13)
 4009de4:	68800015 	stw	r2,0(r13)
 4009de8:	69800315 	stw	r6,12(r13)
 4009dec:	f800283a 	ret
 4009df0:	4a84b03a 	or	r2,r9,r10
 4009df4:	1000031e 	bne	r2,zero,4009e04 <__unpack_d+0x104>
 4009df8:	00800104 	movi	r2,4
 4009dfc:	28800015 	stw	r2,0(r5)
 4009e00:	f800283a 	ret
 4009e04:	0009883a 	mov	r4,zero
 4009e08:	01400234 	movhi	r5,8
 4009e0c:	4904703a 	and	r2,r9,r4
 4009e10:	5146703a 	and	r3,r10,r5
 4009e14:	10c4b03a 	or	r2,r2,r3
 4009e18:	10000526 	beq	r2,zero,4009e30 <__unpack_d+0x130>
 4009e1c:	00800044 	movi	r2,1
 4009e20:	68800015 	stw	r2,0(r13)
 4009e24:	6b000415 	stw	r12,16(r13)
 4009e28:	6ac00315 	stw	r11,12(r13)
 4009e2c:	f800283a 	ret
 4009e30:	68000015 	stw	zero,0(r13)
 4009e34:	003ffb06 	br	4009e24 <__unpack_d+0x124>

04009e38 <__fpcmp_parts_d>:
 4009e38:	21800017 	ldw	r6,0(r4)
 4009e3c:	00c00044 	movi	r3,1
 4009e40:	19800a2e 	bgeu	r3,r6,4009e6c <__fpcmp_parts_d+0x34>
 4009e44:	28800017 	ldw	r2,0(r5)
 4009e48:	1880082e 	bgeu	r3,r2,4009e6c <__fpcmp_parts_d+0x34>
 4009e4c:	00c00104 	movi	r3,4
 4009e50:	30c02626 	beq	r6,r3,4009eec <__fpcmp_parts_d+0xb4>
 4009e54:	10c02226 	beq	r2,r3,4009ee0 <__fpcmp_parts_d+0xa8>
 4009e58:	00c00084 	movi	r3,2
 4009e5c:	30c00526 	beq	r6,r3,4009e74 <__fpcmp_parts_d+0x3c>
 4009e60:	10c0071e 	bne	r2,r3,4009e80 <__fpcmp_parts_d+0x48>
 4009e64:	20800117 	ldw	r2,4(r4)
 4009e68:	1000091e 	bne	r2,zero,4009e90 <__fpcmp_parts_d+0x58>
 4009e6c:	00800044 	movi	r2,1
 4009e70:	f800283a 	ret
 4009e74:	10c01a1e 	bne	r2,r3,4009ee0 <__fpcmp_parts_d+0xa8>
 4009e78:	0005883a 	mov	r2,zero
 4009e7c:	f800283a 	ret
 4009e80:	22000117 	ldw	r8,4(r4)
 4009e84:	28800117 	ldw	r2,4(r5)
 4009e88:	40800326 	beq	r8,r2,4009e98 <__fpcmp_parts_d+0x60>
 4009e8c:	403ff726 	beq	r8,zero,4009e6c <__fpcmp_parts_d+0x34>
 4009e90:	00bfffc4 	movi	r2,-1
 4009e94:	f800283a 	ret
 4009e98:	20c00217 	ldw	r3,8(r4)
 4009e9c:	28800217 	ldw	r2,8(r5)
 4009ea0:	10fffa16 	blt	r2,r3,4009e8c <__fpcmp_parts_d+0x54>
 4009ea4:	18800916 	blt	r3,r2,4009ecc <__fpcmp_parts_d+0x94>
 4009ea8:	21c00417 	ldw	r7,16(r4)
 4009eac:	28c00417 	ldw	r3,16(r5)
 4009eb0:	21800317 	ldw	r6,12(r4)
 4009eb4:	28800317 	ldw	r2,12(r5)
 4009eb8:	19fff436 	bltu	r3,r7,4009e8c <__fpcmp_parts_d+0x54>
 4009ebc:	38c00526 	beq	r7,r3,4009ed4 <__fpcmp_parts_d+0x9c>
 4009ec0:	38c00236 	bltu	r7,r3,4009ecc <__fpcmp_parts_d+0x94>
 4009ec4:	19ffec1e 	bne	r3,r7,4009e78 <__fpcmp_parts_d+0x40>
 4009ec8:	30bfeb2e 	bgeu	r6,r2,4009e78 <__fpcmp_parts_d+0x40>
 4009ecc:	403fe71e 	bne	r8,zero,4009e6c <__fpcmp_parts_d+0x34>
 4009ed0:	003fef06 	br	4009e90 <__fpcmp_parts_d+0x58>
 4009ed4:	11bffa2e 	bgeu	r2,r6,4009ec0 <__fpcmp_parts_d+0x88>
 4009ed8:	403fe426 	beq	r8,zero,4009e6c <__fpcmp_parts_d+0x34>
 4009edc:	003fec06 	br	4009e90 <__fpcmp_parts_d+0x58>
 4009ee0:	28800117 	ldw	r2,4(r5)
 4009ee4:	103fe11e 	bne	r2,zero,4009e6c <__fpcmp_parts_d+0x34>
 4009ee8:	003fe906 	br	4009e90 <__fpcmp_parts_d+0x58>
 4009eec:	11bfdd1e 	bne	r2,r6,4009e64 <__fpcmp_parts_d+0x2c>
 4009ef0:	28c00117 	ldw	r3,4(r5)
 4009ef4:	20800117 	ldw	r2,4(r4)
 4009ef8:	1885c83a 	sub	r2,r3,r2
 4009efc:	f800283a 	ret

04009f00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4009f00:	defff804 	addi	sp,sp,-32
 4009f04:	dfc00715 	stw	ra,28(sp)
 4009f08:	df000615 	stw	fp,24(sp)
 4009f0c:	df000604 	addi	fp,sp,24
 4009f10:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4009f14:	e0bffc17 	ldw	r2,-16(fp)
 4009f18:	1004803a 	cmplt	r2,r2,zero
 4009f1c:	1000081e 	bne	r2,zero,4009f40 <close+0x40>
 4009f20:	e0bffc17 	ldw	r2,-16(fp)
 4009f24:	10800324 	muli	r2,r2,12
 4009f28:	1007883a 	mov	r3,r2
 4009f2c:	00810074 	movhi	r2,1025
 4009f30:	109dc404 	addi	r2,r2,30480
 4009f34:	1887883a 	add	r3,r3,r2
 4009f38:	e0ffff15 	stw	r3,-4(fp)
 4009f3c:	00000106 	br	4009f44 <close+0x44>
 4009f40:	e03fff15 	stw	zero,-4(fp)
 4009f44:	e0bfff17 	ldw	r2,-4(fp)
 4009f48:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4009f4c:	e0bffb17 	ldw	r2,-20(fp)
 4009f50:	1005003a 	cmpeq	r2,r2,zero
 4009f54:	10001d1e 	bne	r2,zero,4009fcc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4009f58:	e0bffb17 	ldw	r2,-20(fp)
 4009f5c:	10800017 	ldw	r2,0(r2)
 4009f60:	10800417 	ldw	r2,16(r2)
 4009f64:	1005003a 	cmpeq	r2,r2,zero
 4009f68:	1000071e 	bne	r2,zero,4009f88 <close+0x88>
 4009f6c:	e0bffb17 	ldw	r2,-20(fp)
 4009f70:	10800017 	ldw	r2,0(r2)
 4009f74:	10800417 	ldw	r2,16(r2)
 4009f78:	e13ffb17 	ldw	r4,-20(fp)
 4009f7c:	103ee83a 	callr	r2
 4009f80:	e0bffe15 	stw	r2,-8(fp)
 4009f84:	00000106 	br	4009f8c <close+0x8c>
 4009f88:	e03ffe15 	stw	zero,-8(fp)
 4009f8c:	e0bffe17 	ldw	r2,-8(fp)
 4009f90:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4009f94:	e13ffc17 	ldw	r4,-16(fp)
 4009f98:	400a6740 	call	400a674 <alt_release_fd>
    if (rval < 0)
 4009f9c:	e0bffa17 	ldw	r2,-24(fp)
 4009fa0:	1004403a 	cmpge	r2,r2,zero
 4009fa4:	1000071e 	bne	r2,zero,4009fc4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4009fa8:	4009ffc0 	call	4009ffc <alt_get_errno>
 4009fac:	e0fffa17 	ldw	r3,-24(fp)
 4009fb0:	00c7c83a 	sub	r3,zero,r3
 4009fb4:	10c00015 	stw	r3,0(r2)
      return -1;
 4009fb8:	00bfffc4 	movi	r2,-1
 4009fbc:	e0bffd15 	stw	r2,-12(fp)
 4009fc0:	00000806 	br	4009fe4 <close+0xe4>
    }
    return 0;
 4009fc4:	e03ffd15 	stw	zero,-12(fp)
 4009fc8:	00000606 	br	4009fe4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009fcc:	4009ffc0 	call	4009ffc <alt_get_errno>
 4009fd0:	1007883a 	mov	r3,r2
 4009fd4:	00801444 	movi	r2,81
 4009fd8:	18800015 	stw	r2,0(r3)
    return -1;
 4009fdc:	00bfffc4 	movi	r2,-1
 4009fe0:	e0bffd15 	stw	r2,-12(fp)
 4009fe4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4009fe8:	e037883a 	mov	sp,fp
 4009fec:	dfc00117 	ldw	ra,4(sp)
 4009ff0:	df000017 	ldw	fp,0(sp)
 4009ff4:	dec00204 	addi	sp,sp,8
 4009ff8:	f800283a 	ret

04009ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009ffc:	defffd04 	addi	sp,sp,-12
 400a000:	dfc00215 	stw	ra,8(sp)
 400a004:	df000115 	stw	fp,4(sp)
 400a008:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a00c:	008100b4 	movhi	r2,1026
 400a010:	10a27e04 	addi	r2,r2,-30216
 400a014:	10800017 	ldw	r2,0(r2)
 400a018:	1005003a 	cmpeq	r2,r2,zero
 400a01c:	1000061e 	bne	r2,zero,400a038 <alt_get_errno+0x3c>
 400a020:	008100b4 	movhi	r2,1026
 400a024:	10a27e04 	addi	r2,r2,-30216
 400a028:	10800017 	ldw	r2,0(r2)
 400a02c:	103ee83a 	callr	r2
 400a030:	e0bfff15 	stw	r2,-4(fp)
 400a034:	00000306 	br	400a044 <alt_get_errno+0x48>
 400a038:	008100b4 	movhi	r2,1026
 400a03c:	10a2ae04 	addi	r2,r2,-30024
 400a040:	e0bfff15 	stw	r2,-4(fp)
 400a044:	e0bfff17 	ldw	r2,-4(fp)
}
 400a048:	e037883a 	mov	sp,fp
 400a04c:	dfc00117 	ldw	ra,4(sp)
 400a050:	df000017 	ldw	fp,0(sp)
 400a054:	dec00204 	addi	sp,sp,8
 400a058:	f800283a 	ret

0400a05c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400a05c:	defffc04 	addi	sp,sp,-16
 400a060:	df000315 	stw	fp,12(sp)
 400a064:	df000304 	addi	fp,sp,12
 400a068:	e13ffd15 	stw	r4,-12(fp)
 400a06c:	e17ffe15 	stw	r5,-8(fp)
 400a070:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400a074:	e0bfff17 	ldw	r2,-4(fp)
}
 400a078:	e037883a 	mov	sp,fp
 400a07c:	df000017 	ldw	fp,0(sp)
 400a080:	dec00104 	addi	sp,sp,4
 400a084:	f800283a 	ret

0400a088 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400a088:	defff904 	addi	sp,sp,-28
 400a08c:	dfc00615 	stw	ra,24(sp)
 400a090:	df000515 	stw	fp,20(sp)
 400a094:	df000504 	addi	fp,sp,20
 400a098:	e13ffc15 	stw	r4,-16(fp)
 400a09c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a0a0:	e0bffc17 	ldw	r2,-16(fp)
 400a0a4:	1004803a 	cmplt	r2,r2,zero
 400a0a8:	1000081e 	bne	r2,zero,400a0cc <fstat+0x44>
 400a0ac:	e0bffc17 	ldw	r2,-16(fp)
 400a0b0:	10800324 	muli	r2,r2,12
 400a0b4:	1007883a 	mov	r3,r2
 400a0b8:	00810074 	movhi	r2,1025
 400a0bc:	109dc404 	addi	r2,r2,30480
 400a0c0:	1887883a 	add	r3,r3,r2
 400a0c4:	e0ffff15 	stw	r3,-4(fp)
 400a0c8:	00000106 	br	400a0d0 <fstat+0x48>
 400a0cc:	e03fff15 	stw	zero,-4(fp)
 400a0d0:	e0bfff17 	ldw	r2,-4(fp)
 400a0d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a0d8:	e0bffb17 	ldw	r2,-20(fp)
 400a0dc:	1005003a 	cmpeq	r2,r2,zero
 400a0e0:	1000121e 	bne	r2,zero,400a12c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400a0e4:	e0bffb17 	ldw	r2,-20(fp)
 400a0e8:	10800017 	ldw	r2,0(r2)
 400a0ec:	10800817 	ldw	r2,32(r2)
 400a0f0:	1005003a 	cmpeq	r2,r2,zero
 400a0f4:	1000081e 	bne	r2,zero,400a118 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 400a0f8:	e0bffb17 	ldw	r2,-20(fp)
 400a0fc:	10800017 	ldw	r2,0(r2)
 400a100:	10800817 	ldw	r2,32(r2)
 400a104:	e13ffb17 	ldw	r4,-20(fp)
 400a108:	e17ffd17 	ldw	r5,-12(fp)
 400a10c:	103ee83a 	callr	r2
 400a110:	e0bffe15 	stw	r2,-8(fp)
 400a114:	00000b06 	br	400a144 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400a118:	e0fffd17 	ldw	r3,-12(fp)
 400a11c:	00880004 	movi	r2,8192
 400a120:	18800115 	stw	r2,4(r3)
      return 0;
 400a124:	e03ffe15 	stw	zero,-8(fp)
 400a128:	00000606 	br	400a144 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a12c:	400a15c0 	call	400a15c <alt_get_errno>
 400a130:	1007883a 	mov	r3,r2
 400a134:	00801444 	movi	r2,81
 400a138:	18800015 	stw	r2,0(r3)
    return -1;
 400a13c:	00bfffc4 	movi	r2,-1
 400a140:	e0bffe15 	stw	r2,-8(fp)
 400a144:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400a148:	e037883a 	mov	sp,fp
 400a14c:	dfc00117 	ldw	ra,4(sp)
 400a150:	df000017 	ldw	fp,0(sp)
 400a154:	dec00204 	addi	sp,sp,8
 400a158:	f800283a 	ret

0400a15c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a15c:	defffd04 	addi	sp,sp,-12
 400a160:	dfc00215 	stw	ra,8(sp)
 400a164:	df000115 	stw	fp,4(sp)
 400a168:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a16c:	008100b4 	movhi	r2,1026
 400a170:	10a27e04 	addi	r2,r2,-30216
 400a174:	10800017 	ldw	r2,0(r2)
 400a178:	1005003a 	cmpeq	r2,r2,zero
 400a17c:	1000061e 	bne	r2,zero,400a198 <alt_get_errno+0x3c>
 400a180:	008100b4 	movhi	r2,1026
 400a184:	10a27e04 	addi	r2,r2,-30216
 400a188:	10800017 	ldw	r2,0(r2)
 400a18c:	103ee83a 	callr	r2
 400a190:	e0bfff15 	stw	r2,-4(fp)
 400a194:	00000306 	br	400a1a4 <alt_get_errno+0x48>
 400a198:	008100b4 	movhi	r2,1026
 400a19c:	10a2ae04 	addi	r2,r2,-30024
 400a1a0:	e0bfff15 	stw	r2,-4(fp)
 400a1a4:	e0bfff17 	ldw	r2,-4(fp)
}
 400a1a8:	e037883a 	mov	sp,fp
 400a1ac:	dfc00117 	ldw	ra,4(sp)
 400a1b0:	df000017 	ldw	fp,0(sp)
 400a1b4:	dec00204 	addi	sp,sp,8
 400a1b8:	f800283a 	ret

0400a1bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400a1bc:	deffeb04 	addi	sp,sp,-84
 400a1c0:	dfc01415 	stw	ra,80(sp)
 400a1c4:	df001315 	stw	fp,76(sp)
 400a1c8:	df001304 	addi	fp,sp,76
 400a1cc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a1d0:	e0bffd17 	ldw	r2,-12(fp)
 400a1d4:	1004803a 	cmplt	r2,r2,zero
 400a1d8:	1000081e 	bne	r2,zero,400a1fc <isatty+0x40>
 400a1dc:	e0bffd17 	ldw	r2,-12(fp)
 400a1e0:	10800324 	muli	r2,r2,12
 400a1e4:	1007883a 	mov	r3,r2
 400a1e8:	00810074 	movhi	r2,1025
 400a1ec:	109dc404 	addi	r2,r2,30480
 400a1f0:	1887883a 	add	r3,r3,r2
 400a1f4:	e0ffff15 	stw	r3,-4(fp)
 400a1f8:	00000106 	br	400a200 <isatty+0x44>
 400a1fc:	e03fff15 	stw	zero,-4(fp)
 400a200:	e0bfff17 	ldw	r2,-4(fp)
 400a204:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 400a208:	e0bfed17 	ldw	r2,-76(fp)
 400a20c:	1005003a 	cmpeq	r2,r2,zero
 400a210:	10000f1e 	bne	r2,zero,400a250 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400a214:	e0bfed17 	ldw	r2,-76(fp)
 400a218:	10800017 	ldw	r2,0(r2)
 400a21c:	10800817 	ldw	r2,32(r2)
 400a220:	1004c03a 	cmpne	r2,r2,zero
 400a224:	1000031e 	bne	r2,zero,400a234 <isatty+0x78>
    {
      return 1;
 400a228:	00800044 	movi	r2,1
 400a22c:	e0bffe15 	stw	r2,-8(fp)
 400a230:	00000c06 	br	400a264 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400a234:	e17fee04 	addi	r5,fp,-72
 400a238:	e13ffd17 	ldw	r4,-12(fp)
 400a23c:	400a0880 	call	400a088 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400a240:	e0bfef17 	ldw	r2,-68(fp)
 400a244:	10880020 	cmpeqi	r2,r2,8192
 400a248:	e0bffe15 	stw	r2,-8(fp)
 400a24c:	00000506 	br	400a264 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a250:	400a27c0 	call	400a27c <alt_get_errno>
 400a254:	1007883a 	mov	r3,r2
 400a258:	00801444 	movi	r2,81
 400a25c:	18800015 	stw	r2,0(r3)
    return 0;
 400a260:	e03ffe15 	stw	zero,-8(fp)
 400a264:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400a268:	e037883a 	mov	sp,fp
 400a26c:	dfc00117 	ldw	ra,4(sp)
 400a270:	df000017 	ldw	fp,0(sp)
 400a274:	dec00204 	addi	sp,sp,8
 400a278:	f800283a 	ret

0400a27c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a27c:	defffd04 	addi	sp,sp,-12
 400a280:	dfc00215 	stw	ra,8(sp)
 400a284:	df000115 	stw	fp,4(sp)
 400a288:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a28c:	008100b4 	movhi	r2,1026
 400a290:	10a27e04 	addi	r2,r2,-30216
 400a294:	10800017 	ldw	r2,0(r2)
 400a298:	1005003a 	cmpeq	r2,r2,zero
 400a29c:	1000061e 	bne	r2,zero,400a2b8 <alt_get_errno+0x3c>
 400a2a0:	008100b4 	movhi	r2,1026
 400a2a4:	10a27e04 	addi	r2,r2,-30216
 400a2a8:	10800017 	ldw	r2,0(r2)
 400a2ac:	103ee83a 	callr	r2
 400a2b0:	e0bfff15 	stw	r2,-4(fp)
 400a2b4:	00000306 	br	400a2c4 <alt_get_errno+0x48>
 400a2b8:	008100b4 	movhi	r2,1026
 400a2bc:	10a2ae04 	addi	r2,r2,-30024
 400a2c0:	e0bfff15 	stw	r2,-4(fp)
 400a2c4:	e0bfff17 	ldw	r2,-4(fp)
}
 400a2c8:	e037883a 	mov	sp,fp
 400a2cc:	dfc00117 	ldw	ra,4(sp)
 400a2d0:	df000017 	ldw	fp,0(sp)
 400a2d4:	dec00204 	addi	sp,sp,8
 400a2d8:	f800283a 	ret

0400a2dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400a2dc:	defff804 	addi	sp,sp,-32
 400a2e0:	dfc00715 	stw	ra,28(sp)
 400a2e4:	df000615 	stw	fp,24(sp)
 400a2e8:	df000604 	addi	fp,sp,24
 400a2ec:	e13ffc15 	stw	r4,-16(fp)
 400a2f0:	e17ffd15 	stw	r5,-12(fp)
 400a2f4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400a2f8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a2fc:	e0bffc17 	ldw	r2,-16(fp)
 400a300:	1004803a 	cmplt	r2,r2,zero
 400a304:	1000081e 	bne	r2,zero,400a328 <lseek+0x4c>
 400a308:	e0bffc17 	ldw	r2,-16(fp)
 400a30c:	10800324 	muli	r2,r2,12
 400a310:	1007883a 	mov	r3,r2
 400a314:	00810074 	movhi	r2,1025
 400a318:	109dc404 	addi	r2,r2,30480
 400a31c:	1887883a 	add	r3,r3,r2
 400a320:	e0ffff15 	stw	r3,-4(fp)
 400a324:	00000106 	br	400a32c <lseek+0x50>
 400a328:	e03fff15 	stw	zero,-4(fp)
 400a32c:	e0bfff17 	ldw	r2,-4(fp)
 400a330:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 400a334:	e0bffb17 	ldw	r2,-20(fp)
 400a338:	1005003a 	cmpeq	r2,r2,zero
 400a33c:	1000111e 	bne	r2,zero,400a384 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400a340:	e0bffb17 	ldw	r2,-20(fp)
 400a344:	10800017 	ldw	r2,0(r2)
 400a348:	10800717 	ldw	r2,28(r2)
 400a34c:	1005003a 	cmpeq	r2,r2,zero
 400a350:	1000091e 	bne	r2,zero,400a378 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400a354:	e0bffb17 	ldw	r2,-20(fp)
 400a358:	10800017 	ldw	r2,0(r2)
 400a35c:	10800717 	ldw	r2,28(r2)
 400a360:	e13ffb17 	ldw	r4,-20(fp)
 400a364:	e17ffd17 	ldw	r5,-12(fp)
 400a368:	e1bffe17 	ldw	r6,-8(fp)
 400a36c:	103ee83a 	callr	r2
 400a370:	e0bffa15 	stw	r2,-24(fp)
 400a374:	00000506 	br	400a38c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400a378:	00bfde84 	movi	r2,-134
 400a37c:	e0bffa15 	stw	r2,-24(fp)
 400a380:	00000206 	br	400a38c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400a384:	00bfebc4 	movi	r2,-81
 400a388:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 400a38c:	e0bffa17 	ldw	r2,-24(fp)
 400a390:	1004403a 	cmpge	r2,r2,zero
 400a394:	1000071e 	bne	r2,zero,400a3b4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 400a398:	400a3cc0 	call	400a3cc <alt_get_errno>
 400a39c:	1007883a 	mov	r3,r2
 400a3a0:	e0bffa17 	ldw	r2,-24(fp)
 400a3a4:	0085c83a 	sub	r2,zero,r2
 400a3a8:	18800015 	stw	r2,0(r3)
    rc = -1;
 400a3ac:	00bfffc4 	movi	r2,-1
 400a3b0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 400a3b4:	e0bffa17 	ldw	r2,-24(fp)
}
 400a3b8:	e037883a 	mov	sp,fp
 400a3bc:	dfc00117 	ldw	ra,4(sp)
 400a3c0:	df000017 	ldw	fp,0(sp)
 400a3c4:	dec00204 	addi	sp,sp,8
 400a3c8:	f800283a 	ret

0400a3cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a3cc:	defffd04 	addi	sp,sp,-12
 400a3d0:	dfc00215 	stw	ra,8(sp)
 400a3d4:	df000115 	stw	fp,4(sp)
 400a3d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a3dc:	008100b4 	movhi	r2,1026
 400a3e0:	10a27e04 	addi	r2,r2,-30216
 400a3e4:	10800017 	ldw	r2,0(r2)
 400a3e8:	1005003a 	cmpeq	r2,r2,zero
 400a3ec:	1000061e 	bne	r2,zero,400a408 <alt_get_errno+0x3c>
 400a3f0:	008100b4 	movhi	r2,1026
 400a3f4:	10a27e04 	addi	r2,r2,-30216
 400a3f8:	10800017 	ldw	r2,0(r2)
 400a3fc:	103ee83a 	callr	r2
 400a400:	e0bfff15 	stw	r2,-4(fp)
 400a404:	00000306 	br	400a414 <alt_get_errno+0x48>
 400a408:	008100b4 	movhi	r2,1026
 400a40c:	10a2ae04 	addi	r2,r2,-30024
 400a410:	e0bfff15 	stw	r2,-4(fp)
 400a414:	e0bfff17 	ldw	r2,-4(fp)
}
 400a418:	e037883a 	mov	sp,fp
 400a41c:	dfc00117 	ldw	ra,4(sp)
 400a420:	df000017 	ldw	fp,0(sp)
 400a424:	dec00204 	addi	sp,sp,8
 400a428:	f800283a 	ret

0400a42c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400a42c:	defffb04 	addi	sp,sp,-20
 400a430:	dfc00415 	stw	ra,16(sp)
 400a434:	df000315 	stw	fp,12(sp)
 400a438:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400a43c:	0009883a 	mov	r4,zero
 400a440:	40132200 	call	4013220 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400a444:	400b5a80 	call	400b5a8 <OSInit>
 400a448:	01000044 	movi	r4,1
 400a44c:	401073c0 	call	401073c <OSSemCreate>
 400a450:	1007883a 	mov	r3,r2
 400a454:	008100b4 	movhi	r2,1026
 400a458:	10a2b404 	addi	r2,r2,-30000
 400a45c:	10c00015 	stw	r3,0(r2)
 400a460:	01000044 	movi	r4,1
 400a464:	401073c0 	call	401073c <OSSemCreate>
 400a468:	1007883a 	mov	r3,r2
 400a46c:	008100b4 	movhi	r2,1026
 400a470:	10a2b604 	addi	r2,r2,-29992
 400a474:	10c00015 	stw	r3,0(r2)
 400a478:	008100b4 	movhi	r2,1026
 400a47c:	10a2af04 	addi	r2,r2,-30020
 400a480:	e0bffd15 	stw	r2,-12(fp)
 400a484:	00800044 	movi	r2,1
 400a488:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 400a48c:	e13ffe0b 	ldhu	r4,-8(fp)
 400a490:	401073c0 	call	401073c <OSSemCreate>
 400a494:	1007883a 	mov	r3,r2
 400a498:	e0bffd17 	ldw	r2,-12(fp)
 400a49c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400a4a0:	40132540 	call	4013254 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400a4a4:	01010074 	movhi	r4,1025
 400a4a8:	211b6104 	addi	r4,r4,28036
 400a4ac:	01410074 	movhi	r5,1025
 400a4b0:	295b6104 	addi	r5,r5,28036
 400a4b4:	01810074 	movhi	r6,1025
 400a4b8:	319b6104 	addi	r6,r6,28036
 400a4bc:	40156700 	call	4015670 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400a4c0:	40151480 	call	4015148 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400a4c4:	01010074 	movhi	r4,1025
 400a4c8:	21146b04 	addi	r4,r4,20908
 400a4cc:	401653c0 	call	401653c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400a4d0:	d1204017 	ldw	r4,-32512(gp)
 400a4d4:	d1604117 	ldw	r5,-32508(gp)
 400a4d8:	d1a04217 	ldw	r6,-32504(gp)
 400a4dc:	40006500 	call	4000650 <main>
 400a4e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400a4e4:	01000044 	movi	r4,1
 400a4e8:	4009f000 	call	4009f00 <close>
  exit (result);
 400a4ec:	e13fff17 	ldw	r4,-4(fp)
 400a4f0:	40165500 	call	4016550 <exit>

0400a4f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400a4f4:	defff704 	addi	sp,sp,-36
 400a4f8:	dfc00815 	stw	ra,32(sp)
 400a4fc:	df000715 	stw	fp,28(sp)
 400a500:	df000704 	addi	fp,sp,28
 400a504:	e13ffb15 	stw	r4,-20(fp)
 400a508:	e17ffc15 	stw	r5,-16(fp)
 400a50c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a510:	e0bffb17 	ldw	r2,-20(fp)
 400a514:	1004803a 	cmplt	r2,r2,zero
 400a518:	1000081e 	bne	r2,zero,400a53c <read+0x48>
 400a51c:	e0bffb17 	ldw	r2,-20(fp)
 400a520:	10800324 	muli	r2,r2,12
 400a524:	1007883a 	mov	r3,r2
 400a528:	00810074 	movhi	r2,1025
 400a52c:	109dc404 	addi	r2,r2,30480
 400a530:	1887883a 	add	r3,r3,r2
 400a534:	e0ffff15 	stw	r3,-4(fp)
 400a538:	00000106 	br	400a540 <read+0x4c>
 400a53c:	e03fff15 	stw	zero,-4(fp)
 400a540:	e0bfff17 	ldw	r2,-4(fp)
 400a544:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400a548:	e0bffa17 	ldw	r2,-24(fp)
 400a54c:	1005003a 	cmpeq	r2,r2,zero
 400a550:	1000241e 	bne	r2,zero,400a5e4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a554:	e0bffa17 	ldw	r2,-24(fp)
 400a558:	10800217 	ldw	r2,8(r2)
 400a55c:	108000cc 	andi	r2,r2,3
 400a560:	10800060 	cmpeqi	r2,r2,1
 400a564:	10001a1e 	bne	r2,zero,400a5d0 <read+0xdc>
 400a568:	e0bffa17 	ldw	r2,-24(fp)
 400a56c:	10800017 	ldw	r2,0(r2)
 400a570:	10800517 	ldw	r2,20(r2)
 400a574:	1005003a 	cmpeq	r2,r2,zero
 400a578:	1000151e 	bne	r2,zero,400a5d0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400a57c:	e0bffa17 	ldw	r2,-24(fp)
 400a580:	10800017 	ldw	r2,0(r2)
 400a584:	10800517 	ldw	r2,20(r2)
 400a588:	e17ffc17 	ldw	r5,-16(fp)
 400a58c:	e1bffd17 	ldw	r6,-12(fp)
 400a590:	e13ffa17 	ldw	r4,-24(fp)
 400a594:	103ee83a 	callr	r2
 400a598:	e0bff915 	stw	r2,-28(fp)
 400a59c:	e0bff917 	ldw	r2,-28(fp)
 400a5a0:	1004403a 	cmpge	r2,r2,zero
 400a5a4:	1000071e 	bne	r2,zero,400a5c4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 400a5a8:	400a6140 	call	400a614 <alt_get_errno>
 400a5ac:	e0fff917 	ldw	r3,-28(fp)
 400a5b0:	00c7c83a 	sub	r3,zero,r3
 400a5b4:	10c00015 	stw	r3,0(r2)
          return -1;
 400a5b8:	00bfffc4 	movi	r2,-1
 400a5bc:	e0bffe15 	stw	r2,-8(fp)
 400a5c0:	00000e06 	br	400a5fc <read+0x108>
        }
        return rval;
 400a5c4:	e0bff917 	ldw	r2,-28(fp)
 400a5c8:	e0bffe15 	stw	r2,-8(fp)
 400a5cc:	00000b06 	br	400a5fc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400a5d0:	400a6140 	call	400a614 <alt_get_errno>
 400a5d4:	1007883a 	mov	r3,r2
 400a5d8:	00800344 	movi	r2,13
 400a5dc:	18800015 	stw	r2,0(r3)
 400a5e0:	00000406 	br	400a5f4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400a5e4:	400a6140 	call	400a614 <alt_get_errno>
 400a5e8:	1007883a 	mov	r3,r2
 400a5ec:	00801444 	movi	r2,81
 400a5f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400a5f4:	00bfffc4 	movi	r2,-1
 400a5f8:	e0bffe15 	stw	r2,-8(fp)
 400a5fc:	e0bffe17 	ldw	r2,-8(fp)
}
 400a600:	e037883a 	mov	sp,fp
 400a604:	dfc00117 	ldw	ra,4(sp)
 400a608:	df000017 	ldw	fp,0(sp)
 400a60c:	dec00204 	addi	sp,sp,8
 400a610:	f800283a 	ret

0400a614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a614:	defffd04 	addi	sp,sp,-12
 400a618:	dfc00215 	stw	ra,8(sp)
 400a61c:	df000115 	stw	fp,4(sp)
 400a620:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a624:	008100b4 	movhi	r2,1026
 400a628:	10a27e04 	addi	r2,r2,-30216
 400a62c:	10800017 	ldw	r2,0(r2)
 400a630:	1005003a 	cmpeq	r2,r2,zero
 400a634:	1000061e 	bne	r2,zero,400a650 <alt_get_errno+0x3c>
 400a638:	008100b4 	movhi	r2,1026
 400a63c:	10a27e04 	addi	r2,r2,-30216
 400a640:	10800017 	ldw	r2,0(r2)
 400a644:	103ee83a 	callr	r2
 400a648:	e0bfff15 	stw	r2,-4(fp)
 400a64c:	00000306 	br	400a65c <alt_get_errno+0x48>
 400a650:	008100b4 	movhi	r2,1026
 400a654:	10a2ae04 	addi	r2,r2,-30024
 400a658:	e0bfff15 	stw	r2,-4(fp)
 400a65c:	e0bfff17 	ldw	r2,-4(fp)
}
 400a660:	e037883a 	mov	sp,fp
 400a664:	dfc00117 	ldw	ra,4(sp)
 400a668:	df000017 	ldw	fp,0(sp)
 400a66c:	dec00204 	addi	sp,sp,8
 400a670:	f800283a 	ret

0400a674 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400a674:	defffe04 	addi	sp,sp,-8
 400a678:	df000115 	stw	fp,4(sp)
 400a67c:	df000104 	addi	fp,sp,4
 400a680:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400a684:	e0bfff17 	ldw	r2,-4(fp)
 400a688:	108000d0 	cmplti	r2,r2,3
 400a68c:	10000d1e 	bne	r2,zero,400a6c4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400a690:	e0bfff17 	ldw	r2,-4(fp)
 400a694:	00c10074 	movhi	r3,1025
 400a698:	18ddc404 	addi	r3,r3,30480
 400a69c:	10800324 	muli	r2,r2,12
 400a6a0:	10c5883a 	add	r2,r2,r3
 400a6a4:	10800204 	addi	r2,r2,8
 400a6a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400a6ac:	e0bfff17 	ldw	r2,-4(fp)
 400a6b0:	00c10074 	movhi	r3,1025
 400a6b4:	18ddc404 	addi	r3,r3,30480
 400a6b8:	10800324 	muli	r2,r2,12
 400a6bc:	10c5883a 	add	r2,r2,r3
 400a6c0:	10000015 	stw	zero,0(r2)
  }
}
 400a6c4:	e037883a 	mov	sp,fp
 400a6c8:	df000017 	ldw	fp,0(sp)
 400a6cc:	dec00104 	addi	sp,sp,4
 400a6d0:	f800283a 	ret

0400a6d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400a6d4:	defff804 	addi	sp,sp,-32
 400a6d8:	df000715 	stw	fp,28(sp)
 400a6dc:	df000704 	addi	fp,sp,28
 400a6e0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a6e4:	0005303a 	rdctl	r2,status
 400a6e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a6ec:	e0fffb17 	ldw	r3,-20(fp)
 400a6f0:	00bfff84 	movi	r2,-2
 400a6f4:	1884703a 	and	r2,r3,r2
 400a6f8:	1001703a 	wrctl	status,r2
  
  return context;
 400a6fc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400a700:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400a704:	d0a00f17 	ldw	r2,-32708(gp)
 400a708:	10c000c4 	addi	r3,r2,3
 400a70c:	00bfff04 	movi	r2,-4
 400a710:	1884703a 	and	r2,r3,r2
 400a714:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400a718:	d0e00f17 	ldw	r3,-32708(gp)
 400a71c:	e0bffe17 	ldw	r2,-8(fp)
 400a720:	1887883a 	add	r3,r3,r2
 400a724:	00818034 	movhi	r2,1536
 400a728:	10800004 	addi	r2,r2,0
 400a72c:	10c0072e 	bgeu	r2,r3,400a74c <sbrk+0x78>
 400a730:	e0bffd17 	ldw	r2,-12(fp)
 400a734:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a738:	e0bffa17 	ldw	r2,-24(fp)
 400a73c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400a740:	00bfffc4 	movi	r2,-1
 400a744:	e0bfff15 	stw	r2,-4(fp)
 400a748:	00000c06 	br	400a77c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 400a74c:	d0a00f17 	ldw	r2,-32708(gp)
 400a750:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 400a754:	d0e00f17 	ldw	r3,-32708(gp)
 400a758:	e0bffe17 	ldw	r2,-8(fp)
 400a75c:	1885883a 	add	r2,r3,r2
 400a760:	d0a00f15 	stw	r2,-32708(gp)
 400a764:	e0bffd17 	ldw	r2,-12(fp)
 400a768:	e0bff915 	stw	r2,-28(fp)
 400a76c:	e0bff917 	ldw	r2,-28(fp)
 400a770:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400a774:	e0bffc17 	ldw	r2,-16(fp)
 400a778:	e0bfff15 	stw	r2,-4(fp)
 400a77c:	e0bfff17 	ldw	r2,-4(fp)
} 
 400a780:	e037883a 	mov	sp,fp
 400a784:	df000017 	ldw	fp,0(sp)
 400a788:	dec00104 	addi	sp,sp,4
 400a78c:	f800283a 	ret

0400a790 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400a790:	defff704 	addi	sp,sp,-36
 400a794:	dfc00815 	stw	ra,32(sp)
 400a798:	df000715 	stw	fp,28(sp)
 400a79c:	df000704 	addi	fp,sp,28
 400a7a0:	e13ffb15 	stw	r4,-20(fp)
 400a7a4:	e17ffc15 	stw	r5,-16(fp)
 400a7a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a7ac:	e0bffb17 	ldw	r2,-20(fp)
 400a7b0:	1004803a 	cmplt	r2,r2,zero
 400a7b4:	1000081e 	bne	r2,zero,400a7d8 <write+0x48>
 400a7b8:	e0bffb17 	ldw	r2,-20(fp)
 400a7bc:	10800324 	muli	r2,r2,12
 400a7c0:	1007883a 	mov	r3,r2
 400a7c4:	00810074 	movhi	r2,1025
 400a7c8:	109dc404 	addi	r2,r2,30480
 400a7cc:	1887883a 	add	r3,r3,r2
 400a7d0:	e0ffff15 	stw	r3,-4(fp)
 400a7d4:	00000106 	br	400a7dc <write+0x4c>
 400a7d8:	e03fff15 	stw	zero,-4(fp)
 400a7dc:	e0bfff17 	ldw	r2,-4(fp)
 400a7e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400a7e4:	e0bffa17 	ldw	r2,-24(fp)
 400a7e8:	1005003a 	cmpeq	r2,r2,zero
 400a7ec:	1000241e 	bne	r2,zero,400a880 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400a7f0:	e0bffa17 	ldw	r2,-24(fp)
 400a7f4:	10800217 	ldw	r2,8(r2)
 400a7f8:	108000cc 	andi	r2,r2,3
 400a7fc:	1005003a 	cmpeq	r2,r2,zero
 400a800:	10001a1e 	bne	r2,zero,400a86c <write+0xdc>
 400a804:	e0bffa17 	ldw	r2,-24(fp)
 400a808:	10800017 	ldw	r2,0(r2)
 400a80c:	10800617 	ldw	r2,24(r2)
 400a810:	1005003a 	cmpeq	r2,r2,zero
 400a814:	1000151e 	bne	r2,zero,400a86c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400a818:	e0bffa17 	ldw	r2,-24(fp)
 400a81c:	10800017 	ldw	r2,0(r2)
 400a820:	10800617 	ldw	r2,24(r2)
 400a824:	e17ffc17 	ldw	r5,-16(fp)
 400a828:	e1bffd17 	ldw	r6,-12(fp)
 400a82c:	e13ffa17 	ldw	r4,-24(fp)
 400a830:	103ee83a 	callr	r2
 400a834:	e0bff915 	stw	r2,-28(fp)
 400a838:	e0bff917 	ldw	r2,-28(fp)
 400a83c:	1004403a 	cmpge	r2,r2,zero
 400a840:	1000071e 	bne	r2,zero,400a860 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 400a844:	400a8b00 	call	400a8b0 <alt_get_errno>
 400a848:	e0fff917 	ldw	r3,-28(fp)
 400a84c:	00c7c83a 	sub	r3,zero,r3
 400a850:	10c00015 	stw	r3,0(r2)
        return -1;
 400a854:	00bfffc4 	movi	r2,-1
 400a858:	e0bffe15 	stw	r2,-8(fp)
 400a85c:	00000e06 	br	400a898 <write+0x108>
      }
      return rval;
 400a860:	e0bff917 	ldw	r2,-28(fp)
 400a864:	e0bffe15 	stw	r2,-8(fp)
 400a868:	00000b06 	br	400a898 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400a86c:	400a8b00 	call	400a8b0 <alt_get_errno>
 400a870:	1007883a 	mov	r3,r2
 400a874:	00800344 	movi	r2,13
 400a878:	18800015 	stw	r2,0(r3)
 400a87c:	00000406 	br	400a890 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400a880:	400a8b00 	call	400a8b0 <alt_get_errno>
 400a884:	1007883a 	mov	r3,r2
 400a888:	00801444 	movi	r2,81
 400a88c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400a890:	00bfffc4 	movi	r2,-1
 400a894:	e0bffe15 	stw	r2,-8(fp)
 400a898:	e0bffe17 	ldw	r2,-8(fp)
}
 400a89c:	e037883a 	mov	sp,fp
 400a8a0:	dfc00117 	ldw	ra,4(sp)
 400a8a4:	df000017 	ldw	fp,0(sp)
 400a8a8:	dec00204 	addi	sp,sp,8
 400a8ac:	f800283a 	ret

0400a8b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a8b0:	defffd04 	addi	sp,sp,-12
 400a8b4:	dfc00215 	stw	ra,8(sp)
 400a8b8:	df000115 	stw	fp,4(sp)
 400a8bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400a8c0:	008100b4 	movhi	r2,1026
 400a8c4:	10a27e04 	addi	r2,r2,-30216
 400a8c8:	10800017 	ldw	r2,0(r2)
 400a8cc:	1005003a 	cmpeq	r2,r2,zero
 400a8d0:	1000061e 	bne	r2,zero,400a8ec <alt_get_errno+0x3c>
 400a8d4:	008100b4 	movhi	r2,1026
 400a8d8:	10a27e04 	addi	r2,r2,-30216
 400a8dc:	10800017 	ldw	r2,0(r2)
 400a8e0:	103ee83a 	callr	r2
 400a8e4:	e0bfff15 	stw	r2,-4(fp)
 400a8e8:	00000306 	br	400a8f8 <alt_get_errno+0x48>
 400a8ec:	008100b4 	movhi	r2,1026
 400a8f0:	10a2ae04 	addi	r2,r2,-30024
 400a8f4:	e0bfff15 	stw	r2,-4(fp)
 400a8f8:	e0bfff17 	ldw	r2,-4(fp)
}
 400a8fc:	e037883a 	mov	sp,fp
 400a900:	dfc00117 	ldw	ra,4(sp)
 400a904:	df000017 	ldw	fp,0(sp)
 400a908:	dec00204 	addi	sp,sp,8
 400a90c:	f800283a 	ret

0400a910 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 400a910:	deffde04 	addi	sp,sp,-136
 400a914:	dfc02115 	stw	ra,132(sp)
 400a918:	df002015 	stw	fp,128(sp)
 400a91c:	df002004 	addi	fp,sp,128
 400a920:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400a924:	e17fe104 	addi	r5,fp,-124
 400a928:	01003fc4 	movi	r4,255
 400a92c:	4012ac40 	call	4012ac4 <OSTaskQuery>
 400a930:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400a934:	e0bffe83 	ldbu	r2,-6(fp)
 400a938:	10803fcc 	andi	r2,r2,255
 400a93c:	1004c03a 	cmpne	r2,r2,zero
 400a940:	1000191e 	bne	r2,zero,400a9a8 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 400a944:	e0bfee83 	ldbu	r2,-70(fp)
 400a948:	10803fcc 	andi	r2,r2,255
 400a94c:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400a950:	d1204417 	ldw	r4,-32496(gp)
 400a954:	e17ffd04 	addi	r5,fp,-12
 400a958:	40110100 	call	4011010 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 400a95c:	e0bffe43 	ldbu	r2,-7(fp)
 400a960:	10803fcc 	andi	r2,r2,255
 400a964:	1005003a 	cmpeq	r2,r2,zero
 400a968:	1000071e 	bne	r2,zero,400a988 <__env_lock+0x78>
 400a96c:	d0e01017 	ldw	r3,-32704(gp)
 400a970:	e0bfe017 	ldw	r2,-128(fp)
 400a974:	10c0041e 	bne	r2,r3,400a988 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 400a978:	d0a04317 	ldw	r2,-32500(gp)
 400a97c:	10800044 	addi	r2,r2,1
 400a980:	d0a04315 	stw	r2,-32500(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 400a984:	00000806 	br	400a9a8 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 400a988:	d1204417 	ldw	r4,-32496(gp)
 400a98c:	e1bffe84 	addi	r6,fp,-6
 400a990:	000b883a 	mov	r5,zero
 400a994:	4010af00 	call	4010af0 <OSSemPend>
    locks  = 1;
 400a998:	00800044 	movi	r2,1
 400a99c:	d0a04315 	stw	r2,-32500(gp)
    lockid = id;
 400a9a0:	e0bfe017 	ldw	r2,-128(fp)
 400a9a4:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400a9a8:	e037883a 	mov	sp,fp
 400a9ac:	dfc00117 	ldw	ra,4(sp)
 400a9b0:	df000017 	ldw	fp,0(sp)
 400a9b4:	dec00204 	addi	sp,sp,8
 400a9b8:	f800283a 	ret

0400a9bc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 400a9bc:	defffd04 	addi	sp,sp,-12
 400a9c0:	dfc00215 	stw	ra,8(sp)
 400a9c4:	df000115 	stw	fp,4(sp)
 400a9c8:	df000104 	addi	fp,sp,4
 400a9cc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 400a9d0:	d0a04317 	ldw	r2,-32500(gp)
 400a9d4:	1005003a 	cmpeq	r2,r2,zero
 400a9d8:	10000a1e 	bne	r2,zero,400aa04 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 400a9dc:	d0a04317 	ldw	r2,-32500(gp)
 400a9e0:	10bfffc4 	addi	r2,r2,-1
 400a9e4:	d0a04315 	stw	r2,-32500(gp)
 400a9e8:	d0a04317 	ldw	r2,-32500(gp)
 400a9ec:	1004c03a 	cmpne	r2,r2,zero
 400a9f0:	1000041e 	bne	r2,zero,400aa04 <__env_unlock+0x48>
  {
    lockid = -1;
 400a9f4:	00bfffc4 	movi	r2,-1
 400a9f8:	d0a01015 	stw	r2,-32704(gp)
    OSSemPost( alt_envsem );
 400a9fc:	d1204417 	ldw	r4,-32496(gp)
 400aa00:	4010ee80 	call	4010ee8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400aa04:	e037883a 	mov	sp,fp
 400aa08:	dfc00117 	ldw	ra,4(sp)
 400aa0c:	df000017 	ldw	fp,0(sp)
 400aa10:	dec00204 	addi	sp,sp,8
 400aa14:	f800283a 	ret

0400aa18 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 400aa18:	deffda04 	addi	sp,sp,-152
 400aa1c:	dfc02515 	stw	ra,148(sp)
 400aa20:	df002415 	stw	fp,144(sp)
 400aa24:	df002404 	addi	fp,sp,144
 400aa28:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400aa2c:	e03fdf15 	stw	zero,-132(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 400aa30:	008100b4 	movhi	r2,1026
 400aa34:	10a2b804 	addi	r2,r2,-29984
 400aa38:	10800003 	ldbu	r2,0(r2)
 400aa3c:	10803fcc 	andi	r2,r2,255
 400aa40:	10800058 	cmpnei	r2,r2,1
 400aa44:	1000311e 	bne	r2,zero,400ab0c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400aa48:	e17fe104 	addi	r5,fp,-124
 400aa4c:	01003fc4 	movi	r4,255
 400aa50:	4012ac40 	call	4012ac4 <OSTaskQuery>
 400aa54:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400aa58:	e0bffe83 	ldbu	r2,-6(fp)
 400aa5c:	10803fcc 	andi	r2,r2,255
 400aa60:	1004c03a 	cmpne	r2,r2,zero
 400aa64:	1000291e 	bne	r2,zero,400ab0c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 400aa68:	e0bfee83 	ldbu	r2,-70(fp)
 400aa6c:	10803fcc 	andi	r2,r2,255
 400aa70:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400aa74:	d1204617 	ldw	r4,-32488(gp)
 400aa78:	e17ffd04 	addi	r5,fp,-12
 400aa7c:	40110100 	call	4011010 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400aa80:	0005303a 	rdctl	r2,status
 400aa84:	e0bfde15 	stw	r2,-136(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aa88:	e0ffde17 	ldw	r3,-136(fp)
 400aa8c:	00bfff84 	movi	r2,-2
 400aa90:	1884703a 	and	r2,r3,r2
 400aa94:	1001703a 	wrctl	status,r2
  
  return context;
 400aa98:	e0bfde17 	ldw	r2,-136(fp)
  
  OS_ENTER_CRITICAL();
 400aa9c:	e0bfdf15 	stw	r2,-132(fp)

  if( !semdata.OSCnt && id == lockid ) 
 400aaa0:	e0bffd0b 	ldhu	r2,-12(fp)
 400aaa4:	10bfffcc 	andi	r2,r2,65535
 400aaa8:	1004c03a 	cmpne	r2,r2,zero
 400aaac:	10000b1e 	bne	r2,zero,400aadc <__malloc_lock+0xc4>
 400aab0:	d0e01117 	ldw	r3,-32700(gp)
 400aab4:	e0bfe017 	ldw	r2,-128(fp)
 400aab8:	10c0081e 	bne	r2,r3,400aadc <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 400aabc:	d0a04517 	ldw	r2,-32492(gp)
 400aac0:	10800044 	addi	r2,r2,1
 400aac4:	d0a04515 	stw	r2,-32492(gp)
 400aac8:	e0bfdf17 	ldw	r2,-132(fp)
 400aacc:	e0bfdd15 	stw	r2,-140(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aad0:	e0bfdd17 	ldw	r2,-140(fp)
 400aad4:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 400aad8:	00000c06 	br	400ab0c <__malloc_lock+0xf4>
 400aadc:	e0bfdf17 	ldw	r2,-132(fp)
 400aae0:	e0bfdc15 	stw	r2,-144(fp)
 400aae4:	e0bfdc17 	ldw	r2,-144(fp)
 400aae8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 400aaec:	d1204617 	ldw	r4,-32488(gp)
 400aaf0:	e1bffe84 	addi	r6,fp,-6
 400aaf4:	000b883a 	mov	r5,zero
 400aaf8:	4010af00 	call	4010af0 <OSSemPend>
    locks  = 1;
 400aafc:	00800044 	movi	r2,1
 400ab00:	d0a04515 	stw	r2,-32492(gp)
    lockid = id;
 400ab04:	e0bfe017 	ldw	r2,-128(fp)
 400ab08:	d0a01115 	stw	r2,-32700(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400ab0c:	e037883a 	mov	sp,fp
 400ab10:	dfc00117 	ldw	ra,4(sp)
 400ab14:	df000017 	ldw	fp,0(sp)
 400ab18:	dec00204 	addi	sp,sp,8
 400ab1c:	f800283a 	ret

0400ab20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ab20:	defff804 	addi	sp,sp,-32
 400ab24:	dfc00715 	stw	ra,28(sp)
 400ab28:	df000615 	stw	fp,24(sp)
 400ab2c:	df000604 	addi	fp,sp,24
 400ab30:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ab34:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 400ab38:	008100b4 	movhi	r2,1026
 400ab3c:	10a2b804 	addi	r2,r2,-29984
 400ab40:	10800003 	ldbu	r2,0(r2)
 400ab44:	10803fcc 	andi	r2,r2,255
 400ab48:	10800058 	cmpnei	r2,r2,1
 400ab4c:	1000231e 	bne	r2,zero,400abdc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ab50:	0005303a 	rdctl	r2,status
 400ab54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ab58:	e0fffd17 	ldw	r3,-12(fp)
 400ab5c:	00bfff84 	movi	r2,-2
 400ab60:	1884703a 	and	r2,r3,r2
 400ab64:	1001703a 	wrctl	status,r2
  
  return context;
 400ab68:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 400ab6c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 400ab70:	d0a04517 	ldw	r2,-32492(gp)
 400ab74:	1004c03a 	cmpne	r2,r2,zero
 400ab78:	1000051e 	bne	r2,zero,400ab90 <__malloc_unlock+0x70>
 400ab7c:	e0bffe17 	ldw	r2,-8(fp)
 400ab80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ab84:	e0bffc17 	ldw	r2,-16(fp)
 400ab88:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 400ab8c:	00001306 	br	400abdc <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 400ab90:	d0a04517 	ldw	r2,-32492(gp)
 400ab94:	10bfffc4 	addi	r2,r2,-1
 400ab98:	d0a04515 	stw	r2,-32492(gp)
 400ab9c:	d0a04517 	ldw	r2,-32492(gp)
 400aba0:	1004c03a 	cmpne	r2,r2,zero
 400aba4:	1000091e 	bne	r2,zero,400abcc <__malloc_unlock+0xac>
  {
    lockid = -1;
 400aba8:	00bfffc4 	movi	r2,-1
 400abac:	d0a01115 	stw	r2,-32700(gp)
 400abb0:	e0bffe17 	ldw	r2,-8(fp)
 400abb4:	e0bffb15 	stw	r2,-20(fp)
 400abb8:	e0bffb17 	ldw	r2,-20(fp)
 400abbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 400abc0:	d1204617 	ldw	r4,-32488(gp)
 400abc4:	4010ee80 	call	4010ee8 <OSSemPost>
 400abc8:	00000406 	br	400abdc <__malloc_unlock+0xbc>
 400abcc:	e0bffe17 	ldw	r2,-8(fp)
 400abd0:	e0bffa15 	stw	r2,-24(fp)
 400abd4:	e0bffa17 	ldw	r2,-24(fp)
 400abd8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400abdc:	e037883a 	mov	sp,fp
 400abe0:	dfc00117 	ldw	ra,4(sp)
 400abe4:	df000017 	ldw	fp,0(sp)
 400abe8:	dec00204 	addi	sp,sp,8
 400abec:	f800283a 	ret

0400abf0 <get_buff_idx>:

//Modification
int pb[BUFFER_SIZE][4];
INT8U  buffer_index=0;
INT8U TIMEOUT = 0;
INT8U get_buff_idx(){
 400abf0:	deffff04 	addi	sp,sp,-4
 400abf4:	df000015 	stw	fp,0(sp)
 400abf8:	d839883a 	mov	fp,sp
    return buffer_index;
 400abfc:	d0a04703 	ldbu	r2,-32484(gp)
 400ac00:	10803fcc 	andi	r2,r2,255
}
 400ac04:	e037883a 	mov	sp,fp
 400ac08:	df000017 	ldw	fp,0(sp)
 400ac0c:	dec00104 	addi	sp,sp,4
 400ac10:	f800283a 	ret

0400ac14 <set_buff_size>:

void set_buff_size( INT8U init ){
 400ac14:	defffe04 	addi	sp,sp,-8
 400ac18:	df000115 	stw	fp,4(sp)
 400ac1c:	df000104 	addi	fp,sp,4
 400ac20:	e13fff05 	stb	r4,-4(fp)
    buffer_index = init;
 400ac24:	e0bfff03 	ldbu	r2,-4(fp)
 400ac28:	d0a04705 	stb	r2,-32484(gp)
}
 400ac2c:	e037883a 	mov	sp,fp
 400ac30:	df000017 	ldw	fp,0(sp)
 400ac34:	dec00104 	addi	sp,sp,4
 400ac38:	f800283a 	ret

0400ac3c <get_buff_size>:


INT8U get_buff_size(){
 400ac3c:	deffff04 	addi	sp,sp,-4
 400ac40:	df000015 	stw	fp,0(sp)
 400ac44:	d839883a 	mov	fp,sp
    return BUFFER_SIZE;
 400ac48:	00800784 	movi	r2,30
}
 400ac4c:	e037883a 	mov	sp,fp
 400ac50:	df000017 	ldw	fp,0(sp)
 400ac54:	dec00104 	addi	sp,sp,4
 400ac58:	f800283a 	ret

0400ac5c <get_timeout_flag>:


INT8U get_timeout_flag( ){
 400ac5c:	deffff04 	addi	sp,sp,-4
 400ac60:	df000015 	stw	fp,0(sp)
 400ac64:	d839883a 	mov	fp,sp
    return TIMEOUT;
 400ac68:	d0a04743 	ldbu	r2,-32483(gp)
 400ac6c:	10803fcc 	andi	r2,r2,255
}
 400ac70:	e037883a 	mov	sp,fp
 400ac74:	df000017 	ldw	fp,0(sp)
 400ac78:	dec00104 	addi	sp,sp,4
 400ac7c:	f800283a 	ret

0400ac80 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400ac80:	defff604 	addi	sp,sp,-40
 400ac84:	dfc00915 	stw	ra,36(sp)
 400ac88:	df000815 	stw	fp,32(sp)
 400ac8c:	df000804 	addi	fp,sp,32
 400ac90:	e13ffc15 	stw	r4,-16(fp)
 400ac94:	e17ffd15 	stw	r5,-12(fp)
 400ac98:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ac9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400aca0:	e0bffe17 	ldw	r2,-8(fp)
 400aca4:	1004c03a 	cmpne	r2,r2,zero
 400aca8:	1000021e 	bne	r2,zero,400acb4 <OSEventNameGet+0x34>
        return (0);
 400acac:	e03fff15 	stw	zero,-4(fp)
 400acb0:	00003906 	br	400ad98 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400acb4:	e0bffc17 	ldw	r2,-16(fp)
 400acb8:	1004c03a 	cmpne	r2,r2,zero
 400acbc:	1000051e 	bne	r2,zero,400acd4 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400acc0:	e0fffe17 	ldw	r3,-8(fp)
 400acc4:	00800104 	movi	r2,4
 400acc8:	18800005 	stb	r2,0(r3)
        return (0);
 400accc:	e03fff15 	stw	zero,-4(fp)
 400acd0:	00003106 	br	400ad98 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400acd4:	e0bffd17 	ldw	r2,-12(fp)
 400acd8:	1004c03a 	cmpne	r2,r2,zero
 400acdc:	1000051e 	bne	r2,zero,400acf4 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400ace0:	e0fffe17 	ldw	r3,-8(fp)
 400ace4:	00800304 	movi	r2,12
 400ace8:	18800005 	stb	r2,0(r3)
        return (0);
 400acec:	e03fff15 	stw	zero,-4(fp)
 400acf0:	00002906 	br	400ad98 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400acf4:	d0a05603 	ldbu	r2,-32424(gp)
 400acf8:	10803fcc 	andi	r2,r2,255
 400acfc:	1005003a 	cmpeq	r2,r2,zero
 400ad00:	1000051e 	bne	r2,zero,400ad18 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 400ad04:	e0fffe17 	ldw	r3,-8(fp)
 400ad08:	00800444 	movi	r2,17
 400ad0c:	18800005 	stb	r2,0(r3)
        return (0);
 400ad10:	e03fff15 	stw	zero,-4(fp)
 400ad14:	00002006 	br	400ad98 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 400ad18:	e0bffc17 	ldw	r2,-16(fp)
 400ad1c:	10800003 	ldbu	r2,0(r2)
 400ad20:	10803fcc 	andi	r2,r2,255
 400ad24:	10bfffc4 	addi	r2,r2,-1
 400ad28:	10800128 	cmpgeui	r2,r2,4
 400ad2c:	1000161e 	bne	r2,zero,400ad88 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ad30:	0005303a 	rdctl	r2,status
 400ad34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ad38:	e0fff917 	ldw	r3,-28(fp)
 400ad3c:	00bfff84 	movi	r2,-2
 400ad40:	1884703a 	and	r2,r3,r2
 400ad44:	1001703a 	wrctl	status,r2
  
  return context;
 400ad48:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 400ad4c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 400ad50:	e0bffc17 	ldw	r2,-16(fp)
 400ad54:	11400384 	addi	r5,r2,14
 400ad58:	e13ffd17 	ldw	r4,-12(fp)
 400ad5c:	400cad40 	call	400cad4 <OS_StrCopy>
 400ad60:	e0bffb05 	stb	r2,-20(fp)
 400ad64:	e0bffa17 	ldw	r2,-24(fp)
 400ad68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ad6c:	e0bff817 	ldw	r2,-32(fp)
 400ad70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400ad74:	e0bffe17 	ldw	r2,-8(fp)
 400ad78:	10000005 	stb	zero,0(r2)
    return (len);
 400ad7c:	e0bffb03 	ldbu	r2,-20(fp)
 400ad80:	e0bfff15 	stw	r2,-4(fp)
 400ad84:	00000406 	br	400ad98 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400ad88:	e0fffe17 	ldw	r3,-8(fp)
 400ad8c:	00800044 	movi	r2,1
 400ad90:	18800005 	stb	r2,0(r3)
             return (0);
 400ad94:	e03fff15 	stw	zero,-4(fp)
 400ad98:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400ad9c:	e037883a 	mov	sp,fp
 400ada0:	dfc00117 	ldw	ra,4(sp)
 400ada4:	df000017 	ldw	fp,0(sp)
 400ada8:	dec00204 	addi	sp,sp,8
 400adac:	f800283a 	ret

0400adb0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400adb0:	defff604 	addi	sp,sp,-40
 400adb4:	dfc00915 	stw	ra,36(sp)
 400adb8:	df000815 	stw	fp,32(sp)
 400adbc:	df000804 	addi	fp,sp,32
 400adc0:	e13ffd15 	stw	r4,-12(fp)
 400adc4:	e17ffe15 	stw	r5,-8(fp)
 400adc8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400adcc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400add0:	e0bfff17 	ldw	r2,-4(fp)
 400add4:	1005003a 	cmpeq	r2,r2,zero
 400add8:	1000411e 	bne	r2,zero,400aee0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400addc:	e0bffd17 	ldw	r2,-12(fp)
 400ade0:	1004c03a 	cmpne	r2,r2,zero
 400ade4:	1000041e 	bne	r2,zero,400adf8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 400ade8:	e0ffff17 	ldw	r3,-4(fp)
 400adec:	00800104 	movi	r2,4
 400adf0:	18800005 	stb	r2,0(r3)
        return;
 400adf4:	00003a06 	br	400aee0 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400adf8:	e0bffe17 	ldw	r2,-8(fp)
 400adfc:	1004c03a 	cmpne	r2,r2,zero
 400ae00:	1000041e 	bne	r2,zero,400ae14 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400ae04:	e0ffff17 	ldw	r3,-4(fp)
 400ae08:	00800304 	movi	r2,12
 400ae0c:	18800005 	stb	r2,0(r3)
        return;
 400ae10:	00003306 	br	400aee0 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400ae14:	d0a05603 	ldbu	r2,-32424(gp)
 400ae18:	10803fcc 	andi	r2,r2,255
 400ae1c:	1005003a 	cmpeq	r2,r2,zero
 400ae20:	1000041e 	bne	r2,zero,400ae34 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 400ae24:	e0ffff17 	ldw	r3,-4(fp)
 400ae28:	00800484 	movi	r2,18
 400ae2c:	18800005 	stb	r2,0(r3)
        return;
 400ae30:	00002b06 	br	400aee0 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 400ae34:	e0bffd17 	ldw	r2,-12(fp)
 400ae38:	10800003 	ldbu	r2,0(r2)
 400ae3c:	10803fcc 	andi	r2,r2,255
 400ae40:	10bfffc4 	addi	r2,r2,-1
 400ae44:	10800128 	cmpgeui	r2,r2,4
 400ae48:	10000f1e 	bne	r2,zero,400ae88 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ae4c:	0005303a 	rdctl	r2,status
 400ae50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ae54:	e0fffa17 	ldw	r3,-24(fp)
 400ae58:	00bfff84 	movi	r2,-2
 400ae5c:	1884703a 	and	r2,r3,r2
 400ae60:	1001703a 	wrctl	status,r2
  
  return context;
 400ae64:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 400ae68:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 400ae6c:	e13ffe17 	ldw	r4,-8(fp)
 400ae70:	400cb540 	call	400cb54 <OS_StrLen>
 400ae74:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 400ae78:	e0bffc03 	ldbu	r2,-16(fp)
 400ae7c:	10800828 	cmpgeui	r2,r2,32
 400ae80:	1000051e 	bne	r2,zero,400ae98 <OSEventNameSet+0xe8>
 400ae84:	00000c06 	br	400aeb8 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400ae88:	e0ffff17 	ldw	r3,-4(fp)
 400ae8c:	00800044 	movi	r2,1
 400ae90:	18800005 	stb	r2,0(r3)
             return;
 400ae94:	00001206 	br	400aee0 <OSEventNameSet+0x130>
 400ae98:	e0bffb17 	ldw	r2,-20(fp)
 400ae9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aea0:	e0bff917 	ldw	r2,-28(fp)
 400aea4:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 400aea8:	e0ffff17 	ldw	r3,-4(fp)
 400aeac:	008002c4 	movi	r2,11
 400aeb0:	18800005 	stb	r2,0(r3)
        return;
 400aeb4:	00000a06 	br	400aee0 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 400aeb8:	e0bffd17 	ldw	r2,-12(fp)
 400aebc:	11000384 	addi	r4,r2,14
 400aec0:	e17ffe17 	ldw	r5,-8(fp)
 400aec4:	400cad40 	call	400cad4 <OS_StrCopy>
 400aec8:	e0bffb17 	ldw	r2,-20(fp)
 400aecc:	e0bff815 	stw	r2,-32(fp)
 400aed0:	e0bff817 	ldw	r2,-32(fp)
 400aed4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400aed8:	e0bfff17 	ldw	r2,-4(fp)
 400aedc:	10000005 	stb	zero,0(r2)
}
 400aee0:	e037883a 	mov	sp,fp
 400aee4:	dfc00117 	ldw	ra,4(sp)
 400aee8:	df000017 	ldw	fp,0(sp)
 400aeec:	dec00204 	addi	sp,sp,8
 400aef0:	f800283a 	ret

0400aef4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 400aef4:	deffe704 	addi	sp,sp,-100
 400aef8:	dfc01815 	stw	ra,96(sp)
 400aefc:	df001715 	stw	fp,92(sp)
 400af00:	df001704 	addi	fp,sp,92
 400af04:	e13ff615 	stw	r4,-40(fp)
 400af08:	e17ff715 	stw	r5,-36(fp)
 400af0c:	e1bff815 	stw	r6,-32(fp)
 400af10:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 400af14:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 400af18:	e0800217 	ldw	r2,8(fp)
 400af1c:	1004c03a 	cmpne	r2,r2,zero
 400af20:	1000021e 	bne	r2,zero,400af2c <OSEventPendMulti+0x38>
        return (0);
 400af24:	e03fff15 	stw	zero,-4(fp)
 400af28:	00019906 	br	400b590 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 400af2c:	e0bff617 	ldw	r2,-40(fp)
 400af30:	1004c03a 	cmpne	r2,r2,zero
 400af34:	1000051e 	bne	r2,zero,400af4c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 400af38:	e0c00217 	ldw	r3,8(fp)
 400af3c:	00800104 	movi	r2,4
 400af40:	18800005 	stb	r2,0(r3)
        return (0);
 400af44:	e03fff15 	stw	zero,-4(fp)
 400af48:	00019106 	br	400b590 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 400af4c:	e0bff717 	ldw	r2,-36(fp)
 400af50:	1004c03a 	cmpne	r2,r2,zero
 400af54:	1000051e 	bne	r2,zero,400af6c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 400af58:	e0c00217 	ldw	r3,8(fp)
 400af5c:	00800104 	movi	r2,4
 400af60:	18800005 	stb	r2,0(r3)
        return (0);
 400af64:	e03fff15 	stw	zero,-4(fp)
 400af68:	00018906 	br	400b590 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 400af6c:	e0bff817 	ldw	r2,-32(fp)
 400af70:	1004c03a 	cmpne	r2,r2,zero
 400af74:	1000051e 	bne	r2,zero,400af8c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 400af78:	e0c00217 	ldw	r3,8(fp)
 400af7c:	00800104 	movi	r2,4
 400af80:	18800005 	stb	r2,0(r3)
        return (0);
 400af84:	e03fff15 	stw	zero,-4(fp)
 400af88:	00018106 	br	400b590 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 400af8c:	e0bff717 	ldw	r2,-36(fp)
 400af90:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 400af94:	e0bff617 	ldw	r2,-40(fp)
 400af98:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 400af9c:	e0bff517 	ldw	r2,-44(fp)
 400afa0:	10800017 	ldw	r2,0(r2)
 400afa4:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 400afa8:	00001806 	br	400b00c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 400afac:	e0bff417 	ldw	r2,-48(fp)
 400afb0:	10800003 	ldbu	r2,0(r2)
 400afb4:	10803fcc 	andi	r2,r2,255
 400afb8:	e0bffe15 	stw	r2,-8(fp)
 400afbc:	e0fffe17 	ldw	r3,-8(fp)
 400afc0:	188000a0 	cmpeqi	r2,r3,2
 400afc4:	10000b1e 	bne	r2,zero,400aff4 <OSEventPendMulti+0x100>
 400afc8:	e0fffe17 	ldw	r3,-8(fp)
 400afcc:	188000e0 	cmpeqi	r2,r3,3
 400afd0:	1000081e 	bne	r2,zero,400aff4 <OSEventPendMulti+0x100>
 400afd4:	e0fffe17 	ldw	r3,-8(fp)
 400afd8:	18800060 	cmpeqi	r2,r3,1
 400afdc:	1000051e 	bne	r2,zero,400aff4 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 400afe0:	e0c00217 	ldw	r3,8(fp)
 400afe4:	00800044 	movi	r2,1
 400afe8:	18800005 	stb	r2,0(r3)
                 return (0);
 400afec:	e03fff15 	stw	zero,-4(fp)
 400aff0:	00016706 	br	400b590 <OSEventPendMulti+0x69c>
        }
        pevents++;
 400aff4:	e0bff517 	ldw	r2,-44(fp)
 400aff8:	10800104 	addi	r2,r2,4
 400affc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 400b000:	e0bff517 	ldw	r2,-44(fp)
 400b004:	10800017 	ldw	r2,0(r2)
 400b008:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 400b00c:	e0bff417 	ldw	r2,-48(fp)
 400b010:	1004c03a 	cmpne	r2,r2,zero
 400b014:	103fe51e 	bne	r2,zero,400afac <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 400b018:	d0a05603 	ldbu	r2,-32424(gp)
 400b01c:	10803fcc 	andi	r2,r2,255
 400b020:	1005003a 	cmpeq	r2,r2,zero
 400b024:	1000051e 	bne	r2,zero,400b03c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 400b028:	e0c00217 	ldw	r3,8(fp)
 400b02c:	00800084 	movi	r2,2
 400b030:	18800005 	stb	r2,0(r3)
        return (0);
 400b034:	e03fff15 	stw	zero,-4(fp)
 400b038:	00015506 	br	400b590 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 400b03c:	d0a047c3 	ldbu	r2,-32481(gp)
 400b040:	10803fcc 	andi	r2,r2,255
 400b044:	1005003a 	cmpeq	r2,r2,zero
 400b048:	1000051e 	bne	r2,zero,400b060 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 400b04c:	e0c00217 	ldw	r3,8(fp)
 400b050:	00800344 	movi	r2,13
 400b054:	18800005 	stb	r2,0(r3)
        return (0);
 400b058:	e03fff15 	stw	zero,-4(fp)
 400b05c:	00014c06 	br	400b590 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b060:	0005303a 	rdctl	r2,status
 400b064:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b068:	e0ffef17 	ldw	r3,-68(fp)
 400b06c:	00bfff84 	movi	r2,-2
 400b070:	1884703a 	and	r2,r3,r2
 400b074:	1001703a 	wrctl	status,r2
  
  return context;
 400b078:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 400b07c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 400b080:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 400b084:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 400b088:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 400b08c:	e0bff617 	ldw	r2,-40(fp)
 400b090:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 400b094:	e0bff517 	ldw	r2,-44(fp)
 400b098:	10800017 	ldw	r2,0(r2)
 400b09c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400b0a0:	00008f06 	br	400b2e0 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 400b0a4:	e0bff417 	ldw	r2,-48(fp)
 400b0a8:	10800003 	ldbu	r2,0(r2)
 400b0ac:	10803fcc 	andi	r2,r2,255
 400b0b0:	e0bffd15 	stw	r2,-12(fp)
 400b0b4:	e0fffd17 	ldw	r3,-12(fp)
 400b0b8:	188000a0 	cmpeqi	r2,r3,2
 400b0bc:	1000441e 	bne	r2,zero,400b1d0 <OSEventPendMulti+0x2dc>
 400b0c0:	e0fffd17 	ldw	r3,-12(fp)
 400b0c4:	188000e0 	cmpeqi	r2,r3,3
 400b0c8:	1000041e 	bne	r2,zero,400b0dc <OSEventPendMulti+0x1e8>
 400b0cc:	e0fffd17 	ldw	r3,-12(fp)
 400b0d0:	18800060 	cmpeqi	r2,r3,1
 400b0d4:	1000211e 	bne	r2,zero,400b15c <OSEventPendMulti+0x268>
 400b0d8:	00006f06 	br	400b298 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 400b0dc:	e0bff417 	ldw	r2,-48(fp)
 400b0e0:	1080020b 	ldhu	r2,8(r2)
 400b0e4:	10bfffcc 	andi	r2,r2,65535
 400b0e8:	1005003a 	cmpeq	r2,r2,zero
 400b0ec:	1000171e 	bne	r2,zero,400b14c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 400b0f0:	e0bff417 	ldw	r2,-48(fp)
 400b0f4:	1080020b 	ldhu	r2,8(r2)
 400b0f8:	10bfffc4 	addi	r2,r2,-1
 400b0fc:	1007883a 	mov	r3,r2
 400b100:	e0bff417 	ldw	r2,-48(fp)
 400b104:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400b108:	e0fff717 	ldw	r3,-36(fp)
 400b10c:	e0bff417 	ldw	r2,-48(fp)
 400b110:	18800015 	stw	r2,0(r3)
 400b114:	e0bff717 	ldw	r2,-36(fp)
 400b118:	10800104 	addi	r2,r2,4
 400b11c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 400b120:	00800044 	movi	r2,1
 400b124:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400b128:	e0bff817 	ldw	r2,-32(fp)
 400b12c:	10000015 	stw	zero,0(r2)
 400b130:	e0bff817 	ldw	r2,-32(fp)
 400b134:	10800104 	addi	r2,r2,4
 400b138:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 400b13c:	e0bff18b 	ldhu	r2,-58(fp)
 400b140:	10800044 	addi	r2,r2,1
 400b144:	e0bff18d 	sth	r2,-58(fp)
 400b148:	00005f06 	br	400b2c8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 400b14c:	e0bff103 	ldbu	r2,-60(fp)
 400b150:	10800054 	ori	r2,r2,1
 400b154:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400b158:	00005b06 	br	400b2c8 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 400b15c:	e0bff417 	ldw	r2,-48(fp)
 400b160:	10800117 	ldw	r2,4(r2)
 400b164:	1005003a 	cmpeq	r2,r2,zero
 400b168:	1000151e 	bne	r2,zero,400b1c0 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 400b16c:	e0bff417 	ldw	r2,-48(fp)
 400b170:	10c00117 	ldw	r3,4(r2)
 400b174:	e0bff817 	ldw	r2,-32(fp)
 400b178:	10c00015 	stw	r3,0(r2)
 400b17c:	e0bff817 	ldw	r2,-32(fp)
 400b180:	10800104 	addi	r2,r2,4
 400b184:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 400b188:	e0bff417 	ldw	r2,-48(fp)
 400b18c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 400b190:	e0fff717 	ldw	r3,-36(fp)
 400b194:	e0bff417 	ldw	r2,-48(fp)
 400b198:	18800015 	stw	r2,0(r3)
 400b19c:	e0bff717 	ldw	r2,-36(fp)
 400b1a0:	10800104 	addi	r2,r2,4
 400b1a4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 400b1a8:	00800044 	movi	r2,1
 400b1ac:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 400b1b0:	e0bff18b 	ldhu	r2,-58(fp)
 400b1b4:	10800044 	addi	r2,r2,1
 400b1b8:	e0bff18d 	sth	r2,-58(fp)
 400b1bc:	00004206 	br	400b2c8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 400b1c0:	e0bff103 	ldbu	r2,-60(fp)
 400b1c4:	10800094 	ori	r2,r2,2
 400b1c8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400b1cc:	00003e06 	br	400b2c8 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 400b1d0:	e0bff417 	ldw	r2,-48(fp)
 400b1d4:	10800117 	ldw	r2,4(r2)
 400b1d8:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 400b1dc:	e0bff317 	ldw	r2,-52(fp)
 400b1e0:	1080058b 	ldhu	r2,22(r2)
 400b1e4:	10bfffcc 	andi	r2,r2,65535
 400b1e8:	1005003a 	cmpeq	r2,r2,zero
 400b1ec:	1000261e 	bne	r2,zero,400b288 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400b1f0:	e0bff317 	ldw	r2,-52(fp)
 400b1f4:	11000417 	ldw	r4,16(r2)
 400b1f8:	20c00017 	ldw	r3,0(r4)
 400b1fc:	e0bff817 	ldw	r2,-32(fp)
 400b200:	10c00015 	stw	r3,0(r2)
 400b204:	e0bff817 	ldw	r2,-32(fp)
 400b208:	10800104 	addi	r2,r2,4
 400b20c:	e0bff815 	stw	r2,-32(fp)
 400b210:	20c00104 	addi	r3,r4,4
 400b214:	e0bff317 	ldw	r2,-52(fp)
 400b218:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 400b21c:	e0bff317 	ldw	r2,-52(fp)
 400b220:	10c00417 	ldw	r3,16(r2)
 400b224:	e0bff317 	ldw	r2,-52(fp)
 400b228:	10800217 	ldw	r2,8(r2)
 400b22c:	1880041e 	bne	r3,r2,400b240 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 400b230:	e0bff317 	ldw	r2,-52(fp)
 400b234:	10c00117 	ldw	r3,4(r2)
 400b238:	e0bff317 	ldw	r2,-52(fp)
 400b23c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400b240:	e0bff317 	ldw	r2,-52(fp)
 400b244:	1080058b 	ldhu	r2,22(r2)
 400b248:	10bfffc4 	addi	r2,r2,-1
 400b24c:	1007883a 	mov	r3,r2
 400b250:	e0bff317 	ldw	r2,-52(fp)
 400b254:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 400b258:	e0fff717 	ldw	r3,-36(fp)
 400b25c:	e0bff417 	ldw	r2,-48(fp)
 400b260:	18800015 	stw	r2,0(r3)
 400b264:	e0bff717 	ldw	r2,-36(fp)
 400b268:	10800104 	addi	r2,r2,4
 400b26c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 400b270:	00800044 	movi	r2,1
 400b274:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 400b278:	e0bff18b 	ldhu	r2,-58(fp)
 400b27c:	10800044 	addi	r2,r2,1
 400b280:	e0bff18d 	sth	r2,-58(fp)
 400b284:	00001006 	br	400b2c8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 400b288:	e0bff103 	ldbu	r2,-60(fp)
 400b28c:	10800114 	ori	r2,r2,4
 400b290:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400b294:	00000c06 	br	400b2c8 <OSEventPendMulti+0x3d4>
 400b298:	e0bff017 	ldw	r2,-64(fp)
 400b29c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b2a0:	e0bfee17 	ldw	r2,-72(fp)
 400b2a4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400b2a8:	e0bff717 	ldw	r2,-36(fp)
 400b2ac:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 400b2b0:	e0c00217 	ldw	r3,8(fp)
 400b2b4:	00800044 	movi	r2,1
 400b2b8:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 400b2bc:	e0bff18b 	ldhu	r2,-58(fp)
 400b2c0:	e0bfff15 	stw	r2,-4(fp)
 400b2c4:	0000b206 	br	400b590 <OSEventPendMulti+0x69c>
        }
        pevents++;
 400b2c8:	e0bff517 	ldw	r2,-44(fp)
 400b2cc:	10800104 	addi	r2,r2,4
 400b2d0:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 400b2d4:	e0bff517 	ldw	r2,-44(fp)
 400b2d8:	10800017 	ldw	r2,0(r2)
 400b2dc:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400b2e0:	e0bff417 	ldw	r2,-48(fp)
 400b2e4:	1004c03a 	cmpne	r2,r2,zero
 400b2e8:	103f6e1e 	bne	r2,zero,400b0a4 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 400b2ec:	e0bff203 	ldbu	r2,-56(fp)
 400b2f0:	10800058 	cmpnei	r2,r2,1
 400b2f4:	10000b1e 	bne	r2,zero,400b324 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 400b2f8:	e0bff717 	ldw	r2,-36(fp)
 400b2fc:	10000015 	stw	zero,0(r2)
 400b300:	e0bff017 	ldw	r2,-64(fp)
 400b304:	e0bfed15 	stw	r2,-76(fp)
 400b308:	e0bfed17 	ldw	r2,-76(fp)
 400b30c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 400b310:	e0800217 	ldw	r2,8(fp)
 400b314:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 400b318:	e0fff18b 	ldhu	r3,-58(fp)
 400b31c:	e0ffff15 	stw	r3,-4(fp)
 400b320:	00009b06 	br	400b590 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 400b324:	d1205717 	ldw	r4,-32420(gp)
 400b328:	d0a05717 	ldw	r2,-32420(gp)
 400b32c:	10c00d03 	ldbu	r3,52(r2)
 400b330:	e0bff103 	ldbu	r2,-60(fp)
 400b334:	1884b03a 	or	r2,r3,r2
 400b338:	1007883a 	mov	r3,r2
 400b33c:	00bfe004 	movi	r2,-128
 400b340:	1884b03a 	or	r2,r3,r2
 400b344:	20800d05 	stb	r2,52(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400b348:	d0a05717 	ldw	r2,-32420(gp)
 400b34c:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 400b350:	d0e05717 	ldw	r3,-32420(gp)
 400b354:	e0bff90b 	ldhu	r2,-28(fp)
 400b358:	18800c8d 	sth	r2,50(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 400b35c:	e13ff617 	ldw	r4,-40(fp)
 400b360:	400c0080 	call	400c008 <OS_EventTaskWaitMulti>
 400b364:	e0bff017 	ldw	r2,-64(fp)
 400b368:	e0bfec15 	stw	r2,-80(fp)
 400b36c:	e0bfec17 	ldw	r2,-80(fp)
 400b370:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 400b374:	400c7a40 	call	400c7a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b378:	0005303a 	rdctl	r2,status
 400b37c:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b380:	e0ffeb17 	ldw	r3,-84(fp)
 400b384:	00bfff84 	movi	r2,-2
 400b388:	1884703a 	and	r2,r3,r2
 400b38c:	1001703a 	wrctl	status,r2
  
  return context;
 400b390:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 400b394:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 400b398:	d0a05717 	ldw	r2,-32420(gp)
 400b39c:	10800d43 	ldbu	r2,53(r2)
 400b3a0:	10803fcc 	andi	r2,r2,255
 400b3a4:	e0bffc15 	stw	r2,-16(fp)
 400b3a8:	e0fffc17 	ldw	r3,-16(fp)
 400b3ac:	1805003a 	cmpeq	r2,r3,zero
 400b3b0:	1000041e 	bne	r2,zero,400b3c4 <OSEventPendMulti+0x4d0>
 400b3b4:	e0fffc17 	ldw	r3,-16(fp)
 400b3b8:	188000a0 	cmpeqi	r2,r3,2
 400b3bc:	1000011e 	bne	r2,zero,400b3c4 <OSEventPendMulti+0x4d0>
 400b3c0:	00001906 	br	400b428 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 400b3c4:	d0a05717 	ldw	r2,-32420(gp)
 400b3c8:	10800717 	ldw	r2,28(r2)
 400b3cc:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 400b3d0:	e0bff417 	ldw	r2,-48(fp)
 400b3d4:	1005003a 	cmpeq	r2,r2,zero
 400b3d8:	10000c1e 	bne	r2,zero,400b40c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400b3dc:	e0fff717 	ldw	r3,-36(fp)
 400b3e0:	e0bff417 	ldw	r2,-48(fp)
 400b3e4:	18800015 	stw	r2,0(r3)
 400b3e8:	e0bff717 	ldw	r2,-36(fp)
 400b3ec:	10800104 	addi	r2,r2,4
 400b3f0:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 400b3f4:	e0bff717 	ldw	r2,-36(fp)
 400b3f8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 400b3fc:	e0bff18b 	ldhu	r2,-58(fp)
 400b400:	10800044 	addi	r2,r2,1
 400b404:	e0bff18d 	sth	r2,-58(fp)
 400b408:	00000a06 	br	400b434 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 400b40c:	d0a05717 	ldw	r2,-32420(gp)
 400b410:	00c00044 	movi	r3,1
 400b414:	10c00d45 	stb	r3,53(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400b418:	d1205717 	ldw	r4,-32420(gp)
 400b41c:	e17ff617 	ldw	r5,-40(fp)
 400b420:	400c2140 	call	400c214 <OS_EventTaskRemoveMulti>
             }
			 break;
 400b424:	00000306 	br	400b434 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400b428:	d1205717 	ldw	r4,-32420(gp)
 400b42c:	e17ff617 	ldw	r5,-40(fp)
 400b430:	400c2140 	call	400c214 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 400b434:	d0a05717 	ldw	r2,-32420(gp)
 400b438:	10800d43 	ldbu	r2,53(r2)
 400b43c:	10803fcc 	andi	r2,r2,255
 400b440:	e0bffb15 	stw	r2,-20(fp)
 400b444:	e0fffb17 	ldw	r3,-20(fp)
 400b448:	1805003a 	cmpeq	r2,r3,zero
 400b44c:	1000041e 	bne	r2,zero,400b460 <OSEventPendMulti+0x56c>
 400b450:	e0fffb17 	ldw	r3,-20(fp)
 400b454:	188000a0 	cmpeqi	r2,r3,2
 400b458:	10002c1e 	bne	r2,zero,400b50c <OSEventPendMulti+0x618>
 400b45c:	00003406 	br	400b530 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 400b460:	e0bff417 	ldw	r2,-48(fp)
 400b464:	10800003 	ldbu	r2,0(r2)
 400b468:	10803fcc 	andi	r2,r2,255
 400b46c:	e0bffa15 	stw	r2,-24(fp)
 400b470:	e0fffa17 	ldw	r3,-24(fp)
 400b474:	18800050 	cmplti	r2,r3,1
 400b478:	1000151e 	bne	r2,zero,400b4d0 <OSEventPendMulti+0x5dc>
 400b47c:	e0fffa17 	ldw	r3,-24(fp)
 400b480:	188000d0 	cmplti	r2,r3,3
 400b484:	10000a1e 	bne	r2,zero,400b4b0 <OSEventPendMulti+0x5bc>
 400b488:	e0fffa17 	ldw	r3,-24(fp)
 400b48c:	188000e0 	cmpeqi	r2,r3,3
 400b490:	1000011e 	bne	r2,zero,400b498 <OSEventPendMulti+0x5a4>
 400b494:	00000e06 	br	400b4d0 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 400b498:	e0bff817 	ldw	r2,-32(fp)
 400b49c:	10000015 	stw	zero,0(r2)
 400b4a0:	e0bff817 	ldw	r2,-32(fp)
 400b4a4:	10800104 	addi	r2,r2,4
 400b4a8:	e0bff815 	stw	r2,-32(fp)
                      break;
 400b4ac:	00001406 	br	400b500 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 400b4b0:	d0a05717 	ldw	r2,-32420(gp)
 400b4b4:	10c00917 	ldw	r3,36(r2)
 400b4b8:	e0bff817 	ldw	r2,-32(fp)
 400b4bc:	10c00015 	stw	r3,0(r2)
 400b4c0:	e0bff817 	ldw	r2,-32(fp)
 400b4c4:	10800104 	addi	r2,r2,4
 400b4c8:	e0bff815 	stw	r2,-32(fp)
                      break;
 400b4cc:	00000c06 	br	400b500 <OSEventPendMulti+0x60c>
 400b4d0:	e0bff017 	ldw	r2,-64(fp)
 400b4d4:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b4d8:	e0bfea17 	ldw	r2,-88(fp)
 400b4dc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 400b4e0:	e0bff717 	ldw	r2,-36(fp)
 400b4e4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 400b4e8:	e0c00217 	ldw	r3,8(fp)
 400b4ec:	00800044 	movi	r2,1
 400b4f0:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 400b4f4:	e0bff18b 	ldhu	r2,-58(fp)
 400b4f8:	e0bfff15 	stw	r2,-4(fp)
 400b4fc:	00002406 	br	400b590 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 400b500:	e0800217 	ldw	r2,8(fp)
 400b504:	10000005 	stb	zero,0(r2)
             break;
 400b508:	00001106 	br	400b550 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 400b50c:	e0bff817 	ldw	r2,-32(fp)
 400b510:	10000015 	stw	zero,0(r2)
 400b514:	e0bff817 	ldw	r2,-32(fp)
 400b518:	10800104 	addi	r2,r2,4
 400b51c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 400b520:	e0c00217 	ldw	r3,8(fp)
 400b524:	00800384 	movi	r2,14
 400b528:	18800005 	stb	r2,0(r3)
             break;
 400b52c:	00000806 	br	400b550 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 400b530:	e0bff817 	ldw	r2,-32(fp)
 400b534:	10000015 	stw	zero,0(r2)
 400b538:	e0bff817 	ldw	r2,-32(fp)
 400b53c:	10800104 	addi	r2,r2,4
 400b540:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 400b544:	e0c00217 	ldw	r3,8(fp)
 400b548:	00800284 	movi	r2,10
 400b54c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 400b550:	d0a05717 	ldw	r2,-32420(gp)
 400b554:	10000d05 	stb	zero,52(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 400b558:	d0a05717 	ldw	r2,-32420(gp)
 400b55c:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 400b560:	d0a05717 	ldw	r2,-32420(gp)
 400b564:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400b568:	d0a05717 	ldw	r2,-32420(gp)
 400b56c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 400b570:	d0a05717 	ldw	r2,-32420(gp)
 400b574:	10000915 	stw	zero,36(r2)
 400b578:	e0bff017 	ldw	r2,-64(fp)
 400b57c:	e0bfe915 	stw	r2,-92(fp)
 400b580:	e0bfe917 	ldw	r2,-92(fp)
 400b584:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 400b588:	e0fff18b 	ldhu	r3,-58(fp)
 400b58c:	e0ffff15 	stw	r3,-4(fp)
 400b590:	e0bfff17 	ldw	r2,-4(fp)
}
 400b594:	e037883a 	mov	sp,fp
 400b598:	dfc00117 	ldw	ra,4(sp)
 400b59c:	df000017 	ldw	fp,0(sp)
 400b5a0:	dec00204 	addi	sp,sp,8
 400b5a4:	f800283a 	ret

0400b5a8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 400b5a8:	defffe04 	addi	sp,sp,-8
 400b5ac:	dfc00115 	stw	ra,4(sp)
 400b5b0:	df000015 	stw	fp,0(sp)
 400b5b4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 400b5b8:	4015fe80 	call	4015fe8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 400b5bc:	400c45c0 	call	400c45c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 400b5c0:	400c4a00 	call	400c4a0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 400b5c4:	400c6040 	call	400c604 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 400b5c8:	400c3800 	call	400c380 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 400b5cc:	400e8a00 	call	400e8a0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 400b5d0:	400f2780 	call	400f278 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 400b5d4:	40105d00 	call	40105d0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 400b5d8:	400c50c0 	call	400c50c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 400b5dc:	400c5880 	call	400c588 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 400b5e0:	40160040 	call	4016004 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 400b5e4:	400d0780 	call	400d078 <OSDebugInit>
#endif
}
 400b5e8:	e037883a 	mov	sp,fp
 400b5ec:	dfc00117 	ldw	ra,4(sp)
 400b5f0:	df000017 	ldw	fp,0(sp)
 400b5f4:	dec00204 	addi	sp,sp,8
 400b5f8:	f800283a 	ret

0400b5fc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 400b5fc:	defffc04 	addi	sp,sp,-16
 400b600:	df000315 	stw	fp,12(sp)
 400b604:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400b608:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 400b60c:	d0a04803 	ldbu	r2,-32480(gp)
 400b610:	10803fcc 	andi	r2,r2,255
 400b614:	10800058 	cmpnei	r2,r2,1
 400b618:	1000131e 	bne	r2,zero,400b668 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b61c:	0005303a 	rdctl	r2,status
 400b620:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b624:	e0fffe17 	ldw	r3,-8(fp)
 400b628:	00bfff84 	movi	r2,-2
 400b62c:	1884703a 	and	r2,r3,r2
 400b630:	1001703a 	wrctl	status,r2
  
  return context;
 400b634:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b638:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 400b63c:	d0a05603 	ldbu	r2,-32424(gp)
 400b640:	10803fcc 	andi	r2,r2,255
 400b644:	10803fe0 	cmpeqi	r2,r2,255
 400b648:	1000031e 	bne	r2,zero,400b658 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 400b64c:	d0a05603 	ldbu	r2,-32424(gp)
 400b650:	10800044 	addi	r2,r2,1
 400b654:	d0a05605 	stb	r2,-32424(gp)
 400b658:	e0bfff17 	ldw	r2,-4(fp)
 400b65c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b660:	e0bffd17 	ldw	r2,-12(fp)
 400b664:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 400b668:	e037883a 	mov	sp,fp
 400b66c:	df000017 	ldw	fp,0(sp)
 400b670:	dec00104 	addi	sp,sp,4
 400b674:	f800283a 	ret

0400b678 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/
//wwwww
void  OSIntExit (void)
{
 400b678:	defffa04 	addi	sp,sp,-24
 400b67c:	dfc00515 	stw	ra,20(sp)
 400b680:	df000415 	stw	fp,16(sp)
 400b684:	dc000315 	stw	r16,12(sp)
 400b688:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400b68c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 400b690:	d0a04803 	ldbu	r2,-32480(gp)
 400b694:	10803fcc 	andi	r2,r2,255
 400b698:	10800058 	cmpnei	r2,r2,1
 400b69c:	1000641e 	bne	r2,zero,400b830 <OSIntExit+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b6a0:	0005303a 	rdctl	r2,status
 400b6a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b6a8:	e0fffe17 	ldw	r3,-8(fp)
 400b6ac:	00bfff84 	movi	r2,-2
 400b6b0:	1884703a 	and	r2,r3,r2
 400b6b4:	1001703a 	wrctl	status,r2
  
  return context;
 400b6b8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b6bc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400b6c0:	d0a05603 	ldbu	r2,-32424(gp)
 400b6c4:	10803fcc 	andi	r2,r2,255
 400b6c8:	1005003a 	cmpeq	r2,r2,zero
 400b6cc:	1000031e 	bne	r2,zero,400b6dc <OSIntExit+0x64>
            OSIntNesting--;
 400b6d0:	d0a05603 	ldbu	r2,-32424(gp)
 400b6d4:	10bfffc4 	addi	r2,r2,-1
 400b6d8:	d0a05605 	stb	r2,-32424(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 400b6dc:	d0a05603 	ldbu	r2,-32424(gp)
 400b6e0:	10803fcc 	andi	r2,r2,255
 400b6e4:	1004c03a 	cmpne	r2,r2,zero
 400b6e8:	10004d1e 	bne	r2,zero,400b820 <OSIntExit+0x1a8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 400b6ec:	d0a047c3 	ldbu	r2,-32481(gp)
 400b6f0:	10803fcc 	andi	r2,r2,255
 400b6f4:	1004c03a 	cmpne	r2,r2,zero
 400b6f8:	1000491e 	bne	r2,zero,400b820 <OSIntExit+0x1a8>
                OS_SchedNew();
 400b6fc:	400c9480 	call	400c948 <OS_SchedNew>
                //Modified here
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400b700:	d0a04a03 	ldbu	r2,-32472(gp)
 400b704:	d0e04a43 	ldbu	r3,-32471(gp)
 400b708:	11003fcc 	andi	r4,r2,255
 400b70c:	18803fcc 	andi	r2,r3,255
 400b710:	20804326 	beq	r4,r2,400b820 <OSIntExit+0x1a8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400b714:	d0a04a03 	ldbu	r2,-32472(gp)
 400b718:	10803fcc 	andi	r2,r2,255
 400b71c:	00c100b4 	movhi	r3,1026
 400b720:	18f7d104 	addi	r3,r3,-8380
 400b724:	1085883a 	add	r2,r2,r2
 400b728:	1085883a 	add	r2,r2,r2
 400b72c:	10c5883a 	add	r2,r2,r3
 400b730:	10800017 	ldw	r2,0(r2)
 400b734:	d0a05215 	stw	r2,-32440(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 400b738:	d0e05217 	ldw	r3,-32440(gp)
 400b73c:	18800f17 	ldw	r2,60(r3)
 400b740:	10800044 	addi	r2,r2,1
 400b744:	18800f15 	stw	r2,60(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400b748:	d0a04d17 	ldw	r2,-32460(gp)
 400b74c:	10800044 	addi	r2,r2,1
 400b750:	d0a04d15 	stw	r2,-32460(gp)

                    if (buffer_index < BUFFER_SIZE && !TIMEOUT ) {
 400b754:	d0a04703 	ldbu	r2,-32484(gp)
 400b758:	10803fcc 	andi	r2,r2,255
 400b75c:	108007a8 	cmpgeui	r2,r2,30
 400b760:	10002e1e 	bne	r2,zero,400b81c <OSIntExit+0x1a4>
 400b764:	d0a04743 	ldbu	r2,-32483(gp)
 400b768:	10803fcc 	andi	r2,r2,255
 400b76c:	1004c03a 	cmpne	r2,r2,zero
 400b770:	10002a1e 	bne	r2,zero,400b81c <OSIntExit+0x1a4>
                    	pb[buffer_index][_TT] = OSTimeGet();
 400b774:	d0a04703 	ldbu	r2,-32484(gp)
 400b778:	14003fcc 	andi	r16,r2,255
 400b77c:	40131580 	call	4013158 <OSTimeGet>
 400b780:	1009883a 	mov	r4,r2
 400b784:	00c100b4 	movhi	r3,1026
 400b788:	18e2d904 	addi	r3,r3,-29852
 400b78c:	8004913a 	slli	r2,r16,4
 400b790:	10c5883a 	add	r2,r2,r3
 400b794:	11000015 	stw	r4,0(r2)
						pb[buffer_index][_INFO] = _PREEMPT;
 400b798:	d0a04703 	ldbu	r2,-32484(gp)
 400b79c:	10803fcc 	andi	r2,r2,255
 400b7a0:	00c100b4 	movhi	r3,1026
 400b7a4:	18e2d904 	addi	r3,r3,-29852
 400b7a8:	1004913a 	slli	r2,r2,4
 400b7ac:	10c5883a 	add	r2,r2,r3
 400b7b0:	10c00104 	addi	r3,r2,4
 400b7b4:	00800044 	movi	r2,1
 400b7b8:	18800015 	stw	r2,0(r3)
						pb[buffer_index][_TO] = OSPrioHighRdy;
 400b7bc:	d0a04703 	ldbu	r2,-32484(gp)
 400b7c0:	11003fcc 	andi	r4,r2,255
 400b7c4:	d0a04a03 	ldbu	r2,-32472(gp)
 400b7c8:	11403fcc 	andi	r5,r2,255
 400b7cc:	00c100b4 	movhi	r3,1026
 400b7d0:	18e2d904 	addi	r3,r3,-29852
 400b7d4:	2004913a 	slli	r2,r4,4
 400b7d8:	10c5883a 	add	r2,r2,r3
 400b7dc:	10800204 	addi	r2,r2,8
 400b7e0:	11400015 	stw	r5,0(r2)
						pb[buffer_index][_FROM] = OSTCBCur->OSTCBPrio;
 400b7e4:	d0a04703 	ldbu	r2,-32484(gp)
 400b7e8:	11003fcc 	andi	r4,r2,255
 400b7ec:	d0a05717 	ldw	r2,-32420(gp)
 400b7f0:	10800d83 	ldbu	r2,54(r2)
 400b7f4:	11403fcc 	andi	r5,r2,255
 400b7f8:	00c100b4 	movhi	r3,1026
 400b7fc:	18e2d904 	addi	r3,r3,-29852
 400b800:	2004913a 	slli	r2,r4,4
 400b804:	10c5883a 	add	r2,r2,r3
 400b808:	10800304 	addi	r2,r2,12
 400b80c:	11400015 	stw	r5,0(r2)
                    	//sprintf(pb[buffer_index], "%u %u %u %u\0",  _PREEMPT,  OSTCBCur->OSTCBPrio, OSPrioHighRdy, OSTimeGet());
						//printf("AAAAA: %s\n", pb[buffer_index]);
						buffer_index++;
 400b810:	d0a04703 	ldbu	r2,-32484(gp)
 400b814:	10800044 	addi	r2,r2,1
 400b818:	d0a04705 	stb	r2,-32484(gp)
					}

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 400b81c:	4015b740 	call	4015b74 <OSCtxSw>
 400b820:	e0bfff17 	ldw	r2,-4(fp)
 400b824:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b828:	e0bffd17 	ldw	r2,-12(fp)
 400b82c:	1001703a 	wrctl	status,r2
                //if( !TIMEOUT ) check_timeout();
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400b830:	e037883a 	mov	sp,fp
 400b834:	dfc00217 	ldw	ra,8(sp)
 400b838:	df000117 	ldw	fp,4(sp)
 400b83c:	dc000017 	ldw	r16,0(sp)
 400b840:	dec00304 	addi	sp,sp,12
 400b844:	f800283a 	ret

0400b848 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 400b848:	defffc04 	addi	sp,sp,-16
 400b84c:	df000315 	stw	fp,12(sp)
 400b850:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400b854:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 400b858:	d0a04803 	ldbu	r2,-32480(gp)
 400b85c:	10803fcc 	andi	r2,r2,255
 400b860:	10800058 	cmpnei	r2,r2,1
 400b864:	1000171e 	bne	r2,zero,400b8c4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b868:	0005303a 	rdctl	r2,status
 400b86c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b870:	e0fffe17 	ldw	r3,-8(fp)
 400b874:	00bfff84 	movi	r2,-2
 400b878:	1884703a 	and	r2,r3,r2
 400b87c:	1001703a 	wrctl	status,r2
  
  return context;
 400b880:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b884:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400b888:	d0a05603 	ldbu	r2,-32424(gp)
 400b88c:	10803fcc 	andi	r2,r2,255
 400b890:	1004c03a 	cmpne	r2,r2,zero
 400b894:	1000071e 	bne	r2,zero,400b8b4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400b898:	d0a047c3 	ldbu	r2,-32481(gp)
 400b89c:	10803fcc 	andi	r2,r2,255
 400b8a0:	10803fe0 	cmpeqi	r2,r2,255
 400b8a4:	1000031e 	bne	r2,zero,400b8b4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400b8a8:	d0a047c3 	ldbu	r2,-32481(gp)
 400b8ac:	10800044 	addi	r2,r2,1
 400b8b0:	d0a047c5 	stb	r2,-32481(gp)
 400b8b4:	e0bfff17 	ldw	r2,-4(fp)
 400b8b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b8bc:	e0bffd17 	ldw	r2,-12(fp)
 400b8c0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400b8c4:	e037883a 	mov	sp,fp
 400b8c8:	df000017 	ldw	fp,0(sp)
 400b8cc:	dec00104 	addi	sp,sp,4
 400b8d0:	f800283a 	ret

0400b8d4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 400b8d4:	defff804 	addi	sp,sp,-32
 400b8d8:	dfc00715 	stw	ra,28(sp)
 400b8dc:	df000615 	stw	fp,24(sp)
 400b8e0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400b8e4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400b8e8:	d0a04803 	ldbu	r2,-32480(gp)
 400b8ec:	10803fcc 	andi	r2,r2,255
 400b8f0:	10800058 	cmpnei	r2,r2,1
 400b8f4:	10002b1e 	bne	r2,zero,400b9a4 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b8f8:	0005303a 	rdctl	r2,status
 400b8fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b900:	e0fffe17 	ldw	r3,-8(fp)
 400b904:	00bfff84 	movi	r2,-2
 400b908:	1884703a 	and	r2,r3,r2
 400b90c:	1001703a 	wrctl	status,r2
  
  return context;
 400b910:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400b914:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400b918:	d0a047c3 	ldbu	r2,-32481(gp)
 400b91c:	10803fcc 	andi	r2,r2,255
 400b920:	1005003a 	cmpeq	r2,r2,zero
 400b924:	10001b1e 	bne	r2,zero,400b994 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 400b928:	d0a047c3 	ldbu	r2,-32481(gp)
 400b92c:	10bfffc4 	addi	r2,r2,-1
 400b930:	d0a047c5 	stb	r2,-32481(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 400b934:	d0a047c3 	ldbu	r2,-32481(gp)
 400b938:	10803fcc 	andi	r2,r2,255
 400b93c:	1004c03a 	cmpne	r2,r2,zero
 400b940:	10000f1e 	bne	r2,zero,400b980 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 400b944:	d0a05603 	ldbu	r2,-32424(gp)
 400b948:	10803fcc 	andi	r2,r2,255
 400b94c:	1004c03a 	cmpne	r2,r2,zero
 400b950:	1000061e 	bne	r2,zero,400b96c <OSSchedUnlock+0x98>
 400b954:	e0bfff17 	ldw	r2,-4(fp)
 400b958:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b95c:	e0bffd17 	ldw	r2,-12(fp)
 400b960:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 400b964:	400c7a40 	call	400c7a4 <OS_Sched>
 400b968:	00000e06 	br	400b9a4 <OSSchedUnlock+0xd0>
 400b96c:	e0bfff17 	ldw	r2,-4(fp)
 400b970:	e0bffc15 	stw	r2,-16(fp)
 400b974:	e0bffc17 	ldw	r2,-16(fp)
 400b978:	1001703a 	wrctl	status,r2
 400b97c:	00000906 	br	400b9a4 <OSSchedUnlock+0xd0>
 400b980:	e0bfff17 	ldw	r2,-4(fp)
 400b984:	e0bffb15 	stw	r2,-20(fp)
 400b988:	e0bffb17 	ldw	r2,-20(fp)
 400b98c:	1001703a 	wrctl	status,r2
 400b990:	00000406 	br	400b9a4 <OSSchedUnlock+0xd0>
 400b994:	e0bfff17 	ldw	r2,-4(fp)
 400b998:	e0bffa15 	stw	r2,-24(fp)
 400b99c:	e0bffa17 	ldw	r2,-24(fp)
 400b9a0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 400b9a4:	e037883a 	mov	sp,fp
 400b9a8:	dfc00117 	ldw	ra,4(sp)
 400b9ac:	df000017 	ldw	fp,0(sp)
 400b9b0:	dec00204 	addi	sp,sp,8
 400b9b4:	f800283a 	ret

0400b9b8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 400b9b8:	defffe04 	addi	sp,sp,-8
 400b9bc:	dfc00115 	stw	ra,4(sp)
 400b9c0:	df000015 	stw	fp,0(sp)
 400b9c4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 400b9c8:	d0a04803 	ldbu	r2,-32480(gp)
 400b9cc:	10803fcc 	andi	r2,r2,255
 400b9d0:	1004c03a 	cmpne	r2,r2,zero
 400b9d4:	10000f1e 	bne	r2,zero,400ba14 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 400b9d8:	400c9480 	call	400c948 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 400b9dc:	d0a04a03 	ldbu	r2,-32472(gp)
 400b9e0:	d0a04a45 	stb	r2,-32471(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400b9e4:	d0a04a03 	ldbu	r2,-32472(gp)
 400b9e8:	10803fcc 	andi	r2,r2,255
 400b9ec:	00c100b4 	movhi	r3,1026
 400b9f0:	18f7d104 	addi	r3,r3,-8380
 400b9f4:	1085883a 	add	r2,r2,r2
 400b9f8:	1085883a 	add	r2,r2,r2
 400b9fc:	10c5883a 	add	r2,r2,r3
 400ba00:	10800017 	ldw	r2,0(r2)
 400ba04:	d0a05215 	stw	r2,-32440(gp)
        OSTCBCur      = OSTCBHighRdy;
 400ba08:	d0a05217 	ldw	r2,-32440(gp)
 400ba0c:	d0a05715 	stw	r2,-32420(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 400ba10:	4015c000 	call	4015c00 <OSStartHighRdy>
    }
}
 400ba14:	e037883a 	mov	sp,fp
 400ba18:	dfc00117 	ldw	ra,4(sp)
 400ba1c:	df000017 	ldw	fp,0(sp)
 400ba20:	dec00204 	addi	sp,sp,8
 400ba24:	f800283a 	ret

0400ba28 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 400ba28:	defff904 	addi	sp,sp,-28
 400ba2c:	dfc00615 	stw	ra,24(sp)
 400ba30:	df000515 	stw	fp,20(sp)
 400ba34:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ba38:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 400ba3c:	01000084 	movi	r4,2
 400ba40:	4012c840 	call	4012c84 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ba44:	0005303a 	rdctl	r2,status
 400ba48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba4c:	e0fffe17 	ldw	r3,-8(fp)
 400ba50:	00bfff84 	movi	r2,-2
 400ba54:	1884703a 	and	r2,r3,r2
 400ba58:	1001703a 	wrctl	status,r2
  
  return context;
 400ba5c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 400ba60:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 400ba64:	d0204915 	stw	zero,-32476(gp)
 400ba68:	e0bfff17 	ldw	r2,-4(fp)
 400ba6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ba70:	e0bffd17 	ldw	r2,-12(fp)
 400ba74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 400ba78:	01000284 	movi	r4,10
 400ba7c:	4012c840 	call	4012c84 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ba80:	0005303a 	rdctl	r2,status
 400ba84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba88:	e0fffc17 	ldw	r3,-16(fp)
 400ba8c:	00bfff84 	movi	r2,-2
 400ba90:	1884703a 	and	r2,r3,r2
 400ba94:	1001703a 	wrctl	status,r2
  
  return context;
 400ba98:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 400ba9c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 400baa0:	d0a04917 	ldw	r2,-32476(gp)
 400baa4:	d0a04e15 	stw	r2,-32456(gp)
    OSStatRdy    = OS_TRUE;
 400baa8:	00800044 	movi	r2,1
 400baac:	d0a05a05 	stb	r2,-32408(gp)
 400bab0:	e0bfff17 	ldw	r2,-4(fp)
 400bab4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bab8:	e0bffb17 	ldw	r2,-20(fp)
 400babc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 400bac0:	e037883a 	mov	sp,fp
 400bac4:	dfc00117 	ldw	ra,4(sp)
 400bac8:	df000017 	ldw	fp,0(sp)
 400bacc:	dec00204 	addi	sp,sp,8
 400bad0:	f800283a 	ret

0400bad4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 400bad4:	defff604 	addi	sp,sp,-40
 400bad8:	dfc00915 	stw	ra,36(sp)
 400badc:	df000815 	stw	fp,32(sp)
 400bae0:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
    //modified here
    OSTCBCur->compTime = OSTCBCur->compTime-1;//ptcb
 400bae4:	d0e05717 	ldw	r3,-32420(gp)
 400bae8:	d0a05717 	ldw	r2,-32420(gp)
 400baec:	10800b83 	ldbu	r2,46(r2)
 400baf0:	10bfffc4 	addi	r2,r2,-1
 400baf4:	18800b85 	stb	r2,46(r3)
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400baf8:	e03ffc15 	stw	zero,-16(fp)
#endif


#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 400bafc:	4015fcc0 	call	4015fcc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bb00:	0005303a 	rdctl	r2,status
 400bb04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bb08:	e0fffb17 	ldw	r3,-20(fp)
 400bb0c:	00bfff84 	movi	r2,-2
 400bb10:	1884703a 	and	r2,r3,r2
 400bb14:	1001703a 	wrctl	status,r2
  
  return context;
 400bb18:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 400bb1c:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 400bb20:	d0a05817 	ldw	r2,-32416(gp)
 400bb24:	10800044 	addi	r2,r2,1
 400bb28:	d0a05815 	stw	r2,-32416(gp)
 400bb2c:	e0bffc17 	ldw	r2,-16(fp)
 400bb30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bb34:	e0bffa17 	ldw	r2,-24(fp)
 400bb38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 400bb3c:	d0a04803 	ldbu	r2,-32480(gp)
 400bb40:	10803fcc 	andi	r2,r2,255
 400bb44:	10800058 	cmpnei	r2,r2,1
 400bb48:	1000721e 	bne	r2,zero,400bd14 <OSTimeTick+0x240>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 400bb4c:	d0a04c03 	ldbu	r2,-32464(gp)
 400bb50:	10803fcc 	andi	r2,r2,255
 400bb54:	e0bfff15 	stw	r2,-4(fp)
 400bb58:	e0ffff17 	ldw	r3,-4(fp)
 400bb5c:	18800060 	cmpeqi	r2,r3,1
 400bb60:	10000a1e 	bne	r2,zero,400bb8c <OSTimeTick+0xb8>
 400bb64:	e0ffff17 	ldw	r3,-4(fp)
 400bb68:	188000a0 	cmpeqi	r2,r3,2
 400bb6c:	1000091e 	bne	r2,zero,400bb94 <OSTimeTick+0xc0>
 400bb70:	e0ffff17 	ldw	r3,-4(fp)
 400bb74:	1805003a 	cmpeq	r2,r3,zero
 400bb78:	1000011e 	bne	r2,zero,400bb80 <OSTimeTick+0xac>
 400bb7c:	00000a06 	br	400bba8 <OSTimeTick+0xd4>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 400bb80:	00800044 	movi	r2,1
 400bb84:	e0bffd05 	stb	r2,-12(fp)
                 break;
 400bb88:	00000a06 	br	400bbb4 <OSTimeTick+0xe0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 400bb8c:	e03ffd05 	stb	zero,-12(fp)
                 break;
 400bb90:	00000806 	br	400bbb4 <OSTimeTick+0xe0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 400bb94:	00800044 	movi	r2,1
 400bb98:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 400bb9c:	00800044 	movi	r2,1
 400bba0:	d0a04c05 	stb	r2,-32464(gp)
                 break;
 400bba4:	00000306 	br	400bbb4 <OSTimeTick+0xe0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 400bba8:	00800044 	movi	r2,1
 400bbac:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 400bbb0:	d0204c05 	stb	zero,-32464(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 400bbb4:	e0bffd03 	ldbu	r2,-12(fp)
 400bbb8:	1005003a 	cmpeq	r2,r2,zero
 400bbbc:	1000551e 	bne	r2,zero,400bd14 <OSTimeTick+0x240>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 400bbc0:	d0a04b17 	ldw	r2,-32468(gp)
 400bbc4:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400bbc8:	00004d06 	br	400bd00 <OSTimeTick+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bbcc:	0005303a 	rdctl	r2,status
 400bbd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bbd4:	e0fff917 	ldw	r3,-28(fp)
 400bbd8:	00bfff84 	movi	r2,-2
 400bbdc:	1884703a 	and	r2,r3,r2
 400bbe0:	1001703a 	wrctl	status,r2
  
  return context;
 400bbe4:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 400bbe8:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 400bbec:	e0bffe17 	ldw	r2,-8(fp)
 400bbf0:	10800c8b 	ldhu	r2,50(r2)
 400bbf4:	10bfffcc 	andi	r2,r2,65535
 400bbf8:	1005003a 	cmpeq	r2,r2,zero
 400bbfc:	1000391e 	bne	r2,zero,400bce4 <OSTimeTick+0x210>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 400bc00:	e0bffe17 	ldw	r2,-8(fp)
 400bc04:	10800c8b 	ldhu	r2,50(r2)
 400bc08:	10bfffc4 	addi	r2,r2,-1
 400bc0c:	1007883a 	mov	r3,r2
 400bc10:	e0bffe17 	ldw	r2,-8(fp)
 400bc14:	10c00c8d 	sth	r3,50(r2)
 400bc18:	e0bffe17 	ldw	r2,-8(fp)
 400bc1c:	10800c8b 	ldhu	r2,50(r2)
 400bc20:	10bfffcc 	andi	r2,r2,65535
 400bc24:	1004c03a 	cmpne	r2,r2,zero
 400bc28:	10002e1e 	bne	r2,zero,400bce4 <OSTimeTick+0x210>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400bc2c:	e0bffe17 	ldw	r2,-8(fp)
 400bc30:	10800d03 	ldbu	r2,52(r2)
 400bc34:	10803fcc 	andi	r2,r2,255
 400bc38:	10800dcc 	andi	r2,r2,55
 400bc3c:	1005003a 	cmpeq	r2,r2,zero
 400bc40:	10000b1e 	bne	r2,zero,400bc70 <OSTimeTick+0x19c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 400bc44:	e0bffe17 	ldw	r2,-8(fp)
 400bc48:	10c00d03 	ldbu	r3,52(r2)
 400bc4c:	00bff204 	movi	r2,-56
 400bc50:	1884703a 	and	r2,r3,r2
 400bc54:	1007883a 	mov	r3,r2
 400bc58:	e0bffe17 	ldw	r2,-8(fp)
 400bc5c:	10c00d05 	stb	r3,52(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 400bc60:	e0fffe17 	ldw	r3,-8(fp)
 400bc64:	00800044 	movi	r2,1
 400bc68:	18800d45 	stb	r2,53(r3)
 400bc6c:	00000206 	br	400bc78 <OSTimeTick+0x1a4>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400bc70:	e0bffe17 	ldw	r2,-8(fp)
 400bc74:	10000d45 	stb	zero,53(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 400bc78:	e0bffe17 	ldw	r2,-8(fp)
 400bc7c:	10800d03 	ldbu	r2,52(r2)
 400bc80:	10803fcc 	andi	r2,r2,255
 400bc84:	1080020c 	andi	r2,r2,8
 400bc88:	1004c03a 	cmpne	r2,r2,zero
 400bc8c:	1000151e 	bne	r2,zero,400bce4 <OSTimeTick+0x210>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 400bc90:	e0bffe17 	ldw	r2,-8(fp)
 400bc94:	10c00e83 	ldbu	r3,58(r2)
 400bc98:	d0a05403 	ldbu	r2,-32432(gp)
 400bc9c:	1884b03a 	or	r2,r3,r2
 400bca0:	d0a05405 	stb	r2,-32432(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400bca4:	e0bffe17 	ldw	r2,-8(fp)
 400bca8:	10800e03 	ldbu	r2,56(r2)
 400bcac:	11003fcc 	andi	r4,r2,255
 400bcb0:	e0bffe17 	ldw	r2,-8(fp)
 400bcb4:	10800e03 	ldbu	r2,56(r2)
 400bcb8:	10c03fcc 	andi	r3,r2,255
 400bcbc:	d0a05444 	addi	r2,gp,-32431
 400bcc0:	1885883a 	add	r2,r3,r2
 400bcc4:	10c00003 	ldbu	r3,0(r2)
 400bcc8:	e0bffe17 	ldw	r2,-8(fp)
 400bccc:	10800e43 	ldbu	r2,57(r2)
 400bcd0:	1884b03a 	or	r2,r3,r2
 400bcd4:	1007883a 	mov	r3,r2
 400bcd8:	d0a05444 	addi	r2,gp,-32431
 400bcdc:	2085883a 	add	r2,r4,r2
 400bce0:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 400bce4:	e0bffe17 	ldw	r2,-8(fp)
 400bce8:	10800517 	ldw	r2,20(r2)
 400bcec:	e0bffe15 	stw	r2,-8(fp)
 400bcf0:	e0bffc17 	ldw	r2,-16(fp)
 400bcf4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bcf8:	e0bff817 	ldw	r2,-32(fp)
 400bcfc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400bd00:	e0bffe17 	ldw	r2,-8(fp)
 400bd04:	10800d83 	ldbu	r2,54(r2)
 400bd08:	10803fcc 	andi	r2,r2,255
 400bd0c:	10800518 	cmpnei	r2,r2,20
 400bd10:	103fae1e 	bne	r2,zero,400bbcc <OSTimeTick+0xf8>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 400bd14:	e037883a 	mov	sp,fp
 400bd18:	dfc00117 	ldw	ra,4(sp)
 400bd1c:	df000017 	ldw	fp,0(sp)
 400bd20:	dec00204 	addi	sp,sp,8
 400bd24:	f800283a 	ret

0400bd28 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 400bd28:	deffff04 	addi	sp,sp,-4
 400bd2c:	df000015 	stw	fp,0(sp)
 400bd30:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 400bd34:	00804784 	movi	r2,286
}
 400bd38:	e037883a 	mov	sp,fp
 400bd3c:	df000017 	ldw	fp,0(sp)
 400bd40:	dec00104 	addi	sp,sp,4
 400bd44:	f800283a 	ret

0400bd48 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 400bd48:	deffff04 	addi	sp,sp,-4
 400bd4c:	df000015 	stw	fp,0(sp)
 400bd50:	d839883a 	mov	fp,sp
}
 400bd54:	e037883a 	mov	sp,fp
 400bd58:	df000017 	ldw	fp,0(sp)
 400bd5c:	dec00104 	addi	sp,sp,4
 400bd60:	f800283a 	ret

0400bd64 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 400bd64:	defff804 	addi	sp,sp,-32
 400bd68:	dfc00715 	stw	ra,28(sp)
 400bd6c:	df000615 	stw	fp,24(sp)
 400bd70:	df000604 	addi	fp,sp,24
 400bd74:	e13ffc15 	stw	r4,-16(fp)
 400bd78:	e17ffd15 	stw	r5,-12(fp)
 400bd7c:	e1bffe05 	stb	r6,-8(fp)
 400bd80:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 400bd84:	e0bffc17 	ldw	r2,-16(fp)
 400bd88:	10800283 	ldbu	r2,10(r2)
 400bd8c:	10c03fcc 	andi	r3,r2,255
 400bd90:	00810074 	movhi	r2,1025
 400bd94:	109b6504 	addi	r2,r2,28052
 400bd98:	10c5883a 	add	r2,r2,r3
 400bd9c:	10800003 	ldbu	r2,0(r2)
 400bda0:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 400bda4:	e0fffa83 	ldbu	r3,-22(fp)
 400bda8:	e0bffc17 	ldw	r2,-16(fp)
 400bdac:	1885883a 	add	r2,r3,r2
 400bdb0:	10800204 	addi	r2,r2,8
 400bdb4:	108000c3 	ldbu	r2,3(r2)
 400bdb8:	10c03fcc 	andi	r3,r2,255
 400bdbc:	00810074 	movhi	r2,1025
 400bdc0:	109b6504 	addi	r2,r2,28052
 400bdc4:	10c5883a 	add	r2,r2,r3
 400bdc8:	10800003 	ldbu	r2,0(r2)
 400bdcc:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 400bdd0:	e0bffa83 	ldbu	r2,-22(fp)
 400bdd4:	100490fa 	slli	r2,r2,3
 400bdd8:	1007883a 	mov	r3,r2
 400bddc:	e0bffa43 	ldbu	r2,-23(fp)
 400bde0:	1885883a 	add	r2,r3,r2
 400bde4:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400bde8:	e0bffa03 	ldbu	r2,-24(fp)
 400bdec:	00c100b4 	movhi	r3,1026
 400bdf0:	18f7d104 	addi	r3,r3,-8380
 400bdf4:	1085883a 	add	r2,r2,r2
 400bdf8:	1085883a 	add	r2,r2,r2
 400bdfc:	10c5883a 	add	r2,r2,r3
 400be00:	10800017 	ldw	r2,0(r2)
 400be04:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 400be08:	e0bffb17 	ldw	r2,-20(fp)
 400be0c:	10000c8d 	sth	zero,50(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 400be10:	e0fffb17 	ldw	r3,-20(fp)
 400be14:	e0bffd17 	ldw	r2,-12(fp)
 400be18:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400be1c:	e0bffb17 	ldw	r2,-20(fp)
 400be20:	10800d03 	ldbu	r2,52(r2)
 400be24:	1007883a 	mov	r3,r2
 400be28:	e0bffe03 	ldbu	r2,-8(fp)
 400be2c:	0084303a 	nor	r2,zero,r2
 400be30:	1884703a 	and	r2,r3,r2
 400be34:	1007883a 	mov	r3,r2
 400be38:	e0bffb17 	ldw	r2,-20(fp)
 400be3c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 400be40:	e0fffb17 	ldw	r3,-20(fp)
 400be44:	e0bfff03 	ldbu	r2,-4(fp)
 400be48:	18800d45 	stb	r2,53(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 400be4c:	e0bffb17 	ldw	r2,-20(fp)
 400be50:	10800d03 	ldbu	r2,52(r2)
 400be54:	10803fcc 	andi	r2,r2,255
 400be58:	1080020c 	andi	r2,r2,8
 400be5c:	1004c03a 	cmpne	r2,r2,zero
 400be60:	1000111e 	bne	r2,zero,400bea8 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 400be64:	e0bffb17 	ldw	r2,-20(fp)
 400be68:	10c00e83 	ldbu	r3,58(r2)
 400be6c:	d0a05403 	ldbu	r2,-32432(gp)
 400be70:	1884b03a 	or	r2,r3,r2
 400be74:	d0a05405 	stb	r2,-32432(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400be78:	e13ffa83 	ldbu	r4,-22(fp)
 400be7c:	e0fffa83 	ldbu	r3,-22(fp)
 400be80:	d0a05444 	addi	r2,gp,-32431
 400be84:	1885883a 	add	r2,r3,r2
 400be88:	10c00003 	ldbu	r3,0(r2)
 400be8c:	e0bffb17 	ldw	r2,-20(fp)
 400be90:	10800e43 	ldbu	r2,57(r2)
 400be94:	1884b03a 	or	r2,r3,r2
 400be98:	1007883a 	mov	r3,r2
 400be9c:	d0a05444 	addi	r2,gp,-32431
 400bea0:	2085883a 	add	r2,r4,r2
 400bea4:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400bea8:	e13ffb17 	ldw	r4,-20(fp)
 400beac:	e17ffc17 	ldw	r5,-16(fp)
 400beb0:	400c15c0 	call	400c15c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 400beb4:	e0bffb17 	ldw	r2,-20(fp)
 400beb8:	10800817 	ldw	r2,32(r2)
 400bebc:	1005003a 	cmpeq	r2,r2,zero
 400bec0:	1000071e 	bne	r2,zero,400bee0 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400bec4:	e0bffb17 	ldw	r2,-20(fp)
 400bec8:	11400817 	ldw	r5,32(r2)
 400becc:	e13ffb17 	ldw	r4,-20(fp)
 400bed0:	400c2140 	call	400c214 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 400bed4:	e0fffb17 	ldw	r3,-20(fp)
 400bed8:	e0bffc17 	ldw	r2,-16(fp)
 400bedc:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 400bee0:	e0bffa03 	ldbu	r2,-24(fp)
}
 400bee4:	e037883a 	mov	sp,fp
 400bee8:	dfc00117 	ldw	ra,4(sp)
 400beec:	df000017 	ldw	fp,0(sp)
 400bef0:	dec00204 	addi	sp,sp,8
 400bef4:	f800283a 	ret

0400bef8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 400bef8:	defffd04 	addi	sp,sp,-12
 400befc:	df000215 	stw	fp,8(sp)
 400bf00:	df000204 	addi	fp,sp,8
 400bf04:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 400bf08:	d0e05717 	ldw	r3,-32420(gp)
 400bf0c:	e0bfff17 	ldw	r2,-4(fp)
 400bf10:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400bf14:	d0a05717 	ldw	r2,-32420(gp)
 400bf18:	10800e03 	ldbu	r2,56(r2)
 400bf1c:	11003fcc 	andi	r4,r2,255
 400bf20:	d0a05717 	ldw	r2,-32420(gp)
 400bf24:	10800e03 	ldbu	r2,56(r2)
 400bf28:	10c03fcc 	andi	r3,r2,255
 400bf2c:	e0bfff17 	ldw	r2,-4(fp)
 400bf30:	1885883a 	add	r2,r3,r2
 400bf34:	10800204 	addi	r2,r2,8
 400bf38:	10c000c3 	ldbu	r3,3(r2)
 400bf3c:	d0a05717 	ldw	r2,-32420(gp)
 400bf40:	10800e43 	ldbu	r2,57(r2)
 400bf44:	1884b03a 	or	r2,r3,r2
 400bf48:	1007883a 	mov	r3,r2
 400bf4c:	e0bfff17 	ldw	r2,-4(fp)
 400bf50:	2085883a 	add	r2,r4,r2
 400bf54:	10800204 	addi	r2,r2,8
 400bf58:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400bf5c:	e0bfff17 	ldw	r2,-4(fp)
 400bf60:	10c00283 	ldbu	r3,10(r2)
 400bf64:	d0a05717 	ldw	r2,-32420(gp)
 400bf68:	10800e83 	ldbu	r2,58(r2)
 400bf6c:	1884b03a 	or	r2,r3,r2
 400bf70:	1007883a 	mov	r3,r2
 400bf74:	e0bfff17 	ldw	r2,-4(fp)
 400bf78:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400bf7c:	d0a05717 	ldw	r2,-32420(gp)
 400bf80:	10800e03 	ldbu	r2,56(r2)
 400bf84:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400bf88:	e13ffe03 	ldbu	r4,-8(fp)
 400bf8c:	e0fffe03 	ldbu	r3,-8(fp)
 400bf90:	d0a05444 	addi	r2,gp,-32431
 400bf94:	1885883a 	add	r2,r3,r2
 400bf98:	10800003 	ldbu	r2,0(r2)
 400bf9c:	1007883a 	mov	r3,r2
 400bfa0:	d0a05717 	ldw	r2,-32420(gp)
 400bfa4:	10800e43 	ldbu	r2,57(r2)
 400bfa8:	0084303a 	nor	r2,zero,r2
 400bfac:	1884703a 	and	r2,r3,r2
 400bfb0:	1007883a 	mov	r3,r2
 400bfb4:	d0a05444 	addi	r2,gp,-32431
 400bfb8:	2085883a 	add	r2,r4,r2
 400bfbc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400bfc0:	e0fffe03 	ldbu	r3,-8(fp)
 400bfc4:	d0a05444 	addi	r2,gp,-32431
 400bfc8:	1885883a 	add	r2,r3,r2
 400bfcc:	10800003 	ldbu	r2,0(r2)
 400bfd0:	10803fcc 	andi	r2,r2,255
 400bfd4:	1004c03a 	cmpne	r2,r2,zero
 400bfd8:	1000071e 	bne	r2,zero,400bff8 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400bfdc:	d0a05717 	ldw	r2,-32420(gp)
 400bfe0:	10800e83 	ldbu	r2,58(r2)
 400bfe4:	0084303a 	nor	r2,zero,r2
 400bfe8:	1007883a 	mov	r3,r2
 400bfec:	d0a05403 	ldbu	r2,-32432(gp)
 400bff0:	1884703a 	and	r2,r3,r2
 400bff4:	d0a05405 	stb	r2,-32432(gp)
    }
}
 400bff8:	e037883a 	mov	sp,fp
 400bffc:	df000017 	ldw	fp,0(sp)
 400c000:	dec00104 	addi	sp,sp,4
 400c004:	f800283a 	ret

0400c008 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 400c008:	defffb04 	addi	sp,sp,-20
 400c00c:	df000415 	stw	fp,16(sp)
 400c010:	df000404 	addi	fp,sp,16
 400c014:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 400c018:	d0a05717 	ldw	r2,-32420(gp)
 400c01c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 400c020:	d0e05717 	ldw	r3,-32420(gp)
 400c024:	e0bfff17 	ldw	r2,-4(fp)
 400c028:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 400c02c:	e0bfff17 	ldw	r2,-4(fp)
 400c030:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 400c034:	e0bffe17 	ldw	r2,-8(fp)
 400c038:	10800017 	ldw	r2,0(r2)
 400c03c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400c040:	00002006 	br	400c0c4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400c044:	d0a05717 	ldw	r2,-32420(gp)
 400c048:	10800e03 	ldbu	r2,56(r2)
 400c04c:	11003fcc 	andi	r4,r2,255
 400c050:	d0a05717 	ldw	r2,-32420(gp)
 400c054:	10800e03 	ldbu	r2,56(r2)
 400c058:	10c03fcc 	andi	r3,r2,255
 400c05c:	e0bffd17 	ldw	r2,-12(fp)
 400c060:	1885883a 	add	r2,r3,r2
 400c064:	10800204 	addi	r2,r2,8
 400c068:	10c000c3 	ldbu	r3,3(r2)
 400c06c:	d0a05717 	ldw	r2,-32420(gp)
 400c070:	10800e43 	ldbu	r2,57(r2)
 400c074:	1884b03a 	or	r2,r3,r2
 400c078:	1007883a 	mov	r3,r2
 400c07c:	e0bffd17 	ldw	r2,-12(fp)
 400c080:	2085883a 	add	r2,r4,r2
 400c084:	10800204 	addi	r2,r2,8
 400c088:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400c08c:	e0bffd17 	ldw	r2,-12(fp)
 400c090:	10c00283 	ldbu	r3,10(r2)
 400c094:	d0a05717 	ldw	r2,-32420(gp)
 400c098:	10800e83 	ldbu	r2,58(r2)
 400c09c:	1884b03a 	or	r2,r3,r2
 400c0a0:	1007883a 	mov	r3,r2
 400c0a4:	e0bffd17 	ldw	r2,-12(fp)
 400c0a8:	10c00285 	stb	r3,10(r2)
        pevents++;
 400c0ac:	e0bffe17 	ldw	r2,-8(fp)
 400c0b0:	10800104 	addi	r2,r2,4
 400c0b4:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 400c0b8:	e0bffe17 	ldw	r2,-8(fp)
 400c0bc:	10800017 	ldw	r2,0(r2)
 400c0c0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400c0c4:	e0bffd17 	ldw	r2,-12(fp)
 400c0c8:	1004c03a 	cmpne	r2,r2,zero
 400c0cc:	103fdd1e 	bne	r2,zero,400c044 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400c0d0:	d0a05717 	ldw	r2,-32420(gp)
 400c0d4:	10800e03 	ldbu	r2,56(r2)
 400c0d8:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400c0dc:	e13ffc03 	ldbu	r4,-16(fp)
 400c0e0:	e0fffc03 	ldbu	r3,-16(fp)
 400c0e4:	d0a05444 	addi	r2,gp,-32431
 400c0e8:	1885883a 	add	r2,r3,r2
 400c0ec:	10800003 	ldbu	r2,0(r2)
 400c0f0:	1007883a 	mov	r3,r2
 400c0f4:	d0a05717 	ldw	r2,-32420(gp)
 400c0f8:	10800e43 	ldbu	r2,57(r2)
 400c0fc:	0084303a 	nor	r2,zero,r2
 400c100:	1884703a 	and	r2,r3,r2
 400c104:	1007883a 	mov	r3,r2
 400c108:	d0a05444 	addi	r2,gp,-32431
 400c10c:	2085883a 	add	r2,r4,r2
 400c110:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400c114:	e0fffc03 	ldbu	r3,-16(fp)
 400c118:	d0a05444 	addi	r2,gp,-32431
 400c11c:	1885883a 	add	r2,r3,r2
 400c120:	10800003 	ldbu	r2,0(r2)
 400c124:	10803fcc 	andi	r2,r2,255
 400c128:	1004c03a 	cmpne	r2,r2,zero
 400c12c:	1000071e 	bne	r2,zero,400c14c <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400c130:	d0a05717 	ldw	r2,-32420(gp)
 400c134:	10800e83 	ldbu	r2,58(r2)
 400c138:	0084303a 	nor	r2,zero,r2
 400c13c:	1007883a 	mov	r3,r2
 400c140:	d0a05403 	ldbu	r2,-32432(gp)
 400c144:	1884703a 	and	r2,r3,r2
 400c148:	d0a05405 	stb	r2,-32432(gp)
    }
}
 400c14c:	e037883a 	mov	sp,fp
 400c150:	df000017 	ldw	fp,0(sp)
 400c154:	dec00104 	addi	sp,sp,4
 400c158:	f800283a 	ret

0400c15c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400c15c:	defffc04 	addi	sp,sp,-16
 400c160:	df000315 	stw	fp,12(sp)
 400c164:	df000304 	addi	fp,sp,12
 400c168:	e13ffe15 	stw	r4,-8(fp)
 400c16c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 400c170:	e0bffe17 	ldw	r2,-8(fp)
 400c174:	10800e03 	ldbu	r2,56(r2)
 400c178:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400c17c:	e13ffd03 	ldbu	r4,-12(fp)
 400c180:	e0fffd03 	ldbu	r3,-12(fp)
 400c184:	e0bfff17 	ldw	r2,-4(fp)
 400c188:	1885883a 	add	r2,r3,r2
 400c18c:	10800204 	addi	r2,r2,8
 400c190:	108000c3 	ldbu	r2,3(r2)
 400c194:	1007883a 	mov	r3,r2
 400c198:	e0bffe17 	ldw	r2,-8(fp)
 400c19c:	10800e43 	ldbu	r2,57(r2)
 400c1a0:	0084303a 	nor	r2,zero,r2
 400c1a4:	1884703a 	and	r2,r3,r2
 400c1a8:	1007883a 	mov	r3,r2
 400c1ac:	e0bfff17 	ldw	r2,-4(fp)
 400c1b0:	2085883a 	add	r2,r4,r2
 400c1b4:	10800204 	addi	r2,r2,8
 400c1b8:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 400c1bc:	e0fffd03 	ldbu	r3,-12(fp)
 400c1c0:	e0bfff17 	ldw	r2,-4(fp)
 400c1c4:	1885883a 	add	r2,r3,r2
 400c1c8:	10800204 	addi	r2,r2,8
 400c1cc:	108000c3 	ldbu	r2,3(r2)
 400c1d0:	10803fcc 	andi	r2,r2,255
 400c1d4:	1004c03a 	cmpne	r2,r2,zero
 400c1d8:	10000a1e 	bne	r2,zero,400c204 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 400c1dc:	e0bfff17 	ldw	r2,-4(fp)
 400c1e0:	10800283 	ldbu	r2,10(r2)
 400c1e4:	1007883a 	mov	r3,r2
 400c1e8:	e0bffe17 	ldw	r2,-8(fp)
 400c1ec:	10800e83 	ldbu	r2,58(r2)
 400c1f0:	0084303a 	nor	r2,zero,r2
 400c1f4:	1884703a 	and	r2,r3,r2
 400c1f8:	1007883a 	mov	r3,r2
 400c1fc:	e0bfff17 	ldw	r2,-4(fp)
 400c200:	10c00285 	stb	r3,10(r2)
    }
}
 400c204:	e037883a 	mov	sp,fp
 400c208:	df000017 	ldw	fp,0(sp)
 400c20c:	dec00104 	addi	sp,sp,4
 400c210:	f800283a 	ret

0400c214 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 400c214:	defffa04 	addi	sp,sp,-24
 400c218:	df000515 	stw	fp,20(sp)
 400c21c:	df000504 	addi	fp,sp,20
 400c220:	e13ffe15 	stw	r4,-8(fp)
 400c224:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 400c228:	e0bffe17 	ldw	r2,-8(fp)
 400c22c:	10800e03 	ldbu	r2,56(r2)
 400c230:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 400c234:	e0bffe17 	ldw	r2,-8(fp)
 400c238:	10800e83 	ldbu	r2,58(r2)
 400c23c:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 400c240:	e0bffe17 	ldw	r2,-8(fp)
 400c244:	10800e43 	ldbu	r2,57(r2)
 400c248:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 400c24c:	e0bfff17 	ldw	r2,-4(fp)
 400c250:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 400c254:	e0bffd17 	ldw	r2,-12(fp)
 400c258:	10800017 	ldw	r2,0(r2)
 400c25c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400c260:	00002606 	br	400c2fc <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 400c264:	e13ffb83 	ldbu	r4,-18(fp)
 400c268:	e0fffb83 	ldbu	r3,-18(fp)
 400c26c:	e0bffc17 	ldw	r2,-16(fp)
 400c270:	1885883a 	add	r2,r3,r2
 400c274:	10800204 	addi	r2,r2,8
 400c278:	108000c3 	ldbu	r2,3(r2)
 400c27c:	1007883a 	mov	r3,r2
 400c280:	e0bffb03 	ldbu	r2,-20(fp)
 400c284:	0084303a 	nor	r2,zero,r2
 400c288:	1884703a 	and	r2,r3,r2
 400c28c:	1007883a 	mov	r3,r2
 400c290:	e0bffc17 	ldw	r2,-16(fp)
 400c294:	2085883a 	add	r2,r4,r2
 400c298:	10800204 	addi	r2,r2,8
 400c29c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 400c2a0:	e0fffb83 	ldbu	r3,-18(fp)
 400c2a4:	e0bffc17 	ldw	r2,-16(fp)
 400c2a8:	1885883a 	add	r2,r3,r2
 400c2ac:	10800204 	addi	r2,r2,8
 400c2b0:	108000c3 	ldbu	r2,3(r2)
 400c2b4:	10803fcc 	andi	r2,r2,255
 400c2b8:	1004c03a 	cmpne	r2,r2,zero
 400c2bc:	1000091e 	bne	r2,zero,400c2e4 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 400c2c0:	e0bffc17 	ldw	r2,-16(fp)
 400c2c4:	10800283 	ldbu	r2,10(r2)
 400c2c8:	1007883a 	mov	r3,r2
 400c2cc:	e0bffb43 	ldbu	r2,-19(fp)
 400c2d0:	0084303a 	nor	r2,zero,r2
 400c2d4:	1884703a 	and	r2,r3,r2
 400c2d8:	1007883a 	mov	r3,r2
 400c2dc:	e0bffc17 	ldw	r2,-16(fp)
 400c2e0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 400c2e4:	e0bffd17 	ldw	r2,-12(fp)
 400c2e8:	10800104 	addi	r2,r2,4
 400c2ec:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 400c2f0:	e0bffd17 	ldw	r2,-12(fp)
 400c2f4:	10800017 	ldw	r2,0(r2)
 400c2f8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400c2fc:	e0bffc17 	ldw	r2,-16(fp)
 400c300:	1004c03a 	cmpne	r2,r2,zero
 400c304:	103fd71e 	bne	r2,zero,400c264 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 400c308:	e037883a 	mov	sp,fp
 400c30c:	df000017 	ldw	fp,0(sp)
 400c310:	dec00104 	addi	sp,sp,4
 400c314:	f800283a 	ret

0400c318 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 400c318:	defffc04 	addi	sp,sp,-16
 400c31c:	df000315 	stw	fp,12(sp)
 400c320:	df000304 	addi	fp,sp,12
 400c324:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 400c328:	e0bfff17 	ldw	r2,-4(fp)
 400c32c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 400c330:	e0bfff17 	ldw	r2,-4(fp)
 400c334:	108002c4 	addi	r2,r2,11
 400c338:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400c33c:	e03ffd05 	stb	zero,-12(fp)
 400c340:	00000806 	br	400c364 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 400c344:	e0bffe17 	ldw	r2,-8(fp)
 400c348:	10000005 	stb	zero,0(r2)
 400c34c:	e0bffe17 	ldw	r2,-8(fp)
 400c350:	10800044 	addi	r2,r2,1
 400c354:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400c358:	e0bffd03 	ldbu	r2,-12(fp)
 400c35c:	10800044 	addi	r2,r2,1
 400c360:	e0bffd05 	stb	r2,-12(fp)
 400c364:	e0bffd03 	ldbu	r2,-12(fp)
 400c368:	108000f0 	cmpltui	r2,r2,3
 400c36c:	103ff51e 	bne	r2,zero,400c344 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 400c370:	e037883a 	mov	sp,fp
 400c374:	df000017 	ldw	fp,0(sp)
 400c378:	dec00104 	addi	sp,sp,4
 400c37c:	f800283a 	ret

0400c380 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 400c380:	defffb04 	addi	sp,sp,-20
 400c384:	dfc00415 	stw	ra,16(sp)
 400c388:	df000315 	stw	fp,12(sp)
 400c38c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 400c390:	010100b4 	movhi	r4,1026
 400c394:	2133b104 	addi	r4,r4,-12604
 400c398:	0142d004 	movi	r5,2880
 400c39c:	400c6e40 	call	400c6e4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 400c3a0:	008100b4 	movhi	r2,1026
 400c3a4:	10b3b104 	addi	r2,r2,-12604
 400c3a8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 400c3ac:	008100b4 	movhi	r2,1026
 400c3b0:	10b3bd04 	addi	r2,r2,-12556
 400c3b4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400c3b8:	e03fff0d 	sth	zero,-4(fp)
 400c3bc:	00001306 	br	400c40c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400c3c0:	e0bffe17 	ldw	r2,-8(fp)
 400c3c4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 400c3c8:	e0fffe17 	ldw	r3,-8(fp)
 400c3cc:	e0bffd17 	ldw	r2,-12(fp)
 400c3d0:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 400c3d4:	e0fffe17 	ldw	r3,-8(fp)
 400c3d8:	00800fc4 	movi	r2,63
 400c3dc:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 400c3e0:	e0bffe17 	ldw	r2,-8(fp)
 400c3e4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 400c3e8:	e0bffe17 	ldw	r2,-8(fp)
 400c3ec:	10800c04 	addi	r2,r2,48
 400c3f0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 400c3f4:	e0bffd17 	ldw	r2,-12(fp)
 400c3f8:	10800c04 	addi	r2,r2,48
 400c3fc:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400c400:	e0bfff0b 	ldhu	r2,-4(fp)
 400c404:	10800044 	addi	r2,r2,1
 400c408:	e0bfff0d 	sth	r2,-4(fp)
 400c40c:	e0bfff0b 	ldhu	r2,-4(fp)
 400c410:	10800ef0 	cmpltui	r2,r2,59
 400c414:	103fea1e 	bne	r2,zero,400c3c0 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 400c418:	e0bffe17 	ldw	r2,-8(fp)
 400c41c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 400c420:	e0bffe17 	ldw	r2,-8(fp)
 400c424:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 400c428:	e0fffe17 	ldw	r3,-8(fp)
 400c42c:	00800fc4 	movi	r2,63
 400c430:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 400c434:	e0bffe17 	ldw	r2,-8(fp)
 400c438:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 400c43c:	008100b4 	movhi	r2,1026
 400c440:	10b3b104 	addi	r2,r2,-12604
 400c444:	d0a05515 	stw	r2,-32428(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 400c448:	e037883a 	mov	sp,fp
 400c44c:	dfc00117 	ldw	ra,4(sp)
 400c450:	df000017 	ldw	fp,0(sp)
 400c454:	dec00204 	addi	sp,sp,8
 400c458:	f800283a 	ret

0400c45c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 400c45c:	deffff04 	addi	sp,sp,-4
 400c460:	df000015 	stw	fp,0(sp)
 400c464:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 400c468:	d0205815 	stw	zero,-32416(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 400c46c:	d0205605 	stb	zero,-32424(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 400c470:	d02047c5 	stb	zero,-32481(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 400c474:	d0205045 	stb	zero,-32447(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 400c478:	d0204805 	stb	zero,-32480(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 400c47c:	d0204d15 	stw	zero,-32460(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 400c480:	d0204915 	stw	zero,-32476(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 400c484:	d0205b15 	stw	zero,-32404(gp)
    OSIdleCtrMax  = 0L;
 400c488:	d0204e15 	stw	zero,-32456(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 400c48c:	d0205a05 	stb	zero,-32408(gp)
#endif
}
 400c490:	e037883a 	mov	sp,fp
 400c494:	df000017 	ldw	fp,0(sp)
 400c498:	dec00104 	addi	sp,sp,4
 400c49c:	f800283a 	ret

0400c4a0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 400c4a0:	defffd04 	addi	sp,sp,-12
 400c4a4:	df000215 	stw	fp,8(sp)
 400c4a8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 400c4ac:	d0205405 	stb	zero,-32432(gp)
    prdytbl       = &OSRdyTbl[0];
 400c4b0:	d0a05444 	addi	r2,gp,-32431
 400c4b4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400c4b8:	e03fff05 	stb	zero,-4(fp)
 400c4bc:	00000806 	br	400c4e0 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 400c4c0:	e0bffe17 	ldw	r2,-8(fp)
 400c4c4:	10000005 	stb	zero,0(r2)
 400c4c8:	e0bffe17 	ldw	r2,-8(fp)
 400c4cc:	10800044 	addi	r2,r2,1
 400c4d0:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400c4d4:	e0bfff03 	ldbu	r2,-4(fp)
 400c4d8:	10800044 	addi	r2,r2,1
 400c4dc:	e0bfff05 	stb	r2,-4(fp)
 400c4e0:	e0bfff03 	ldbu	r2,-4(fp)
 400c4e4:	108000f0 	cmpltui	r2,r2,3
 400c4e8:	103ff51e 	bne	r2,zero,400c4c0 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 400c4ec:	d0204a45 	stb	zero,-32471(gp)
    OSPrioHighRdy = 0;
 400c4f0:	d0204a05 	stb	zero,-32472(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 400c4f4:	d0205215 	stw	zero,-32440(gp)
    OSTCBCur      = (OS_TCB *)0;
 400c4f8:	d0205715 	stw	zero,-32420(gp)
}
 400c4fc:	e037883a 	mov	sp,fp
 400c500:	df000017 	ldw	fp,0(sp)
 400c504:	dec00104 	addi	sp,sp,4
 400c508:	f800283a 	ret

0400c50c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 400c50c:	defff804 	addi	sp,sp,-32
 400c510:	dfc00715 	stw	ra,28(sp)
 400c514:	df000615 	stw	fp,24(sp)
 400c518:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 400c51c:	018100b4 	movhi	r6,1026
 400c520:	31b3b004 	addi	r6,r6,-12608
 400c524:	00bfffd4 	movui	r2,65535
 400c528:	d8800015 	stw	r2,0(sp)
 400c52c:	008100b4 	movhi	r2,1026
 400c530:	10b1b104 	addi	r2,r2,-14652
 400c534:	d8800115 	stw	r2,4(sp)
 400c538:	00808004 	movi	r2,512
 400c53c:	d8800215 	stw	r2,8(sp)
 400c540:	d8000315 	stw	zero,12(sp)
 400c544:	008000c4 	movi	r2,3
 400c548:	d8800415 	stw	r2,16(sp)
 400c54c:	01010074 	movhi	r4,1025
 400c550:	2132eb04 	addi	r4,r4,-13396
 400c554:	000b883a 	mov	r5,zero
 400c558:	01c00504 	movi	r7,20
 400c55c:	401198c0 	call	401198c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 400c560:	01410074 	movhi	r5,1025
 400c564:	295ba504 	addi	r5,r5,28308
 400c568:	01000504 	movi	r4,20
 400c56c:	e1bfff04 	addi	r6,fp,-4
 400c570:	40122c00 	call	40122c0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 400c574:	e037883a 	mov	sp,fp
 400c578:	dfc00117 	ldw	ra,4(sp)
 400c57c:	df000017 	ldw	fp,0(sp)
 400c580:	dec00204 	addi	sp,sp,8
 400c584:	f800283a 	ret

0400c588 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 400c588:	defff804 	addi	sp,sp,-32
 400c58c:	dfc00715 	stw	ra,28(sp)
 400c590:	df000615 	stw	fp,24(sp)
 400c594:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 400c598:	018100b4 	movhi	r6,1026
 400c59c:	31b13804 	addi	r6,r6,-15136
 400c5a0:	00bfff94 	movui	r2,65534
 400c5a4:	d8800015 	stw	r2,0(sp)
 400c5a8:	008100b4 	movhi	r2,1026
 400c5ac:	10af3904 	addi	r2,r2,-17180
 400c5b0:	d8800115 	stw	r2,4(sp)
 400c5b4:	00808004 	movi	r2,512
 400c5b8:	d8800215 	stw	r2,8(sp)
 400c5bc:	d8000315 	stw	zero,12(sp)
 400c5c0:	008000c4 	movi	r2,3
 400c5c4:	d8800415 	stw	r2,16(sp)
 400c5c8:	01010074 	movhi	r4,1025
 400c5cc:	21330204 	addi	r4,r4,-13304
 400c5d0:	000b883a 	mov	r5,zero
 400c5d4:	01c004c4 	movi	r7,19
 400c5d8:	401198c0 	call	401198c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 400c5dc:	01410074 	movhi	r5,1025
 400c5e0:	295ba904 	addi	r5,r5,28324
 400c5e4:	010004c4 	movi	r4,19
 400c5e8:	e1bfff04 	addi	r6,fp,-4
 400c5ec:	40122c00 	call	40122c0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 400c5f0:	e037883a 	mov	sp,fp
 400c5f4:	dfc00117 	ldw	ra,4(sp)
 400c5f8:	df000017 	ldw	fp,0(sp)
 400c5fc:	dec00204 	addi	sp,sp,8
 400c600:	f800283a 	ret

0400c604 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 400c604:	defffb04 	addi	sp,sp,-20
 400c608:	dfc00415 	stw	ra,16(sp)
 400c60c:	df000315 	stw	fp,12(sp)
 400c610:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 400c614:	010100b4 	movhi	r4,1026
 400c618:	21368104 	addi	r4,r4,-9724
 400c61c:	01415004 	movi	r5,1344
 400c620:	400c6e40 	call	400c6e4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 400c624:	010100b4 	movhi	r4,1026
 400c628:	2137d104 	addi	r4,r4,-8380
 400c62c:	01401504 	movi	r5,84
 400c630:	400c6e40 	call	400c6e4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 400c634:	008100b4 	movhi	r2,1026
 400c638:	10b68104 	addi	r2,r2,-9724
 400c63c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 400c640:	008100b4 	movhi	r2,1026
 400c644:	10b69d04 	addi	r2,r2,-9612
 400c648:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400c64c:	e03fff05 	stb	zero,-4(fp)
 400c650:	00001106 	br	400c698 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 400c654:	e0fffe17 	ldw	r3,-8(fp)
 400c658:	e0bffd17 	ldw	r2,-12(fp)
 400c65c:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 400c660:	e0fffe17 	ldw	r3,-8(fp)
 400c664:	00800fc4 	movi	r2,63
 400c668:	18801405 	stb	r2,80(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400c66c:	e0bffe17 	ldw	r2,-8(fp)
 400c670:	10001445 	stb	zero,81(r2)
#endif
        ptcb1++;
 400c674:	e0bffe17 	ldw	r2,-8(fp)
 400c678:	10801c04 	addi	r2,r2,112
 400c67c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 400c680:	e0bffd17 	ldw	r2,-12(fp)
 400c684:	10801c04 	addi	r2,r2,112
 400c688:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400c68c:	e0bfff03 	ldbu	r2,-4(fp)
 400c690:	10800044 	addi	r2,r2,1
 400c694:	e0bfff05 	stb	r2,-4(fp)
 400c698:	e0bfff03 	ldbu	r2,-4(fp)
 400c69c:	108002f0 	cmpltui	r2,r2,11
 400c6a0:	103fec1e 	bne	r2,zero,400c654 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 400c6a4:	e0bffe17 	ldw	r2,-8(fp)
 400c6a8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 400c6ac:	e0fffe17 	ldw	r3,-8(fp)
 400c6b0:	00800fc4 	movi	r2,63
 400c6b4:	18801405 	stb	r2,80(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400c6b8:	e0bffe17 	ldw	r2,-8(fp)
 400c6bc:	10001445 	stb	zero,81(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 400c6c0:	d0204b15 	stw	zero,-32468(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 400c6c4:	008100b4 	movhi	r2,1026
 400c6c8:	10b68104 	addi	r2,r2,-9724
 400c6cc:	d0a04f15 	stw	r2,-32452(gp)
}
 400c6d0:	e037883a 	mov	sp,fp
 400c6d4:	dfc00117 	ldw	ra,4(sp)
 400c6d8:	df000017 	ldw	fp,0(sp)
 400c6dc:	dec00204 	addi	sp,sp,8
 400c6e0:	f800283a 	ret

0400c6e4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 400c6e4:	defffd04 	addi	sp,sp,-12
 400c6e8:	df000215 	stw	fp,8(sp)
 400c6ec:	df000204 	addi	fp,sp,8
 400c6f0:	e13ffe15 	stw	r4,-8(fp)
 400c6f4:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 400c6f8:	00000806 	br	400c71c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 400c6fc:	e0bffe17 	ldw	r2,-8(fp)
 400c700:	10000005 	stb	zero,0(r2)
 400c704:	e0bffe17 	ldw	r2,-8(fp)
 400c708:	10800044 	addi	r2,r2,1
 400c70c:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400c710:	e0bfff0b 	ldhu	r2,-4(fp)
 400c714:	10bfffc4 	addi	r2,r2,-1
 400c718:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400c71c:	e0bfff0b 	ldhu	r2,-4(fp)
 400c720:	1004c03a 	cmpne	r2,r2,zero
 400c724:	103ff51e 	bne	r2,zero,400c6fc <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 400c728:	e037883a 	mov	sp,fp
 400c72c:	df000017 	ldw	fp,0(sp)
 400c730:	dec00104 	addi	sp,sp,4
 400c734:	f800283a 	ret

0400c738 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 400c738:	defffc04 	addi	sp,sp,-16
 400c73c:	df000315 	stw	fp,12(sp)
 400c740:	df000304 	addi	fp,sp,12
 400c744:	e13ffd15 	stw	r4,-12(fp)
 400c748:	e17ffe15 	stw	r5,-8(fp)
 400c74c:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 400c750:	00000d06 	br	400c788 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 400c754:	e0bffe17 	ldw	r2,-8(fp)
 400c758:	10c00003 	ldbu	r3,0(r2)
 400c75c:	e0bffd17 	ldw	r2,-12(fp)
 400c760:	10c00005 	stb	r3,0(r2)
 400c764:	e0bffd17 	ldw	r2,-12(fp)
 400c768:	10800044 	addi	r2,r2,1
 400c76c:	e0bffd15 	stw	r2,-12(fp)
 400c770:	e0bffe17 	ldw	r2,-8(fp)
 400c774:	10800044 	addi	r2,r2,1
 400c778:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400c77c:	e0bfff0b 	ldhu	r2,-4(fp)
 400c780:	10bfffc4 	addi	r2,r2,-1
 400c784:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400c788:	e0bfff0b 	ldhu	r2,-4(fp)
 400c78c:	1004c03a 	cmpne	r2,r2,zero
 400c790:	103ff01e 	bne	r2,zero,400c754 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 400c794:	e037883a 	mov	sp,fp
 400c798:	df000017 	ldw	fp,0(sp)
 400c79c:	dec00104 	addi	sp,sp,4
 400c7a0:	f800283a 	ret

0400c7a4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/
//wwww
void  OS_Sched (void)
{
 400c7a4:	defffa04 	addi	sp,sp,-24
 400c7a8:	dfc00515 	stw	ra,20(sp)
 400c7ac:	df000415 	stw	fp,16(sp)
 400c7b0:	dc000315 	stw	r16,12(sp)
 400c7b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400c7b8:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c7bc:	0005303a 	rdctl	r2,status
 400c7c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c7c4:	e0fffe17 	ldw	r3,-8(fp)
 400c7c8:	00bfff84 	movi	r2,-2
 400c7cc:	1884703a 	and	r2,r3,r2
 400c7d0:	1001703a 	wrctl	status,r2
  
  return context;
 400c7d4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 400c7d8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 400c7dc:	d0a05603 	ldbu	r2,-32424(gp)
 400c7e0:	10803fcc 	andi	r2,r2,255
 400c7e4:	1004c03a 	cmpne	r2,r2,zero
 400c7e8:	10004d1e 	bne	r2,zero,400c920 <OS_Sched+0x17c>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 400c7ec:	d0a047c3 	ldbu	r2,-32481(gp)
 400c7f0:	10803fcc 	andi	r2,r2,255
 400c7f4:	1004c03a 	cmpne	r2,r2,zero
 400c7f8:	1000491e 	bne	r2,zero,400c920 <OS_Sched+0x17c>
            OS_SchedNew();
 400c7fc:	400c9480 	call	400c948 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 400c800:	d0a04a03 	ldbu	r2,-32472(gp)
 400c804:	d0e04a43 	ldbu	r3,-32471(gp)
 400c808:	11003fcc 	andi	r4,r2,255
 400c80c:	18803fcc 	andi	r2,r3,255
 400c810:	20804326 	beq	r4,r2,400c920 <OS_Sched+0x17c>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400c814:	d0a04a03 	ldbu	r2,-32472(gp)
 400c818:	10803fcc 	andi	r2,r2,255
 400c81c:	00c100b4 	movhi	r3,1026
 400c820:	18f7d104 	addi	r3,r3,-8380
 400c824:	1085883a 	add	r2,r2,r2
 400c828:	1085883a 	add	r2,r2,r2
 400c82c:	10c5883a 	add	r2,r2,r3
 400c830:	10800017 	ldw	r2,0(r2)
 400c834:	d0a05215 	stw	r2,-32440(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 400c838:	d0e05217 	ldw	r3,-32440(gp)
 400c83c:	18800f17 	ldw	r2,60(r3)
 400c840:	10800044 	addi	r2,r2,1
 400c844:	18800f15 	stw	r2,60(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400c848:	d0a04d17 	ldw	r2,-32460(gp)
 400c84c:	10800044 	addi	r2,r2,1
 400c850:	d0a04d15 	stw	r2,-32460(gp)
                //modified here

				if (buffer_index < BUFFER_SIZE  && !TIMEOUT ) {
 400c854:	d0a04703 	ldbu	r2,-32484(gp)
 400c858:	10803fcc 	andi	r2,r2,255
 400c85c:	108007a8 	cmpgeui	r2,r2,30
 400c860:	10002e1e 	bne	r2,zero,400c91c <OS_Sched+0x178>
 400c864:	d0a04743 	ldbu	r2,-32483(gp)
 400c868:	10803fcc 	andi	r2,r2,255
 400c86c:	1004c03a 	cmpne	r2,r2,zero
 400c870:	10002a1e 	bne	r2,zero,400c91c <OS_Sched+0x178>
					pb[buffer_index][_TT] = OSTimeGet();
 400c874:	d0a04703 	ldbu	r2,-32484(gp)
 400c878:	14003fcc 	andi	r16,r2,255
 400c87c:	40131580 	call	4013158 <OSTimeGet>
 400c880:	1009883a 	mov	r4,r2
 400c884:	00c100b4 	movhi	r3,1026
 400c888:	18e2d904 	addi	r3,r3,-29852
 400c88c:	8004913a 	slli	r2,r16,4
 400c890:	10c5883a 	add	r2,r2,r3
 400c894:	11000015 	stw	r4,0(r2)
					pb[buffer_index][_INFO] = _COMPLETE;
 400c898:	d0a04703 	ldbu	r2,-32484(gp)
 400c89c:	10803fcc 	andi	r2,r2,255
 400c8a0:	00c100b4 	movhi	r3,1026
 400c8a4:	18e2d904 	addi	r3,r3,-29852
 400c8a8:	1004913a 	slli	r2,r2,4
 400c8ac:	10c5883a 	add	r2,r2,r3
 400c8b0:	10c00104 	addi	r3,r2,4
 400c8b4:	00800084 	movi	r2,2
 400c8b8:	18800015 	stw	r2,0(r3)
					pb[buffer_index][_TO] = OSPrioHighRdy;
 400c8bc:	d0a04703 	ldbu	r2,-32484(gp)
 400c8c0:	11003fcc 	andi	r4,r2,255
 400c8c4:	d0a04a03 	ldbu	r2,-32472(gp)
 400c8c8:	11403fcc 	andi	r5,r2,255
 400c8cc:	00c100b4 	movhi	r3,1026
 400c8d0:	18e2d904 	addi	r3,r3,-29852
 400c8d4:	2004913a 	slli	r2,r4,4
 400c8d8:	10c5883a 	add	r2,r2,r3
 400c8dc:	10800204 	addi	r2,r2,8
 400c8e0:	11400015 	stw	r5,0(r2)
					pb[buffer_index][_FROM] = OSTCBCur->OSTCBPrio;
 400c8e4:	d0a04703 	ldbu	r2,-32484(gp)
 400c8e8:	11003fcc 	andi	r4,r2,255
 400c8ec:	d0a05717 	ldw	r2,-32420(gp)
 400c8f0:	10800d83 	ldbu	r2,54(r2)
 400c8f4:	11403fcc 	andi	r5,r2,255
 400c8f8:	00c100b4 	movhi	r3,1026
 400c8fc:	18e2d904 	addi	r3,r3,-29852
 400c900:	2004913a 	slli	r2,r4,4
 400c904:	10c5883a 	add	r2,r2,r3
 400c908:	10800304 	addi	r2,r2,12
 400c90c:	11400015 	stw	r5,0(r2)
					//sprintf(pb[buffer_index], "%u %u %u %u\0", _COMPLETE, OSTCBCur->OSTCBPrio, OSPrioHighRdy, OSTimeGet());
					//printf("BBBBB: %s\n", pb[buffer_index]);
					buffer_index++;
 400c910:	d0a04703 	ldbu	r2,-32484(gp)
 400c914:	10800044 	addi	r2,r2,1
 400c918:	d0a04705 	stb	r2,-32484(gp)

				}
                OS_TASK_SW();                          /* Perform a context switch                     */
 400c91c:	4015b740 	call	4015b74 <OSCtxSw>
 400c920:	e0bfff17 	ldw	r2,-4(fp)
 400c924:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c928:	e0bffd17 	ldw	r2,-12(fp)
 400c92c:	1001703a 	wrctl	status,r2
            //Modified here
			//if( !TIMEOUT ) check_timeout();
        }
    }
    OS_EXIT_CRITICAL();
}
 400c930:	e037883a 	mov	sp,fp
 400c934:	dfc00217 	ldw	ra,8(sp)
 400c938:	df000117 	ldw	fp,4(sp)
 400c93c:	dc000017 	ldw	r16,0(sp)
 400c940:	dec00304 	addi	sp,sp,12
 400c944:	f800283a 	ret

0400c948 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 400c948:	defffd04 	addi	sp,sp,-12
 400c94c:	df000215 	stw	fp,8(sp)
 400c950:	df000204 	addi	fp,sp,8
	INT8U mostUrgentPriority = OS_LOWEST_PRIO;
 400c954:	00800504 	movi	r2,20
 400c958:	e0bfff45 	stb	r2,-3(fp)
	INT8U mostUrgentDeadline = 0x7FF;
 400c95c:	00bfffc4 	movi	r2,-1
 400c960:	e0bfff05 	stb	r2,-4(fp)
	// if( current_deadline != 0 ) mostUrgentDeadline = current_deadline;
	// else mostUrgentDeadline = 0x7FF;
	// printf("mostUrgentDeadline : %d\n",mostUrgentDeadline );
	//printf("%d", OS_LOWEST_PRIO);
	for (idx = 0; idx < OS_LOWEST_PRIO-1 ; idx++)
 400c964:	d0204785 	stb	zero,-32482(gp)
 400c968:	00005006 	br	400caac <OS_SchedNew+0x164>
	{
		if (OSTCBPrioTbl[idx] != (OS_TCB *)0 && OSTCBPrioTbl[idx] != (OS_TCB *)1)
 400c96c:	d0a04783 	ldbu	r2,-32482(gp)
 400c970:	10803fcc 	andi	r2,r2,255
 400c974:	00c100b4 	movhi	r3,1026
 400c978:	18f7d104 	addi	r3,r3,-8380
 400c97c:	1085883a 	add	r2,r2,r2
 400c980:	1085883a 	add	r2,r2,r2
 400c984:	10c5883a 	add	r2,r2,r3
 400c988:	10800017 	ldw	r2,0(r2)
 400c98c:	1005003a 	cmpeq	r2,r2,zero
 400c990:	1000431e 	bne	r2,zero,400caa0 <OS_SchedNew+0x158>
 400c994:	d0a04783 	ldbu	r2,-32482(gp)
 400c998:	10803fcc 	andi	r2,r2,255
 400c99c:	00c100b4 	movhi	r3,1026
 400c9a0:	18f7d104 	addi	r3,r3,-8380
 400c9a4:	1085883a 	add	r2,r2,r2
 400c9a8:	1085883a 	add	r2,r2,r2
 400c9ac:	10c5883a 	add	r2,r2,r3
 400c9b0:	10800017 	ldw	r2,0(r2)
 400c9b4:	10800060 	cmpeqi	r2,r2,1
 400c9b8:	1000391e 	bne	r2,zero,400caa0 <OS_SchedNew+0x158>
		{
			OS_TCB *current = OSTCBPrioTbl[idx];
 400c9bc:	d0a04783 	ldbu	r2,-32482(gp)
 400c9c0:	10803fcc 	andi	r2,r2,255
 400c9c4:	00c100b4 	movhi	r3,1026
 400c9c8:	18f7d104 	addi	r3,r3,-8380
 400c9cc:	1085883a 	add	r2,r2,r2
 400c9d0:	1085883a 	add	r2,r2,r2
 400c9d4:	10c5883a 	add	r2,r2,r3
 400c9d8:	10800017 	ldw	r2,0(r2)
 400c9dc:	e0bffe15 	stw	r2,-8(fp)
			//Task ready?
			if (current->OSTCBDly==0)
 400c9e0:	e0bffe17 	ldw	r2,-8(fp)
 400c9e4:	10800c8b 	ldhu	r2,50(r2)
 400c9e8:	10bfffcc 	andi	r2,r2,65535
 400c9ec:	1004c03a 	cmpne	r2,r2,zero
 400c9f0:	10002b1e 	bne	r2,zero,400caa0 <OS_SchedNew+0x158>
				//     sprintf(pb[buffer_index], "%d %d %d %d ", _TIMEOUT, current->OSTCBPrio, current->OSTCBPrio, OSTimeGet());
				//     buffer_index++;
				//     //TIMEOUT = 1;
				// }

				if ( current->ddl < mostUrgentDeadline)
 400c9f4:	e0bffe17 	ldw	r2,-8(fp)
 400c9f8:	10800c03 	ldbu	r2,48(r2)
 400c9fc:	10c03fcc 	andi	r3,r2,255
 400ca00:	e0bfff03 	ldbu	r2,-4(fp)
 400ca04:	1880262e 	bgeu	r3,r2,400caa0 <OS_SchedNew+0x158>
				{
					//printf("[Last] mostUrgentPriority, mostUrgentDeadline: %d %d\n", mostUrgentPriority, mostUrgentDeadline);
					if( current->OSTCBPrio != 0 && current ->ddl == OSTCBCur -> ddl &&  OSTCBCur->compTime < OSTCBCur->fullComp && idx != OSTCBCur -> OSTCBPrio) {
 400ca08:	e0bffe17 	ldw	r2,-8(fp)
 400ca0c:	10800d83 	ldbu	r2,54(r2)
 400ca10:	10803fcc 	andi	r2,r2,255
 400ca14:	1005003a 	cmpeq	r2,r2,zero
 400ca18:	10001b1e 	bne	r2,zero,400ca88 <OS_SchedNew+0x140>
 400ca1c:	e0bffe17 	ldw	r2,-8(fp)
 400ca20:	10c00c03 	ldbu	r3,48(r2)
 400ca24:	d0a05717 	ldw	r2,-32420(gp)
 400ca28:	10800c03 	ldbu	r2,48(r2)
 400ca2c:	18c03fcc 	andi	r3,r3,255
 400ca30:	10803fcc 	andi	r2,r2,255
 400ca34:	1880141e 	bne	r3,r2,400ca88 <OS_SchedNew+0x140>
 400ca38:	d0a05717 	ldw	r2,-32420(gp)
 400ca3c:	10c00b83 	ldbu	r3,46(r2)
 400ca40:	d0a05717 	ldw	r2,-32420(gp)
 400ca44:	10800c43 	ldbu	r2,49(r2)
 400ca48:	18c03fcc 	andi	r3,r3,255
 400ca4c:	10803fcc 	andi	r2,r2,255
 400ca50:	18800d2e 	bgeu	r3,r2,400ca88 <OS_SchedNew+0x140>
 400ca54:	d0a05717 	ldw	r2,-32420(gp)
 400ca58:	10800d83 	ldbu	r2,54(r2)
 400ca5c:	d0e04783 	ldbu	r3,-32482(gp)
 400ca60:	11003fcc 	andi	r4,r2,255
 400ca64:	18803fcc 	andi	r2,r3,255
 400ca68:	20800726 	beq	r4,r2,400ca88 <OS_SchedNew+0x140>
						mostUrgentPriority = OSTCBCur -> OSTCBPrio;
 400ca6c:	d0a05717 	ldw	r2,-32420(gp)
 400ca70:	10800d83 	ldbu	r2,54(r2)
 400ca74:	e0bfff45 	stb	r2,-3(fp)
						mostUrgentDeadline = OSTCBCur -> ddl;
 400ca78:	d0a05717 	ldw	r2,-32420(gp)
 400ca7c:	10800c03 	ldbu	r2,48(r2)
 400ca80:	e0bfff05 	stb	r2,-4(fp)
						//     sprintf(pb[buffer_index], "%d %d %d %d ", _COMPLETE, OSTCBCur -> OSTCBPrio, current -> OSTCBPrio, OSTimeGet());
						//     //printf("BBBBB: %s\n", pb[buffer_index]);
						//     buffer_index++;

						// }
						continue;
 400ca84:	00000606 	br	400caa0 <OS_SchedNew+0x158>
					}
					mostUrgentPriority = current->OSTCBPrio;
 400ca88:	e0bffe17 	ldw	r2,-8(fp)
 400ca8c:	10800d83 	ldbu	r2,54(r2)
 400ca90:	e0bfff45 	stb	r2,-3(fp)
					mostUrgentDeadline = current->ddl;
 400ca94:	e0bffe17 	ldw	r2,-8(fp)
 400ca98:	10800c03 	ldbu	r2,48(r2)
 400ca9c:	e0bfff05 	stb	r2,-4(fp)
	INT8U mostUrgentDeadline = 0x7FF;
	// if( current_deadline != 0 ) mostUrgentDeadline = current_deadline;
	// else mostUrgentDeadline = 0x7FF;
	// printf("mostUrgentDeadline : %d\n",mostUrgentDeadline );
	//printf("%d", OS_LOWEST_PRIO);
	for (idx = 0; idx < OS_LOWEST_PRIO-1 ; idx++)
 400caa0:	d0a04783 	ldbu	r2,-32482(gp)
 400caa4:	10800044 	addi	r2,r2,1
 400caa8:	d0a04785 	stb	r2,-32482(gp)
 400caac:	d0a04783 	ldbu	r2,-32482(gp)
 400cab0:	10803fcc 	andi	r2,r2,255
 400cab4:	108004f0 	cmpltui	r2,r2,19
 400cab8:	103fac1e 	bne	r2,zero,400c96c <OS_SchedNew+0x24>
			}
		}
		//printf("mostUrgentPriority: %d\n", mostUrgentPriority);

	}
	OSPrioHighRdy = mostUrgentPriority;
 400cabc:	e0bfff43 	ldbu	r2,-3(fp)
 400cac0:	d0a04a05 	stb	r2,-32472(gp)
	// if (buffer_index < BUFFER_SIZE  && !TIMEOUT ) {
	//     sprintf(pb[buffer_index], "%d %d %d %d ", _COMPLETE, OSPrioHighRdy, mostUrgentDeadline, OSTimeGet());
	//     //printf("BBBBB: %s\n", pb[buffer_index]);
	//     buffer_index++;
	// }
}
 400cac4:	e037883a 	mov	sp,fp
 400cac8:	df000017 	ldw	fp,0(sp)
 400cacc:	dec00104 	addi	sp,sp,4
 400cad0:	f800283a 	ret

0400cad4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 400cad4:	defffc04 	addi	sp,sp,-16
 400cad8:	df000315 	stw	fp,12(sp)
 400cadc:	df000304 	addi	fp,sp,12
 400cae0:	e13ffe15 	stw	r4,-8(fp)
 400cae4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 400cae8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 400caec:	00000d06 	br	400cb24 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 400caf0:	e0bfff17 	ldw	r2,-4(fp)
 400caf4:	10c00003 	ldbu	r3,0(r2)
 400caf8:	e0bffe17 	ldw	r2,-8(fp)
 400cafc:	10c00005 	stb	r3,0(r2)
 400cb00:	e0bffe17 	ldw	r2,-8(fp)
 400cb04:	10800044 	addi	r2,r2,1
 400cb08:	e0bffe15 	stw	r2,-8(fp)
 400cb0c:	e0bfff17 	ldw	r2,-4(fp)
 400cb10:	10800044 	addi	r2,r2,1
 400cb14:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400cb18:	e0bffd03 	ldbu	r2,-12(fp)
 400cb1c:	10800044 	addi	r2,r2,1
 400cb20:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400cb24:	e0bfff17 	ldw	r2,-4(fp)
 400cb28:	10800003 	ldbu	r2,0(r2)
 400cb2c:	10803fcc 	andi	r2,r2,255
 400cb30:	1004c03a 	cmpne	r2,r2,zero
 400cb34:	103fee1e 	bne	r2,zero,400caf0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 400cb38:	e0bffe17 	ldw	r2,-8(fp)
 400cb3c:	10000005 	stb	zero,0(r2)
    return (len);
 400cb40:	e0bffd03 	ldbu	r2,-12(fp)
}
 400cb44:	e037883a 	mov	sp,fp
 400cb48:	df000017 	ldw	fp,0(sp)
 400cb4c:	dec00104 	addi	sp,sp,4
 400cb50:	f800283a 	ret

0400cb54 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 400cb54:	defffd04 	addi	sp,sp,-12
 400cb58:	df000215 	stw	fp,8(sp)
 400cb5c:	df000204 	addi	fp,sp,8
 400cb60:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 400cb64:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 400cb68:	00000606 	br	400cb84 <OS_StrLen+0x30>
        psrc++;
 400cb6c:	e0bfff17 	ldw	r2,-4(fp)
 400cb70:	10800044 	addi	r2,r2,1
 400cb74:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400cb78:	e0bffe03 	ldbu	r2,-8(fp)
 400cb7c:	10800044 	addi	r2,r2,1
 400cb80:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400cb84:	e0bfff17 	ldw	r2,-4(fp)
 400cb88:	10800003 	ldbu	r2,0(r2)
 400cb8c:	10803fcc 	andi	r2,r2,255
 400cb90:	1004c03a 	cmpne	r2,r2,zero
 400cb94:	103ff51e 	bne	r2,zero,400cb6c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 400cb98:	e0bffe03 	ldbu	r2,-8(fp)
}
 400cb9c:	e037883a 	mov	sp,fp
 400cba0:	df000017 	ldw	fp,0(sp)
 400cba4:	dec00104 	addi	sp,sp,4
 400cba8:	f800283a 	ret

0400cbac <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 400cbac:	defffa04 	addi	sp,sp,-24
 400cbb0:	dfc00515 	stw	ra,20(sp)
 400cbb4:	df000415 	stw	fp,16(sp)
 400cbb8:	df000404 	addi	fp,sp,16
 400cbbc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400cbc0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cbc4:	0005303a 	rdctl	r2,status
 400cbc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cbcc:	e0fffd17 	ldw	r3,-12(fp)
 400cbd0:	00bfff84 	movi	r2,-2
 400cbd4:	1884703a 	and	r2,r3,r2
 400cbd8:	1001703a 	wrctl	status,r2
  
  return context;
 400cbdc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 400cbe0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 400cbe4:	d0a04917 	ldw	r2,-32476(gp)
 400cbe8:	10800044 	addi	r2,r2,1
 400cbec:	d0a04915 	stw	r2,-32476(gp)
 400cbf0:	e0bffe17 	ldw	r2,-8(fp)
 400cbf4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cbf8:	e0bffc17 	ldw	r2,-16(fp)
 400cbfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 400cc00:	40160200 	call	4016020 <OSTaskIdleHook>
    }
 400cc04:	003fef06 	br	400cbc4 <OS_TaskIdle+0x18>

0400cc08 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 400cc08:	defffa04 	addi	sp,sp,-24
 400cc0c:	dfc00515 	stw	ra,20(sp)
 400cc10:	df000415 	stw	fp,16(sp)
 400cc14:	df000404 	addi	fp,sp,16
 400cc18:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400cc1c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400cc20:	00000206 	br	400cc2c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 400cc24:	01000504 	movi	r4,20
 400cc28:	4012c840 	call	4012c84 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400cc2c:	d0a05a03 	ldbu	r2,-32408(gp)
 400cc30:	10803fcc 	andi	r2,r2,255
 400cc34:	1005003a 	cmpeq	r2,r2,zero
 400cc38:	103ffa1e 	bne	r2,zero,400cc24 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 400cc3c:	d1204e17 	ldw	r4,-32456(gp)
 400cc40:	01401904 	movi	r5,100
 400cc44:	40098c40 	call	40098c4 <__udivsi3>
 400cc48:	d0a04e15 	stw	r2,-32456(gp)
    if (OSIdleCtrMax == 0L) {
 400cc4c:	d0a04e17 	ldw	r2,-32456(gp)
 400cc50:	1004c03a 	cmpne	r2,r2,zero
 400cc54:	1000031e 	bne	r2,zero,400cc64 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 400cc58:	d0205005 	stb	zero,-32448(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 400cc5c:	01003fc4 	movi	r4,255
 400cc60:	40128980 	call	4012898 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cc64:	0005303a 	rdctl	r2,status
 400cc68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cc6c:	e0fffd17 	ldw	r3,-12(fp)
 400cc70:	00bfff84 	movi	r2,-2
 400cc74:	1884703a 	and	r2,r3,r2
 400cc78:	1001703a 	wrctl	status,r2
  
  return context;
 400cc7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 400cc80:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 400cc84:	d0a04917 	ldw	r2,-32476(gp)
 400cc88:	d0a05b15 	stw	r2,-32404(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 400cc8c:	d0204915 	stw	zero,-32476(gp)
 400cc90:	e0bffe17 	ldw	r2,-8(fp)
 400cc94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cc98:	e0bffc17 	ldw	r2,-16(fp)
 400cc9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 400cca0:	d1205b17 	ldw	r4,-32404(gp)
 400cca4:	d1604e17 	ldw	r5,-32456(gp)
 400cca8:	40098c40 	call	40098c4 <__udivsi3>
 400ccac:	1007883a 	mov	r3,r2
 400ccb0:	00801904 	movi	r2,100
 400ccb4:	10c5c83a 	sub	r2,r2,r3
 400ccb8:	d0a05005 	stb	r2,-32448(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 400ccbc:	4015fb00 	call	4015fb0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 400ccc0:	400ccd00 	call	400ccd0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 400ccc4:	01000284 	movi	r4,10
 400ccc8:	4012c840 	call	4012c84 <OSTimeDly>
    }
 400cccc:	003fe506 	br	400cc64 <OS_TaskStat+0x5c>

0400ccd0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 400ccd0:	defffa04 	addi	sp,sp,-24
 400ccd4:	dfc00515 	stw	ra,20(sp)
 400ccd8:	df000415 	stw	fp,16(sp)
 400ccdc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400cce0:	e03ffc05 	stb	zero,-16(fp)
 400cce4:	00002406 	br	400cd78 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 400cce8:	e13ffc03 	ldbu	r4,-16(fp)
 400ccec:	e17ffe04 	addi	r5,fp,-8
 400ccf0:	401269c0 	call	401269c <OSTaskStkChk>
 400ccf4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 400ccf8:	e0bffc43 	ldbu	r2,-15(fp)
 400ccfc:	1004c03a 	cmpne	r2,r2,zero
 400cd00:	10001a1e 	bne	r2,zero,400cd6c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 400cd04:	e0bffc03 	ldbu	r2,-16(fp)
 400cd08:	00c100b4 	movhi	r3,1026
 400cd0c:	18f7d104 	addi	r3,r3,-8380
 400cd10:	1085883a 	add	r2,r2,r2
 400cd14:	1085883a 	add	r2,r2,r2
 400cd18:	10c5883a 	add	r2,r2,r3
 400cd1c:	10800017 	ldw	r2,0(r2)
 400cd20:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 400cd24:	e0bffd17 	ldw	r2,-12(fp)
 400cd28:	1005003a 	cmpeq	r2,r2,zero
 400cd2c:	10000f1e 	bne	r2,zero,400cd6c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 400cd30:	e0bffd17 	ldw	r2,-12(fp)
 400cd34:	10800060 	cmpeqi	r2,r2,1
 400cd38:	10000c1e 	bne	r2,zero,400cd6c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400cd3c:	e0bffd17 	ldw	r2,-12(fp)
 400cd40:	10c00217 	ldw	r3,8(r2)
 400cd44:	e0bffd17 	ldw	r2,-12(fp)
 400cd48:	10800317 	ldw	r2,12(r2)
 400cd4c:	1085883a 	add	r2,r2,r2
 400cd50:	1085883a 	add	r2,r2,r2
 400cd54:	1887883a 	add	r3,r3,r2
 400cd58:	e0bffd17 	ldw	r2,-12(fp)
 400cd5c:	10c01215 	stw	r3,72(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400cd60:	e0ffff17 	ldw	r3,-4(fp)
 400cd64:	e0bffd17 	ldw	r2,-12(fp)
 400cd68:	10c01315 	stw	r3,76(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400cd6c:	e0bffc03 	ldbu	r2,-16(fp)
 400cd70:	10800044 	addi	r2,r2,1
 400cd74:	e0bffc05 	stb	r2,-16(fp)
 400cd78:	e0bffc03 	ldbu	r2,-16(fp)
 400cd7c:	10800570 	cmpltui	r2,r2,21
 400cd80:	103fd91e 	bne	r2,zero,400cce8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 400cd84:	e037883a 	mov	sp,fp
 400cd88:	dfc00117 	ldw	ra,4(sp)
 400cd8c:	df000017 	ldw	fp,0(sp)
 400cd90:	dec00204 	addi	sp,sp,8
 400cd94:	f800283a 	ret

0400cd98 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 400cd98:	defff104 	addi	sp,sp,-60
 400cd9c:	dfc00e15 	stw	ra,56(sp)
 400cda0:	df000d15 	stw	fp,52(sp)
 400cda4:	df000d04 	addi	fp,sp,52
 400cda8:	e17ffb15 	stw	r5,-20(fp)
 400cdac:	e1bffc15 	stw	r6,-16(fp)
 400cdb0:	e0800417 	ldw	r2,16(fp)
 400cdb4:	e13ffa05 	stb	r4,-24(fp)
 400cdb8:	e1fffd0d 	sth	r7,-12(fp)
 400cdbc:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400cdc0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cdc4:	0005303a 	rdctl	r2,status
 400cdc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cdcc:	e0fff717 	ldw	r3,-36(fp)
 400cdd0:	00bfff84 	movi	r2,-2
 400cdd4:	1884703a 	and	r2,r3,r2
 400cdd8:	1001703a 	wrctl	status,r2
  
  return context;
 400cddc:	e0bff717 	ldw	r2,-36(fp)
            ptcb->period = 0;
            ptcb->fullComp = 0;
        }*/


    OS_ENTER_CRITICAL();
 400cde0:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 400cde4:	d0a04f17 	ldw	r2,-32452(gp)
 400cde8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 400cdec:	e0bff917 	ldw	r2,-28(fp)
 400cdf0:	1005003a 	cmpeq	r2,r2,zero
 400cdf4:	1000941e 	bne	r2,zero,400d048 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 400cdf8:	e0bff917 	ldw	r2,-28(fp)
 400cdfc:	10800517 	ldw	r2,20(r2)
 400ce00:	d0a04f15 	stw	r2,-32452(gp)
 400ce04:	e0bff817 	ldw	r2,-32(fp)
 400ce08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ce0c:	e0bff617 	ldw	r2,-40(fp)
 400ce10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 400ce14:	e0fff917 	ldw	r3,-28(fp)
 400ce18:	e0bffb17 	ldw	r2,-20(fp)
 400ce1c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 400ce20:	e0fff917 	ldw	r3,-28(fp)
 400ce24:	e0bffa03 	ldbu	r2,-24(fp)
 400ce28:	18800d85 	stb	r2,54(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 400ce2c:	e0bff917 	ldw	r2,-28(fp)
 400ce30:	10000d05 	stb	zero,52(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 400ce34:	e0bff917 	ldw	r2,-28(fp)
 400ce38:	10000d45 	stb	zero,53(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 400ce3c:	e0bff917 	ldw	r2,-28(fp)
 400ce40:	10000c8d 	sth	zero,50(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 400ce44:	e0fff917 	ldw	r3,-28(fp)
 400ce48:	e0800317 	ldw	r2,12(fp)
 400ce4c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 400ce50:	e0fff917 	ldw	r3,-28(fp)
 400ce54:	e0800217 	ldw	r2,8(fp)
 400ce58:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 400ce5c:	e0fff917 	ldw	r3,-28(fp)
 400ce60:	e0bffc17 	ldw	r2,-16(fp)
 400ce64:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 400ce68:	e0fff917 	ldw	r3,-28(fp)
 400ce6c:	e0bffe0b 	ldhu	r2,-8(fp)
 400ce70:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 400ce74:	e0fff917 	ldw	r3,-28(fp)
 400ce78:	e0bffd0b 	ldhu	r2,-12(fp)
 400ce7c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 400ce80:	e0bff917 	ldw	r2,-28(fp)
 400ce84:	10000ec5 	stb	zero,59(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 400ce88:	e0bffa03 	ldbu	r2,-24(fp)
 400ce8c:	1004d0fa 	srli	r2,r2,3
 400ce90:	1007883a 	mov	r3,r2
 400ce94:	e0bff917 	ldw	r2,-28(fp)
 400ce98:	10c00e05 	stb	r3,56(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 400ce9c:	e0bffa03 	ldbu	r2,-24(fp)
 400cea0:	108001cc 	andi	r2,r2,7
 400cea4:	1007883a 	mov	r3,r2
 400cea8:	e0bff917 	ldw	r2,-28(fp)
 400ceac:	10c00dc5 	stb	r3,55(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 400ceb0:	e0bff917 	ldw	r2,-28(fp)
 400ceb4:	10800e03 	ldbu	r2,56(r2)
 400ceb8:	10c03fcc 	andi	r3,r2,255
 400cebc:	00800044 	movi	r2,1
 400cec0:	10c4983a 	sll	r2,r2,r3
 400cec4:	1007883a 	mov	r3,r2
 400cec8:	e0bff917 	ldw	r2,-28(fp)
 400cecc:	10c00e85 	stb	r3,58(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 400ced0:	e0bff917 	ldw	r2,-28(fp)
 400ced4:	10800dc3 	ldbu	r2,55(r2)
 400ced8:	10c03fcc 	andi	r3,r2,255
 400cedc:	00800044 	movi	r2,1
 400cee0:	10c4983a 	sll	r2,r2,r3
 400cee4:	1007883a 	mov	r3,r2
 400cee8:	e0bff917 	ldw	r2,-28(fp)
 400ceec:	10c00e45 	stb	r3,57(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 400cef0:	e0bff917 	ldw	r2,-28(fp)
 400cef4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 400cef8:	e0bff917 	ldw	r2,-28(fp)
 400cefc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 400cf00:	e0bff917 	ldw	r2,-28(fp)
 400cf04:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 400cf08:	e0bff917 	ldw	r2,-28(fp)
 400cf0c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 400cf10:	e0bff917 	ldw	r2,-28(fp)
 400cf14:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBCyclesStart = 0L;
 400cf18:	e0bff917 	ldw	r2,-28(fp)
 400cf1c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 400cf20:	e0bff917 	ldw	r2,-28(fp)
 400cf24:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 400cf28:	e0bff917 	ldw	r2,-28(fp)
 400cf2c:	10001215 	stw	zero,72(r2)
        ptcb->OSTCBStkUsed     = 0L;
 400cf30:	e0bff917 	ldw	r2,-28(fp)
 400cf34:	10001315 	stw	zero,76(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 400cf38:	e0fff917 	ldw	r3,-28(fp)
 400cf3c:	00800fc4 	movi	r2,63
 400cf40:	18801405 	stb	r2,80(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 400cf44:	e0bff917 	ldw	r2,-28(fp)
 400cf48:	10001445 	stb	zero,81(r2)
#endif

        OSTCBInitHook(ptcb);
 400cf4c:	e13ff917 	ldw	r4,-28(fp)
 400cf50:	401603c0 	call	401603c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 400cf54:	e13ff917 	ldw	r4,-28(fp)
 400cf58:	4015f540 	call	4015f54 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cf5c:	0005303a 	rdctl	r2,status
 400cf60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cf64:	e0fff517 	ldw	r3,-44(fp)
 400cf68:	00bfff84 	movi	r2,-2
 400cf6c:	1884703a 	and	r2,r3,r2
 400cf70:	1001703a 	wrctl	status,r2
  
  return context;
 400cf74:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 400cf78:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 400cf7c:	e0bffa03 	ldbu	r2,-24(fp)
 400cf80:	00c100b4 	movhi	r3,1026
 400cf84:	18f7d104 	addi	r3,r3,-8380
 400cf88:	1085883a 	add	r2,r2,r2
 400cf8c:	1085883a 	add	r2,r2,r2
 400cf90:	10c7883a 	add	r3,r2,r3
 400cf94:	e0bff917 	ldw	r2,-28(fp)
 400cf98:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 400cf9c:	d0e04b17 	ldw	r3,-32468(gp)
 400cfa0:	e0bff917 	ldw	r2,-28(fp)
 400cfa4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 400cfa8:	e0bff917 	ldw	r2,-28(fp)
 400cfac:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 400cfb0:	d0a04b17 	ldw	r2,-32468(gp)
 400cfb4:	1005003a 	cmpeq	r2,r2,zero
 400cfb8:	1000031e 	bne	r2,zero,400cfc8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 400cfbc:	d0e04b17 	ldw	r3,-32468(gp)
 400cfc0:	e0bff917 	ldw	r2,-28(fp)
 400cfc4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 400cfc8:	e0bff917 	ldw	r2,-28(fp)
 400cfcc:	d0a04b15 	stw	r2,-32468(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 400cfd0:	e0bff917 	ldw	r2,-28(fp)
 400cfd4:	10c00e83 	ldbu	r3,58(r2)
 400cfd8:	d0a05403 	ldbu	r2,-32432(gp)
 400cfdc:	1884b03a 	or	r2,r3,r2
 400cfe0:	d0a05405 	stb	r2,-32432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400cfe4:	e0bff917 	ldw	r2,-28(fp)
 400cfe8:	10800e03 	ldbu	r2,56(r2)
 400cfec:	11003fcc 	andi	r4,r2,255
 400cff0:	e0bff917 	ldw	r2,-28(fp)
 400cff4:	10800e03 	ldbu	r2,56(r2)
 400cff8:	10c03fcc 	andi	r3,r2,255
 400cffc:	d0a05444 	addi	r2,gp,-32431
 400d000:	1885883a 	add	r2,r3,r2
 400d004:	10c00003 	ldbu	r3,0(r2)
 400d008:	e0bff917 	ldw	r2,-28(fp)
 400d00c:	10800e43 	ldbu	r2,57(r2)
 400d010:	1884b03a 	or	r2,r3,r2
 400d014:	1007883a 	mov	r3,r2
 400d018:	d0a05444 	addi	r2,gp,-32431
 400d01c:	2085883a 	add	r2,r4,r2
 400d020:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 400d024:	d0a05043 	ldbu	r2,-32447(gp)
 400d028:	10800044 	addi	r2,r2,1
 400d02c:	d0a05045 	stb	r2,-32447(gp)
 400d030:	e0bff817 	ldw	r2,-32(fp)
 400d034:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d038:	e0bff417 	ldw	r2,-48(fp)
 400d03c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 400d040:	e03fff15 	stw	zero,-4(fp)
 400d044:	00000606 	br	400d060 <OS_TCBInit+0x2c8>
 400d048:	e0bff817 	ldw	r2,-32(fp)
 400d04c:	e0bff315 	stw	r2,-52(fp)
 400d050:	e0bff317 	ldw	r2,-52(fp)
 400d054:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 400d058:	00801084 	movi	r2,66
 400d05c:	e0bfff15 	stw	r2,-4(fp)
 400d060:	e0bfff17 	ldw	r2,-4(fp)
}
 400d064:	e037883a 	mov	sp,fp
 400d068:	dfc00117 	ldw	ra,4(sp)
 400d06c:	df000017 	ldw	fp,0(sp)
 400d070:	dec00204 	addi	sp,sp,8
 400d074:	f800283a 	ret

0400d078 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 400d078:	defffe04 	addi	sp,sp,-8
 400d07c:	df000115 	stw	fp,4(sp)
 400d080:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 400d084:	d0a01204 	addi	r2,gp,-32696
 400d088:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 400d08c:	d0a01304 	addi	r2,gp,-32692
 400d090:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 400d094:	d0a01484 	addi	r2,gp,-32686
 400d098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 400d09c:	d0a01504 	addi	r2,gp,-32684
 400d0a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 400d0a4:	d0a01404 	addi	r2,gp,-32688
 400d0a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 400d0ac:	d0a01584 	addi	r2,gp,-32682
 400d0b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 400d0b4:	d0a01604 	addi	r2,gp,-32680
 400d0b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 400d0bc:	d0a01684 	addi	r2,gp,-32678
 400d0c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 400d0c4:	d0a01704 	addi	r2,gp,-32676
 400d0c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 400d0cc:	d0a01784 	addi	r2,gp,-32674
 400d0d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 400d0d4:	d0a01804 	addi	r2,gp,-32672
 400d0d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 400d0dc:	d0a01884 	addi	r2,gp,-32670
 400d0e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 400d0e4:	d0a01904 	addi	r2,gp,-32668
 400d0e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 400d0ec:	d0a01984 	addi	r2,gp,-32666
 400d0f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 400d0f4:	d0a01a04 	addi	r2,gp,-32664
 400d0f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 400d0fc:	d0a01a84 	addi	r2,gp,-32662
 400d100:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 400d104:	d0a01b04 	addi	r2,gp,-32660
 400d108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 400d10c:	d0a01b84 	addi	r2,gp,-32658
 400d110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 400d114:	d0a01c04 	addi	r2,gp,-32656
 400d118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 400d11c:	d0a01c84 	addi	r2,gp,-32654
 400d120:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 400d124:	d0a01d04 	addi	r2,gp,-32652
 400d128:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 400d12c:	d0a01d84 	addi	r2,gp,-32650
 400d130:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 400d134:	d0a01e04 	addi	r2,gp,-32648
 400d138:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 400d13c:	d0a01e84 	addi	r2,gp,-32646
 400d140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 400d144:	d0a01f04 	addi	r2,gp,-32644
 400d148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 400d14c:	d0a01f84 	addi	r2,gp,-32642
 400d150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 400d154:	d0a02004 	addi	r2,gp,-32640
 400d158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 400d15c:	d0a02084 	addi	r2,gp,-32638
 400d160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 400d164:	d0a02104 	addi	r2,gp,-32636
 400d168:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 400d16c:	d0a02184 	addi	r2,gp,-32634
 400d170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 400d174:	d0a02204 	addi	r2,gp,-32632
 400d178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 400d17c:	d0a02284 	addi	r2,gp,-32630
 400d180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 400d184:	d0a02304 	addi	r2,gp,-32628
 400d188:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 400d18c:	d0a02384 	addi	r2,gp,-32626
 400d190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 400d194:	d0a02404 	addi	r2,gp,-32624
 400d198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 400d19c:	d0a02484 	addi	r2,gp,-32622
 400d1a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 400d1a4:	d0a02504 	addi	r2,gp,-32620
 400d1a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 400d1ac:	d0a02584 	addi	r2,gp,-32618
 400d1b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 400d1b4:	d0a02604 	addi	r2,gp,-32616
 400d1b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 400d1bc:	d0a02684 	addi	r2,gp,-32614
 400d1c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 400d1c4:	d0a02704 	addi	r2,gp,-32612
 400d1c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 400d1cc:	d0a02784 	addi	r2,gp,-32610
 400d1d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 400d1d4:	d0a02804 	addi	r2,gp,-32608
 400d1d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 400d1dc:	d0a02884 	addi	r2,gp,-32606
 400d1e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 400d1e4:	d0a02904 	addi	r2,gp,-32604
 400d1e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 400d1ec:	d0a02e04 	addi	r2,gp,-32584
 400d1f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 400d1f4:	e037883a 	mov	sp,fp
 400d1f8:	df000017 	ldw	fp,0(sp)
 400d1fc:	dec00104 	addi	sp,sp,4
 400d200:	f800283a 	ret

0400d204 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 400d204:	defff104 	addi	sp,sp,-60
 400d208:	df000e15 	stw	fp,56(sp)
 400d20c:	df000e04 	addi	fp,sp,56
 400d210:	e13ffa15 	stw	r4,-24(fp)
 400d214:	e1fffd15 	stw	r7,-12(fp)
 400d218:	e17ffb0d 	sth	r5,-20(fp)
 400d21c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400d220:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400d224:	e0bffd17 	ldw	r2,-12(fp)
 400d228:	1004c03a 	cmpne	r2,r2,zero
 400d22c:	1000021e 	bne	r2,zero,400d238 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 400d230:	e03fff15 	stw	zero,-4(fp)
 400d234:	0000bb06 	br	400d524 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400d238:	e0bffa17 	ldw	r2,-24(fp)
 400d23c:	1004c03a 	cmpne	r2,r2,zero
 400d240:	1000051e 	bne	r2,zero,400d258 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d244:	e0fffd17 	ldw	r3,-12(fp)
 400d248:	00801b84 	movi	r2,110
 400d24c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400d250:	e03fff15 	stw	zero,-4(fp)
 400d254:	0000b306 	br	400d524 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400d258:	e0bffa17 	ldw	r2,-24(fp)
 400d25c:	10800003 	ldbu	r2,0(r2)
 400d260:	10803fcc 	andi	r2,r2,255
 400d264:	10800160 	cmpeqi	r2,r2,5
 400d268:	1000051e 	bne	r2,zero,400d280 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400d26c:	e0fffd17 	ldw	r3,-12(fp)
 400d270:	00800044 	movi	r2,1
 400d274:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400d278:	e03fff15 	stw	zero,-4(fp)
 400d27c:	0000a906 	br	400d524 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 400d280:	e0fffc03 	ldbu	r3,-16(fp)
 400d284:	00bfe004 	movi	r2,-128
 400d288:	1884703a 	and	r2,r3,r2
 400d28c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 400d290:	e0bff943 	ldbu	r2,-27(fp)
 400d294:	1005003a 	cmpeq	r2,r2,zero
 400d298:	1000061e 	bne	r2,zero,400d2b4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 400d29c:	e0bffc03 	ldbu	r2,-16(fp)
 400d2a0:	10801fcc 	andi	r2,r2,127
 400d2a4:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 400d2a8:	00800044 	movi	r2,1
 400d2ac:	e0bff905 	stb	r2,-28(fp)
 400d2b0:	00000106 	br	400d2b8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 400d2b4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 400d2b8:	e0bffd17 	ldw	r2,-12(fp)
 400d2bc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d2c0:	0005303a 	rdctl	r2,status
 400d2c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d2c8:	e0fff717 	ldw	r3,-36(fp)
 400d2cc:	00bfff84 	movi	r2,-2
 400d2d0:	1884703a 	and	r2,r3,r2
 400d2d4:	1001703a 	wrctl	status,r2
  
  return context;
 400d2d8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 400d2dc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 400d2e0:	e0bffc03 	ldbu	r2,-16(fp)
 400d2e4:	e0bffe15 	stw	r2,-8(fp)
 400d2e8:	e0fffe17 	ldw	r3,-8(fp)
 400d2ec:	18800060 	cmpeqi	r2,r3,1
 400d2f0:	1000651e 	bne	r2,zero,400d488 <OSFlagAccept+0x284>
 400d2f4:	e0fffe17 	ldw	r3,-8(fp)
 400d2f8:	18800088 	cmpgei	r2,r3,2
 400d2fc:	1000041e 	bne	r2,zero,400d310 <OSFlagAccept+0x10c>
 400d300:	e0fffe17 	ldw	r3,-8(fp)
 400d304:	1805003a 	cmpeq	r2,r3,zero
 400d308:	1000421e 	bne	r2,zero,400d414 <OSFlagAccept+0x210>
 400d30c:	00007b06 	br	400d4fc <OSFlagAccept+0x2f8>
 400d310:	e0fffe17 	ldw	r3,-8(fp)
 400d314:	188000a0 	cmpeqi	r2,r3,2
 400d318:	1000041e 	bne	r2,zero,400d32c <OSFlagAccept+0x128>
 400d31c:	e0fffe17 	ldw	r3,-8(fp)
 400d320:	188000e0 	cmpeqi	r2,r3,3
 400d324:	10001e1e 	bne	r2,zero,400d3a0 <OSFlagAccept+0x19c>
 400d328:	00007406 	br	400d4fc <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400d32c:	e0bffa17 	ldw	r2,-24(fp)
 400d330:	10c0020b 	ldhu	r3,8(r2)
 400d334:	e0bffb0b 	ldhu	r2,-20(fp)
 400d338:	1884703a 	and	r2,r3,r2
 400d33c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400d340:	e0fff98b 	ldhu	r3,-26(fp)
 400d344:	e0bffb0b 	ldhu	r2,-20(fp)
 400d348:	18800d1e 	bne	r3,r2,400d380 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d34c:	e0bff903 	ldbu	r2,-28(fp)
 400d350:	10800058 	cmpnei	r2,r2,1
 400d354:	10000d1e 	bne	r2,zero,400d38c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400d358:	e0bffa17 	ldw	r2,-24(fp)
 400d35c:	1080020b 	ldhu	r2,8(r2)
 400d360:	1007883a 	mov	r3,r2
 400d364:	e0bff98b 	ldhu	r2,-26(fp)
 400d368:	0084303a 	nor	r2,zero,r2
 400d36c:	1884703a 	and	r2,r3,r2
 400d370:	1007883a 	mov	r3,r2
 400d374:	e0bffa17 	ldw	r2,-24(fp)
 400d378:	10c0020d 	sth	r3,8(r2)
 400d37c:	00000306 	br	400d38c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d380:	e0fffd17 	ldw	r3,-12(fp)
 400d384:	00801c04 	movi	r2,112
 400d388:	18800005 	stb	r2,0(r3)
 400d38c:	e0bff817 	ldw	r2,-32(fp)
 400d390:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d394:	e0bff617 	ldw	r2,-40(fp)
 400d398:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d39c:	00005f06 	br	400d51c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400d3a0:	e0bffa17 	ldw	r2,-24(fp)
 400d3a4:	10c0020b 	ldhu	r3,8(r2)
 400d3a8:	e0bffb0b 	ldhu	r2,-20(fp)
 400d3ac:	1884703a 	and	r2,r3,r2
 400d3b0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400d3b4:	e0bff98b 	ldhu	r2,-26(fp)
 400d3b8:	1005003a 	cmpeq	r2,r2,zero
 400d3bc:	10000d1e 	bne	r2,zero,400d3f4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d3c0:	e0bff903 	ldbu	r2,-28(fp)
 400d3c4:	10800058 	cmpnei	r2,r2,1
 400d3c8:	10000d1e 	bne	r2,zero,400d400 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400d3cc:	e0bffa17 	ldw	r2,-24(fp)
 400d3d0:	1080020b 	ldhu	r2,8(r2)
 400d3d4:	1007883a 	mov	r3,r2
 400d3d8:	e0bff98b 	ldhu	r2,-26(fp)
 400d3dc:	0084303a 	nor	r2,zero,r2
 400d3e0:	1884703a 	and	r2,r3,r2
 400d3e4:	1007883a 	mov	r3,r2
 400d3e8:	e0bffa17 	ldw	r2,-24(fp)
 400d3ec:	10c0020d 	sth	r3,8(r2)
 400d3f0:	00000306 	br	400d400 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d3f4:	e0fffd17 	ldw	r3,-12(fp)
 400d3f8:	00801c04 	movi	r2,112
 400d3fc:	18800005 	stb	r2,0(r3)
 400d400:	e0bff817 	ldw	r2,-32(fp)
 400d404:	e0bff515 	stw	r2,-44(fp)
 400d408:	e0bff517 	ldw	r2,-44(fp)
 400d40c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d410:	00004206 	br	400d51c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400d414:	e0bffa17 	ldw	r2,-24(fp)
 400d418:	1080020b 	ldhu	r2,8(r2)
 400d41c:	0084303a 	nor	r2,zero,r2
 400d420:	1007883a 	mov	r3,r2
 400d424:	e0bffb0b 	ldhu	r2,-20(fp)
 400d428:	1884703a 	and	r2,r3,r2
 400d42c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400d430:	e0fff98b 	ldhu	r3,-26(fp)
 400d434:	e0bffb0b 	ldhu	r2,-20(fp)
 400d438:	18800b1e 	bne	r3,r2,400d468 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d43c:	e0bff903 	ldbu	r2,-28(fp)
 400d440:	10800058 	cmpnei	r2,r2,1
 400d444:	10000b1e 	bne	r2,zero,400d474 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400d448:	e0bffa17 	ldw	r2,-24(fp)
 400d44c:	10c0020b 	ldhu	r3,8(r2)
 400d450:	e0bff98b 	ldhu	r2,-26(fp)
 400d454:	1884b03a 	or	r2,r3,r2
 400d458:	1007883a 	mov	r3,r2
 400d45c:	e0bffa17 	ldw	r2,-24(fp)
 400d460:	10c0020d 	sth	r3,8(r2)
 400d464:	00000306 	br	400d474 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d468:	e0fffd17 	ldw	r3,-12(fp)
 400d46c:	00801c04 	movi	r2,112
 400d470:	18800005 	stb	r2,0(r3)
 400d474:	e0bff817 	ldw	r2,-32(fp)
 400d478:	e0bff415 	stw	r2,-48(fp)
 400d47c:	e0bff417 	ldw	r2,-48(fp)
 400d480:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d484:	00002506 	br	400d51c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400d488:	e0bffa17 	ldw	r2,-24(fp)
 400d48c:	1080020b 	ldhu	r2,8(r2)
 400d490:	0084303a 	nor	r2,zero,r2
 400d494:	1007883a 	mov	r3,r2
 400d498:	e0bffb0b 	ldhu	r2,-20(fp)
 400d49c:	1884703a 	and	r2,r3,r2
 400d4a0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400d4a4:	e0bff98b 	ldhu	r2,-26(fp)
 400d4a8:	1005003a 	cmpeq	r2,r2,zero
 400d4ac:	10000b1e 	bne	r2,zero,400d4dc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400d4b0:	e0bff903 	ldbu	r2,-28(fp)
 400d4b4:	10800058 	cmpnei	r2,r2,1
 400d4b8:	10000b1e 	bne	r2,zero,400d4e8 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400d4bc:	e0bffa17 	ldw	r2,-24(fp)
 400d4c0:	10c0020b 	ldhu	r3,8(r2)
 400d4c4:	e0bff98b 	ldhu	r2,-26(fp)
 400d4c8:	1884b03a 	or	r2,r3,r2
 400d4cc:	1007883a 	mov	r3,r2
 400d4d0:	e0bffa17 	ldw	r2,-24(fp)
 400d4d4:	10c0020d 	sth	r3,8(r2)
 400d4d8:	00000306 	br	400d4e8 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400d4dc:	e0fffd17 	ldw	r3,-12(fp)
 400d4e0:	00801c04 	movi	r2,112
 400d4e4:	18800005 	stb	r2,0(r3)
 400d4e8:	e0bff817 	ldw	r2,-32(fp)
 400d4ec:	e0bff315 	stw	r2,-52(fp)
 400d4f0:	e0bff317 	ldw	r2,-52(fp)
 400d4f4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400d4f8:	00000806 	br	400d51c <OSFlagAccept+0x318>
 400d4fc:	e0bff817 	ldw	r2,-32(fp)
 400d500:	e0bff215 	stw	r2,-56(fp)
 400d504:	e0bff217 	ldw	r2,-56(fp)
 400d508:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 400d50c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 400d510:	e0fffd17 	ldw	r3,-12(fp)
 400d514:	00801bc4 	movi	r2,111
 400d518:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 400d51c:	e0bff98b 	ldhu	r2,-26(fp)
 400d520:	e0bfff15 	stw	r2,-4(fp)
 400d524:	e0bfff17 	ldw	r2,-4(fp)
}
 400d528:	e037883a 	mov	sp,fp
 400d52c:	df000017 	ldw	fp,0(sp)
 400d530:	dec00104 	addi	sp,sp,4
 400d534:	f800283a 	ret

0400d538 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 400d538:	defff704 	addi	sp,sp,-36
 400d53c:	df000815 	stw	fp,32(sp)
 400d540:	df000804 	addi	fp,sp,32
 400d544:	e17ffe15 	stw	r5,-8(fp)
 400d548:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 400d54c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 400d550:	e0bffe17 	ldw	r2,-8(fp)
 400d554:	1004c03a 	cmpne	r2,r2,zero
 400d558:	1000021e 	bne	r2,zero,400d564 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 400d55c:	e03fff15 	stw	zero,-4(fp)
 400d560:	00003f06 	br	400d660 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 400d564:	008100b4 	movhi	r2,1026
 400d568:	10a2c604 	addi	r2,r2,-29928
 400d56c:	10800003 	ldbu	r2,0(r2)
 400d570:	10803fcc 	andi	r2,r2,255
 400d574:	1005003a 	cmpeq	r2,r2,zero
 400d578:	1000051e 	bne	r2,zero,400d590 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 400d57c:	e0fffe17 	ldw	r3,-8(fp)
 400d580:	00800404 	movi	r2,16
 400d584:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 400d588:	e03fff15 	stw	zero,-4(fp)
 400d58c:	00003406 	br	400d660 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d590:	0005303a 	rdctl	r2,status
 400d594:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d598:	e0fffa17 	ldw	r3,-24(fp)
 400d59c:	00bfff84 	movi	r2,-2
 400d5a0:	1884703a 	and	r2,r3,r2
 400d5a4:	1001703a 	wrctl	status,r2
  
  return context;
 400d5a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400d5ac:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 400d5b0:	008100b4 	movhi	r2,1026
 400d5b4:	10a2c904 	addi	r2,r2,-29916
 400d5b8:	10800017 	ldw	r2,0(r2)
 400d5bc:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 400d5c0:	e0bffc17 	ldw	r2,-16(fp)
 400d5c4:	1005003a 	cmpeq	r2,r2,zero
 400d5c8:	10001c1e 	bne	r2,zero,400d63c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 400d5cc:	008100b4 	movhi	r2,1026
 400d5d0:	10a2c904 	addi	r2,r2,-29916
 400d5d4:	10800017 	ldw	r2,0(r2)
 400d5d8:	10800117 	ldw	r2,4(r2)
 400d5dc:	1007883a 	mov	r3,r2
 400d5e0:	008100b4 	movhi	r2,1026
 400d5e4:	10a2c904 	addi	r2,r2,-29916
 400d5e8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 400d5ec:	e0fffc17 	ldw	r3,-16(fp)
 400d5f0:	00800144 	movi	r2,5
 400d5f4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 400d5f8:	e0fffc17 	ldw	r3,-16(fp)
 400d5fc:	e0bffd0b 	ldhu	r2,-12(fp)
 400d600:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 400d604:	e0bffc17 	ldw	r2,-16(fp)
 400d608:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 400d60c:	e0fffc17 	ldw	r3,-16(fp)
 400d610:	00800fc4 	movi	r2,63
 400d614:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400d618:	e0bffc17 	ldw	r2,-16(fp)
 400d61c:	100002c5 	stb	zero,11(r2)
 400d620:	e0bffb17 	ldw	r2,-20(fp)
 400d624:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d628:	e0bff917 	ldw	r2,-28(fp)
 400d62c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 400d630:	e0bffe17 	ldw	r2,-8(fp)
 400d634:	10000005 	stb	zero,0(r2)
 400d638:	00000706 	br	400d658 <OSFlagCreate+0x120>
 400d63c:	e0bffb17 	ldw	r2,-20(fp)
 400d640:	e0bff815 	stw	r2,-32(fp)
 400d644:	e0bff817 	ldw	r2,-32(fp)
 400d648:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 400d64c:	e0fffe17 	ldw	r3,-8(fp)
 400d650:	00801c84 	movi	r2,114
 400d654:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 400d658:	e0bffc17 	ldw	r2,-16(fp)
 400d65c:	e0bfff15 	stw	r2,-4(fp)
 400d660:	e0bfff17 	ldw	r2,-4(fp)
}
 400d664:	e037883a 	mov	sp,fp
 400d668:	df000017 	ldw	fp,0(sp)
 400d66c:	dec00104 	addi	sp,sp,4
 400d670:	f800283a 	ret

0400d674 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 400d674:	defff004 	addi	sp,sp,-64
 400d678:	dfc00f15 	stw	ra,60(sp)
 400d67c:	df000e15 	stw	fp,56(sp)
 400d680:	df000e04 	addi	fp,sp,56
 400d684:	e13ffb15 	stw	r4,-20(fp)
 400d688:	e1bffd15 	stw	r6,-12(fp)
 400d68c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400d690:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400d694:	e0bffd17 	ldw	r2,-12(fp)
 400d698:	1004c03a 	cmpne	r2,r2,zero
 400d69c:	1000031e 	bne	r2,zero,400d6ac <OSFlagDel+0x38>
        return (pgrp);
 400d6a0:	e0bffb17 	ldw	r2,-20(fp)
 400d6a4:	e0bfff15 	stw	r2,-4(fp)
 400d6a8:	00009606 	br	400d904 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400d6ac:	e0bffb17 	ldw	r2,-20(fp)
 400d6b0:	1004c03a 	cmpne	r2,r2,zero
 400d6b4:	1000061e 	bne	r2,zero,400d6d0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d6b8:	e0fffd17 	ldw	r3,-12(fp)
 400d6bc:	00801b84 	movi	r2,110
 400d6c0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400d6c4:	e0fffb17 	ldw	r3,-20(fp)
 400d6c8:	e0ffff15 	stw	r3,-4(fp)
 400d6cc:	00008d06 	br	400d904 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400d6d0:	008100b4 	movhi	r2,1026
 400d6d4:	10a2c604 	addi	r2,r2,-29928
 400d6d8:	10800003 	ldbu	r2,0(r2)
 400d6dc:	10803fcc 	andi	r2,r2,255
 400d6e0:	1005003a 	cmpeq	r2,r2,zero
 400d6e4:	1000061e 	bne	r2,zero,400d700 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 400d6e8:	e0fffd17 	ldw	r3,-12(fp)
 400d6ec:	008003c4 	movi	r2,15
 400d6f0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400d6f4:	e0bffb17 	ldw	r2,-20(fp)
 400d6f8:	e0bfff15 	stw	r2,-4(fp)
 400d6fc:	00008106 	br	400d904 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 400d700:	e0bffb17 	ldw	r2,-20(fp)
 400d704:	10800003 	ldbu	r2,0(r2)
 400d708:	10803fcc 	andi	r2,r2,255
 400d70c:	10800160 	cmpeqi	r2,r2,5
 400d710:	1000061e 	bne	r2,zero,400d72c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 400d714:	e0fffd17 	ldw	r3,-12(fp)
 400d718:	00800044 	movi	r2,1
 400d71c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400d720:	e0fffb17 	ldw	r3,-20(fp)
 400d724:	e0ffff15 	stw	r3,-4(fp)
 400d728:	00007606 	br	400d904 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d72c:	0005303a 	rdctl	r2,status
 400d730:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d734:	e0fff617 	ldw	r3,-40(fp)
 400d738:	00bfff84 	movi	r2,-2
 400d73c:	1884703a 	and	r2,r3,r2
 400d740:	1001703a 	wrctl	status,r2
  
  return context;
 400d744:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 400d748:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 400d74c:	e0bffb17 	ldw	r2,-20(fp)
 400d750:	10800117 	ldw	r2,4(r2)
 400d754:	1005003a 	cmpeq	r2,r2,zero
 400d758:	1000031e 	bne	r2,zero,400d768 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400d75c:	00800044 	movi	r2,1
 400d760:	e0bffa05 	stb	r2,-24(fp)
 400d764:	00000106 	br	400d76c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400d768:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400d76c:	e0bffc03 	ldbu	r2,-16(fp)
 400d770:	e0bffe15 	stw	r2,-8(fp)
 400d774:	e0fffe17 	ldw	r3,-8(fp)
 400d778:	1805003a 	cmpeq	r2,r3,zero
 400d77c:	1000041e 	bne	r2,zero,400d790 <OSFlagDel+0x11c>
 400d780:	e0fffe17 	ldw	r3,-8(fp)
 400d784:	18800060 	cmpeqi	r2,r3,1
 400d788:	1000281e 	bne	r2,zero,400d82c <OSFlagDel+0x1b8>
 400d78c:	00005206 	br	400d8d8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 400d790:	e0bffa03 	ldbu	r2,-24(fp)
 400d794:	1004c03a 	cmpne	r2,r2,zero
 400d798:	10001a1e 	bne	r2,zero,400d804 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 400d79c:	e0fffb17 	ldw	r3,-20(fp)
 400d7a0:	00800fc4 	movi	r2,63
 400d7a4:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400d7a8:	e0bffb17 	ldw	r2,-20(fp)
 400d7ac:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400d7b0:	e0bffb17 	ldw	r2,-20(fp)
 400d7b4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 400d7b8:	008100b4 	movhi	r2,1026
 400d7bc:	10a2c904 	addi	r2,r2,-29916
 400d7c0:	10c00017 	ldw	r3,0(r2)
 400d7c4:	e0bffb17 	ldw	r2,-20(fp)
 400d7c8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400d7cc:	e0bffb17 	ldw	r2,-20(fp)
 400d7d0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 400d7d4:	00c100b4 	movhi	r3,1026
 400d7d8:	18e2c904 	addi	r3,r3,-29916
 400d7dc:	e0bffb17 	ldw	r2,-20(fp)
 400d7e0:	18800015 	stw	r2,0(r3)
 400d7e4:	e0bff717 	ldw	r2,-36(fp)
 400d7e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d7ec:	e0bff517 	ldw	r2,-44(fp)
 400d7f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 400d7f4:	e0bffd17 	ldw	r2,-12(fp)
 400d7f8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 400d7fc:	e03ff815 	stw	zero,-32(fp)
 400d800:	00003e06 	br	400d8fc <OSFlagDel+0x288>
 400d804:	e0bff717 	ldw	r2,-36(fp)
 400d808:	e0bff415 	stw	r2,-48(fp)
 400d80c:	e0bff417 	ldw	r2,-48(fp)
 400d810:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 400d814:	e0fffd17 	ldw	r3,-12(fp)
 400d818:	00801244 	movi	r2,73
 400d81c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 400d820:	e0bffb17 	ldw	r2,-20(fp)
 400d824:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 400d828:	00003406 	br	400d8fc <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400d82c:	e0bffb17 	ldw	r2,-20(fp)
 400d830:	10800117 	ldw	r2,4(r2)
 400d834:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400d838:	00000606 	br	400d854 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 400d83c:	e13ff917 	ldw	r4,-28(fp)
 400d840:	000b883a 	mov	r5,zero
 400d844:	400e9840 	call	400e984 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 400d848:	e0bff917 	ldw	r2,-28(fp)
 400d84c:	10800017 	ldw	r2,0(r2)
 400d850:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400d854:	e0bff917 	ldw	r2,-28(fp)
 400d858:	1004c03a 	cmpne	r2,r2,zero
 400d85c:	103ff71e 	bne	r2,zero,400d83c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 400d860:	e0fffb17 	ldw	r3,-20(fp)
 400d864:	00800fc4 	movi	r2,63
 400d868:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400d86c:	e0bffb17 	ldw	r2,-20(fp)
 400d870:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400d874:	e0bffb17 	ldw	r2,-20(fp)
 400d878:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 400d87c:	008100b4 	movhi	r2,1026
 400d880:	10a2c904 	addi	r2,r2,-29916
 400d884:	10c00017 	ldw	r3,0(r2)
 400d888:	e0bffb17 	ldw	r2,-20(fp)
 400d88c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400d890:	e0bffb17 	ldw	r2,-20(fp)
 400d894:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 400d898:	00c100b4 	movhi	r3,1026
 400d89c:	18e2c904 	addi	r3,r3,-29916
 400d8a0:	e0bffb17 	ldw	r2,-20(fp)
 400d8a4:	18800015 	stw	r2,0(r3)
 400d8a8:	e0bff717 	ldw	r2,-36(fp)
 400d8ac:	e0bff315 	stw	r2,-52(fp)
 400d8b0:	e0bff317 	ldw	r2,-52(fp)
 400d8b4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400d8b8:	e0bffa03 	ldbu	r2,-24(fp)
 400d8bc:	10800058 	cmpnei	r2,r2,1
 400d8c0:	1000011e 	bne	r2,zero,400d8c8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 400d8c4:	400c7a40 	call	400c7a4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 400d8c8:	e0bffd17 	ldw	r2,-12(fp)
 400d8cc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 400d8d0:	e03ff815 	stw	zero,-32(fp)
             break;
 400d8d4:	00000906 	br	400d8fc <OSFlagDel+0x288>
 400d8d8:	e0bff717 	ldw	r2,-36(fp)
 400d8dc:	e0bff215 	stw	r2,-56(fp)
 400d8e0:	e0bff217 	ldw	r2,-56(fp)
 400d8e4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 400d8e8:	e0fffd17 	ldw	r3,-12(fp)
 400d8ec:	008001c4 	movi	r2,7
 400d8f0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 400d8f4:	e0bffb17 	ldw	r2,-20(fp)
 400d8f8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 400d8fc:	e0bff817 	ldw	r2,-32(fp)
 400d900:	e0bfff15 	stw	r2,-4(fp)
 400d904:	e0bfff17 	ldw	r2,-4(fp)
}
 400d908:	e037883a 	mov	sp,fp
 400d90c:	dfc00117 	ldw	ra,4(sp)
 400d910:	df000017 	ldw	fp,0(sp)
 400d914:	dec00204 	addi	sp,sp,8
 400d918:	f800283a 	ret

0400d91c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 400d91c:	defff504 	addi	sp,sp,-44
 400d920:	dfc00a15 	stw	ra,40(sp)
 400d924:	df000915 	stw	fp,36(sp)
 400d928:	df000904 	addi	fp,sp,36
 400d92c:	e13ffc15 	stw	r4,-16(fp)
 400d930:	e17ffd15 	stw	r5,-12(fp)
 400d934:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400d938:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400d93c:	e0bffe17 	ldw	r2,-8(fp)
 400d940:	1004c03a 	cmpne	r2,r2,zero
 400d944:	1000021e 	bne	r2,zero,400d950 <OSFlagNameGet+0x34>
        return (0);
 400d948:	e03fff15 	stw	zero,-4(fp)
 400d94c:	00003e06 	br	400da48 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400d950:	e0bffc17 	ldw	r2,-16(fp)
 400d954:	1004c03a 	cmpne	r2,r2,zero
 400d958:	1000051e 	bne	r2,zero,400d970 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400d95c:	e0fffe17 	ldw	r3,-8(fp)
 400d960:	00801b84 	movi	r2,110
 400d964:	18800005 	stb	r2,0(r3)
        return (0);
 400d968:	e03fff15 	stw	zero,-4(fp)
 400d96c:	00003606 	br	400da48 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400d970:	e0bffd17 	ldw	r2,-12(fp)
 400d974:	1004c03a 	cmpne	r2,r2,zero
 400d978:	1000051e 	bne	r2,zero,400d990 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400d97c:	e0fffe17 	ldw	r3,-8(fp)
 400d980:	00800304 	movi	r2,12
 400d984:	18800005 	stb	r2,0(r3)
        return (0);
 400d988:	e03fff15 	stw	zero,-4(fp)
 400d98c:	00002e06 	br	400da48 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400d990:	008100b4 	movhi	r2,1026
 400d994:	10a2c604 	addi	r2,r2,-29928
 400d998:	10800003 	ldbu	r2,0(r2)
 400d99c:	10803fcc 	andi	r2,r2,255
 400d9a0:	1005003a 	cmpeq	r2,r2,zero
 400d9a4:	1000051e 	bne	r2,zero,400d9bc <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 400d9a8:	e0fffe17 	ldw	r3,-8(fp)
 400d9ac:	00800444 	movi	r2,17
 400d9b0:	18800005 	stb	r2,0(r3)
        return (0);
 400d9b4:	e03fff15 	stw	zero,-4(fp)
 400d9b8:	00002306 	br	400da48 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d9bc:	0005303a 	rdctl	r2,status
 400d9c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d9c4:	e0fff917 	ldw	r3,-28(fp)
 400d9c8:	00bfff84 	movi	r2,-2
 400d9cc:	1884703a 	and	r2,r3,r2
 400d9d0:	1001703a 	wrctl	status,r2
  
  return context;
 400d9d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400d9d8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 400d9dc:	e0bffc17 	ldw	r2,-16(fp)
 400d9e0:	10800003 	ldbu	r2,0(r2)
 400d9e4:	10803fcc 	andi	r2,r2,255
 400d9e8:	10800160 	cmpeqi	r2,r2,5
 400d9ec:	1000091e 	bne	r2,zero,400da14 <OSFlagNameGet+0xf8>
 400d9f0:	e0bffa17 	ldw	r2,-24(fp)
 400d9f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d9f8:	e0bff817 	ldw	r2,-32(fp)
 400d9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400da00:	e0fffe17 	ldw	r3,-8(fp)
 400da04:	00800044 	movi	r2,1
 400da08:	18800005 	stb	r2,0(r3)
        return (0);
 400da0c:	e03fff15 	stw	zero,-4(fp)
 400da10:	00000d06 	br	400da48 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 400da14:	e0bffc17 	ldw	r2,-16(fp)
 400da18:	11400284 	addi	r5,r2,10
 400da1c:	e13ffd17 	ldw	r4,-12(fp)
 400da20:	400cad40 	call	400cad4 <OS_StrCopy>
 400da24:	e0bffb05 	stb	r2,-20(fp)
 400da28:	e0bffa17 	ldw	r2,-24(fp)
 400da2c:	e0bff715 	stw	r2,-36(fp)
 400da30:	e0bff717 	ldw	r2,-36(fp)
 400da34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400da38:	e0bffe17 	ldw	r2,-8(fp)
 400da3c:	10000005 	stb	zero,0(r2)
    return (len);
 400da40:	e0bffb03 	ldbu	r2,-20(fp)
 400da44:	e0bfff15 	stw	r2,-4(fp)
 400da48:	e0bfff17 	ldw	r2,-4(fp)
}
 400da4c:	e037883a 	mov	sp,fp
 400da50:	dfc00117 	ldw	ra,4(sp)
 400da54:	df000017 	ldw	fp,0(sp)
 400da58:	dec00204 	addi	sp,sp,8
 400da5c:	f800283a 	ret

0400da60 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 400da60:	defff504 	addi	sp,sp,-44
 400da64:	dfc00a15 	stw	ra,40(sp)
 400da68:	df000915 	stw	fp,36(sp)
 400da6c:	df000904 	addi	fp,sp,36
 400da70:	e13ffd15 	stw	r4,-12(fp)
 400da74:	e17ffe15 	stw	r5,-8(fp)
 400da78:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400da7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400da80:	e0bfff17 	ldw	r2,-4(fp)
 400da84:	1005003a 	cmpeq	r2,r2,zero
 400da88:	1000451e 	bne	r2,zero,400dba0 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400da8c:	e0bffd17 	ldw	r2,-12(fp)
 400da90:	1004c03a 	cmpne	r2,r2,zero
 400da94:	1000041e 	bne	r2,zero,400daa8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400da98:	e0ffff17 	ldw	r3,-4(fp)
 400da9c:	00801b84 	movi	r2,110
 400daa0:	18800005 	stb	r2,0(r3)
        return;
 400daa4:	00003e06 	br	400dba0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400daa8:	e0bffe17 	ldw	r2,-8(fp)
 400daac:	1004c03a 	cmpne	r2,r2,zero
 400dab0:	1000041e 	bne	r2,zero,400dac4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400dab4:	e0ffff17 	ldw	r3,-4(fp)
 400dab8:	00800304 	movi	r2,12
 400dabc:	18800005 	stb	r2,0(r3)
        return;
 400dac0:	00003706 	br	400dba0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400dac4:	008100b4 	movhi	r2,1026
 400dac8:	10a2c604 	addi	r2,r2,-29928
 400dacc:	10800003 	ldbu	r2,0(r2)
 400dad0:	10803fcc 	andi	r2,r2,255
 400dad4:	1005003a 	cmpeq	r2,r2,zero
 400dad8:	1000041e 	bne	r2,zero,400daec <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 400dadc:	e0ffff17 	ldw	r3,-4(fp)
 400dae0:	00800484 	movi	r2,18
 400dae4:	18800005 	stb	r2,0(r3)
        return;
 400dae8:	00002d06 	br	400dba0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400daec:	0005303a 	rdctl	r2,status
 400daf0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400daf4:	e0fffa17 	ldw	r3,-24(fp)
 400daf8:	00bfff84 	movi	r2,-2
 400dafc:	1884703a 	and	r2,r3,r2
 400db00:	1001703a 	wrctl	status,r2
  
  return context;
 400db04:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400db08:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 400db0c:	e0bffd17 	ldw	r2,-12(fp)
 400db10:	10800003 	ldbu	r2,0(r2)
 400db14:	10803fcc 	andi	r2,r2,255
 400db18:	10800160 	cmpeqi	r2,r2,5
 400db1c:	1000081e 	bne	r2,zero,400db40 <OSFlagNameSet+0xe0>
 400db20:	e0bffb17 	ldw	r2,-20(fp)
 400db24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400db28:	e0bff917 	ldw	r2,-28(fp)
 400db2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400db30:	e0ffff17 	ldw	r3,-4(fp)
 400db34:	00800044 	movi	r2,1
 400db38:	18800005 	stb	r2,0(r3)
        return;
 400db3c:	00001806 	br	400dba0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 400db40:	e13ffe17 	ldw	r4,-8(fp)
 400db44:	400cb540 	call	400cb54 <OS_StrLen>
 400db48:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 400db4c:	e0bffc03 	ldbu	r2,-16(fp)
 400db50:	10800830 	cmpltui	r2,r2,32
 400db54:	1000081e 	bne	r2,zero,400db78 <OSFlagNameSet+0x118>
 400db58:	e0bffb17 	ldw	r2,-20(fp)
 400db5c:	e0bff815 	stw	r2,-32(fp)
 400db60:	e0bff817 	ldw	r2,-32(fp)
 400db64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 400db68:	e0ffff17 	ldw	r3,-4(fp)
 400db6c:	00801cc4 	movi	r2,115
 400db70:	18800005 	stb	r2,0(r3)
        return;
 400db74:	00000a06 	br	400dba0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 400db78:	e0bffd17 	ldw	r2,-12(fp)
 400db7c:	11000284 	addi	r4,r2,10
 400db80:	e17ffe17 	ldw	r5,-8(fp)
 400db84:	400cad40 	call	400cad4 <OS_StrCopy>
 400db88:	e0bffb17 	ldw	r2,-20(fp)
 400db8c:	e0bff715 	stw	r2,-36(fp)
 400db90:	e0bff717 	ldw	r2,-36(fp)
 400db94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400db98:	e0bfff17 	ldw	r2,-4(fp)
 400db9c:	10000005 	stb	zero,0(r2)
    return;
}
 400dba0:	e037883a 	mov	sp,fp
 400dba4:	dfc00117 	ldw	ra,4(sp)
 400dba8:	df000017 	ldw	fp,0(sp)
 400dbac:	dec00204 	addi	sp,sp,8
 400dbb0:	f800283a 	ret

0400dbb4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 400dbb4:	deffe004 	addi	sp,sp,-128
 400dbb8:	dfc01f15 	stw	ra,124(sp)
 400dbbc:	df001e15 	stw	fp,120(sp)
 400dbc0:	df001e04 	addi	fp,sp,120
 400dbc4:	e13ff915 	stw	r4,-28(fp)
 400dbc8:	e17ffa0d 	sth	r5,-24(fp)
 400dbcc:	e1bffb05 	stb	r6,-20(fp)
 400dbd0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400dbd4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400dbd8:	e0800217 	ldw	r2,8(fp)
 400dbdc:	1004c03a 	cmpne	r2,r2,zero
 400dbe0:	1000021e 	bne	r2,zero,400dbec <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 400dbe4:	e03fff15 	stw	zero,-4(fp)
 400dbe8:	00017d06 	br	400e1e0 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400dbec:	e0bff917 	ldw	r2,-28(fp)
 400dbf0:	1004c03a 	cmpne	r2,r2,zero
 400dbf4:	1000051e 	bne	r2,zero,400dc0c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400dbf8:	e0c00217 	ldw	r3,8(fp)
 400dbfc:	00801b84 	movi	r2,110
 400dc00:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400dc04:	e03fff15 	stw	zero,-4(fp)
 400dc08:	00017506 	br	400e1e0 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400dc0c:	008100b4 	movhi	r2,1026
 400dc10:	10a2c604 	addi	r2,r2,-29928
 400dc14:	10800003 	ldbu	r2,0(r2)
 400dc18:	10803fcc 	andi	r2,r2,255
 400dc1c:	1005003a 	cmpeq	r2,r2,zero
 400dc20:	1000051e 	bne	r2,zero,400dc38 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 400dc24:	e0c00217 	ldw	r3,8(fp)
 400dc28:	00800084 	movi	r2,2
 400dc2c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400dc30:	e03fff15 	stw	zero,-4(fp)
 400dc34:	00016a06 	br	400e1e0 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 400dc38:	008100b4 	movhi	r2,1026
 400dc3c:	10a2b7c4 	addi	r2,r2,-29985
 400dc40:	10800003 	ldbu	r2,0(r2)
 400dc44:	10803fcc 	andi	r2,r2,255
 400dc48:	1005003a 	cmpeq	r2,r2,zero
 400dc4c:	1000051e 	bne	r2,zero,400dc64 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 400dc50:	e0c00217 	ldw	r3,8(fp)
 400dc54:	00800344 	movi	r2,13
 400dc58:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400dc5c:	e03fff15 	stw	zero,-4(fp)
 400dc60:	00015f06 	br	400e1e0 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400dc64:	e0bff917 	ldw	r2,-28(fp)
 400dc68:	10800003 	ldbu	r2,0(r2)
 400dc6c:	10803fcc 	andi	r2,r2,255
 400dc70:	10800160 	cmpeqi	r2,r2,5
 400dc74:	1000051e 	bne	r2,zero,400dc8c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 400dc78:	e0c00217 	ldw	r3,8(fp)
 400dc7c:	00800044 	movi	r2,1
 400dc80:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400dc84:	e03fff15 	stw	zero,-4(fp)
 400dc88:	00015506 	br	400e1e0 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 400dc8c:	e0fffb03 	ldbu	r3,-20(fp)
 400dc90:	00bfe004 	movi	r2,-128
 400dc94:	1884703a 	and	r2,r3,r2
 400dc98:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 400dc9c:	e0bff283 	ldbu	r2,-54(fp)
 400dca0:	1005003a 	cmpeq	r2,r2,zero
 400dca4:	1000071e 	bne	r2,zero,400dcc4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 400dca8:	00c01fc4 	movi	r3,127
 400dcac:	e0bffb03 	ldbu	r2,-20(fp)
 400dcb0:	10c4703a 	and	r2,r2,r3
 400dcb4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 400dcb8:	00800044 	movi	r2,1
 400dcbc:	e0bff205 	stb	r2,-56(fp)
 400dcc0:	00000106 	br	400dcc8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 400dcc4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400dcc8:	0005303a 	rdctl	r2,status
 400dccc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400dcd0:	e0fff017 	ldw	r3,-64(fp)
 400dcd4:	00bfff84 	movi	r2,-2
 400dcd8:	1884703a 	and	r2,r3,r2
 400dcdc:	1001703a 	wrctl	status,r2
  
  return context;
 400dce0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 400dce4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 400dce8:	e0bffb03 	ldbu	r2,-20(fp)
 400dcec:	e0bffe15 	stw	r2,-8(fp)
 400dcf0:	e0fffe17 	ldw	r3,-8(fp)
 400dcf4:	18800060 	cmpeqi	r2,r3,1
 400dcf8:	1000981e 	bne	r2,zero,400df5c <OSFlagPend+0x3a8>
 400dcfc:	e0fffe17 	ldw	r3,-8(fp)
 400dd00:	18800088 	cmpgei	r2,r3,2
 400dd04:	1000041e 	bne	r2,zero,400dd18 <OSFlagPend+0x164>
 400dd08:	e0fffe17 	ldw	r3,-8(fp)
 400dd0c:	1805003a 	cmpeq	r2,r3,zero
 400dd10:	1000641e 	bne	r2,zero,400dea4 <OSFlagPend+0x2f0>
 400dd14:	0000bf06 	br	400e014 <OSFlagPend+0x460>
 400dd18:	e0fffe17 	ldw	r3,-8(fp)
 400dd1c:	188000a0 	cmpeqi	r2,r3,2
 400dd20:	1000041e 	bne	r2,zero,400dd34 <OSFlagPend+0x180>
 400dd24:	e0fffe17 	ldw	r3,-8(fp)
 400dd28:	188000e0 	cmpeqi	r2,r3,3
 400dd2c:	10002f1e 	bne	r2,zero,400ddec <OSFlagPend+0x238>
 400dd30:	0000b806 	br	400e014 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 400dd34:	e0bff917 	ldw	r2,-28(fp)
 400dd38:	10c0020b 	ldhu	r3,8(r2)
 400dd3c:	e0bffa0b 	ldhu	r2,-24(fp)
 400dd40:	1884703a 	and	r2,r3,r2
 400dd44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400dd48:	e0fff30b 	ldhu	r3,-52(fp)
 400dd4c:	e0bffa0b 	ldhu	r2,-24(fp)
 400dd50:	18801a1e 	bne	r3,r2,400ddbc <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400dd54:	e0bff203 	ldbu	r2,-56(fp)
 400dd58:	10800058 	cmpnei	r2,r2,1
 400dd5c:	1000091e 	bne	r2,zero,400dd84 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400dd60:	e0bff917 	ldw	r2,-28(fp)
 400dd64:	1080020b 	ldhu	r2,8(r2)
 400dd68:	1007883a 	mov	r3,r2
 400dd6c:	e0bff30b 	ldhu	r2,-52(fp)
 400dd70:	0084303a 	nor	r2,zero,r2
 400dd74:	1884703a 	and	r2,r3,r2
 400dd78:	1007883a 	mov	r3,r2
 400dd7c:	e0bff917 	ldw	r2,-28(fp)
 400dd80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400dd84:	008100b4 	movhi	r2,1026
 400dd88:	10a2c704 	addi	r2,r2,-29924
 400dd8c:	10c00017 	ldw	r3,0(r2)
 400dd90:	e0bff30b 	ldhu	r2,-52(fp)
 400dd94:	18800b0d 	sth	r2,44(r3)
 400dd98:	e0bff117 	ldw	r2,-60(fp)
 400dd9c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400dda0:	e0bfef17 	ldw	r2,-68(fp)
 400dda4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400dda8:	e0800217 	ldw	r2,8(fp)
 400ddac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400ddb0:	e0bff30b 	ldhu	r2,-52(fp)
 400ddb4:	e0bfff15 	stw	r2,-4(fp)
 400ddb8:	00010906 	br	400e1e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400ddbc:	e1bffa0b 	ldhu	r6,-24(fp)
 400ddc0:	e1fffb03 	ldbu	r7,-20(fp)
 400ddc4:	e0bffc0b 	ldhu	r2,-16(fp)
 400ddc8:	e17ff404 	addi	r5,fp,-48
 400ddcc:	d8800015 	stw	r2,0(sp)
 400ddd0:	e13ff917 	ldw	r4,-28(fp)
 400ddd4:	400e6dc0 	call	400e6dc <OS_FlagBlock>
 400ddd8:	e0bff117 	ldw	r2,-60(fp)
 400dddc:	e0bfee15 	stw	r2,-72(fp)
 400dde0:	e0bfee17 	ldw	r2,-72(fp)
 400dde4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400dde8:	00009506 	br	400e040 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 400ddec:	e0bff917 	ldw	r2,-28(fp)
 400ddf0:	10c0020b 	ldhu	r3,8(r2)
 400ddf4:	e0bffa0b 	ldhu	r2,-24(fp)
 400ddf8:	1884703a 	and	r2,r3,r2
 400ddfc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400de00:	e0bff30b 	ldhu	r2,-52(fp)
 400de04:	1005003a 	cmpeq	r2,r2,zero
 400de08:	10001a1e 	bne	r2,zero,400de74 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400de0c:	e0bff203 	ldbu	r2,-56(fp)
 400de10:	10800058 	cmpnei	r2,r2,1
 400de14:	1000091e 	bne	r2,zero,400de3c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400de18:	e0bff917 	ldw	r2,-28(fp)
 400de1c:	1080020b 	ldhu	r2,8(r2)
 400de20:	1007883a 	mov	r3,r2
 400de24:	e0bff30b 	ldhu	r2,-52(fp)
 400de28:	0084303a 	nor	r2,zero,r2
 400de2c:	1884703a 	and	r2,r3,r2
 400de30:	1007883a 	mov	r3,r2
 400de34:	e0bff917 	ldw	r2,-28(fp)
 400de38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400de3c:	008100b4 	movhi	r2,1026
 400de40:	10a2c704 	addi	r2,r2,-29924
 400de44:	10c00017 	ldw	r3,0(r2)
 400de48:	e0bff30b 	ldhu	r2,-52(fp)
 400de4c:	18800b0d 	sth	r2,44(r3)
 400de50:	e0bff117 	ldw	r2,-60(fp)
 400de54:	e0bfed15 	stw	r2,-76(fp)
 400de58:	e0bfed17 	ldw	r2,-76(fp)
 400de5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400de60:	e0800217 	ldw	r2,8(fp)
 400de64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400de68:	e0fff30b 	ldhu	r3,-52(fp)
 400de6c:	e0ffff15 	stw	r3,-4(fp)
 400de70:	0000db06 	br	400e1e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400de74:	e1bffa0b 	ldhu	r6,-24(fp)
 400de78:	e1fffb03 	ldbu	r7,-20(fp)
 400de7c:	e0bffc0b 	ldhu	r2,-16(fp)
 400de80:	e17ff404 	addi	r5,fp,-48
 400de84:	d8800015 	stw	r2,0(sp)
 400de88:	e13ff917 	ldw	r4,-28(fp)
 400de8c:	400e6dc0 	call	400e6dc <OS_FlagBlock>
 400de90:	e0bff117 	ldw	r2,-60(fp)
 400de94:	e0bfec15 	stw	r2,-80(fp)
 400de98:	e0bfec17 	ldw	r2,-80(fp)
 400de9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400dea0:	00006706 	br	400e040 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400dea4:	e0bff917 	ldw	r2,-28(fp)
 400dea8:	1080020b 	ldhu	r2,8(r2)
 400deac:	0084303a 	nor	r2,zero,r2
 400deb0:	1007883a 	mov	r3,r2
 400deb4:	e0bffa0b 	ldhu	r2,-24(fp)
 400deb8:	1884703a 	and	r2,r3,r2
 400debc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400dec0:	e0fff30b 	ldhu	r3,-52(fp)
 400dec4:	e0bffa0b 	ldhu	r2,-24(fp)
 400dec8:	1880181e 	bne	r3,r2,400df2c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400decc:	e0bff203 	ldbu	r2,-56(fp)
 400ded0:	10800058 	cmpnei	r2,r2,1
 400ded4:	1000071e 	bne	r2,zero,400def4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400ded8:	e0bff917 	ldw	r2,-28(fp)
 400dedc:	10c0020b 	ldhu	r3,8(r2)
 400dee0:	e0bff30b 	ldhu	r2,-52(fp)
 400dee4:	1884b03a 	or	r2,r3,r2
 400dee8:	1007883a 	mov	r3,r2
 400deec:	e0bff917 	ldw	r2,-28(fp)
 400def0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400def4:	008100b4 	movhi	r2,1026
 400def8:	10a2c704 	addi	r2,r2,-29924
 400defc:	10c00017 	ldw	r3,0(r2)
 400df00:	e0bff30b 	ldhu	r2,-52(fp)
 400df04:	18800b0d 	sth	r2,44(r3)
 400df08:	e0bff117 	ldw	r2,-60(fp)
 400df0c:	e0bfeb15 	stw	r2,-84(fp)
 400df10:	e0bfeb17 	ldw	r2,-84(fp)
 400df14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400df18:	e0800217 	ldw	r2,8(fp)
 400df1c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400df20:	e0bff30b 	ldhu	r2,-52(fp)
 400df24:	e0bfff15 	stw	r2,-4(fp)
 400df28:	0000ad06 	br	400e1e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400df2c:	e1bffa0b 	ldhu	r6,-24(fp)
 400df30:	e1fffb03 	ldbu	r7,-20(fp)
 400df34:	e0bffc0b 	ldhu	r2,-16(fp)
 400df38:	e17ff404 	addi	r5,fp,-48
 400df3c:	d8800015 	stw	r2,0(sp)
 400df40:	e13ff917 	ldw	r4,-28(fp)
 400df44:	400e6dc0 	call	400e6dc <OS_FlagBlock>
 400df48:	e0bff117 	ldw	r2,-60(fp)
 400df4c:	e0bfea15 	stw	r2,-88(fp)
 400df50:	e0bfea17 	ldw	r2,-88(fp)
 400df54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400df58:	00003906 	br	400e040 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400df5c:	e0bff917 	ldw	r2,-28(fp)
 400df60:	1080020b 	ldhu	r2,8(r2)
 400df64:	0084303a 	nor	r2,zero,r2
 400df68:	1007883a 	mov	r3,r2
 400df6c:	e0bffa0b 	ldhu	r2,-24(fp)
 400df70:	1884703a 	and	r2,r3,r2
 400df74:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400df78:	e0bff30b 	ldhu	r2,-52(fp)
 400df7c:	1005003a 	cmpeq	r2,r2,zero
 400df80:	1000181e 	bne	r2,zero,400dfe4 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400df84:	e0bff203 	ldbu	r2,-56(fp)
 400df88:	10800058 	cmpnei	r2,r2,1
 400df8c:	1000071e 	bne	r2,zero,400dfac <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400df90:	e0bff917 	ldw	r2,-28(fp)
 400df94:	10c0020b 	ldhu	r3,8(r2)
 400df98:	e0bff30b 	ldhu	r2,-52(fp)
 400df9c:	1884b03a 	or	r2,r3,r2
 400dfa0:	1007883a 	mov	r3,r2
 400dfa4:	e0bff917 	ldw	r2,-28(fp)
 400dfa8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400dfac:	008100b4 	movhi	r2,1026
 400dfb0:	10a2c704 	addi	r2,r2,-29924
 400dfb4:	10c00017 	ldw	r3,0(r2)
 400dfb8:	e0bff30b 	ldhu	r2,-52(fp)
 400dfbc:	18800b0d 	sth	r2,44(r3)
 400dfc0:	e0bff117 	ldw	r2,-60(fp)
 400dfc4:	e0bfe915 	stw	r2,-92(fp)
 400dfc8:	e0bfe917 	ldw	r2,-92(fp)
 400dfcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400dfd0:	e0800217 	ldw	r2,8(fp)
 400dfd4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400dfd8:	e0fff30b 	ldhu	r3,-52(fp)
 400dfdc:	e0ffff15 	stw	r3,-4(fp)
 400dfe0:	00007f06 	br	400e1e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400dfe4:	e1bffa0b 	ldhu	r6,-24(fp)
 400dfe8:	e1fffb03 	ldbu	r7,-20(fp)
 400dfec:	e0bffc0b 	ldhu	r2,-16(fp)
 400dff0:	e17ff404 	addi	r5,fp,-48
 400dff4:	d8800015 	stw	r2,0(sp)
 400dff8:	e13ff917 	ldw	r4,-28(fp)
 400dffc:	400e6dc0 	call	400e6dc <OS_FlagBlock>
 400e000:	e0bff117 	ldw	r2,-60(fp)
 400e004:	e0bfe815 	stw	r2,-96(fp)
 400e008:	e0bfe817 	ldw	r2,-96(fp)
 400e00c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400e010:	00000b06 	br	400e040 <OSFlagPend+0x48c>
 400e014:	e0bff117 	ldw	r2,-60(fp)
 400e018:	e0bfe715 	stw	r2,-100(fp)
 400e01c:	e0bfe717 	ldw	r2,-100(fp)
 400e020:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 400e024:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 400e028:	e0c00217 	ldw	r3,8(fp)
 400e02c:	00801bc4 	movi	r2,111
 400e030:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 400e034:	e0bff30b 	ldhu	r2,-52(fp)
 400e038:	e0bfff15 	stw	r2,-4(fp)
 400e03c:	00006806 	br	400e1e0 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 400e040:	400c7a40 	call	400c7a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e044:	0005303a 	rdctl	r2,status
 400e048:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e04c:	e0ffe617 	ldw	r3,-104(fp)
 400e050:	00bfff84 	movi	r2,-2
 400e054:	1884703a 	and	r2,r3,r2
 400e058:	1001703a 	wrctl	status,r2
  
  return context;
 400e05c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 400e060:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 400e064:	008100b4 	movhi	r2,1026
 400e068:	10a2c704 	addi	r2,r2,-29924
 400e06c:	10800017 	ldw	r2,0(r2)
 400e070:	10800d43 	ldbu	r2,53(r2)
 400e074:	10803fcc 	andi	r2,r2,255
 400e078:	1005003a 	cmpeq	r2,r2,zero
 400e07c:	1000221e 	bne	r2,zero,400e108 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 400e080:	008100b4 	movhi	r2,1026
 400e084:	10a2c704 	addi	r2,r2,-29924
 400e088:	10800017 	ldw	r2,0(r2)
 400e08c:	10800d43 	ldbu	r2,53(r2)
 400e090:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400e094:	008100b4 	movhi	r2,1026
 400e098:	10a2c704 	addi	r2,r2,-29924
 400e09c:	10800017 	ldw	r2,0(r2)
 400e0a0:	10000d45 	stb	zero,53(r2)
        OS_FlagUnlink(&node);
 400e0a4:	e13ff404 	addi	r4,fp,-48
 400e0a8:	400ea940 	call	400ea94 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 400e0ac:	008100b4 	movhi	r2,1026
 400e0b0:	10a2c704 	addi	r2,r2,-29924
 400e0b4:	10800017 	ldw	r2,0(r2)
 400e0b8:	10000d05 	stb	zero,52(r2)
 400e0bc:	e0bff117 	ldw	r2,-60(fp)
 400e0c0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e0c4:	e0bfe517 	ldw	r2,-108(fp)
 400e0c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 400e0cc:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 400e0d0:	e0bff243 	ldbu	r2,-55(fp)
 400e0d4:	108000a0 	cmpeqi	r2,r2,2
 400e0d8:	1000011e 	bne	r2,zero,400e0e0 <OSFlagPend+0x52c>
 400e0dc:	00000406 	br	400e0f0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 400e0e0:	e0c00217 	ldw	r3,8(fp)
 400e0e4:	00800384 	movi	r2,14
 400e0e8:	18800005 	stb	r2,0(r3)
                 break;
 400e0ec:	00000306 	br	400e0fc <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 400e0f0:	e0c00217 	ldw	r3,8(fp)
 400e0f4:	00800284 	movi	r2,10
 400e0f8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 400e0fc:	e0fff30b 	ldhu	r3,-52(fp)
 400e100:	e0ffff15 	stw	r3,-4(fp)
 400e104:	00003606 	br	400e1e0 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 400e108:	008100b4 	movhi	r2,1026
 400e10c:	10a2c704 	addi	r2,r2,-29924
 400e110:	10800017 	ldw	r2,0(r2)
 400e114:	10800b0b 	ldhu	r2,44(r2)
 400e118:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 400e11c:	e0bff203 	ldbu	r2,-56(fp)
 400e120:	10800058 	cmpnei	r2,r2,1
 400e124:	1000261e 	bne	r2,zero,400e1c0 <OSFlagPend+0x60c>
        switch (wait_type) {
 400e128:	e0bffb03 	ldbu	r2,-20(fp)
 400e12c:	e0bffd15 	stw	r2,-12(fp)
 400e130:	e0fffd17 	ldw	r3,-12(fp)
 400e134:	1804803a 	cmplt	r2,r3,zero
 400e138:	1000181e 	bne	r2,zero,400e19c <OSFlagPend+0x5e8>
 400e13c:	e0fffd17 	ldw	r3,-12(fp)
 400e140:	18800090 	cmplti	r2,r3,2
 400e144:	10000d1e 	bne	r2,zero,400e17c <OSFlagPend+0x5c8>
 400e148:	e0fffd17 	ldw	r3,-12(fp)
 400e14c:	18800108 	cmpgei	r2,r3,4
 400e150:	1000121e 	bne	r2,zero,400e19c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 400e154:	e0bff917 	ldw	r2,-28(fp)
 400e158:	1080020b 	ldhu	r2,8(r2)
 400e15c:	1007883a 	mov	r3,r2
 400e160:	e0bff30b 	ldhu	r2,-52(fp)
 400e164:	0084303a 	nor	r2,zero,r2
 400e168:	1884703a 	and	r2,r3,r2
 400e16c:	1007883a 	mov	r3,r2
 400e170:	e0bff917 	ldw	r2,-28(fp)
 400e174:	10c0020d 	sth	r3,8(r2)
                 break;
 400e178:	00001106 	br	400e1c0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 400e17c:	e0bff917 	ldw	r2,-28(fp)
 400e180:	10c0020b 	ldhu	r3,8(r2)
 400e184:	e0bff30b 	ldhu	r2,-52(fp)
 400e188:	1884b03a 	or	r2,r3,r2
 400e18c:	1007883a 	mov	r3,r2
 400e190:	e0bff917 	ldw	r2,-28(fp)
 400e194:	10c0020d 	sth	r3,8(r2)
                 break;
 400e198:	00000906 	br	400e1c0 <OSFlagPend+0x60c>
 400e19c:	e0bff117 	ldw	r2,-60(fp)
 400e1a0:	e0bfe415 	stw	r2,-112(fp)
 400e1a4:	e0bfe417 	ldw	r2,-112(fp)
 400e1a8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400e1ac:	e0c00217 	ldw	r3,8(fp)
 400e1b0:	00801bc4 	movi	r2,111
 400e1b4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 400e1b8:	e03fff15 	stw	zero,-4(fp)
 400e1bc:	00000806 	br	400e1e0 <OSFlagPend+0x62c>
 400e1c0:	e0bff117 	ldw	r2,-60(fp)
 400e1c4:	e0bfe315 	stw	r2,-116(fp)
 400e1c8:	e0bfe317 	ldw	r2,-116(fp)
 400e1cc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 400e1d0:	e0800217 	ldw	r2,8(fp)
 400e1d4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 400e1d8:	e0bff30b 	ldhu	r2,-52(fp)
 400e1dc:	e0bfff15 	stw	r2,-4(fp)
 400e1e0:	e0bfff17 	ldw	r2,-4(fp)
}
 400e1e4:	e037883a 	mov	sp,fp
 400e1e8:	dfc00117 	ldw	ra,4(sp)
 400e1ec:	df000017 	ldw	fp,0(sp)
 400e1f0:	dec00204 	addi	sp,sp,8
 400e1f4:	f800283a 	ret

0400e1f8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 400e1f8:	defffb04 	addi	sp,sp,-20
 400e1fc:	df000415 	stw	fp,16(sp)
 400e200:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400e204:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e208:	0005303a 	rdctl	r2,status
 400e20c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e210:	e0fffd17 	ldw	r3,-12(fp)
 400e214:	00bfff84 	movi	r2,-2
 400e218:	1884703a 	and	r2,r3,r2
 400e21c:	1001703a 	wrctl	status,r2
  
  return context;
 400e220:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 400e224:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 400e228:	008100b4 	movhi	r2,1026
 400e22c:	10a2c704 	addi	r2,r2,-29924
 400e230:	10800017 	ldw	r2,0(r2)
 400e234:	10800b0b 	ldhu	r2,44(r2)
 400e238:	e0bfff0d 	sth	r2,-4(fp)
 400e23c:	e0bffe17 	ldw	r2,-8(fp)
 400e240:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e244:	e0bffc17 	ldw	r2,-16(fp)
 400e248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 400e24c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 400e250:	e037883a 	mov	sp,fp
 400e254:	df000017 	ldw	fp,0(sp)
 400e258:	dec00104 	addi	sp,sp,4
 400e25c:	f800283a 	ret

0400e260 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 400e260:	deffed04 	addi	sp,sp,-76
 400e264:	dfc01215 	stw	ra,72(sp)
 400e268:	df001115 	stw	fp,68(sp)
 400e26c:	df001104 	addi	fp,sp,68
 400e270:	e13ff915 	stw	r4,-28(fp)
 400e274:	e1fffc15 	stw	r7,-16(fp)
 400e278:	e17ffa0d 	sth	r5,-24(fp)
 400e27c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 400e280:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 400e284:	e0bffc17 	ldw	r2,-16(fp)
 400e288:	1004c03a 	cmpne	r2,r2,zero
 400e28c:	1000021e 	bne	r2,zero,400e298 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 400e290:	e03fff15 	stw	zero,-4(fp)
 400e294:	0000d606 	br	400e5f0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 400e298:	e0bff917 	ldw	r2,-28(fp)
 400e29c:	1004c03a 	cmpne	r2,r2,zero
 400e2a0:	1000051e 	bne	r2,zero,400e2b8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400e2a4:	e0fffc17 	ldw	r3,-16(fp)
 400e2a8:	00801b84 	movi	r2,110
 400e2ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400e2b0:	e03fff15 	stw	zero,-4(fp)
 400e2b4:	0000ce06 	br	400e5f0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 400e2b8:	e0bff917 	ldw	r2,-28(fp)
 400e2bc:	10800003 	ldbu	r2,0(r2)
 400e2c0:	10803fcc 	andi	r2,r2,255
 400e2c4:	10800160 	cmpeqi	r2,r2,5
 400e2c8:	1000051e 	bne	r2,zero,400e2e0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 400e2cc:	e0fffc17 	ldw	r3,-16(fp)
 400e2d0:	00800044 	movi	r2,1
 400e2d4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400e2d8:	e03fff15 	stw	zero,-4(fp)
 400e2dc:	0000c406 	br	400e5f0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e2e0:	0005303a 	rdctl	r2,status
 400e2e4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e2e8:	e0fff417 	ldw	r3,-48(fp)
 400e2ec:	00bfff84 	movi	r2,-2
 400e2f0:	1884703a 	and	r2,r3,r2
 400e2f4:	1001703a 	wrctl	status,r2
  
  return context;
 400e2f8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 400e2fc:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 400e300:	e0bffb03 	ldbu	r2,-20(fp)
 400e304:	e0bffe15 	stw	r2,-8(fp)
 400e308:	e0fffe17 	ldw	r3,-8(fp)
 400e30c:	1805003a 	cmpeq	r2,r3,zero
 400e310:	1000041e 	bne	r2,zero,400e324 <OSFlagPost+0xc4>
 400e314:	e0fffe17 	ldw	r3,-8(fp)
 400e318:	18800060 	cmpeqi	r2,r3,1
 400e31c:	10000b1e 	bne	r2,zero,400e34c <OSFlagPost+0xec>
 400e320:	00001206 	br	400e36c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 400e324:	e0bff917 	ldw	r2,-28(fp)
 400e328:	1080020b 	ldhu	r2,8(r2)
 400e32c:	1007883a 	mov	r3,r2
 400e330:	e0bffa0b 	ldhu	r2,-24(fp)
 400e334:	0084303a 	nor	r2,zero,r2
 400e338:	1884703a 	and	r2,r3,r2
 400e33c:	1007883a 	mov	r3,r2
 400e340:	e0bff917 	ldw	r2,-28(fp)
 400e344:	10c0020d 	sth	r3,8(r2)
             break;
 400e348:	00001106 	br	400e390 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 400e34c:	e0bff917 	ldw	r2,-28(fp)
 400e350:	10c0020b 	ldhu	r3,8(r2)
 400e354:	e0bffa0b 	ldhu	r2,-24(fp)
 400e358:	1884b03a 	or	r2,r3,r2
 400e35c:	1007883a 	mov	r3,r2
 400e360:	e0bff917 	ldw	r2,-28(fp)
 400e364:	10c0020d 	sth	r3,8(r2)
             break;
 400e368:	00000906 	br	400e390 <OSFlagPost+0x130>
 400e36c:	e0bff517 	ldw	r2,-44(fp)
 400e370:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e374:	e0bff317 	ldw	r2,-52(fp)
 400e378:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 400e37c:	e0fffc17 	ldw	r3,-16(fp)
 400e380:	00801c44 	movi	r2,113
 400e384:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 400e388:	e03fff15 	stw	zero,-4(fp)
 400e38c:	00009806 	br	400e5f0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 400e390:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400e394:	e0bff917 	ldw	r2,-28(fp)
 400e398:	10800117 	ldw	r2,4(r2)
 400e39c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 400e3a0:	00007506 	br	400e578 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 400e3a4:	e0bff817 	ldw	r2,-32(fp)
 400e3a8:	10800483 	ldbu	r2,18(r2)
 400e3ac:	10803fcc 	andi	r2,r2,255
 400e3b0:	e0bffd15 	stw	r2,-12(fp)
 400e3b4:	e0fffd17 	ldw	r3,-12(fp)
 400e3b8:	18800060 	cmpeqi	r2,r3,1
 400e3bc:	10004d1e 	bne	r2,zero,400e4f4 <OSFlagPost+0x294>
 400e3c0:	e0fffd17 	ldw	r3,-12(fp)
 400e3c4:	18800088 	cmpgei	r2,r3,2
 400e3c8:	1000041e 	bne	r2,zero,400e3dc <OSFlagPost+0x17c>
 400e3cc:	e0fffd17 	ldw	r3,-12(fp)
 400e3d0:	1805003a 	cmpeq	r2,r3,zero
 400e3d4:	1000301e 	bne	r2,zero,400e498 <OSFlagPost+0x238>
 400e3d8:	00005b06 	br	400e548 <OSFlagPost+0x2e8>
 400e3dc:	e0fffd17 	ldw	r3,-12(fp)
 400e3e0:	188000a0 	cmpeqi	r2,r3,2
 400e3e4:	1000041e 	bne	r2,zero,400e3f8 <OSFlagPost+0x198>
 400e3e8:	e0fffd17 	ldw	r3,-12(fp)
 400e3ec:	188000e0 	cmpeqi	r2,r3,3
 400e3f0:	1000161e 	bne	r2,zero,400e44c <OSFlagPost+0x1ec>
 400e3f4:	00005406 	br	400e548 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e3f8:	e0bff917 	ldw	r2,-28(fp)
 400e3fc:	10c0020b 	ldhu	r3,8(r2)
 400e400:	e0bff817 	ldw	r2,-32(fp)
 400e404:	1080040b 	ldhu	r2,16(r2)
 400e408:	1884703a 	and	r2,r3,r2
 400e40c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 400e410:	e0bff817 	ldw	r2,-32(fp)
 400e414:	1080040b 	ldhu	r2,16(r2)
 400e418:	10ffffcc 	andi	r3,r2,65535
 400e41c:	e0bff68b 	ldhu	r2,-38(fp)
 400e420:	1880521e 	bne	r3,r2,400e56c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e424:	e17ff68b 	ldhu	r5,-38(fp)
 400e428:	e13ff817 	ldw	r4,-32(fp)
 400e42c:	400e9840 	call	400e984 <OS_FlagTaskRdy>
 400e430:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e434:	e0bff603 	ldbu	r2,-40(fp)
 400e438:	10800058 	cmpnei	r2,r2,1
 400e43c:	10004b1e 	bne	r2,zero,400e56c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e440:	00800044 	movi	r2,1
 400e444:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e448:	00004806 	br	400e56c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e44c:	e0bff917 	ldw	r2,-28(fp)
 400e450:	10c0020b 	ldhu	r3,8(r2)
 400e454:	e0bff817 	ldw	r2,-32(fp)
 400e458:	1080040b 	ldhu	r2,16(r2)
 400e45c:	1884703a 	and	r2,r3,r2
 400e460:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 400e464:	e0bff68b 	ldhu	r2,-38(fp)
 400e468:	1005003a 	cmpeq	r2,r2,zero
 400e46c:	10003f1e 	bne	r2,zero,400e56c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e470:	e17ff68b 	ldhu	r5,-38(fp)
 400e474:	e13ff817 	ldw	r4,-32(fp)
 400e478:	400e9840 	call	400e984 <OS_FlagTaskRdy>
 400e47c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e480:	e0bff603 	ldbu	r2,-40(fp)
 400e484:	10800058 	cmpnei	r2,r2,1
 400e488:	1000381e 	bne	r2,zero,400e56c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e48c:	00800044 	movi	r2,1
 400e490:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e494:	00003506 	br	400e56c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e498:	e0bff917 	ldw	r2,-28(fp)
 400e49c:	1080020b 	ldhu	r2,8(r2)
 400e4a0:	0084303a 	nor	r2,zero,r2
 400e4a4:	1007883a 	mov	r3,r2
 400e4a8:	e0bff817 	ldw	r2,-32(fp)
 400e4ac:	1080040b 	ldhu	r2,16(r2)
 400e4b0:	1884703a 	and	r2,r3,r2
 400e4b4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 400e4b8:	e0bff817 	ldw	r2,-32(fp)
 400e4bc:	1080040b 	ldhu	r2,16(r2)
 400e4c0:	10ffffcc 	andi	r3,r2,65535
 400e4c4:	e0bff68b 	ldhu	r2,-38(fp)
 400e4c8:	1880281e 	bne	r3,r2,400e56c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e4cc:	e17ff68b 	ldhu	r5,-38(fp)
 400e4d0:	e13ff817 	ldw	r4,-32(fp)
 400e4d4:	400e9840 	call	400e984 <OS_FlagTaskRdy>
 400e4d8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e4dc:	e0bff603 	ldbu	r2,-40(fp)
 400e4e0:	10800058 	cmpnei	r2,r2,1
 400e4e4:	1000211e 	bne	r2,zero,400e56c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e4e8:	00800044 	movi	r2,1
 400e4ec:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e4f0:	00001e06 	br	400e56c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400e4f4:	e0bff917 	ldw	r2,-28(fp)
 400e4f8:	1080020b 	ldhu	r2,8(r2)
 400e4fc:	0084303a 	nor	r2,zero,r2
 400e500:	1007883a 	mov	r3,r2
 400e504:	e0bff817 	ldw	r2,-32(fp)
 400e508:	1080040b 	ldhu	r2,16(r2)
 400e50c:	1884703a 	and	r2,r3,r2
 400e510:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 400e514:	e0bff68b 	ldhu	r2,-38(fp)
 400e518:	1005003a 	cmpeq	r2,r2,zero
 400e51c:	1000131e 	bne	r2,zero,400e56c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 400e520:	e17ff68b 	ldhu	r5,-38(fp)
 400e524:	e13ff817 	ldw	r4,-32(fp)
 400e528:	400e9840 	call	400e984 <OS_FlagTaskRdy>
 400e52c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 400e530:	e0bff603 	ldbu	r2,-40(fp)
 400e534:	10800058 	cmpnei	r2,r2,1
 400e538:	10000c1e 	bne	r2,zero,400e56c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 400e53c:	00800044 	movi	r2,1
 400e540:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 400e544:	00000906 	br	400e56c <OSFlagPost+0x30c>
 400e548:	e0bff517 	ldw	r2,-44(fp)
 400e54c:	e0bff215 	stw	r2,-56(fp)
 400e550:	e0bff217 	ldw	r2,-56(fp)
 400e554:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400e558:	e0fffc17 	ldw	r3,-16(fp)
 400e55c:	00801bc4 	movi	r2,111
 400e560:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 400e564:	e03fff15 	stw	zero,-4(fp)
 400e568:	00002106 	br	400e5f0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 400e56c:	e0bff817 	ldw	r2,-32(fp)
 400e570:	10800017 	ldw	r2,0(r2)
 400e574:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 400e578:	e0bff817 	ldw	r2,-32(fp)
 400e57c:	1004c03a 	cmpne	r2,r2,zero
 400e580:	103f881e 	bne	r2,zero,400e3a4 <OSFlagPost+0x144>
 400e584:	e0bff517 	ldw	r2,-44(fp)
 400e588:	e0bff115 	stw	r2,-60(fp)
 400e58c:	e0bff117 	ldw	r2,-60(fp)
 400e590:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 400e594:	e0bff783 	ldbu	r2,-34(fp)
 400e598:	10800058 	cmpnei	r2,r2,1
 400e59c:	1000011e 	bne	r2,zero,400e5a4 <OSFlagPost+0x344>
        OS_Sched();
 400e5a0:	400c7a40 	call	400c7a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e5a4:	0005303a 	rdctl	r2,status
 400e5a8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e5ac:	e0fff017 	ldw	r3,-64(fp)
 400e5b0:	00bfff84 	movi	r2,-2
 400e5b4:	1884703a 	and	r2,r3,r2
 400e5b8:	1001703a 	wrctl	status,r2
  
  return context;
 400e5bc:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 400e5c0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 400e5c4:	e0bff917 	ldw	r2,-28(fp)
 400e5c8:	1080020b 	ldhu	r2,8(r2)
 400e5cc:	e0bff70d 	sth	r2,-36(fp)
 400e5d0:	e0bff517 	ldw	r2,-44(fp)
 400e5d4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e5d8:	e0bfef17 	ldw	r2,-68(fp)
 400e5dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 400e5e0:	e0bffc17 	ldw	r2,-16(fp)
 400e5e4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 400e5e8:	e0bff70b 	ldhu	r2,-36(fp)
 400e5ec:	e0bfff15 	stw	r2,-4(fp)
 400e5f0:	e0bfff17 	ldw	r2,-4(fp)
}
 400e5f4:	e037883a 	mov	sp,fp
 400e5f8:	dfc00117 	ldw	ra,4(sp)
 400e5fc:	df000017 	ldw	fp,0(sp)
 400e600:	dec00204 	addi	sp,sp,8
 400e604:	f800283a 	ret

0400e608 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 400e608:	defff804 	addi	sp,sp,-32
 400e60c:	df000715 	stw	fp,28(sp)
 400e610:	df000704 	addi	fp,sp,28
 400e614:	e13ffd15 	stw	r4,-12(fp)
 400e618:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 400e61c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 400e620:	e0bffe17 	ldw	r2,-8(fp)
 400e624:	1004c03a 	cmpne	r2,r2,zero
 400e628:	1000021e 	bne	r2,zero,400e634 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 400e62c:	e03fff15 	stw	zero,-4(fp)
 400e630:	00002506 	br	400e6c8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 400e634:	e0bffd17 	ldw	r2,-12(fp)
 400e638:	1004c03a 	cmpne	r2,r2,zero
 400e63c:	1000051e 	bne	r2,zero,400e654 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400e640:	e0fffe17 	ldw	r3,-8(fp)
 400e644:	00801b84 	movi	r2,110
 400e648:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400e64c:	e03fff15 	stw	zero,-4(fp)
 400e650:	00001d06 	br	400e6c8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 400e654:	e0bffd17 	ldw	r2,-12(fp)
 400e658:	10800003 	ldbu	r2,0(r2)
 400e65c:	10803fcc 	andi	r2,r2,255
 400e660:	10800160 	cmpeqi	r2,r2,5
 400e664:	1000051e 	bne	r2,zero,400e67c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 400e668:	e0fffe17 	ldw	r3,-8(fp)
 400e66c:	00800044 	movi	r2,1
 400e670:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400e674:	e03fff15 	stw	zero,-4(fp)
 400e678:	00001306 	br	400e6c8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e67c:	0005303a 	rdctl	r2,status
 400e680:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e684:	e0fffa17 	ldw	r3,-24(fp)
 400e688:	00bfff84 	movi	r2,-2
 400e68c:	1884703a 	and	r2,r3,r2
 400e690:	1001703a 	wrctl	status,r2
  
  return context;
 400e694:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400e698:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 400e69c:	e0bffd17 	ldw	r2,-12(fp)
 400e6a0:	1080020b 	ldhu	r2,8(r2)
 400e6a4:	e0bffc0d 	sth	r2,-16(fp)
 400e6a8:	e0bffb17 	ldw	r2,-20(fp)
 400e6ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e6b0:	e0bff917 	ldw	r2,-28(fp)
 400e6b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400e6b8:	e0bffe17 	ldw	r2,-8(fp)
 400e6bc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 400e6c0:	e0bffc0b 	ldhu	r2,-16(fp)
 400e6c4:	e0bfff15 	stw	r2,-4(fp)
 400e6c8:	e0bfff17 	ldw	r2,-4(fp)
}
 400e6cc:	e037883a 	mov	sp,fp
 400e6d0:	df000017 	ldw	fp,0(sp)
 400e6d4:	dec00104 	addi	sp,sp,4
 400e6d8:	f800283a 	ret

0400e6dc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 400e6dc:	defff804 	addi	sp,sp,-32
 400e6e0:	df000715 	stw	fp,28(sp)
 400e6e4:	df000704 	addi	fp,sp,28
 400e6e8:	e13ffb15 	stw	r4,-20(fp)
 400e6ec:	e17ffc15 	stw	r5,-16(fp)
 400e6f0:	e0800117 	ldw	r2,4(fp)
 400e6f4:	e1bffd0d 	sth	r6,-12(fp)
 400e6f8:	e1fffe05 	stb	r7,-8(fp)
 400e6fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 400e700:	008100b4 	movhi	r2,1026
 400e704:	10a2c704 	addi	r2,r2,-29924
 400e708:	10c00017 	ldw	r3,0(r2)
 400e70c:	008100b4 	movhi	r2,1026
 400e710:	10a2c704 	addi	r2,r2,-29924
 400e714:	10800017 	ldw	r2,0(r2)
 400e718:	10800d03 	ldbu	r2,52(r2)
 400e71c:	10800814 	ori	r2,r2,32
 400e720:	18800d05 	stb	r2,52(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 400e724:	008100b4 	movhi	r2,1026
 400e728:	10a2c704 	addi	r2,r2,-29924
 400e72c:	10800017 	ldw	r2,0(r2)
 400e730:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 400e734:	008100b4 	movhi	r2,1026
 400e738:	10a2c704 	addi	r2,r2,-29924
 400e73c:	10c00017 	ldw	r3,0(r2)
 400e740:	e0bfff0b 	ldhu	r2,-4(fp)
 400e744:	18800c8d 	sth	r2,50(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 400e748:	008100b4 	movhi	r2,1026
 400e74c:	10a2c704 	addi	r2,r2,-29924
 400e750:	10c00017 	ldw	r3,0(r2)
 400e754:	e0bffc17 	ldw	r2,-16(fp)
 400e758:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 400e75c:	e0fffc17 	ldw	r3,-16(fp)
 400e760:	e0bffd0b 	ldhu	r2,-12(fp)
 400e764:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 400e768:	e0fffc17 	ldw	r3,-16(fp)
 400e76c:	e0bffe03 	ldbu	r2,-8(fp)
 400e770:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 400e774:	008100b4 	movhi	r2,1026
 400e778:	10a2c704 	addi	r2,r2,-29924
 400e77c:	10c00017 	ldw	r3,0(r2)
 400e780:	e0bffc17 	ldw	r2,-16(fp)
 400e784:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 400e788:	e0bffb17 	ldw	r2,-20(fp)
 400e78c:	10c00117 	ldw	r3,4(r2)
 400e790:	e0bffc17 	ldw	r2,-16(fp)
 400e794:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 400e798:	e0bffc17 	ldw	r2,-16(fp)
 400e79c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 400e7a0:	e0fffc17 	ldw	r3,-16(fp)
 400e7a4:	e0bffb17 	ldw	r2,-20(fp)
 400e7a8:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400e7ac:	e0bffb17 	ldw	r2,-20(fp)
 400e7b0:	10800117 	ldw	r2,4(r2)
 400e7b4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 400e7b8:	e0bffa17 	ldw	r2,-24(fp)
 400e7bc:	1005003a 	cmpeq	r2,r2,zero
 400e7c0:	1000031e 	bne	r2,zero,400e7d0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 400e7c4:	e0fffa17 	ldw	r3,-24(fp)
 400e7c8:	e0bffc17 	ldw	r2,-16(fp)
 400e7cc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 400e7d0:	e0fffb17 	ldw	r3,-20(fp)
 400e7d4:	e0bffc17 	ldw	r2,-16(fp)
 400e7d8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 400e7dc:	008100b4 	movhi	r2,1026
 400e7e0:	10a2c704 	addi	r2,r2,-29924
 400e7e4:	10800017 	ldw	r2,0(r2)
 400e7e8:	10800e03 	ldbu	r2,56(r2)
 400e7ec:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 400e7f0:	e13ff903 	ldbu	r4,-28(fp)
 400e7f4:	e0fff903 	ldbu	r3,-28(fp)
 400e7f8:	008100b4 	movhi	r2,1026
 400e7fc:	10a2c444 	addi	r2,r2,-29935
 400e800:	10c5883a 	add	r2,r2,r3
 400e804:	10800003 	ldbu	r2,0(r2)
 400e808:	1007883a 	mov	r3,r2
 400e80c:	008100b4 	movhi	r2,1026
 400e810:	10a2c704 	addi	r2,r2,-29924
 400e814:	10800017 	ldw	r2,0(r2)
 400e818:	10800e43 	ldbu	r2,57(r2)
 400e81c:	0084303a 	nor	r2,zero,r2
 400e820:	1884703a 	and	r2,r3,r2
 400e824:	1007883a 	mov	r3,r2
 400e828:	008100b4 	movhi	r2,1026
 400e82c:	10a2c444 	addi	r2,r2,-29935
 400e830:	1105883a 	add	r2,r2,r4
 400e834:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 400e838:	e0fff903 	ldbu	r3,-28(fp)
 400e83c:	008100b4 	movhi	r2,1026
 400e840:	10a2c444 	addi	r2,r2,-29935
 400e844:	10c5883a 	add	r2,r2,r3
 400e848:	10800003 	ldbu	r2,0(r2)
 400e84c:	10803fcc 	andi	r2,r2,255
 400e850:	1004c03a 	cmpne	r2,r2,zero
 400e854:	10000e1e 	bne	r2,zero,400e890 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 400e858:	008100b4 	movhi	r2,1026
 400e85c:	10a2c704 	addi	r2,r2,-29924
 400e860:	10800017 	ldw	r2,0(r2)
 400e864:	10800e83 	ldbu	r2,58(r2)
 400e868:	0084303a 	nor	r2,zero,r2
 400e86c:	1007883a 	mov	r3,r2
 400e870:	008100b4 	movhi	r2,1026
 400e874:	10a2c404 	addi	r2,r2,-29936
 400e878:	10800003 	ldbu	r2,0(r2)
 400e87c:	1884703a 	and	r2,r3,r2
 400e880:	1007883a 	mov	r3,r2
 400e884:	008100b4 	movhi	r2,1026
 400e888:	10a2c404 	addi	r2,r2,-29936
 400e88c:	10c00005 	stb	r3,0(r2)
    }
}
 400e890:	e037883a 	mov	sp,fp
 400e894:	df000017 	ldw	fp,0(sp)
 400e898:	dec00104 	addi	sp,sp,4
 400e89c:	f800283a 	ret

0400e8a0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 400e8a0:	defffb04 	addi	sp,sp,-20
 400e8a4:	dfc00415 	stw	ra,16(sp)
 400e8a8:	df000315 	stw	fp,12(sp)
 400e8ac:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 400e8b0:	010100b4 	movhi	r4,1026
 400e8b4:	212b5104 	addi	r4,r4,-21180
 400e8b8:	0140dc04 	movi	r5,880
 400e8bc:	400c6e40 	call	400c6e4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 400e8c0:	008100b4 	movhi	r2,1026
 400e8c4:	10ab5104 	addi	r2,r2,-21180
 400e8c8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 400e8cc:	008100b4 	movhi	r2,1026
 400e8d0:	10ab5c04 	addi	r2,r2,-21136
 400e8d4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 400e8d8:	e03fff0d 	sth	zero,-4(fp)
 400e8dc:	00001306 	br	400e92c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400e8e0:	e0bffe17 	ldw	r2,-8(fp)
 400e8e4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 400e8e8:	e0fffe17 	ldw	r3,-8(fp)
 400e8ec:	e0bffd17 	ldw	r2,-12(fp)
 400e8f0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 400e8f4:	e0fffe17 	ldw	r3,-8(fp)
 400e8f8:	00800fc4 	movi	r2,63
 400e8fc:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 400e900:	e0bffe17 	ldw	r2,-8(fp)
 400e904:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 400e908:	e0bffe17 	ldw	r2,-8(fp)
 400e90c:	10800b04 	addi	r2,r2,44
 400e910:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 400e914:	e0bffd17 	ldw	r2,-12(fp)
 400e918:	10800b04 	addi	r2,r2,44
 400e91c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 400e920:	e0bfff0b 	ldhu	r2,-4(fp)
 400e924:	10800044 	addi	r2,r2,1
 400e928:	e0bfff0d 	sth	r2,-4(fp)
 400e92c:	e0bfff0b 	ldhu	r2,-4(fp)
 400e930:	108004f0 	cmpltui	r2,r2,19
 400e934:	103fea1e 	bne	r2,zero,400e8e0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400e938:	e0bffe17 	ldw	r2,-8(fp)
 400e93c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 400e940:	e0bffe17 	ldw	r2,-8(fp)
 400e944:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 400e948:	e0fffe17 	ldw	r3,-8(fp)
 400e94c:	00800fc4 	movi	r2,63
 400e950:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 400e954:	e0bffe17 	ldw	r2,-8(fp)
 400e958:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 400e95c:	00c100b4 	movhi	r3,1026
 400e960:	18e2c904 	addi	r3,r3,-29916
 400e964:	008100b4 	movhi	r2,1026
 400e968:	10ab5104 	addi	r2,r2,-21180
 400e96c:	18800015 	stw	r2,0(r3)
#endif
}
 400e970:	e037883a 	mov	sp,fp
 400e974:	dfc00117 	ldw	ra,4(sp)
 400e978:	df000017 	ldw	fp,0(sp)
 400e97c:	dec00204 	addi	sp,sp,8
 400e980:	f800283a 	ret

0400e984 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 400e984:	defffa04 	addi	sp,sp,-24
 400e988:	dfc00515 	stw	ra,20(sp)
 400e98c:	df000415 	stw	fp,16(sp)
 400e990:	df000404 	addi	fp,sp,16
 400e994:	e13ffe15 	stw	r4,-8(fp)
 400e998:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 400e99c:	e0bffe17 	ldw	r2,-8(fp)
 400e9a0:	10800217 	ldw	r2,8(r2)
 400e9a4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 400e9a8:	e0bffd17 	ldw	r2,-12(fp)
 400e9ac:	10000c8d 	sth	zero,50(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 400e9b0:	e0fffd17 	ldw	r3,-12(fp)
 400e9b4:	e0bfff0b 	ldhu	r2,-4(fp)
 400e9b8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400e9bc:	e0bffd17 	ldw	r2,-12(fp)
 400e9c0:	10c00d03 	ldbu	r3,52(r2)
 400e9c4:	00bff7c4 	movi	r2,-33
 400e9c8:	1884703a 	and	r2,r3,r2
 400e9cc:	1007883a 	mov	r3,r2
 400e9d0:	e0bffd17 	ldw	r2,-12(fp)
 400e9d4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 400e9d8:	e0bffd17 	ldw	r2,-12(fp)
 400e9dc:	10000d45 	stb	zero,53(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 400e9e0:	e0bffd17 	ldw	r2,-12(fp)
 400e9e4:	10800d03 	ldbu	r2,52(r2)
 400e9e8:	10803fcc 	andi	r2,r2,255
 400e9ec:	1004c03a 	cmpne	r2,r2,zero
 400e9f0:	10001f1e 	bne	r2,zero,400ea70 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 400e9f4:	e0bffd17 	ldw	r2,-12(fp)
 400e9f8:	10c00e83 	ldbu	r3,58(r2)
 400e9fc:	008100b4 	movhi	r2,1026
 400ea00:	10a2c404 	addi	r2,r2,-29936
 400ea04:	10800003 	ldbu	r2,0(r2)
 400ea08:	1884b03a 	or	r2,r3,r2
 400ea0c:	1007883a 	mov	r3,r2
 400ea10:	008100b4 	movhi	r2,1026
 400ea14:	10a2c404 	addi	r2,r2,-29936
 400ea18:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400ea1c:	e0bffd17 	ldw	r2,-12(fp)
 400ea20:	10800e03 	ldbu	r2,56(r2)
 400ea24:	11003fcc 	andi	r4,r2,255
 400ea28:	e0bffd17 	ldw	r2,-12(fp)
 400ea2c:	10800e03 	ldbu	r2,56(r2)
 400ea30:	10c03fcc 	andi	r3,r2,255
 400ea34:	008100b4 	movhi	r2,1026
 400ea38:	10a2c444 	addi	r2,r2,-29935
 400ea3c:	10c5883a 	add	r2,r2,r3
 400ea40:	10c00003 	ldbu	r3,0(r2)
 400ea44:	e0bffd17 	ldw	r2,-12(fp)
 400ea48:	10800e43 	ldbu	r2,57(r2)
 400ea4c:	1884b03a 	or	r2,r3,r2
 400ea50:	1007883a 	mov	r3,r2
 400ea54:	008100b4 	movhi	r2,1026
 400ea58:	10a2c444 	addi	r2,r2,-29935
 400ea5c:	1105883a 	add	r2,r2,r4
 400ea60:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 400ea64:	00800044 	movi	r2,1
 400ea68:	e0bffc05 	stb	r2,-16(fp)
 400ea6c:	00000106 	br	400ea74 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 400ea70:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 400ea74:	e13ffe17 	ldw	r4,-8(fp)
 400ea78:	400ea940 	call	400ea94 <OS_FlagUnlink>
    return (sched);
 400ea7c:	e0bffc03 	ldbu	r2,-16(fp)
}
 400ea80:	e037883a 	mov	sp,fp
 400ea84:	dfc00117 	ldw	ra,4(sp)
 400ea88:	df000017 	ldw	fp,0(sp)
 400ea8c:	dec00204 	addi	sp,sp,8
 400ea90:	f800283a 	ret

0400ea94 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 400ea94:	defffa04 	addi	sp,sp,-24
 400ea98:	df000515 	stw	fp,20(sp)
 400ea9c:	df000504 	addi	fp,sp,20
 400eaa0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 400eaa4:	e0bfff17 	ldw	r2,-4(fp)
 400eaa8:	10800117 	ldw	r2,4(r2)
 400eaac:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 400eab0:	e0bfff17 	ldw	r2,-4(fp)
 400eab4:	10800017 	ldw	r2,0(r2)
 400eab8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 400eabc:	e0bffc17 	ldw	r2,-16(fp)
 400eac0:	1004c03a 	cmpne	r2,r2,zero
 400eac4:	10000c1e 	bne	r2,zero,400eaf8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 400eac8:	e0bfff17 	ldw	r2,-4(fp)
 400eacc:	10800317 	ldw	r2,12(r2)
 400ead0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 400ead4:	e0fffd17 	ldw	r3,-12(fp)
 400ead8:	e0bffb17 	ldw	r2,-20(fp)
 400eadc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 400eae0:	e0bffb17 	ldw	r2,-20(fp)
 400eae4:	1005003a 	cmpeq	r2,r2,zero
 400eae8:	10000c1e 	bne	r2,zero,400eb1c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 400eaec:	e0bffb17 	ldw	r2,-20(fp)
 400eaf0:	10000115 	stw	zero,4(r2)
 400eaf4:	00000906 	br	400eb1c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 400eaf8:	e0fffc17 	ldw	r3,-16(fp)
 400eafc:	e0bffb17 	ldw	r2,-20(fp)
 400eb00:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 400eb04:	e0bffb17 	ldw	r2,-20(fp)
 400eb08:	1005003a 	cmpeq	r2,r2,zero
 400eb0c:	1000031e 	bne	r2,zero,400eb1c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 400eb10:	e0fffb17 	ldw	r3,-20(fp)
 400eb14:	e0bffc17 	ldw	r2,-16(fp)
 400eb18:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 400eb1c:	e0bfff17 	ldw	r2,-4(fp)
 400eb20:	10800217 	ldw	r2,8(r2)
 400eb24:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 400eb28:	e0bffe17 	ldw	r2,-8(fp)
 400eb2c:	10000a15 	stw	zero,40(r2)
#endif
}
 400eb30:	e037883a 	mov	sp,fp
 400eb34:	df000017 	ldw	fp,0(sp)
 400eb38:	dec00104 	addi	sp,sp,4
 400eb3c:	f800283a 	ret

0400eb40 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 400eb40:	defff304 	addi	sp,sp,-52
 400eb44:	df000c15 	stw	fp,48(sp)
 400eb48:	df000c04 	addi	fp,sp,48
 400eb4c:	e13ffb15 	stw	r4,-20(fp)
 400eb50:	e17ffc15 	stw	r5,-16(fp)
 400eb54:	e1bffd15 	stw	r6,-12(fp)
 400eb58:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400eb5c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 400eb60:	e0bffe17 	ldw	r2,-8(fp)
 400eb64:	1004c03a 	cmpne	r2,r2,zero
 400eb68:	1000021e 	bne	r2,zero,400eb74 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 400eb6c:	e03fff15 	stw	zero,-4(fp)
 400eb70:	00007506 	br	400ed48 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 400eb74:	e0bffb17 	ldw	r2,-20(fp)
 400eb78:	1004c03a 	cmpne	r2,r2,zero
 400eb7c:	1000051e 	bne	r2,zero,400eb94 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 400eb80:	e0fffe17 	ldw	r3,-8(fp)
 400eb84:	00801884 	movi	r2,98
 400eb88:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400eb8c:	e03fff15 	stw	zero,-4(fp)
 400eb90:	00006d06 	br	400ed48 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 400eb94:	e0bffb17 	ldw	r2,-20(fp)
 400eb98:	108000cc 	andi	r2,r2,3
 400eb9c:	1005003a 	cmpeq	r2,r2,zero
 400eba0:	1000051e 	bne	r2,zero,400ebb8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 400eba4:	e0fffe17 	ldw	r3,-8(fp)
 400eba8:	00801884 	movi	r2,98
 400ebac:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400ebb0:	e03fff15 	stw	zero,-4(fp)
 400ebb4:	00006406 	br	400ed48 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 400ebb8:	e0bffc17 	ldw	r2,-16(fp)
 400ebbc:	108000a8 	cmpgeui	r2,r2,2
 400ebc0:	1000051e 	bne	r2,zero,400ebd8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 400ebc4:	e0fffe17 	ldw	r3,-8(fp)
 400ebc8:	008016c4 	movi	r2,91
 400ebcc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400ebd0:	e03fff15 	stw	zero,-4(fp)
 400ebd4:	00005c06 	br	400ed48 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 400ebd8:	e0bffd17 	ldw	r2,-12(fp)
 400ebdc:	10800128 	cmpgeui	r2,r2,4
 400ebe0:	1000051e 	bne	r2,zero,400ebf8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 400ebe4:	e0fffe17 	ldw	r3,-8(fp)
 400ebe8:	00801704 	movi	r2,92
 400ebec:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400ebf0:	e03fff15 	stw	zero,-4(fp)
 400ebf4:	00005406 	br	400ed48 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ebf8:	0005303a 	rdctl	r2,status
 400ebfc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ec00:	e0fff517 	ldw	r3,-44(fp)
 400ec04:	00bfff84 	movi	r2,-2
 400ec08:	1884703a 	and	r2,r3,r2
 400ec0c:	1001703a 	wrctl	status,r2
  
  return context;
 400ec10:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400ec14:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 400ec18:	008100b4 	movhi	r2,1026
 400ec1c:	10a2c104 	addi	r2,r2,-29948
 400ec20:	10800017 	ldw	r2,0(r2)
 400ec24:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 400ec28:	008100b4 	movhi	r2,1026
 400ec2c:	10a2c104 	addi	r2,r2,-29948
 400ec30:	10800017 	ldw	r2,0(r2)
 400ec34:	1005003a 	cmpeq	r2,r2,zero
 400ec38:	1000081e 	bne	r2,zero,400ec5c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 400ec3c:	008100b4 	movhi	r2,1026
 400ec40:	10a2c104 	addi	r2,r2,-29948
 400ec44:	10800017 	ldw	r2,0(r2)
 400ec48:	10800117 	ldw	r2,4(r2)
 400ec4c:	1007883a 	mov	r3,r2
 400ec50:	008100b4 	movhi	r2,1026
 400ec54:	10a2c104 	addi	r2,r2,-29948
 400ec58:	10c00015 	stw	r3,0(r2)
 400ec5c:	e0bff617 	ldw	r2,-40(fp)
 400ec60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec64:	e0bff417 	ldw	r2,-48(fp)
 400ec68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 400ec6c:	e0bffa17 	ldw	r2,-24(fp)
 400ec70:	1004c03a 	cmpne	r2,r2,zero
 400ec74:	1000051e 	bne	r2,zero,400ec8c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 400ec78:	e0fffe17 	ldw	r3,-8(fp)
 400ec7c:	00801684 	movi	r2,90
 400ec80:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 400ec84:	e03fff15 	stw	zero,-4(fp)
 400ec88:	00002f06 	br	400ed48 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 400ec8c:	e0bffb17 	ldw	r2,-20(fp)
 400ec90:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 400ec94:	e0bffb17 	ldw	r2,-20(fp)
 400ec98:	1007883a 	mov	r3,r2
 400ec9c:	e0bffd17 	ldw	r2,-12(fp)
 400eca0:	1885883a 	add	r2,r3,r2
 400eca4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 400eca8:	e03ff715 	stw	zero,-36(fp)
 400ecac:	00000d06 	br	400ece4 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 400ecb0:	e0fff817 	ldw	r3,-32(fp)
 400ecb4:	e0bff917 	ldw	r2,-28(fp)
 400ecb8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 400ecbc:	e0bff917 	ldw	r2,-28(fp)
 400ecc0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 400ecc4:	e0bff917 	ldw	r2,-28(fp)
 400ecc8:	1007883a 	mov	r3,r2
 400eccc:	e0bffd17 	ldw	r2,-12(fp)
 400ecd0:	1885883a 	add	r2,r3,r2
 400ecd4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 400ecd8:	e0bff717 	ldw	r2,-36(fp)
 400ecdc:	10800044 	addi	r2,r2,1
 400ece0:	e0bff715 	stw	r2,-36(fp)
 400ece4:	e0bffc17 	ldw	r2,-16(fp)
 400ece8:	10ffffc4 	addi	r3,r2,-1
 400ecec:	e0bff717 	ldw	r2,-36(fp)
 400ecf0:	10ffef36 	bltu	r2,r3,400ecb0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 400ecf4:	e0bff817 	ldw	r2,-32(fp)
 400ecf8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 400ecfc:	e0fffa17 	ldw	r3,-24(fp)
 400ed00:	e0bffb17 	ldw	r2,-20(fp)
 400ed04:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 400ed08:	e0fffa17 	ldw	r3,-24(fp)
 400ed0c:	e0bffb17 	ldw	r2,-20(fp)
 400ed10:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 400ed14:	e0fffa17 	ldw	r3,-24(fp)
 400ed18:	e0bffc17 	ldw	r2,-16(fp)
 400ed1c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 400ed20:	e0fffa17 	ldw	r3,-24(fp)
 400ed24:	e0bffc17 	ldw	r2,-16(fp)
 400ed28:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 400ed2c:	e0fffa17 	ldw	r3,-24(fp)
 400ed30:	e0bffd17 	ldw	r2,-12(fp)
 400ed34:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 400ed38:	e0bffe17 	ldw	r2,-8(fp)
 400ed3c:	10000005 	stb	zero,0(r2)
    return (pmem);
 400ed40:	e0bffa17 	ldw	r2,-24(fp)
 400ed44:	e0bfff15 	stw	r2,-4(fp)
 400ed48:	e0bfff17 	ldw	r2,-4(fp)
}
 400ed4c:	e037883a 	mov	sp,fp
 400ed50:	df000017 	ldw	fp,0(sp)
 400ed54:	dec00104 	addi	sp,sp,4
 400ed58:	f800283a 	ret

0400ed5c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 400ed5c:	defff704 	addi	sp,sp,-36
 400ed60:	df000815 	stw	fp,32(sp)
 400ed64:	df000804 	addi	fp,sp,32
 400ed68:	e13ffd15 	stw	r4,-12(fp)
 400ed6c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400ed70:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 400ed74:	e0bffe17 	ldw	r2,-8(fp)
 400ed78:	1004c03a 	cmpne	r2,r2,zero
 400ed7c:	1000021e 	bne	r2,zero,400ed88 <OSMemGet+0x2c>
        return ((void *)0);
 400ed80:	e03fff15 	stw	zero,-4(fp)
 400ed84:	00003106 	br	400ee4c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 400ed88:	e0bffd17 	ldw	r2,-12(fp)
 400ed8c:	1004c03a 	cmpne	r2,r2,zero
 400ed90:	1000051e 	bne	r2,zero,400eda8 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400ed94:	e0fffe17 	ldw	r3,-8(fp)
 400ed98:	00801804 	movi	r2,96
 400ed9c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400eda0:	e03fff15 	stw	zero,-4(fp)
 400eda4:	00002906 	br	400ee4c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eda8:	0005303a 	rdctl	r2,status
 400edac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400edb0:	e0fffa17 	ldw	r3,-24(fp)
 400edb4:	00bfff84 	movi	r2,-2
 400edb8:	1884703a 	and	r2,r3,r2
 400edbc:	1001703a 	wrctl	status,r2
  
  return context;
 400edc0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400edc4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 400edc8:	e0bffd17 	ldw	r2,-12(fp)
 400edcc:	10800417 	ldw	r2,16(r2)
 400edd0:	1005003a 	cmpeq	r2,r2,zero
 400edd4:	1000151e 	bne	r2,zero,400ee2c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 400edd8:	e0bffd17 	ldw	r2,-12(fp)
 400eddc:	10800117 	ldw	r2,4(r2)
 400ede0:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 400ede4:	e0bffc17 	ldw	r2,-16(fp)
 400ede8:	10c00017 	ldw	r3,0(r2)
 400edec:	e0bffd17 	ldw	r2,-12(fp)
 400edf0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 400edf4:	e0bffd17 	ldw	r2,-12(fp)
 400edf8:	10800417 	ldw	r2,16(r2)
 400edfc:	10ffffc4 	addi	r3,r2,-1
 400ee00:	e0bffd17 	ldw	r2,-12(fp)
 400ee04:	10c00415 	stw	r3,16(r2)
 400ee08:	e0bffb17 	ldw	r2,-20(fp)
 400ee0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ee10:	e0bff917 	ldw	r2,-28(fp)
 400ee14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 400ee18:	e0bffe17 	ldw	r2,-8(fp)
 400ee1c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 400ee20:	e0bffc17 	ldw	r2,-16(fp)
 400ee24:	e0bfff15 	stw	r2,-4(fp)
 400ee28:	00000806 	br	400ee4c <OSMemGet+0xf0>
 400ee2c:	e0bffb17 	ldw	r2,-20(fp)
 400ee30:	e0bff815 	stw	r2,-32(fp)
 400ee34:	e0bff817 	ldw	r2,-32(fp)
 400ee38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 400ee3c:	e0fffe17 	ldw	r3,-8(fp)
 400ee40:	00801744 	movi	r2,93
 400ee44:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 400ee48:	e03fff15 	stw	zero,-4(fp)
 400ee4c:	e0bfff17 	ldw	r2,-4(fp)
}
 400ee50:	e037883a 	mov	sp,fp
 400ee54:	df000017 	ldw	fp,0(sp)
 400ee58:	dec00104 	addi	sp,sp,4
 400ee5c:	f800283a 	ret

0400ee60 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 400ee60:	defff604 	addi	sp,sp,-40
 400ee64:	dfc00915 	stw	ra,36(sp)
 400ee68:	df000815 	stw	fp,32(sp)
 400ee6c:	df000804 	addi	fp,sp,32
 400ee70:	e13ffc15 	stw	r4,-16(fp)
 400ee74:	e17ffd15 	stw	r5,-12(fp)
 400ee78:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ee7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400ee80:	e0bffe17 	ldw	r2,-8(fp)
 400ee84:	1004c03a 	cmpne	r2,r2,zero
 400ee88:	1000021e 	bne	r2,zero,400ee94 <OSMemNameGet+0x34>
        return (0);
 400ee8c:	e03fff15 	stw	zero,-4(fp)
 400ee90:	00003006 	br	400ef54 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 400ee94:	e0bffc17 	ldw	r2,-16(fp)
 400ee98:	1004c03a 	cmpne	r2,r2,zero
 400ee9c:	1000051e 	bne	r2,zero,400eeb4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400eea0:	e0fffe17 	ldw	r3,-8(fp)
 400eea4:	00801804 	movi	r2,96
 400eea8:	18800005 	stb	r2,0(r3)
        return (0);
 400eeac:	e03fff15 	stw	zero,-4(fp)
 400eeb0:	00002806 	br	400ef54 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400eeb4:	e0bffd17 	ldw	r2,-12(fp)
 400eeb8:	1004c03a 	cmpne	r2,r2,zero
 400eebc:	1000051e 	bne	r2,zero,400eed4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400eec0:	e0fffe17 	ldw	r3,-8(fp)
 400eec4:	00800304 	movi	r2,12
 400eec8:	18800005 	stb	r2,0(r3)
        return (0);
 400eecc:	e03fff15 	stw	zero,-4(fp)
 400eed0:	00002006 	br	400ef54 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400eed4:	008100b4 	movhi	r2,1026
 400eed8:	10a2c604 	addi	r2,r2,-29928
 400eedc:	10800003 	ldbu	r2,0(r2)
 400eee0:	10803fcc 	andi	r2,r2,255
 400eee4:	1005003a 	cmpeq	r2,r2,zero
 400eee8:	1000051e 	bne	r2,zero,400ef00 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 400eeec:	e0fffe17 	ldw	r3,-8(fp)
 400eef0:	00800444 	movi	r2,17
 400eef4:	18800005 	stb	r2,0(r3)
        return (0);
 400eef8:	e03fff15 	stw	zero,-4(fp)
 400eefc:	00001506 	br	400ef54 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ef00:	0005303a 	rdctl	r2,status
 400ef04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ef08:	e0fff917 	ldw	r3,-28(fp)
 400ef0c:	00bfff84 	movi	r2,-2
 400ef10:	1884703a 	and	r2,r3,r2
 400ef14:	1001703a 	wrctl	status,r2
  
  return context;
 400ef18:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400ef1c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 400ef20:	e0bffc17 	ldw	r2,-16(fp)
 400ef24:	11400504 	addi	r5,r2,20
 400ef28:	e13ffd17 	ldw	r4,-12(fp)
 400ef2c:	400cad40 	call	400cad4 <OS_StrCopy>
 400ef30:	e0bffb05 	stb	r2,-20(fp)
 400ef34:	e0bffa17 	ldw	r2,-24(fp)
 400ef38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef3c:	e0bff817 	ldw	r2,-32(fp)
 400ef40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400ef44:	e0bffe17 	ldw	r2,-8(fp)
 400ef48:	10000005 	stb	zero,0(r2)
    return (len);
 400ef4c:	e0bffb03 	ldbu	r2,-20(fp)
 400ef50:	e0bfff15 	stw	r2,-4(fp)
 400ef54:	e0bfff17 	ldw	r2,-4(fp)
}
 400ef58:	e037883a 	mov	sp,fp
 400ef5c:	dfc00117 	ldw	ra,4(sp)
 400ef60:	df000017 	ldw	fp,0(sp)
 400ef64:	dec00204 	addi	sp,sp,8
 400ef68:	f800283a 	ret

0400ef6c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 400ef6c:	defff604 	addi	sp,sp,-40
 400ef70:	dfc00915 	stw	ra,36(sp)
 400ef74:	df000815 	stw	fp,32(sp)
 400ef78:	df000804 	addi	fp,sp,32
 400ef7c:	e13ffd15 	stw	r4,-12(fp)
 400ef80:	e17ffe15 	stw	r5,-8(fp)
 400ef84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ef88:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400ef8c:	e0bfff17 	ldw	r2,-4(fp)
 400ef90:	1005003a 	cmpeq	r2,r2,zero
 400ef94:	1000381e 	bne	r2,zero,400f078 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 400ef98:	e0bffd17 	ldw	r2,-12(fp)
 400ef9c:	1004c03a 	cmpne	r2,r2,zero
 400efa0:	1000041e 	bne	r2,zero,400efb4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 400efa4:	e0ffff17 	ldw	r3,-4(fp)
 400efa8:	00801804 	movi	r2,96
 400efac:	18800005 	stb	r2,0(r3)
        return;
 400efb0:	00003106 	br	400f078 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400efb4:	e0bffe17 	ldw	r2,-8(fp)
 400efb8:	1004c03a 	cmpne	r2,r2,zero
 400efbc:	1000041e 	bne	r2,zero,400efd0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400efc0:	e0ffff17 	ldw	r3,-4(fp)
 400efc4:	00800304 	movi	r2,12
 400efc8:	18800005 	stb	r2,0(r3)
        return;
 400efcc:	00002a06 	br	400f078 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400efd0:	008100b4 	movhi	r2,1026
 400efd4:	10a2c604 	addi	r2,r2,-29928
 400efd8:	10800003 	ldbu	r2,0(r2)
 400efdc:	10803fcc 	andi	r2,r2,255
 400efe0:	1005003a 	cmpeq	r2,r2,zero
 400efe4:	1000041e 	bne	r2,zero,400eff8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 400efe8:	e0ffff17 	ldw	r3,-4(fp)
 400efec:	00800484 	movi	r2,18
 400eff0:	18800005 	stb	r2,0(r3)
        return;
 400eff4:	00002006 	br	400f078 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eff8:	0005303a 	rdctl	r2,status
 400effc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f000:	e0fffa17 	ldw	r3,-24(fp)
 400f004:	00bfff84 	movi	r2,-2
 400f008:	1884703a 	and	r2,r3,r2
 400f00c:	1001703a 	wrctl	status,r2
  
  return context;
 400f010:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400f014:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 400f018:	e13ffe17 	ldw	r4,-8(fp)
 400f01c:	400cb540 	call	400cb54 <OS_StrLen>
 400f020:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 400f024:	e0bffc03 	ldbu	r2,-16(fp)
 400f028:	10800830 	cmpltui	r2,r2,32
 400f02c:	1000081e 	bne	r2,zero,400f050 <OSMemNameSet+0xe4>
 400f030:	e0bffb17 	ldw	r2,-20(fp)
 400f034:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f038:	e0bff917 	ldw	r2,-28(fp)
 400f03c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 400f040:	e0ffff17 	ldw	r3,-4(fp)
 400f044:	008018c4 	movi	r2,99
 400f048:	18800005 	stb	r2,0(r3)
        return;
 400f04c:	00000a06 	br	400f078 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 400f050:	e0bffd17 	ldw	r2,-12(fp)
 400f054:	11000504 	addi	r4,r2,20
 400f058:	e17ffe17 	ldw	r5,-8(fp)
 400f05c:	400cad40 	call	400cad4 <OS_StrCopy>
 400f060:	e0bffb17 	ldw	r2,-20(fp)
 400f064:	e0bff815 	stw	r2,-32(fp)
 400f068:	e0bff817 	ldw	r2,-32(fp)
 400f06c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400f070:	e0bfff17 	ldw	r2,-4(fp)
 400f074:	10000005 	stb	zero,0(r2)
}
 400f078:	e037883a 	mov	sp,fp
 400f07c:	dfc00117 	ldw	ra,4(sp)
 400f080:	df000017 	ldw	fp,0(sp)
 400f084:	dec00204 	addi	sp,sp,8
 400f088:	f800283a 	ret

0400f08c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 400f08c:	defff804 	addi	sp,sp,-32
 400f090:	df000715 	stw	fp,28(sp)
 400f094:	df000704 	addi	fp,sp,28
 400f098:	e13ffd15 	stw	r4,-12(fp)
 400f09c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f0a0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 400f0a4:	e0bffd17 	ldw	r2,-12(fp)
 400f0a8:	1004c03a 	cmpne	r2,r2,zero
 400f0ac:	1000031e 	bne	r2,zero,400f0bc <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 400f0b0:	00801804 	movi	r2,96
 400f0b4:	e0bfff15 	stw	r2,-4(fp)
 400f0b8:	00002b06 	br	400f168 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 400f0bc:	e0bffe17 	ldw	r2,-8(fp)
 400f0c0:	1004c03a 	cmpne	r2,r2,zero
 400f0c4:	1000031e 	bne	r2,zero,400f0d4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 400f0c8:	008017c4 	movi	r2,95
 400f0cc:	e0bfff15 	stw	r2,-4(fp)
 400f0d0:	00002506 	br	400f168 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f0d4:	0005303a 	rdctl	r2,status
 400f0d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f0dc:	e0fffb17 	ldw	r3,-20(fp)
 400f0e0:	00bfff84 	movi	r2,-2
 400f0e4:	1884703a 	and	r2,r3,r2
 400f0e8:	1001703a 	wrctl	status,r2
  
  return context;
 400f0ec:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400f0f0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 400f0f4:	e0bffd17 	ldw	r2,-12(fp)
 400f0f8:	10c00417 	ldw	r3,16(r2)
 400f0fc:	e0bffd17 	ldw	r2,-12(fp)
 400f100:	10800317 	ldw	r2,12(r2)
 400f104:	18800736 	bltu	r3,r2,400f124 <OSMemPut+0x98>
 400f108:	e0bffc17 	ldw	r2,-16(fp)
 400f10c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f110:	e0bffa17 	ldw	r2,-24(fp)
 400f114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 400f118:	00801784 	movi	r2,94
 400f11c:	e0bfff15 	stw	r2,-4(fp)
 400f120:	00001106 	br	400f168 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 400f124:	e0fffe17 	ldw	r3,-8(fp)
 400f128:	e0bffd17 	ldw	r2,-12(fp)
 400f12c:	10800117 	ldw	r2,4(r2)
 400f130:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 400f134:	e0fffd17 	ldw	r3,-12(fp)
 400f138:	e0bffe17 	ldw	r2,-8(fp)
 400f13c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 400f140:	e0bffd17 	ldw	r2,-12(fp)
 400f144:	10800417 	ldw	r2,16(r2)
 400f148:	10c00044 	addi	r3,r2,1
 400f14c:	e0bffd17 	ldw	r2,-12(fp)
 400f150:	10c00415 	stw	r3,16(r2)
 400f154:	e0bffc17 	ldw	r2,-16(fp)
 400f158:	e0bff915 	stw	r2,-28(fp)
 400f15c:	e0bff917 	ldw	r2,-28(fp)
 400f160:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 400f164:	e03fff15 	stw	zero,-4(fp)
 400f168:	e0bfff17 	ldw	r2,-4(fp)
}
 400f16c:	e037883a 	mov	sp,fp
 400f170:	df000017 	ldw	fp,0(sp)
 400f174:	dec00104 	addi	sp,sp,4
 400f178:	f800283a 	ret

0400f17c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 400f17c:	defff904 	addi	sp,sp,-28
 400f180:	df000615 	stw	fp,24(sp)
 400f184:	df000604 	addi	fp,sp,24
 400f188:	e13ffd15 	stw	r4,-12(fp)
 400f18c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f190:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 400f194:	e0bffd17 	ldw	r2,-12(fp)
 400f198:	1004c03a 	cmpne	r2,r2,zero
 400f19c:	1000031e 	bne	r2,zero,400f1ac <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 400f1a0:	00801804 	movi	r2,96
 400f1a4:	e0bfff15 	stw	r2,-4(fp)
 400f1a8:	00002e06 	br	400f264 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 400f1ac:	e0bffe17 	ldw	r2,-8(fp)
 400f1b0:	1004c03a 	cmpne	r2,r2,zero
 400f1b4:	1000031e 	bne	r2,zero,400f1c4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 400f1b8:	00801844 	movi	r2,97
 400f1bc:	e0bfff15 	stw	r2,-4(fp)
 400f1c0:	00002806 	br	400f264 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f1c4:	0005303a 	rdctl	r2,status
 400f1c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f1cc:	e0fffb17 	ldw	r3,-20(fp)
 400f1d0:	00bfff84 	movi	r2,-2
 400f1d4:	1884703a 	and	r2,r3,r2
 400f1d8:	1001703a 	wrctl	status,r2
  
  return context;
 400f1dc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400f1e0:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 400f1e4:	e0bffd17 	ldw	r2,-12(fp)
 400f1e8:	10c00017 	ldw	r3,0(r2)
 400f1ec:	e0bffe17 	ldw	r2,-8(fp)
 400f1f0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 400f1f4:	e0bffd17 	ldw	r2,-12(fp)
 400f1f8:	10c00117 	ldw	r3,4(r2)
 400f1fc:	e0bffe17 	ldw	r2,-8(fp)
 400f200:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 400f204:	e0bffd17 	ldw	r2,-12(fp)
 400f208:	10c00217 	ldw	r3,8(r2)
 400f20c:	e0bffe17 	ldw	r2,-8(fp)
 400f210:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 400f214:	e0bffd17 	ldw	r2,-12(fp)
 400f218:	10c00317 	ldw	r3,12(r2)
 400f21c:	e0bffe17 	ldw	r2,-8(fp)
 400f220:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 400f224:	e0bffd17 	ldw	r2,-12(fp)
 400f228:	10c00417 	ldw	r3,16(r2)
 400f22c:	e0bffe17 	ldw	r2,-8(fp)
 400f230:	10c00415 	stw	r3,16(r2)
 400f234:	e0bffc17 	ldw	r2,-16(fp)
 400f238:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f23c:	e0bffa17 	ldw	r2,-24(fp)
 400f240:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 400f244:	e0bffe17 	ldw	r2,-8(fp)
 400f248:	10c00317 	ldw	r3,12(r2)
 400f24c:	e0bffe17 	ldw	r2,-8(fp)
 400f250:	10800417 	ldw	r2,16(r2)
 400f254:	1887c83a 	sub	r3,r3,r2
 400f258:	e0bffe17 	ldw	r2,-8(fp)
 400f25c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 400f260:	e03fff15 	stw	zero,-4(fp)
 400f264:	e0bfff17 	ldw	r2,-4(fp)
}
 400f268:	e037883a 	mov	sp,fp
 400f26c:	df000017 	ldw	fp,0(sp)
 400f270:	dec00104 	addi	sp,sp,4
 400f274:	f800283a 	ret

0400f278 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 400f278:	defffc04 	addi	sp,sp,-16
 400f27c:	dfc00315 	stw	ra,12(sp)
 400f280:	df000215 	stw	fp,8(sp)
 400f284:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 400f288:	010100b4 	movhi	r4,1026
 400f28c:	212c2d04 	addi	r4,r4,-20300
 400f290:	01430c04 	movi	r5,3120
 400f294:	400c6e40 	call	400c6e4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 400f298:	008100b4 	movhi	r2,1026
 400f29c:	10ac2d04 	addi	r2,r2,-20300
 400f2a0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 400f2a4:	e03ffe0d 	sth	zero,-8(fp)
 400f2a8:	00001306 	br	400f2f8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 400f2ac:	e0bffe0b 	ldhu	r2,-8(fp)
 400f2b0:	10800d24 	muli	r2,r2,52
 400f2b4:	1007883a 	mov	r3,r2
 400f2b8:	008100b4 	movhi	r2,1026
 400f2bc:	10ac3a04 	addi	r2,r2,-20248
 400f2c0:	1887883a 	add	r3,r3,r2
 400f2c4:	e0bfff17 	ldw	r2,-4(fp)
 400f2c8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 400f2cc:	e0ffff17 	ldw	r3,-4(fp)
 400f2d0:	00800fc4 	movi	r2,63
 400f2d4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 400f2d8:	e0bfff17 	ldw	r2,-4(fp)
 400f2dc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 400f2e0:	e0bfff17 	ldw	r2,-4(fp)
 400f2e4:	10800d04 	addi	r2,r2,52
 400f2e8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 400f2ec:	e0bffe0b 	ldhu	r2,-8(fp)
 400f2f0:	10800044 	addi	r2,r2,1
 400f2f4:	e0bffe0d 	sth	r2,-8(fp)
 400f2f8:	e0bffe0b 	ldhu	r2,-8(fp)
 400f2fc:	10800ef0 	cmpltui	r2,r2,59
 400f300:	103fea1e 	bne	r2,zero,400f2ac <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 400f304:	e0bfff17 	ldw	r2,-4(fp)
 400f308:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 400f30c:	e0ffff17 	ldw	r3,-4(fp)
 400f310:	00800fc4 	movi	r2,63
 400f314:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 400f318:	e0bfff17 	ldw	r2,-4(fp)
 400f31c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 400f320:	00c100b4 	movhi	r3,1026
 400f324:	18e2c104 	addi	r3,r3,-29948
 400f328:	008100b4 	movhi	r2,1026
 400f32c:	10ac2d04 	addi	r2,r2,-20300
 400f330:	18800015 	stw	r2,0(r3)
#endif
}
 400f334:	e037883a 	mov	sp,fp
 400f338:	dfc00117 	ldw	ra,4(sp)
 400f33c:	df000017 	ldw	fp,0(sp)
 400f340:	dec00204 	addi	sp,sp,8
 400f344:	f800283a 	ret

0400f348 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 400f348:	defff704 	addi	sp,sp,-36
 400f34c:	df000815 	stw	fp,32(sp)
 400f350:	df000804 	addi	fp,sp,32
 400f354:	e13ffd15 	stw	r4,-12(fp)
 400f358:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f35c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f360:	e0bffe17 	ldw	r2,-8(fp)
 400f364:	1004c03a 	cmpne	r2,r2,zero
 400f368:	1000021e 	bne	r2,zero,400f374 <OSQAccept+0x2c>
        return ((void *)0);
 400f36c:	e03fff15 	stw	zero,-4(fp)
 400f370:	00004506 	br	400f488 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 400f374:	e0bffd17 	ldw	r2,-12(fp)
 400f378:	1004c03a 	cmpne	r2,r2,zero
 400f37c:	1000051e 	bne	r2,zero,400f394 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 400f380:	e0fffe17 	ldw	r3,-8(fp)
 400f384:	00800104 	movi	r2,4
 400f388:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f38c:	e03fff15 	stw	zero,-4(fp)
 400f390:	00003d06 	br	400f488 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 400f394:	e0bffd17 	ldw	r2,-12(fp)
 400f398:	10800003 	ldbu	r2,0(r2)
 400f39c:	10803fcc 	andi	r2,r2,255
 400f3a0:	108000a0 	cmpeqi	r2,r2,2
 400f3a4:	1000051e 	bne	r2,zero,400f3bc <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 400f3a8:	e0fffe17 	ldw	r3,-8(fp)
 400f3ac:	00800044 	movi	r2,1
 400f3b0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400f3b4:	e03fff15 	stw	zero,-4(fp)
 400f3b8:	00003306 	br	400f488 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f3bc:	0005303a 	rdctl	r2,status
 400f3c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f3c4:	e0fff917 	ldw	r3,-28(fp)
 400f3c8:	00bfff84 	movi	r2,-2
 400f3cc:	1884703a 	and	r2,r3,r2
 400f3d0:	1001703a 	wrctl	status,r2
  
  return context;
 400f3d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400f3d8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 400f3dc:	e0bffd17 	ldw	r2,-12(fp)
 400f3e0:	10800117 	ldw	r2,4(r2)
 400f3e4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 400f3e8:	e0bffb17 	ldw	r2,-20(fp)
 400f3ec:	1080058b 	ldhu	r2,22(r2)
 400f3f0:	10bfffcc 	andi	r2,r2,65535
 400f3f4:	1005003a 	cmpeq	r2,r2,zero
 400f3f8:	1000191e 	bne	r2,zero,400f460 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 400f3fc:	e0bffb17 	ldw	r2,-20(fp)
 400f400:	10c00417 	ldw	r3,16(r2)
 400f404:	18800017 	ldw	r2,0(r3)
 400f408:	e0bffc15 	stw	r2,-16(fp)
 400f40c:	18c00104 	addi	r3,r3,4
 400f410:	e0bffb17 	ldw	r2,-20(fp)
 400f414:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 400f418:	e0bffb17 	ldw	r2,-20(fp)
 400f41c:	1080058b 	ldhu	r2,22(r2)
 400f420:	10bfffc4 	addi	r2,r2,-1
 400f424:	1007883a 	mov	r3,r2
 400f428:	e0bffb17 	ldw	r2,-20(fp)
 400f42c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 400f430:	e0bffb17 	ldw	r2,-20(fp)
 400f434:	10c00417 	ldw	r3,16(r2)
 400f438:	e0bffb17 	ldw	r2,-20(fp)
 400f43c:	10800217 	ldw	r2,8(r2)
 400f440:	1880041e 	bne	r3,r2,400f454 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 400f444:	e0bffb17 	ldw	r2,-20(fp)
 400f448:	10c00117 	ldw	r3,4(r2)
 400f44c:	e0bffb17 	ldw	r2,-20(fp)
 400f450:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 400f454:	e0bffe17 	ldw	r2,-8(fp)
 400f458:	10000005 	stb	zero,0(r2)
 400f45c:	00000406 	br	400f470 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 400f460:	e0fffe17 	ldw	r3,-8(fp)
 400f464:	008007c4 	movi	r2,31
 400f468:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 400f46c:	e03ffc15 	stw	zero,-16(fp)
 400f470:	e0bffa17 	ldw	r2,-24(fp)
 400f474:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f478:	e0bff817 	ldw	r2,-32(fp)
 400f47c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 400f480:	e0bffc17 	ldw	r2,-16(fp)
 400f484:	e0bfff15 	stw	r2,-4(fp)
 400f488:	e0bfff17 	ldw	r2,-4(fp)
}
 400f48c:	e037883a 	mov	sp,fp
 400f490:	df000017 	ldw	fp,0(sp)
 400f494:	dec00104 	addi	sp,sp,4
 400f498:	f800283a 	ret

0400f49c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 400f49c:	defff304 	addi	sp,sp,-52
 400f4a0:	dfc00c15 	stw	ra,48(sp)
 400f4a4:	df000b15 	stw	fp,44(sp)
 400f4a8:	df000b04 	addi	fp,sp,44
 400f4ac:	e13ffd15 	stw	r4,-12(fp)
 400f4b0:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f4b4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 400f4b8:	008100b4 	movhi	r2,1026
 400f4bc:	10a2c604 	addi	r2,r2,-29928
 400f4c0:	10800003 	ldbu	r2,0(r2)
 400f4c4:	10803fcc 	andi	r2,r2,255
 400f4c8:	1005003a 	cmpeq	r2,r2,zero
 400f4cc:	1000021e 	bne	r2,zero,400f4d8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 400f4d0:	e03fff15 	stw	zero,-4(fp)
 400f4d4:	00007006 	br	400f698 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f4d8:	0005303a 	rdctl	r2,status
 400f4dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f4e0:	e0fff917 	ldw	r3,-28(fp)
 400f4e4:	00bfff84 	movi	r2,-2
 400f4e8:	1884703a 	and	r2,r3,r2
 400f4ec:	1001703a 	wrctl	status,r2
  
  return context;
 400f4f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400f4f4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 400f4f8:	008100b4 	movhi	r2,1026
 400f4fc:	10a2c504 	addi	r2,r2,-29932
 400f500:	10800017 	ldw	r2,0(r2)
 400f504:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 400f508:	008100b4 	movhi	r2,1026
 400f50c:	10a2c504 	addi	r2,r2,-29932
 400f510:	10800017 	ldw	r2,0(r2)
 400f514:	1005003a 	cmpeq	r2,r2,zero
 400f518:	1000081e 	bne	r2,zero,400f53c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 400f51c:	008100b4 	movhi	r2,1026
 400f520:	10a2c504 	addi	r2,r2,-29932
 400f524:	10800017 	ldw	r2,0(r2)
 400f528:	10800117 	ldw	r2,4(r2)
 400f52c:	1007883a 	mov	r3,r2
 400f530:	008100b4 	movhi	r2,1026
 400f534:	10a2c504 	addi	r2,r2,-29932
 400f538:	10c00015 	stw	r3,0(r2)
 400f53c:	e0bffa17 	ldw	r2,-24(fp)
 400f540:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f544:	e0bff817 	ldw	r2,-32(fp)
 400f548:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 400f54c:	e0bffc17 	ldw	r2,-16(fp)
 400f550:	1005003a 	cmpeq	r2,r2,zero
 400f554:	10004e1e 	bne	r2,zero,400f690 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f558:	0005303a 	rdctl	r2,status
 400f55c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f560:	e0fff717 	ldw	r3,-36(fp)
 400f564:	00bfff84 	movi	r2,-2
 400f568:	1884703a 	and	r2,r3,r2
 400f56c:	1001703a 	wrctl	status,r2
  
  return context;
 400f570:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 400f574:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 400f578:	008100b4 	movhi	r2,1026
 400f57c:	10a2c304 	addi	r2,r2,-29940
 400f580:	10800017 	ldw	r2,0(r2)
 400f584:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 400f588:	e0bffb17 	ldw	r2,-20(fp)
 400f58c:	1005003a 	cmpeq	r2,r2,zero
 400f590:	1000311e 	bne	r2,zero,400f658 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 400f594:	008100b4 	movhi	r2,1026
 400f598:	10a2c304 	addi	r2,r2,-29940
 400f59c:	10800017 	ldw	r2,0(r2)
 400f5a0:	10c00017 	ldw	r3,0(r2)
 400f5a4:	008100b4 	movhi	r2,1026
 400f5a8:	10a2c304 	addi	r2,r2,-29940
 400f5ac:	10c00015 	stw	r3,0(r2)
 400f5b0:	e0bffa17 	ldw	r2,-24(fp)
 400f5b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f5b8:	e0bff617 	ldw	r2,-40(fp)
 400f5bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 400f5c0:	e0fffb17 	ldw	r3,-20(fp)
 400f5c4:	e0bffd17 	ldw	r2,-12(fp)
 400f5c8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 400f5cc:	e0bffe0b 	ldhu	r2,-8(fp)
 400f5d0:	1085883a 	add	r2,r2,r2
 400f5d4:	1085883a 	add	r2,r2,r2
 400f5d8:	1007883a 	mov	r3,r2
 400f5dc:	e0bffd17 	ldw	r2,-12(fp)
 400f5e0:	1887883a 	add	r3,r3,r2
 400f5e4:	e0bffb17 	ldw	r2,-20(fp)
 400f5e8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 400f5ec:	e0fffb17 	ldw	r3,-20(fp)
 400f5f0:	e0bffd17 	ldw	r2,-12(fp)
 400f5f4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 400f5f8:	e0fffb17 	ldw	r3,-20(fp)
 400f5fc:	e0bffd17 	ldw	r2,-12(fp)
 400f600:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 400f604:	e0fffb17 	ldw	r3,-20(fp)
 400f608:	e0bffe0b 	ldhu	r2,-8(fp)
 400f60c:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 400f610:	e0bffb17 	ldw	r2,-20(fp)
 400f614:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 400f618:	e0fffc17 	ldw	r3,-16(fp)
 400f61c:	00800084 	movi	r2,2
 400f620:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 400f624:	e0bffc17 	ldw	r2,-16(fp)
 400f628:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 400f62c:	e0fffc17 	ldw	r3,-16(fp)
 400f630:	e0bffb17 	ldw	r2,-20(fp)
 400f634:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 400f638:	e0fffc17 	ldw	r3,-16(fp)
 400f63c:	00800fc4 	movi	r2,63
 400f640:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 400f644:	e0bffc17 	ldw	r2,-16(fp)
 400f648:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 400f64c:	e13ffc17 	ldw	r4,-16(fp)
 400f650:	400c3180 	call	400c318 <OS_EventWaitListInit>
 400f654:	00000e06 	br	400f690 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 400f658:	008100b4 	movhi	r2,1026
 400f65c:	10a2c504 	addi	r2,r2,-29932
 400f660:	10c00017 	ldw	r3,0(r2)
 400f664:	e0bffc17 	ldw	r2,-16(fp)
 400f668:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 400f66c:	00c100b4 	movhi	r3,1026
 400f670:	18e2c504 	addi	r3,r3,-29932
 400f674:	e0bffc17 	ldw	r2,-16(fp)
 400f678:	18800015 	stw	r2,0(r3)
 400f67c:	e0bffa17 	ldw	r2,-24(fp)
 400f680:	e0bff515 	stw	r2,-44(fp)
 400f684:	e0bff517 	ldw	r2,-44(fp)
 400f688:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 400f68c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 400f690:	e0bffc17 	ldw	r2,-16(fp)
 400f694:	e0bfff15 	stw	r2,-4(fp)
 400f698:	e0bfff17 	ldw	r2,-4(fp)
}
 400f69c:	e037883a 	mov	sp,fp
 400f6a0:	dfc00117 	ldw	ra,4(sp)
 400f6a4:	df000017 	ldw	fp,0(sp)
 400f6a8:	dec00204 	addi	sp,sp,8
 400f6ac:	f800283a 	ret

0400f6b0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 400f6b0:	defff004 	addi	sp,sp,-64
 400f6b4:	dfc00f15 	stw	ra,60(sp)
 400f6b8:	df000e15 	stw	fp,56(sp)
 400f6bc:	df000e04 	addi	fp,sp,56
 400f6c0:	e13ffb15 	stw	r4,-20(fp)
 400f6c4:	e1bffd15 	stw	r6,-12(fp)
 400f6c8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400f6cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400f6d0:	e0bffd17 	ldw	r2,-12(fp)
 400f6d4:	1004c03a 	cmpne	r2,r2,zero
 400f6d8:	1000031e 	bne	r2,zero,400f6e8 <OSQDel+0x38>
        return (pevent);
 400f6dc:	e0bffb17 	ldw	r2,-20(fp)
 400f6e0:	e0bfff15 	stw	r2,-4(fp)
 400f6e4:	0000ac06 	br	400f998 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 400f6e8:	e0bffb17 	ldw	r2,-20(fp)
 400f6ec:	1004c03a 	cmpne	r2,r2,zero
 400f6f0:	1000061e 	bne	r2,zero,400f70c <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 400f6f4:	e0fffd17 	ldw	r3,-12(fp)
 400f6f8:	00800104 	movi	r2,4
 400f6fc:	18800005 	stb	r2,0(r3)
        return (pevent);
 400f700:	e0fffb17 	ldw	r3,-20(fp)
 400f704:	e0ffff15 	stw	r3,-4(fp)
 400f708:	0000a306 	br	400f998 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 400f70c:	e0bffb17 	ldw	r2,-20(fp)
 400f710:	10800003 	ldbu	r2,0(r2)
 400f714:	10803fcc 	andi	r2,r2,255
 400f718:	108000a0 	cmpeqi	r2,r2,2
 400f71c:	1000061e 	bne	r2,zero,400f738 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 400f720:	e0fffd17 	ldw	r3,-12(fp)
 400f724:	00800044 	movi	r2,1
 400f728:	18800005 	stb	r2,0(r3)
        return (pevent);
 400f72c:	e0bffb17 	ldw	r2,-20(fp)
 400f730:	e0bfff15 	stw	r2,-4(fp)
 400f734:	00009806 	br	400f998 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400f738:	008100b4 	movhi	r2,1026
 400f73c:	10a2c604 	addi	r2,r2,-29928
 400f740:	10800003 	ldbu	r2,0(r2)
 400f744:	10803fcc 	andi	r2,r2,255
 400f748:	1005003a 	cmpeq	r2,r2,zero
 400f74c:	1000061e 	bne	r2,zero,400f768 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 400f750:	e0fffd17 	ldw	r3,-12(fp)
 400f754:	008003c4 	movi	r2,15
 400f758:	18800005 	stb	r2,0(r3)
        return (pevent);
 400f75c:	e0fffb17 	ldw	r3,-20(fp)
 400f760:	e0ffff15 	stw	r3,-4(fp)
 400f764:	00008c06 	br	400f998 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f768:	0005303a 	rdctl	r2,status
 400f76c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f770:	e0fff617 	ldw	r3,-40(fp)
 400f774:	00bfff84 	movi	r2,-2
 400f778:	1884703a 	and	r2,r3,r2
 400f77c:	1001703a 	wrctl	status,r2
  
  return context;
 400f780:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 400f784:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 400f788:	e0bffb17 	ldw	r2,-20(fp)
 400f78c:	10800283 	ldbu	r2,10(r2)
 400f790:	10803fcc 	andi	r2,r2,255
 400f794:	1005003a 	cmpeq	r2,r2,zero
 400f798:	1000031e 	bne	r2,zero,400f7a8 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400f79c:	00800044 	movi	r2,1
 400f7a0:	e0bffa05 	stb	r2,-24(fp)
 400f7a4:	00000106 	br	400f7ac <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400f7a8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400f7ac:	e0bffc03 	ldbu	r2,-16(fp)
 400f7b0:	e0bffe15 	stw	r2,-8(fp)
 400f7b4:	e0fffe17 	ldw	r3,-8(fp)
 400f7b8:	1805003a 	cmpeq	r2,r3,zero
 400f7bc:	1000041e 	bne	r2,zero,400f7d0 <OSQDel+0x120>
 400f7c0:	e0fffe17 	ldw	r3,-8(fp)
 400f7c4:	18800060 	cmpeqi	r2,r3,1
 400f7c8:	1000391e 	bne	r2,zero,400f8b0 <OSQDel+0x200>
 400f7cc:	00006706 	br	400f96c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 400f7d0:	e0bffa03 	ldbu	r2,-24(fp)
 400f7d4:	1004c03a 	cmpne	r2,r2,zero
 400f7d8:	1000261e 	bne	r2,zero,400f874 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 400f7dc:	e0fffb17 	ldw	r3,-20(fp)
 400f7e0:	00800fc4 	movi	r2,63
 400f7e4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 400f7e8:	e0bffb17 	ldw	r2,-20(fp)
 400f7ec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 400f7f0:	e0bffb17 	ldw	r2,-20(fp)
 400f7f4:	10800117 	ldw	r2,4(r2)
 400f7f8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 400f7fc:	008100b4 	movhi	r2,1026
 400f800:	10a2c304 	addi	r2,r2,-29940
 400f804:	10c00017 	ldw	r3,0(r2)
 400f808:	e0bff817 	ldw	r2,-32(fp)
 400f80c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 400f810:	00c100b4 	movhi	r3,1026
 400f814:	18e2c304 	addi	r3,r3,-29940
 400f818:	e0bff817 	ldw	r2,-32(fp)
 400f81c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400f820:	e0bffb17 	ldw	r2,-20(fp)
 400f824:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 400f828:	008100b4 	movhi	r2,1026
 400f82c:	10a2c504 	addi	r2,r2,-29932
 400f830:	10c00017 	ldw	r3,0(r2)
 400f834:	e0bffb17 	ldw	r2,-20(fp)
 400f838:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 400f83c:	e0bffb17 	ldw	r2,-20(fp)
 400f840:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 400f844:	00c100b4 	movhi	r3,1026
 400f848:	18e2c504 	addi	r3,r3,-29932
 400f84c:	e0bffb17 	ldw	r2,-20(fp)
 400f850:	18800015 	stw	r2,0(r3)
 400f854:	e0bff717 	ldw	r2,-36(fp)
 400f858:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f85c:	e0bff517 	ldw	r2,-44(fp)
 400f860:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 400f864:	e0bffd17 	ldw	r2,-12(fp)
 400f868:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 400f86c:	e03ff915 	stw	zero,-28(fp)
 400f870:	00004706 	br	400f990 <OSQDel+0x2e0>
 400f874:	e0bff717 	ldw	r2,-36(fp)
 400f878:	e0bff415 	stw	r2,-48(fp)
 400f87c:	e0bff417 	ldw	r2,-48(fp)
 400f880:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 400f884:	e0fffd17 	ldw	r3,-12(fp)
 400f888:	00801244 	movi	r2,73
 400f88c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 400f890:	e0bffb17 	ldw	r2,-20(fp)
 400f894:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 400f898:	00003d06 	br	400f990 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 400f89c:	e13ffb17 	ldw	r4,-20(fp)
 400f8a0:	000b883a 	mov	r5,zero
 400f8a4:	01800104 	movi	r6,4
 400f8a8:	000f883a 	mov	r7,zero
 400f8ac:	400bd640 	call	400bd64 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 400f8b0:	e0bffb17 	ldw	r2,-20(fp)
 400f8b4:	10800283 	ldbu	r2,10(r2)
 400f8b8:	10803fcc 	andi	r2,r2,255
 400f8bc:	1004c03a 	cmpne	r2,r2,zero
 400f8c0:	103ff61e 	bne	r2,zero,400f89c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 400f8c4:	e0fffb17 	ldw	r3,-20(fp)
 400f8c8:	00800fc4 	movi	r2,63
 400f8cc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 400f8d0:	e0bffb17 	ldw	r2,-20(fp)
 400f8d4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 400f8d8:	e0bffb17 	ldw	r2,-20(fp)
 400f8dc:	10800117 	ldw	r2,4(r2)
 400f8e0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 400f8e4:	008100b4 	movhi	r2,1026
 400f8e8:	10a2c304 	addi	r2,r2,-29940
 400f8ec:	10c00017 	ldw	r3,0(r2)
 400f8f0:	e0bff817 	ldw	r2,-32(fp)
 400f8f4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 400f8f8:	00c100b4 	movhi	r3,1026
 400f8fc:	18e2c304 	addi	r3,r3,-29940
 400f900:	e0bff817 	ldw	r2,-32(fp)
 400f904:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400f908:	e0bffb17 	ldw	r2,-20(fp)
 400f90c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 400f910:	008100b4 	movhi	r2,1026
 400f914:	10a2c504 	addi	r2,r2,-29932
 400f918:	10c00017 	ldw	r3,0(r2)
 400f91c:	e0bffb17 	ldw	r2,-20(fp)
 400f920:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 400f924:	e0bffb17 	ldw	r2,-20(fp)
 400f928:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 400f92c:	00c100b4 	movhi	r3,1026
 400f930:	18e2c504 	addi	r3,r3,-29932
 400f934:	e0bffb17 	ldw	r2,-20(fp)
 400f938:	18800015 	stw	r2,0(r3)
 400f93c:	e0bff717 	ldw	r2,-36(fp)
 400f940:	e0bff315 	stw	r2,-52(fp)
 400f944:	e0bff317 	ldw	r2,-52(fp)
 400f948:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400f94c:	e0bffa03 	ldbu	r2,-24(fp)
 400f950:	10800058 	cmpnei	r2,r2,1
 400f954:	1000011e 	bne	r2,zero,400f95c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 400f958:	400c7a40 	call	400c7a4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 400f95c:	e0bffd17 	ldw	r2,-12(fp)
 400f960:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 400f964:	e03ff915 	stw	zero,-28(fp)
             break;
 400f968:	00000906 	br	400f990 <OSQDel+0x2e0>
 400f96c:	e0bff717 	ldw	r2,-36(fp)
 400f970:	e0bff215 	stw	r2,-56(fp)
 400f974:	e0bff217 	ldw	r2,-56(fp)
 400f978:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 400f97c:	e0fffd17 	ldw	r3,-12(fp)
 400f980:	008001c4 	movi	r2,7
 400f984:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 400f988:	e0bffb17 	ldw	r2,-20(fp)
 400f98c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 400f990:	e0bff917 	ldw	r2,-28(fp)
 400f994:	e0bfff15 	stw	r2,-4(fp)
 400f998:	e0bfff17 	ldw	r2,-4(fp)
}
 400f99c:	e037883a 	mov	sp,fp
 400f9a0:	dfc00117 	ldw	ra,4(sp)
 400f9a4:	df000017 	ldw	fp,0(sp)
 400f9a8:	dec00204 	addi	sp,sp,8
 400f9ac:	f800283a 	ret

0400f9b0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 400f9b0:	defff904 	addi	sp,sp,-28
 400f9b4:	df000615 	stw	fp,24(sp)
 400f9b8:	df000604 	addi	fp,sp,24
 400f9bc:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 400f9c0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 400f9c4:	e0bffe17 	ldw	r2,-8(fp)
 400f9c8:	1004c03a 	cmpne	r2,r2,zero
 400f9cc:	1000031e 	bne	r2,zero,400f9dc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 400f9d0:	00800104 	movi	r2,4
 400f9d4:	e0bfff15 	stw	r2,-4(fp)
 400f9d8:	00002206 	br	400fa64 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 400f9dc:	e0bffe17 	ldw	r2,-8(fp)
 400f9e0:	10800003 	ldbu	r2,0(r2)
 400f9e4:	10803fcc 	andi	r2,r2,255
 400f9e8:	108000a0 	cmpeqi	r2,r2,2
 400f9ec:	1000031e 	bne	r2,zero,400f9fc <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 400f9f0:	00800044 	movi	r2,1
 400f9f4:	e0bfff15 	stw	r2,-4(fp)
 400f9f8:	00001a06 	br	400fa64 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f9fc:	0005303a 	rdctl	r2,status
 400fa00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fa04:	e0fffb17 	ldw	r3,-20(fp)
 400fa08:	00bfff84 	movi	r2,-2
 400fa0c:	1884703a 	and	r2,r3,r2
 400fa10:	1001703a 	wrctl	status,r2
  
  return context;
 400fa14:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 400fa18:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 400fa1c:	e0bffe17 	ldw	r2,-8(fp)
 400fa20:	10800117 	ldw	r2,4(r2)
 400fa24:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 400fa28:	e0bffd17 	ldw	r2,-12(fp)
 400fa2c:	10c00117 	ldw	r3,4(r2)
 400fa30:	e0bffd17 	ldw	r2,-12(fp)
 400fa34:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 400fa38:	e0bffd17 	ldw	r2,-12(fp)
 400fa3c:	10c00117 	ldw	r3,4(r2)
 400fa40:	e0bffd17 	ldw	r2,-12(fp)
 400fa44:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 400fa48:	e0bffd17 	ldw	r2,-12(fp)
 400fa4c:	1000058d 	sth	zero,22(r2)
 400fa50:	e0bffc17 	ldw	r2,-16(fp)
 400fa54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fa58:	e0bffa17 	ldw	r2,-24(fp)
 400fa5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 400fa60:	e03fff15 	stw	zero,-4(fp)
 400fa64:	e0bfff17 	ldw	r2,-4(fp)
}
 400fa68:	e037883a 	mov	sp,fp
 400fa6c:	df000017 	ldw	fp,0(sp)
 400fa70:	dec00104 	addi	sp,sp,4
 400fa74:	f800283a 	ret

0400fa78 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 400fa78:	defff104 	addi	sp,sp,-60
 400fa7c:	dfc00e15 	stw	ra,56(sp)
 400fa80:	df000d15 	stw	fp,52(sp)
 400fa84:	df000d04 	addi	fp,sp,52
 400fa88:	e13ffb15 	stw	r4,-20(fp)
 400fa8c:	e1bffd15 	stw	r6,-12(fp)
 400fa90:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400fa94:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400fa98:	e0bffd17 	ldw	r2,-12(fp)
 400fa9c:	1004c03a 	cmpne	r2,r2,zero
 400faa0:	1000021e 	bne	r2,zero,400faac <OSQPend+0x34>
        return ((void *)0);
 400faa4:	e03fff15 	stw	zero,-4(fp)
 400faa8:	0000b506 	br	400fd80 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 400faac:	e0bffb17 	ldw	r2,-20(fp)
 400fab0:	1004c03a 	cmpne	r2,r2,zero
 400fab4:	1000051e 	bne	r2,zero,400facc <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400fab8:	e0fffd17 	ldw	r3,-12(fp)
 400fabc:	00800104 	movi	r2,4
 400fac0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400fac4:	e03fff15 	stw	zero,-4(fp)
 400fac8:	0000ad06 	br	400fd80 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 400facc:	e0bffb17 	ldw	r2,-20(fp)
 400fad0:	10800003 	ldbu	r2,0(r2)
 400fad4:	10803fcc 	andi	r2,r2,255
 400fad8:	108000a0 	cmpeqi	r2,r2,2
 400fadc:	1000051e 	bne	r2,zero,400faf4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400fae0:	e0fffd17 	ldw	r3,-12(fp)
 400fae4:	00800044 	movi	r2,1
 400fae8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400faec:	e03fff15 	stw	zero,-4(fp)
 400faf0:	0000a306 	br	400fd80 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 400faf4:	008100b4 	movhi	r2,1026
 400faf8:	10a2c604 	addi	r2,r2,-29928
 400fafc:	10800003 	ldbu	r2,0(r2)
 400fb00:	10803fcc 	andi	r2,r2,255
 400fb04:	1005003a 	cmpeq	r2,r2,zero
 400fb08:	1000051e 	bne	r2,zero,400fb20 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 400fb0c:	e0fffd17 	ldw	r3,-12(fp)
 400fb10:	00800084 	movi	r2,2
 400fb14:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400fb18:	e03fff15 	stw	zero,-4(fp)
 400fb1c:	00009806 	br	400fd80 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 400fb20:	008100b4 	movhi	r2,1026
 400fb24:	10a2b7c4 	addi	r2,r2,-29985
 400fb28:	10800003 	ldbu	r2,0(r2)
 400fb2c:	10803fcc 	andi	r2,r2,255
 400fb30:	1005003a 	cmpeq	r2,r2,zero
 400fb34:	1000051e 	bne	r2,zero,400fb4c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 400fb38:	e0fffd17 	ldw	r3,-12(fp)
 400fb3c:	00800344 	movi	r2,13
 400fb40:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 400fb44:	e03fff15 	stw	zero,-4(fp)
 400fb48:	00008d06 	br	400fd80 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fb4c:	0005303a 	rdctl	r2,status
 400fb50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fb54:	e0fff717 	ldw	r3,-36(fp)
 400fb58:	00bfff84 	movi	r2,-2
 400fb5c:	1884703a 	and	r2,r3,r2
 400fb60:	1001703a 	wrctl	status,r2
  
  return context;
 400fb64:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 400fb68:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 400fb6c:	e0bffb17 	ldw	r2,-20(fp)
 400fb70:	10800117 	ldw	r2,4(r2)
 400fb74:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 400fb78:	e0bff917 	ldw	r2,-28(fp)
 400fb7c:	1080058b 	ldhu	r2,22(r2)
 400fb80:	10bfffcc 	andi	r2,r2,65535
 400fb84:	1005003a 	cmpeq	r2,r2,zero
 400fb88:	10001f1e 	bne	r2,zero,400fc08 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 400fb8c:	e0bff917 	ldw	r2,-28(fp)
 400fb90:	10c00417 	ldw	r3,16(r2)
 400fb94:	18800017 	ldw	r2,0(r3)
 400fb98:	e0bffa15 	stw	r2,-24(fp)
 400fb9c:	18c00104 	addi	r3,r3,4
 400fba0:	e0bff917 	ldw	r2,-28(fp)
 400fba4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 400fba8:	e0bff917 	ldw	r2,-28(fp)
 400fbac:	1080058b 	ldhu	r2,22(r2)
 400fbb0:	10bfffc4 	addi	r2,r2,-1
 400fbb4:	1007883a 	mov	r3,r2
 400fbb8:	e0bff917 	ldw	r2,-28(fp)
 400fbbc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 400fbc0:	e0bff917 	ldw	r2,-28(fp)
 400fbc4:	10c00417 	ldw	r3,16(r2)
 400fbc8:	e0bff917 	ldw	r2,-28(fp)
 400fbcc:	10800217 	ldw	r2,8(r2)
 400fbd0:	1880041e 	bne	r3,r2,400fbe4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 400fbd4:	e0bff917 	ldw	r2,-28(fp)
 400fbd8:	10c00117 	ldw	r3,4(r2)
 400fbdc:	e0bff917 	ldw	r2,-28(fp)
 400fbe0:	10c00415 	stw	r3,16(r2)
 400fbe4:	e0bff817 	ldw	r2,-32(fp)
 400fbe8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fbec:	e0bff617 	ldw	r2,-40(fp)
 400fbf0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 400fbf4:	e0bffd17 	ldw	r2,-12(fp)
 400fbf8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 400fbfc:	e0bffa17 	ldw	r2,-24(fp)
 400fc00:	e0bfff15 	stw	r2,-4(fp)
 400fc04:	00005e06 	br	400fd80 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 400fc08:	008100b4 	movhi	r2,1026
 400fc0c:	10a2c704 	addi	r2,r2,-29924
 400fc10:	10c00017 	ldw	r3,0(r2)
 400fc14:	008100b4 	movhi	r2,1026
 400fc18:	10a2c704 	addi	r2,r2,-29924
 400fc1c:	10800017 	ldw	r2,0(r2)
 400fc20:	10800d03 	ldbu	r2,52(r2)
 400fc24:	10800114 	ori	r2,r2,4
 400fc28:	18800d05 	stb	r2,52(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400fc2c:	008100b4 	movhi	r2,1026
 400fc30:	10a2c704 	addi	r2,r2,-29924
 400fc34:	10800017 	ldw	r2,0(r2)
 400fc38:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 400fc3c:	008100b4 	movhi	r2,1026
 400fc40:	10a2c704 	addi	r2,r2,-29924
 400fc44:	10c00017 	ldw	r3,0(r2)
 400fc48:	e0bffc0b 	ldhu	r2,-16(fp)
 400fc4c:	18800c8d 	sth	r2,50(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 400fc50:	e13ffb17 	ldw	r4,-20(fp)
 400fc54:	400bef80 	call	400bef8 <OS_EventTaskWait>
 400fc58:	e0bff817 	ldw	r2,-32(fp)
 400fc5c:	e0bff515 	stw	r2,-44(fp)
 400fc60:	e0bff517 	ldw	r2,-44(fp)
 400fc64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 400fc68:	400c7a40 	call	400c7a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fc6c:	0005303a 	rdctl	r2,status
 400fc70:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fc74:	e0fff417 	ldw	r3,-48(fp)
 400fc78:	00bfff84 	movi	r2,-2
 400fc7c:	1884703a 	and	r2,r3,r2
 400fc80:	1001703a 	wrctl	status,r2
  
  return context;
 400fc84:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 400fc88:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 400fc8c:	008100b4 	movhi	r2,1026
 400fc90:	10a2c704 	addi	r2,r2,-29924
 400fc94:	10800017 	ldw	r2,0(r2)
 400fc98:	10800d43 	ldbu	r2,53(r2)
 400fc9c:	10803fcc 	andi	r2,r2,255
 400fca0:	e0bffe15 	stw	r2,-8(fp)
 400fca4:	e0fffe17 	ldw	r3,-8(fp)
 400fca8:	1805003a 	cmpeq	r2,r3,zero
 400fcac:	1000041e 	bne	r2,zero,400fcc0 <OSQPend+0x248>
 400fcb0:	e0fffe17 	ldw	r3,-8(fp)
 400fcb4:	188000a0 	cmpeqi	r2,r3,2
 400fcb8:	1000091e 	bne	r2,zero,400fce0 <OSQPend+0x268>
 400fcbc:	00000d06 	br	400fcf4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 400fcc0:	008100b4 	movhi	r2,1026
 400fcc4:	10a2c704 	addi	r2,r2,-29924
 400fcc8:	10800017 	ldw	r2,0(r2)
 400fccc:	10800917 	ldw	r2,36(r2)
 400fcd0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 400fcd4:	e0bffd17 	ldw	r2,-12(fp)
 400fcd8:	10000005 	stb	zero,0(r2)
             break;
 400fcdc:	00000e06 	br	400fd18 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 400fce0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 400fce4:	e0fffd17 	ldw	r3,-12(fp)
 400fce8:	00800384 	movi	r2,14
 400fcec:	18800005 	stb	r2,0(r3)
             break;
 400fcf0:	00000906 	br	400fd18 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 400fcf4:	008100b4 	movhi	r2,1026
 400fcf8:	10a2c704 	addi	r2,r2,-29924
 400fcfc:	11000017 	ldw	r4,0(r2)
 400fd00:	e17ffb17 	ldw	r5,-20(fp)
 400fd04:	400c15c0 	call	400c15c <OS_EventTaskRemove>
             pmsg = (void *)0;
 400fd08:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 400fd0c:	e0fffd17 	ldw	r3,-12(fp)
 400fd10:	00800284 	movi	r2,10
 400fd14:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 400fd18:	008100b4 	movhi	r2,1026
 400fd1c:	10a2c704 	addi	r2,r2,-29924
 400fd20:	10800017 	ldw	r2,0(r2)
 400fd24:	10000d05 	stb	zero,52(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 400fd28:	008100b4 	movhi	r2,1026
 400fd2c:	10a2c704 	addi	r2,r2,-29924
 400fd30:	10800017 	ldw	r2,0(r2)
 400fd34:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 400fd38:	008100b4 	movhi	r2,1026
 400fd3c:	10a2c704 	addi	r2,r2,-29924
 400fd40:	10800017 	ldw	r2,0(r2)
 400fd44:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400fd48:	008100b4 	movhi	r2,1026
 400fd4c:	10a2c704 	addi	r2,r2,-29924
 400fd50:	10800017 	ldw	r2,0(r2)
 400fd54:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 400fd58:	008100b4 	movhi	r2,1026
 400fd5c:	10a2c704 	addi	r2,r2,-29924
 400fd60:	10800017 	ldw	r2,0(r2)
 400fd64:	10000915 	stw	zero,36(r2)
 400fd68:	e0bff817 	ldw	r2,-32(fp)
 400fd6c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fd70:	e0bff317 	ldw	r2,-52(fp)
 400fd74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 400fd78:	e0bffa17 	ldw	r2,-24(fp)
 400fd7c:	e0bfff15 	stw	r2,-4(fp)
 400fd80:	e0bfff17 	ldw	r2,-4(fp)
}
 400fd84:	e037883a 	mov	sp,fp
 400fd88:	dfc00117 	ldw	ra,4(sp)
 400fd8c:	df000017 	ldw	fp,0(sp)
 400fd90:	dec00204 	addi	sp,sp,8
 400fd94:	f800283a 	ret

0400fd98 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 400fd98:	defff504 	addi	sp,sp,-44
 400fd9c:	dfc00a15 	stw	ra,40(sp)
 400fda0:	df000915 	stw	fp,36(sp)
 400fda4:	df000904 	addi	fp,sp,36
 400fda8:	e13ffc15 	stw	r4,-16(fp)
 400fdac:	e1bffe15 	stw	r6,-8(fp)
 400fdb0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400fdb4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400fdb8:	e0bffe17 	ldw	r2,-8(fp)
 400fdbc:	1004c03a 	cmpne	r2,r2,zero
 400fdc0:	1000021e 	bne	r2,zero,400fdcc <OSQPendAbort+0x34>
        return (0);
 400fdc4:	e03fff15 	stw	zero,-4(fp)
 400fdc8:	00004c06 	br	400fefc <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 400fdcc:	e0bffc17 	ldw	r2,-16(fp)
 400fdd0:	1004c03a 	cmpne	r2,r2,zero
 400fdd4:	1000051e 	bne	r2,zero,400fdec <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400fdd8:	e0fffe17 	ldw	r3,-8(fp)
 400fddc:	00800104 	movi	r2,4
 400fde0:	18800005 	stb	r2,0(r3)
        return (0);
 400fde4:	e03fff15 	stw	zero,-4(fp)
 400fde8:	00004406 	br	400fefc <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 400fdec:	e0bffc17 	ldw	r2,-16(fp)
 400fdf0:	10800003 	ldbu	r2,0(r2)
 400fdf4:	10803fcc 	andi	r2,r2,255
 400fdf8:	108000a0 	cmpeqi	r2,r2,2
 400fdfc:	1000051e 	bne	r2,zero,400fe14 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400fe00:	e0fffe17 	ldw	r3,-8(fp)
 400fe04:	00800044 	movi	r2,1
 400fe08:	18800005 	stb	r2,0(r3)
        return (0);
 400fe0c:	e03fff15 	stw	zero,-4(fp)
 400fe10:	00003a06 	br	400fefc <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fe14:	0005303a 	rdctl	r2,status
 400fe18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fe1c:	e0fff917 	ldw	r3,-28(fp)
 400fe20:	00bfff84 	movi	r2,-2
 400fe24:	1884703a 	and	r2,r3,r2
 400fe28:	1001703a 	wrctl	status,r2
  
  return context;
 400fe2c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400fe30:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 400fe34:	e0bffc17 	ldw	r2,-16(fp)
 400fe38:	10800283 	ldbu	r2,10(r2)
 400fe3c:	10803fcc 	andi	r2,r2,255
 400fe40:	1005003a 	cmpeq	r2,r2,zero
 400fe44:	1000261e 	bne	r2,zero,400fee0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 400fe48:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 400fe4c:	e0bffd03 	ldbu	r2,-12(fp)
 400fe50:	10800060 	cmpeqi	r2,r2,1
 400fe54:	1000091e 	bne	r2,zero,400fe7c <OSQPendAbort+0xe4>
 400fe58:	00000e06 	br	400fe94 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 400fe5c:	e13ffc17 	ldw	r4,-16(fp)
 400fe60:	000b883a 	mov	r5,zero
 400fe64:	01800104 	movi	r6,4
 400fe68:	01c00084 	movi	r7,2
 400fe6c:	400bd640 	call	400bd64 <OS_EventTaskRdy>
                     nbr_tasks++;
 400fe70:	e0bffb03 	ldbu	r2,-20(fp)
 400fe74:	10800044 	addi	r2,r2,1
 400fe78:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 400fe7c:	e0bffc17 	ldw	r2,-16(fp)
 400fe80:	10800283 	ldbu	r2,10(r2)
 400fe84:	10803fcc 	andi	r2,r2,255
 400fe88:	1004c03a 	cmpne	r2,r2,zero
 400fe8c:	103ff31e 	bne	r2,zero,400fe5c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 400fe90:	00000806 	br	400feb4 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 400fe94:	e13ffc17 	ldw	r4,-16(fp)
 400fe98:	000b883a 	mov	r5,zero
 400fe9c:	01800104 	movi	r6,4
 400fea0:	01c00084 	movi	r7,2
 400fea4:	400bd640 	call	400bd64 <OS_EventTaskRdy>
                 nbr_tasks++;
 400fea8:	e0bffb03 	ldbu	r2,-20(fp)
 400feac:	10800044 	addi	r2,r2,1
 400feb0:	e0bffb05 	stb	r2,-20(fp)
 400feb4:	e0bffa17 	ldw	r2,-24(fp)
 400feb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400febc:	e0bff817 	ldw	r2,-32(fp)
 400fec0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 400fec4:	400c7a40 	call	400c7a4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 400fec8:	e0fffe17 	ldw	r3,-8(fp)
 400fecc:	00800384 	movi	r2,14
 400fed0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 400fed4:	e0bffb03 	ldbu	r2,-20(fp)
 400fed8:	e0bfff15 	stw	r2,-4(fp)
 400fedc:	00000706 	br	400fefc <OSQPendAbort+0x164>
 400fee0:	e0bffa17 	ldw	r2,-24(fp)
 400fee4:	e0bff715 	stw	r2,-36(fp)
 400fee8:	e0bff717 	ldw	r2,-36(fp)
 400feec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400fef0:	e0bffe17 	ldw	r2,-8(fp)
 400fef4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 400fef8:	e03fff15 	stw	zero,-4(fp)
 400fefc:	e0bfff17 	ldw	r2,-4(fp)
}
 400ff00:	e037883a 	mov	sp,fp
 400ff04:	dfc00117 	ldw	ra,4(sp)
 400ff08:	df000017 	ldw	fp,0(sp)
 400ff0c:	dec00204 	addi	sp,sp,8
 400ff10:	f800283a 	ret

0400ff14 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 400ff14:	defff504 	addi	sp,sp,-44
 400ff18:	dfc00a15 	stw	ra,40(sp)
 400ff1c:	df000915 	stw	fp,36(sp)
 400ff20:	df000904 	addi	fp,sp,36
 400ff24:	e13ffd15 	stw	r4,-12(fp)
 400ff28:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400ff2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 400ff30:	e0bffd17 	ldw	r2,-12(fp)
 400ff34:	1004c03a 	cmpne	r2,r2,zero
 400ff38:	1000031e 	bne	r2,zero,400ff48 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 400ff3c:	00800104 	movi	r2,4
 400ff40:	e0bfff15 	stw	r2,-4(fp)
 400ff44:	00004d06 	br	401007c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 400ff48:	e0bffd17 	ldw	r2,-12(fp)
 400ff4c:	10800003 	ldbu	r2,0(r2)
 400ff50:	10803fcc 	andi	r2,r2,255
 400ff54:	108000a0 	cmpeqi	r2,r2,2
 400ff58:	1000031e 	bne	r2,zero,400ff68 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 400ff5c:	00800044 	movi	r2,1
 400ff60:	e0bfff15 	stw	r2,-4(fp)
 400ff64:	00004506 	br	401007c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ff68:	0005303a 	rdctl	r2,status
 400ff6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff70:	e0fffa17 	ldw	r3,-24(fp)
 400ff74:	00bfff84 	movi	r2,-2
 400ff78:	1884703a 	and	r2,r3,r2
 400ff7c:	1001703a 	wrctl	status,r2
  
  return context;
 400ff80:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400ff84:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 400ff88:	e0bffd17 	ldw	r2,-12(fp)
 400ff8c:	10800283 	ldbu	r2,10(r2)
 400ff90:	10803fcc 	andi	r2,r2,255
 400ff94:	1005003a 	cmpeq	r2,r2,zero
 400ff98:	10000c1e 	bne	r2,zero,400ffcc <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 400ff9c:	e13ffd17 	ldw	r4,-12(fp)
 400ffa0:	e17ffe17 	ldw	r5,-8(fp)
 400ffa4:	01800104 	movi	r6,4
 400ffa8:	000f883a 	mov	r7,zero
 400ffac:	400bd640 	call	400bd64 <OS_EventTaskRdy>
 400ffb0:	e0bffb17 	ldw	r2,-20(fp)
 400ffb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ffb8:	e0bff917 	ldw	r2,-28(fp)
 400ffbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 400ffc0:	400c7a40 	call	400c7a4 <OS_Sched>
        return (OS_ERR_NONE);
 400ffc4:	e03fff15 	stw	zero,-4(fp)
 400ffc8:	00002c06 	br	401007c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 400ffcc:	e0bffd17 	ldw	r2,-12(fp)
 400ffd0:	10800117 	ldw	r2,4(r2)
 400ffd4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 400ffd8:	e0bffc17 	ldw	r2,-16(fp)
 400ffdc:	10c0058b 	ldhu	r3,22(r2)
 400ffe0:	e0bffc17 	ldw	r2,-16(fp)
 400ffe4:	1080050b 	ldhu	r2,20(r2)
 400ffe8:	18ffffcc 	andi	r3,r3,65535
 400ffec:	10bfffcc 	andi	r2,r2,65535
 400fff0:	18800736 	bltu	r3,r2,4010010 <OSQPost+0xfc>
 400fff4:	e0bffb17 	ldw	r2,-20(fp)
 400fff8:	e0bff815 	stw	r2,-32(fp)
 400fffc:	e0bff817 	ldw	r2,-32(fp)
 4010000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4010004:	00800784 	movi	r2,30
 4010008:	e0bfff15 	stw	r2,-4(fp)
 401000c:	00001b06 	br	401007c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 4010010:	e0bffc17 	ldw	r2,-16(fp)
 4010014:	10c00317 	ldw	r3,12(r2)
 4010018:	e0bffe17 	ldw	r2,-8(fp)
 401001c:	18800015 	stw	r2,0(r3)
 4010020:	18c00104 	addi	r3,r3,4
 4010024:	e0bffc17 	ldw	r2,-16(fp)
 4010028:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 401002c:	e0bffc17 	ldw	r2,-16(fp)
 4010030:	1080058b 	ldhu	r2,22(r2)
 4010034:	10800044 	addi	r2,r2,1
 4010038:	1007883a 	mov	r3,r2
 401003c:	e0bffc17 	ldw	r2,-16(fp)
 4010040:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4010044:	e0bffc17 	ldw	r2,-16(fp)
 4010048:	10c00317 	ldw	r3,12(r2)
 401004c:	e0bffc17 	ldw	r2,-16(fp)
 4010050:	10800217 	ldw	r2,8(r2)
 4010054:	1880041e 	bne	r3,r2,4010068 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 4010058:	e0bffc17 	ldw	r2,-16(fp)
 401005c:	10c00117 	ldw	r3,4(r2)
 4010060:	e0bffc17 	ldw	r2,-16(fp)
 4010064:	10c00315 	stw	r3,12(r2)
 4010068:	e0bffb17 	ldw	r2,-20(fp)
 401006c:	e0bff715 	stw	r2,-36(fp)
 4010070:	e0bff717 	ldw	r2,-36(fp)
 4010074:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4010078:	e03fff15 	stw	zero,-4(fp)
 401007c:	e0bfff17 	ldw	r2,-4(fp)
}
 4010080:	e037883a 	mov	sp,fp
 4010084:	dfc00117 	ldw	ra,4(sp)
 4010088:	df000017 	ldw	fp,0(sp)
 401008c:	dec00204 	addi	sp,sp,8
 4010090:	f800283a 	ret

04010094 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4010094:	defff504 	addi	sp,sp,-44
 4010098:	dfc00a15 	stw	ra,40(sp)
 401009c:	df000915 	stw	fp,36(sp)
 40100a0:	df000904 	addi	fp,sp,36
 40100a4:	e13ffd15 	stw	r4,-12(fp)
 40100a8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40100ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40100b0:	e0bffd17 	ldw	r2,-12(fp)
 40100b4:	1004c03a 	cmpne	r2,r2,zero
 40100b8:	1000031e 	bne	r2,zero,40100c8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 40100bc:	00800104 	movi	r2,4
 40100c0:	e0bfff15 	stw	r2,-4(fp)
 40100c4:	00004f06 	br	4010204 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40100c8:	e0bffd17 	ldw	r2,-12(fp)
 40100cc:	10800003 	ldbu	r2,0(r2)
 40100d0:	10803fcc 	andi	r2,r2,255
 40100d4:	108000a0 	cmpeqi	r2,r2,2
 40100d8:	1000031e 	bne	r2,zero,40100e8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 40100dc:	00800044 	movi	r2,1
 40100e0:	e0bfff15 	stw	r2,-4(fp)
 40100e4:	00004706 	br	4010204 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40100e8:	0005303a 	rdctl	r2,status
 40100ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40100f0:	e0fffa17 	ldw	r3,-24(fp)
 40100f4:	00bfff84 	movi	r2,-2
 40100f8:	1884703a 	and	r2,r3,r2
 40100fc:	1001703a 	wrctl	status,r2
  
  return context;
 4010100:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4010104:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 4010108:	e0bffd17 	ldw	r2,-12(fp)
 401010c:	10800283 	ldbu	r2,10(r2)
 4010110:	10803fcc 	andi	r2,r2,255
 4010114:	1005003a 	cmpeq	r2,r2,zero
 4010118:	10000c1e 	bne	r2,zero,401014c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 401011c:	e13ffd17 	ldw	r4,-12(fp)
 4010120:	e17ffe17 	ldw	r5,-8(fp)
 4010124:	01800104 	movi	r6,4
 4010128:	000f883a 	mov	r7,zero
 401012c:	400bd640 	call	400bd64 <OS_EventTaskRdy>
 4010130:	e0bffb17 	ldw	r2,-20(fp)
 4010134:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010138:	e0bff917 	ldw	r2,-28(fp)
 401013c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4010140:	400c7a40 	call	400c7a4 <OS_Sched>
        return (OS_ERR_NONE);
 4010144:	e03fff15 	stw	zero,-4(fp)
 4010148:	00002e06 	br	4010204 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 401014c:	e0bffd17 	ldw	r2,-12(fp)
 4010150:	10800117 	ldw	r2,4(r2)
 4010154:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4010158:	e0bffc17 	ldw	r2,-16(fp)
 401015c:	10c0058b 	ldhu	r3,22(r2)
 4010160:	e0bffc17 	ldw	r2,-16(fp)
 4010164:	1080050b 	ldhu	r2,20(r2)
 4010168:	18ffffcc 	andi	r3,r3,65535
 401016c:	10bfffcc 	andi	r2,r2,65535
 4010170:	18800736 	bltu	r3,r2,4010190 <OSQPostFront+0xfc>
 4010174:	e0bffb17 	ldw	r2,-20(fp)
 4010178:	e0bff815 	stw	r2,-32(fp)
 401017c:	e0bff817 	ldw	r2,-32(fp)
 4010180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4010184:	00800784 	movi	r2,30
 4010188:	e0bfff15 	stw	r2,-4(fp)
 401018c:	00001d06 	br	4010204 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4010190:	e0bffc17 	ldw	r2,-16(fp)
 4010194:	10c00417 	ldw	r3,16(r2)
 4010198:	e0bffc17 	ldw	r2,-16(fp)
 401019c:	10800117 	ldw	r2,4(r2)
 40101a0:	1880041e 	bne	r3,r2,40101b4 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 40101a4:	e0bffc17 	ldw	r2,-16(fp)
 40101a8:	10c00217 	ldw	r3,8(r2)
 40101ac:	e0bffc17 	ldw	r2,-16(fp)
 40101b0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 40101b4:	e0bffc17 	ldw	r2,-16(fp)
 40101b8:	10800417 	ldw	r2,16(r2)
 40101bc:	10ffff04 	addi	r3,r2,-4
 40101c0:	e0bffc17 	ldw	r2,-16(fp)
 40101c4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 40101c8:	e0bffc17 	ldw	r2,-16(fp)
 40101cc:	10c00417 	ldw	r3,16(r2)
 40101d0:	e0bffe17 	ldw	r2,-8(fp)
 40101d4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40101d8:	e0bffc17 	ldw	r2,-16(fp)
 40101dc:	1080058b 	ldhu	r2,22(r2)
 40101e0:	10800044 	addi	r2,r2,1
 40101e4:	1007883a 	mov	r3,r2
 40101e8:	e0bffc17 	ldw	r2,-16(fp)
 40101ec:	10c0058d 	sth	r3,22(r2)
 40101f0:	e0bffb17 	ldw	r2,-20(fp)
 40101f4:	e0bff715 	stw	r2,-36(fp)
 40101f8:	e0bff717 	ldw	r2,-36(fp)
 40101fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4010200:	e03fff15 	stw	zero,-4(fp)
 4010204:	e0bfff17 	ldw	r2,-4(fp)
}
 4010208:	e037883a 	mov	sp,fp
 401020c:	dfc00117 	ldw	ra,4(sp)
 4010210:	df000017 	ldw	fp,0(sp)
 4010214:	dec00204 	addi	sp,sp,8
 4010218:	f800283a 	ret

0401021c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 401021c:	defff404 	addi	sp,sp,-48
 4010220:	dfc00b15 	stw	ra,44(sp)
 4010224:	df000a15 	stw	fp,40(sp)
 4010228:	df000a04 	addi	fp,sp,40
 401022c:	e13ffc15 	stw	r4,-16(fp)
 4010230:	e17ffd15 	stw	r5,-12(fp)
 4010234:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010238:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401023c:	e0bffc17 	ldw	r2,-16(fp)
 4010240:	1004c03a 	cmpne	r2,r2,zero
 4010244:	1000031e 	bne	r2,zero,4010254 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 4010248:	00800104 	movi	r2,4
 401024c:	e0bfff15 	stw	r2,-4(fp)
 4010250:	00007906 	br	4010438 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4010254:	e0bffc17 	ldw	r2,-16(fp)
 4010258:	10800003 	ldbu	r2,0(r2)
 401025c:	10803fcc 	andi	r2,r2,255
 4010260:	108000a0 	cmpeqi	r2,r2,2
 4010264:	1000031e 	bne	r2,zero,4010274 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 4010268:	00800044 	movi	r2,1
 401026c:	e0bfff15 	stw	r2,-4(fp)
 4010270:	00007106 	br	4010438 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010274:	0005303a 	rdctl	r2,status
 4010278:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401027c:	e0fff917 	ldw	r3,-28(fp)
 4010280:	00bfff84 	movi	r2,-2
 4010284:	1884703a 	and	r2,r3,r2
 4010288:	1001703a 	wrctl	status,r2
  
  return context;
 401028c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4010290:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4010294:	e0bffc17 	ldw	r2,-16(fp)
 4010298:	10800283 	ldbu	r2,10(r2)
 401029c:	10803fcc 	andi	r2,r2,255
 40102a0:	1005003a 	cmpeq	r2,r2,zero
 40102a4:	1000211e 	bne	r2,zero,401032c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 40102a8:	e0bffe03 	ldbu	r2,-8(fp)
 40102ac:	1080004c 	andi	r2,r2,1
 40102b0:	10803fcc 	andi	r2,r2,255
 40102b4:	1005003a 	cmpeq	r2,r2,zero
 40102b8:	10000c1e 	bne	r2,zero,40102ec <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 40102bc:	00000506 	br	40102d4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40102c0:	e13ffc17 	ldw	r4,-16(fp)
 40102c4:	e17ffd17 	ldw	r5,-12(fp)
 40102c8:	01800104 	movi	r6,4
 40102cc:	000f883a 	mov	r7,zero
 40102d0:	400bd640 	call	400bd64 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 40102d4:	e0bffc17 	ldw	r2,-16(fp)
 40102d8:	10800283 	ldbu	r2,10(r2)
 40102dc:	10803fcc 	andi	r2,r2,255
 40102e0:	1004c03a 	cmpne	r2,r2,zero
 40102e4:	103ff61e 	bne	r2,zero,40102c0 <OSQPostOpt+0xa4>
 40102e8:	00000506 	br	4010300 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40102ec:	e13ffc17 	ldw	r4,-16(fp)
 40102f0:	e17ffd17 	ldw	r5,-12(fp)
 40102f4:	01800104 	movi	r6,4
 40102f8:	000f883a 	mov	r7,zero
 40102fc:	400bd640 	call	400bd64 <OS_EventTaskRdy>
 4010300:	e0bffa17 	ldw	r2,-24(fp)
 4010304:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010308:	e0bff817 	ldw	r2,-32(fp)
 401030c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4010310:	e0bffe03 	ldbu	r2,-8(fp)
 4010314:	1080010c 	andi	r2,r2,4
 4010318:	1004c03a 	cmpne	r2,r2,zero
 401031c:	1000011e 	bne	r2,zero,4010324 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4010320:	400c7a40 	call	400c7a4 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4010324:	e03fff15 	stw	zero,-4(fp)
 4010328:	00004306 	br	4010438 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 401032c:	e0bffc17 	ldw	r2,-16(fp)
 4010330:	10800117 	ldw	r2,4(r2)
 4010334:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4010338:	e0bffb17 	ldw	r2,-20(fp)
 401033c:	10c0058b 	ldhu	r3,22(r2)
 4010340:	e0bffb17 	ldw	r2,-20(fp)
 4010344:	1080050b 	ldhu	r2,20(r2)
 4010348:	18ffffcc 	andi	r3,r3,65535
 401034c:	10bfffcc 	andi	r2,r2,65535
 4010350:	18800736 	bltu	r3,r2,4010370 <OSQPostOpt+0x154>
 4010354:	e0bffa17 	ldw	r2,-24(fp)
 4010358:	e0bff715 	stw	r2,-36(fp)
 401035c:	e0bff717 	ldw	r2,-36(fp)
 4010360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4010364:	00800784 	movi	r2,30
 4010368:	e0bfff15 	stw	r2,-4(fp)
 401036c:	00003206 	br	4010438 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4010370:	e0bffe03 	ldbu	r2,-8(fp)
 4010374:	1080008c 	andi	r2,r2,2
 4010378:	1005003a 	cmpeq	r2,r2,zero
 401037c:	1000131e 	bne	r2,zero,40103cc <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4010380:	e0bffb17 	ldw	r2,-20(fp)
 4010384:	10c00417 	ldw	r3,16(r2)
 4010388:	e0bffb17 	ldw	r2,-20(fp)
 401038c:	10800117 	ldw	r2,4(r2)
 4010390:	1880041e 	bne	r3,r2,40103a4 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4010394:	e0bffb17 	ldw	r2,-20(fp)
 4010398:	10c00217 	ldw	r3,8(r2)
 401039c:	e0bffb17 	ldw	r2,-20(fp)
 40103a0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 40103a4:	e0bffb17 	ldw	r2,-20(fp)
 40103a8:	10800417 	ldw	r2,16(r2)
 40103ac:	10ffff04 	addi	r3,r2,-4
 40103b0:	e0bffb17 	ldw	r2,-20(fp)
 40103b4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 40103b8:	e0bffb17 	ldw	r2,-20(fp)
 40103bc:	10c00417 	ldw	r3,16(r2)
 40103c0:	e0bffd17 	ldw	r2,-12(fp)
 40103c4:	18800015 	stw	r2,0(r3)
 40103c8:	00001006 	br	401040c <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 40103cc:	e0bffb17 	ldw	r2,-20(fp)
 40103d0:	10c00317 	ldw	r3,12(r2)
 40103d4:	e0bffd17 	ldw	r2,-12(fp)
 40103d8:	18800015 	stw	r2,0(r3)
 40103dc:	18c00104 	addi	r3,r3,4
 40103e0:	e0bffb17 	ldw	r2,-20(fp)
 40103e4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 40103e8:	e0bffb17 	ldw	r2,-20(fp)
 40103ec:	10c00317 	ldw	r3,12(r2)
 40103f0:	e0bffb17 	ldw	r2,-20(fp)
 40103f4:	10800217 	ldw	r2,8(r2)
 40103f8:	1880041e 	bne	r3,r2,401040c <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 40103fc:	e0bffb17 	ldw	r2,-20(fp)
 4010400:	10c00117 	ldw	r3,4(r2)
 4010404:	e0bffb17 	ldw	r2,-20(fp)
 4010408:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 401040c:	e0bffb17 	ldw	r2,-20(fp)
 4010410:	1080058b 	ldhu	r2,22(r2)
 4010414:	10800044 	addi	r2,r2,1
 4010418:	1007883a 	mov	r3,r2
 401041c:	e0bffb17 	ldw	r2,-20(fp)
 4010420:	10c0058d 	sth	r3,22(r2)
 4010424:	e0bffa17 	ldw	r2,-24(fp)
 4010428:	e0bff615 	stw	r2,-40(fp)
 401042c:	e0bff617 	ldw	r2,-40(fp)
 4010430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4010434:	e03fff15 	stw	zero,-4(fp)
 4010438:	e0bfff17 	ldw	r2,-4(fp)
}
 401043c:	e037883a 	mov	sp,fp
 4010440:	dfc00117 	ldw	ra,4(sp)
 4010444:	df000017 	ldw	fp,0(sp)
 4010448:	dec00204 	addi	sp,sp,8
 401044c:	f800283a 	ret

04010450 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4010450:	defff504 	addi	sp,sp,-44
 4010454:	df000a15 	stw	fp,40(sp)
 4010458:	df000a04 	addi	fp,sp,40
 401045c:	e13ffd15 	stw	r4,-12(fp)
 4010460:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4010464:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4010468:	e0bffd17 	ldw	r2,-12(fp)
 401046c:	1004c03a 	cmpne	r2,r2,zero
 4010470:	1000031e 	bne	r2,zero,4010480 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4010474:	00800104 	movi	r2,4
 4010478:	e0bfff15 	stw	r2,-4(fp)
 401047c:	00004f06 	br	40105bc <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4010480:	e0bffe17 	ldw	r2,-8(fp)
 4010484:	1004c03a 	cmpne	r2,r2,zero
 4010488:	1000031e 	bne	r2,zero,4010498 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 401048c:	00800244 	movi	r2,9
 4010490:	e0bfff15 	stw	r2,-4(fp)
 4010494:	00004906 	br	40105bc <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4010498:	e0bffd17 	ldw	r2,-12(fp)
 401049c:	10800003 	ldbu	r2,0(r2)
 40104a0:	10803fcc 	andi	r2,r2,255
 40104a4:	108000a0 	cmpeqi	r2,r2,2
 40104a8:	1000031e 	bne	r2,zero,40104b8 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 40104ac:	00800044 	movi	r2,1
 40104b0:	e0bfff15 	stw	r2,-4(fp)
 40104b4:	00004106 	br	40105bc <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40104b8:	0005303a 	rdctl	r2,status
 40104bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40104c0:	e0fff717 	ldw	r3,-36(fp)
 40104c4:	00bfff84 	movi	r2,-2
 40104c8:	1884703a 	and	r2,r3,r2
 40104cc:	1001703a 	wrctl	status,r2
  
  return context;
 40104d0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 40104d4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 40104d8:	e0bffd17 	ldw	r2,-12(fp)
 40104dc:	10c00283 	ldbu	r3,10(r2)
 40104e0:	e0bffe17 	ldw	r2,-8(fp)
 40104e4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 40104e8:	e0bffd17 	ldw	r2,-12(fp)
 40104ec:	108002c4 	addi	r2,r2,11
 40104f0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 40104f4:	e0bffe17 	ldw	r2,-8(fp)
 40104f8:	10800204 	addi	r2,r2,8
 40104fc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4010500:	e03ffb05 	stb	zero,-20(fp)
 4010504:	00000d06 	br	401053c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 4010508:	e0bffa17 	ldw	r2,-24(fp)
 401050c:	10c00003 	ldbu	r3,0(r2)
 4010510:	e0bff917 	ldw	r2,-28(fp)
 4010514:	10c00005 	stb	r3,0(r2)
 4010518:	e0bff917 	ldw	r2,-28(fp)
 401051c:	10800044 	addi	r2,r2,1
 4010520:	e0bff915 	stw	r2,-28(fp)
 4010524:	e0bffa17 	ldw	r2,-24(fp)
 4010528:	10800044 	addi	r2,r2,1
 401052c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4010530:	e0bffb03 	ldbu	r2,-20(fp)
 4010534:	10800044 	addi	r2,r2,1
 4010538:	e0bffb05 	stb	r2,-20(fp)
 401053c:	e0bffb03 	ldbu	r2,-20(fp)
 4010540:	108000f0 	cmpltui	r2,r2,3
 4010544:	103ff01e 	bne	r2,zero,4010508 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4010548:	e0bffd17 	ldw	r2,-12(fp)
 401054c:	10800117 	ldw	r2,4(r2)
 4010550:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4010554:	e0bffc17 	ldw	r2,-16(fp)
 4010558:	1080058b 	ldhu	r2,22(r2)
 401055c:	10bfffcc 	andi	r2,r2,65535
 4010560:	1005003a 	cmpeq	r2,r2,zero
 4010564:	1000061e 	bne	r2,zero,4010580 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4010568:	e0bffc17 	ldw	r2,-16(fp)
 401056c:	10800417 	ldw	r2,16(r2)
 4010570:	10c00017 	ldw	r3,0(r2)
 4010574:	e0bffe17 	ldw	r2,-8(fp)
 4010578:	10c00015 	stw	r3,0(r2)
 401057c:	00000206 	br	4010588 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 4010580:	e0bffe17 	ldw	r2,-8(fp)
 4010584:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4010588:	e0bffc17 	ldw	r2,-16(fp)
 401058c:	10c0058b 	ldhu	r3,22(r2)
 4010590:	e0bffe17 	ldw	r2,-8(fp)
 4010594:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4010598:	e0bffc17 	ldw	r2,-16(fp)
 401059c:	10c0050b 	ldhu	r3,20(r2)
 40105a0:	e0bffe17 	ldw	r2,-8(fp)
 40105a4:	10c0018d 	sth	r3,6(r2)
 40105a8:	e0bff817 	ldw	r2,-32(fp)
 40105ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40105b0:	e0bff617 	ldw	r2,-40(fp)
 40105b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40105b8:	e03fff15 	stw	zero,-4(fp)
 40105bc:	e0bfff17 	ldw	r2,-4(fp)
}
 40105c0:	e037883a 	mov	sp,fp
 40105c4:	df000017 	ldw	fp,0(sp)
 40105c8:	dec00104 	addi	sp,sp,4
 40105cc:	f800283a 	ret

040105d0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 40105d0:	defffb04 	addi	sp,sp,-20
 40105d4:	dfc00415 	stw	ra,16(sp)
 40105d8:	df000315 	stw	fp,12(sp)
 40105dc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 40105e0:	010100b4 	movhi	r4,1026
 40105e4:	21313904 	addi	r4,r4,-15132
 40105e8:	01407804 	movi	r5,480
 40105ec:	400c6e40 	call	400c6e4 <OS_MemClr>
    pq1 = &OSQTbl[0];
 40105f0:	008100b4 	movhi	r2,1026
 40105f4:	10b13904 	addi	r2,r2,-15132
 40105f8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 40105fc:	008100b4 	movhi	r2,1026
 4010600:	10b13f04 	addi	r2,r2,-15108
 4010604:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4010608:	e03fff0d 	sth	zero,-4(fp)
 401060c:	00000c06 	br	4010640 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4010610:	e0fffe17 	ldw	r3,-8(fp)
 4010614:	e0bffd17 	ldw	r2,-12(fp)
 4010618:	18800015 	stw	r2,0(r3)
        pq1++;
 401061c:	e0bffe17 	ldw	r2,-8(fp)
 4010620:	10800604 	addi	r2,r2,24
 4010624:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4010628:	e0bffd17 	ldw	r2,-12(fp)
 401062c:	10800604 	addi	r2,r2,24
 4010630:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4010634:	e0bfff0b 	ldhu	r2,-4(fp)
 4010638:	10800044 	addi	r2,r2,1
 401063c:	e0bfff0d 	sth	r2,-4(fp)
 4010640:	e0bfff0b 	ldhu	r2,-4(fp)
 4010644:	108004f0 	cmpltui	r2,r2,19
 4010648:	103ff11e 	bne	r2,zero,4010610 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 401064c:	e0bffe17 	ldw	r2,-8(fp)
 4010650:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4010654:	00c100b4 	movhi	r3,1026
 4010658:	18e2c304 	addi	r3,r3,-29940
 401065c:	008100b4 	movhi	r2,1026
 4010660:	10b13904 	addi	r2,r2,-15132
 4010664:	18800015 	stw	r2,0(r3)
#endif
}
 4010668:	e037883a 	mov	sp,fp
 401066c:	dfc00117 	ldw	ra,4(sp)
 4010670:	df000017 	ldw	fp,0(sp)
 4010674:	dec00204 	addi	sp,sp,8
 4010678:	f800283a 	ret

0401067c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 401067c:	defff904 	addi	sp,sp,-28
 4010680:	df000615 	stw	fp,24(sp)
 4010684:	df000604 	addi	fp,sp,24
 4010688:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401068c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010690:	e0bffe17 	ldw	r2,-8(fp)
 4010694:	1004c03a 	cmpne	r2,r2,zero
 4010698:	1000021e 	bne	r2,zero,40106a4 <OSSemAccept+0x28>
        return (0);
 401069c:	e03fff15 	stw	zero,-4(fp)
 40106a0:	00002106 	br	4010728 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40106a4:	e0bffe17 	ldw	r2,-8(fp)
 40106a8:	10800003 	ldbu	r2,0(r2)
 40106ac:	10803fcc 	andi	r2,r2,255
 40106b0:	108000e0 	cmpeqi	r2,r2,3
 40106b4:	1000021e 	bne	r2,zero,40106c0 <OSSemAccept+0x44>
        return (0);
 40106b8:	e03fff15 	stw	zero,-4(fp)
 40106bc:	00001a06 	br	4010728 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40106c0:	0005303a 	rdctl	r2,status
 40106c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40106c8:	e0fffb17 	ldw	r3,-20(fp)
 40106cc:	00bfff84 	movi	r2,-2
 40106d0:	1884703a 	and	r2,r3,r2
 40106d4:	1001703a 	wrctl	status,r2
  
  return context;
 40106d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 40106dc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 40106e0:	e0bffe17 	ldw	r2,-8(fp)
 40106e4:	1080020b 	ldhu	r2,8(r2)
 40106e8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 40106ec:	e0bffd0b 	ldhu	r2,-12(fp)
 40106f0:	1005003a 	cmpeq	r2,r2,zero
 40106f4:	1000061e 	bne	r2,zero,4010710 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 40106f8:	e0bffe17 	ldw	r2,-8(fp)
 40106fc:	1080020b 	ldhu	r2,8(r2)
 4010700:	10bfffc4 	addi	r2,r2,-1
 4010704:	1007883a 	mov	r3,r2
 4010708:	e0bffe17 	ldw	r2,-8(fp)
 401070c:	10c0020d 	sth	r3,8(r2)
 4010710:	e0bffc17 	ldw	r2,-16(fp)
 4010714:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010718:	e0bffa17 	ldw	r2,-24(fp)
 401071c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4010720:	e0bffd0b 	ldhu	r2,-12(fp)
 4010724:	e0bfff15 	stw	r2,-4(fp)
 4010728:	e0bfff17 	ldw	r2,-4(fp)
}
 401072c:	e037883a 	mov	sp,fp
 4010730:	df000017 	ldw	fp,0(sp)
 4010734:	dec00104 	addi	sp,sp,4
 4010738:	f800283a 	ret

0401073c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 401073c:	defff804 	addi	sp,sp,-32
 4010740:	dfc00715 	stw	ra,28(sp)
 4010744:	df000615 	stw	fp,24(sp)
 4010748:	df000604 	addi	fp,sp,24
 401074c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4010750:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4010754:	008100b4 	movhi	r2,1026
 4010758:	10a2c604 	addi	r2,r2,-29928
 401075c:	10800003 	ldbu	r2,0(r2)
 4010760:	10803fcc 	andi	r2,r2,255
 4010764:	1005003a 	cmpeq	r2,r2,zero
 4010768:	1000021e 	bne	r2,zero,4010774 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 401076c:	e03fff15 	stw	zero,-4(fp)
 4010770:	00003106 	br	4010838 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010774:	0005303a 	rdctl	r2,status
 4010778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401077c:	e0fffb17 	ldw	r3,-20(fp)
 4010780:	00bfff84 	movi	r2,-2
 4010784:	1884703a 	and	r2,r3,r2
 4010788:	1001703a 	wrctl	status,r2
  
  return context;
 401078c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4010790:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4010794:	008100b4 	movhi	r2,1026
 4010798:	10a2c504 	addi	r2,r2,-29932
 401079c:	10800017 	ldw	r2,0(r2)
 40107a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 40107a4:	008100b4 	movhi	r2,1026
 40107a8:	10a2c504 	addi	r2,r2,-29932
 40107ac:	10800017 	ldw	r2,0(r2)
 40107b0:	1005003a 	cmpeq	r2,r2,zero
 40107b4:	1000081e 	bne	r2,zero,40107d8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 40107b8:	008100b4 	movhi	r2,1026
 40107bc:	10a2c504 	addi	r2,r2,-29932
 40107c0:	10800017 	ldw	r2,0(r2)
 40107c4:	10800117 	ldw	r2,4(r2)
 40107c8:	1007883a 	mov	r3,r2
 40107cc:	008100b4 	movhi	r2,1026
 40107d0:	10a2c504 	addi	r2,r2,-29932
 40107d4:	10c00015 	stw	r3,0(r2)
 40107d8:	e0bffc17 	ldw	r2,-16(fp)
 40107dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40107e0:	e0bffa17 	ldw	r2,-24(fp)
 40107e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 40107e8:	e0bffd17 	ldw	r2,-12(fp)
 40107ec:	1005003a 	cmpeq	r2,r2,zero
 40107f0:	10000f1e 	bne	r2,zero,4010830 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 40107f4:	e0fffd17 	ldw	r3,-12(fp)
 40107f8:	008000c4 	movi	r2,3
 40107fc:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 4010800:	e0fffd17 	ldw	r3,-12(fp)
 4010804:	e0bffe0b 	ldhu	r2,-8(fp)
 4010808:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 401080c:	e0bffd17 	ldw	r2,-12(fp)
 4010810:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4010814:	e0fffd17 	ldw	r3,-12(fp)
 4010818:	00800fc4 	movi	r2,63
 401081c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4010820:	e0bffd17 	ldw	r2,-12(fp)
 4010824:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4010828:	e13ffd17 	ldw	r4,-12(fp)
 401082c:	400c3180 	call	400c318 <OS_EventWaitListInit>
    }
    return (pevent);
 4010830:	e0bffd17 	ldw	r2,-12(fp)
 4010834:	e0bfff15 	stw	r2,-4(fp)
 4010838:	e0bfff17 	ldw	r2,-4(fp)
}
 401083c:	e037883a 	mov	sp,fp
 4010840:	dfc00117 	ldw	ra,4(sp)
 4010844:	df000017 	ldw	fp,0(sp)
 4010848:	dec00204 	addi	sp,sp,8
 401084c:	f800283a 	ret

04010850 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4010850:	defff104 	addi	sp,sp,-60
 4010854:	dfc00e15 	stw	ra,56(sp)
 4010858:	df000d15 	stw	fp,52(sp)
 401085c:	df000d04 	addi	fp,sp,52
 4010860:	e13ffb15 	stw	r4,-20(fp)
 4010864:	e1bffd15 	stw	r6,-12(fp)
 4010868:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401086c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4010870:	e0bffd17 	ldw	r2,-12(fp)
 4010874:	1004c03a 	cmpne	r2,r2,zero
 4010878:	1000031e 	bne	r2,zero,4010888 <OSSemDel+0x38>
        return (pevent);
 401087c:	e0bffb17 	ldw	r2,-20(fp)
 4010880:	e0bfff15 	stw	r2,-4(fp)
 4010884:	00009406 	br	4010ad8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4010888:	e0bffb17 	ldw	r2,-20(fp)
 401088c:	1004c03a 	cmpne	r2,r2,zero
 4010890:	1000061e 	bne	r2,zero,40108ac <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 4010894:	e0fffd17 	ldw	r3,-12(fp)
 4010898:	00800104 	movi	r2,4
 401089c:	18800005 	stb	r2,0(r3)
        return (pevent);
 40108a0:	e0fffb17 	ldw	r3,-20(fp)
 40108a4:	e0ffff15 	stw	r3,-4(fp)
 40108a8:	00008b06 	br	4010ad8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 40108ac:	e0bffb17 	ldw	r2,-20(fp)
 40108b0:	10800003 	ldbu	r2,0(r2)
 40108b4:	10803fcc 	andi	r2,r2,255
 40108b8:	108000e0 	cmpeqi	r2,r2,3
 40108bc:	1000061e 	bne	r2,zero,40108d8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 40108c0:	e0fffd17 	ldw	r3,-12(fp)
 40108c4:	00800044 	movi	r2,1
 40108c8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40108cc:	e0bffb17 	ldw	r2,-20(fp)
 40108d0:	e0bfff15 	stw	r2,-4(fp)
 40108d4:	00008006 	br	4010ad8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40108d8:	008100b4 	movhi	r2,1026
 40108dc:	10a2c604 	addi	r2,r2,-29928
 40108e0:	10800003 	ldbu	r2,0(r2)
 40108e4:	10803fcc 	andi	r2,r2,255
 40108e8:	1005003a 	cmpeq	r2,r2,zero
 40108ec:	1000061e 	bne	r2,zero,4010908 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 40108f0:	e0fffd17 	ldw	r3,-12(fp)
 40108f4:	008003c4 	movi	r2,15
 40108f8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40108fc:	e0fffb17 	ldw	r3,-20(fp)
 4010900:	e0ffff15 	stw	r3,-4(fp)
 4010904:	00007406 	br	4010ad8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010908:	0005303a 	rdctl	r2,status
 401090c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010910:	e0fff717 	ldw	r3,-36(fp)
 4010914:	00bfff84 	movi	r2,-2
 4010918:	1884703a 	and	r2,r3,r2
 401091c:	1001703a 	wrctl	status,r2
  
  return context;
 4010920:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4010924:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4010928:	e0bffb17 	ldw	r2,-20(fp)
 401092c:	10800283 	ldbu	r2,10(r2)
 4010930:	10803fcc 	andi	r2,r2,255
 4010934:	1005003a 	cmpeq	r2,r2,zero
 4010938:	1000031e 	bne	r2,zero,4010948 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401093c:	00800044 	movi	r2,1
 4010940:	e0bffa05 	stb	r2,-24(fp)
 4010944:	00000106 	br	401094c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4010948:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 401094c:	e0bffc03 	ldbu	r2,-16(fp)
 4010950:	e0bffe15 	stw	r2,-8(fp)
 4010954:	e0fffe17 	ldw	r3,-8(fp)
 4010958:	1805003a 	cmpeq	r2,r3,zero
 401095c:	1000041e 	bne	r2,zero,4010970 <OSSemDel+0x120>
 4010960:	e0fffe17 	ldw	r3,-8(fp)
 4010964:	18800060 	cmpeqi	r2,r3,1
 4010968:	10002d1e 	bne	r2,zero,4010a20 <OSSemDel+0x1d0>
 401096c:	00004f06 	br	4010aac <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4010970:	e0bffa03 	ldbu	r2,-24(fp)
 4010974:	1004c03a 	cmpne	r2,r2,zero
 4010978:	10001a1e 	bne	r2,zero,40109e4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 401097c:	e0fffb17 	ldw	r3,-20(fp)
 4010980:	00800fc4 	movi	r2,63
 4010984:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4010988:	e0bffb17 	ldw	r2,-20(fp)
 401098c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4010990:	e0bffb17 	ldw	r2,-20(fp)
 4010994:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4010998:	008100b4 	movhi	r2,1026
 401099c:	10a2c504 	addi	r2,r2,-29932
 40109a0:	10c00017 	ldw	r3,0(r2)
 40109a4:	e0bffb17 	ldw	r2,-20(fp)
 40109a8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 40109ac:	e0bffb17 	ldw	r2,-20(fp)
 40109b0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 40109b4:	00c100b4 	movhi	r3,1026
 40109b8:	18e2c504 	addi	r3,r3,-29932
 40109bc:	e0bffb17 	ldw	r2,-20(fp)
 40109c0:	18800015 	stw	r2,0(r3)
 40109c4:	e0bff817 	ldw	r2,-32(fp)
 40109c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40109cc:	e0bff617 	ldw	r2,-40(fp)
 40109d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 40109d4:	e0bffd17 	ldw	r2,-12(fp)
 40109d8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 40109dc:	e03ff915 	stw	zero,-28(fp)
 40109e0:	00003b06 	br	4010ad0 <OSSemDel+0x280>
 40109e4:	e0bff817 	ldw	r2,-32(fp)
 40109e8:	e0bff515 	stw	r2,-44(fp)
 40109ec:	e0bff517 	ldw	r2,-44(fp)
 40109f0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40109f4:	e0fffd17 	ldw	r3,-12(fp)
 40109f8:	00801244 	movi	r2,73
 40109fc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 4010a00:	e0bffb17 	ldw	r2,-20(fp)
 4010a04:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 4010a08:	00003106 	br	4010ad0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4010a0c:	e13ffb17 	ldw	r4,-20(fp)
 4010a10:	000b883a 	mov	r5,zero
 4010a14:	01800044 	movi	r6,1
 4010a18:	000f883a 	mov	r7,zero
 4010a1c:	400bd640 	call	400bd64 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4010a20:	e0bffb17 	ldw	r2,-20(fp)
 4010a24:	10800283 	ldbu	r2,10(r2)
 4010a28:	10803fcc 	andi	r2,r2,255
 4010a2c:	1004c03a 	cmpne	r2,r2,zero
 4010a30:	103ff61e 	bne	r2,zero,4010a0c <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4010a34:	e0fffb17 	ldw	r3,-20(fp)
 4010a38:	00800fc4 	movi	r2,63
 4010a3c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4010a40:	e0bffb17 	ldw	r2,-20(fp)
 4010a44:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4010a48:	e0bffb17 	ldw	r2,-20(fp)
 4010a4c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4010a50:	008100b4 	movhi	r2,1026
 4010a54:	10a2c504 	addi	r2,r2,-29932
 4010a58:	10c00017 	ldw	r3,0(r2)
 4010a5c:	e0bffb17 	ldw	r2,-20(fp)
 4010a60:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4010a64:	e0bffb17 	ldw	r2,-20(fp)
 4010a68:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4010a6c:	00c100b4 	movhi	r3,1026
 4010a70:	18e2c504 	addi	r3,r3,-29932
 4010a74:	e0bffb17 	ldw	r2,-20(fp)
 4010a78:	18800015 	stw	r2,0(r3)
 4010a7c:	e0bff817 	ldw	r2,-32(fp)
 4010a80:	e0bff415 	stw	r2,-48(fp)
 4010a84:	e0bff417 	ldw	r2,-48(fp)
 4010a88:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4010a8c:	e0bffa03 	ldbu	r2,-24(fp)
 4010a90:	10800058 	cmpnei	r2,r2,1
 4010a94:	1000011e 	bne	r2,zero,4010a9c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4010a98:	400c7a40 	call	400c7a4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4010a9c:	e0bffd17 	ldw	r2,-12(fp)
 4010aa0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4010aa4:	e03ff915 	stw	zero,-28(fp)
             break;
 4010aa8:	00000906 	br	4010ad0 <OSSemDel+0x280>
 4010aac:	e0bff817 	ldw	r2,-32(fp)
 4010ab0:	e0bff315 	stw	r2,-52(fp)
 4010ab4:	e0bff317 	ldw	r2,-52(fp)
 4010ab8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4010abc:	e0fffd17 	ldw	r3,-12(fp)
 4010ac0:	008001c4 	movi	r2,7
 4010ac4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 4010ac8:	e0bffb17 	ldw	r2,-20(fp)
 4010acc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 4010ad0:	e0bff917 	ldw	r2,-28(fp)
 4010ad4:	e0bfff15 	stw	r2,-4(fp)
 4010ad8:	e0bfff17 	ldw	r2,-4(fp)
}
 4010adc:	e037883a 	mov	sp,fp
 4010ae0:	dfc00117 	ldw	ra,4(sp)
 4010ae4:	df000017 	ldw	fp,0(sp)
 4010ae8:	dec00204 	addi	sp,sp,8
 4010aec:	f800283a 	ret

04010af0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4010af0:	defff404 	addi	sp,sp,-48
 4010af4:	dfc00b15 	stw	ra,44(sp)
 4010af8:	df000a15 	stw	fp,40(sp)
 4010afc:	df000a04 	addi	fp,sp,40
 4010b00:	e13ffc15 	stw	r4,-16(fp)
 4010b04:	e1bffe15 	stw	r6,-8(fp)
 4010b08:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010b0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010b10:	e0bffe17 	ldw	r2,-8(fp)
 4010b14:	1005003a 	cmpeq	r2,r2,zero
 4010b18:	10008f1e 	bne	r2,zero,4010d58 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010b1c:	e0bffc17 	ldw	r2,-16(fp)
 4010b20:	1004c03a 	cmpne	r2,r2,zero
 4010b24:	1000041e 	bne	r2,zero,4010b38 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 4010b28:	e0fffe17 	ldw	r3,-8(fp)
 4010b2c:	00800104 	movi	r2,4
 4010b30:	18800005 	stb	r2,0(r3)
        return;
 4010b34:	00008806 	br	4010d58 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010b38:	e0bffc17 	ldw	r2,-16(fp)
 4010b3c:	10800003 	ldbu	r2,0(r2)
 4010b40:	10803fcc 	andi	r2,r2,255
 4010b44:	108000e0 	cmpeqi	r2,r2,3
 4010b48:	1000041e 	bne	r2,zero,4010b5c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4010b4c:	e0fffe17 	ldw	r3,-8(fp)
 4010b50:	00800044 	movi	r2,1
 4010b54:	18800005 	stb	r2,0(r3)
        return;
 4010b58:	00007f06 	br	4010d58 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4010b5c:	008100b4 	movhi	r2,1026
 4010b60:	10a2c604 	addi	r2,r2,-29928
 4010b64:	10800003 	ldbu	r2,0(r2)
 4010b68:	10803fcc 	andi	r2,r2,255
 4010b6c:	1005003a 	cmpeq	r2,r2,zero
 4010b70:	1000041e 	bne	r2,zero,4010b84 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4010b74:	e0fffe17 	ldw	r3,-8(fp)
 4010b78:	00800084 	movi	r2,2
 4010b7c:	18800005 	stb	r2,0(r3)
        return;
 4010b80:	00007506 	br	4010d58 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4010b84:	008100b4 	movhi	r2,1026
 4010b88:	10a2b7c4 	addi	r2,r2,-29985
 4010b8c:	10800003 	ldbu	r2,0(r2)
 4010b90:	10803fcc 	andi	r2,r2,255
 4010b94:	1005003a 	cmpeq	r2,r2,zero
 4010b98:	1000041e 	bne	r2,zero,4010bac <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4010b9c:	e0fffe17 	ldw	r3,-8(fp)
 4010ba0:	00800344 	movi	r2,13
 4010ba4:	18800005 	stb	r2,0(r3)
        return;
 4010ba8:	00006b06 	br	4010d58 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010bac:	0005303a 	rdctl	r2,status
 4010bb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010bb4:	e0fffa17 	ldw	r3,-24(fp)
 4010bb8:	00bfff84 	movi	r2,-2
 4010bbc:	1884703a 	and	r2,r3,r2
 4010bc0:	1001703a 	wrctl	status,r2
  
  return context;
 4010bc4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4010bc8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 4010bcc:	e0bffc17 	ldw	r2,-16(fp)
 4010bd0:	1080020b 	ldhu	r2,8(r2)
 4010bd4:	10bfffcc 	andi	r2,r2,65535
 4010bd8:	1005003a 	cmpeq	r2,r2,zero
 4010bdc:	10000d1e 	bne	r2,zero,4010c14 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4010be0:	e0bffc17 	ldw	r2,-16(fp)
 4010be4:	1080020b 	ldhu	r2,8(r2)
 4010be8:	10bfffc4 	addi	r2,r2,-1
 4010bec:	1007883a 	mov	r3,r2
 4010bf0:	e0bffc17 	ldw	r2,-16(fp)
 4010bf4:	10c0020d 	sth	r3,8(r2)
 4010bf8:	e0bffb17 	ldw	r2,-20(fp)
 4010bfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010c00:	e0bff917 	ldw	r2,-28(fp)
 4010c04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4010c08:	e0bffe17 	ldw	r2,-8(fp)
 4010c0c:	10000005 	stb	zero,0(r2)
        return;
 4010c10:	00005106 	br	4010d58 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4010c14:	008100b4 	movhi	r2,1026
 4010c18:	10a2c704 	addi	r2,r2,-29924
 4010c1c:	10c00017 	ldw	r3,0(r2)
 4010c20:	008100b4 	movhi	r2,1026
 4010c24:	10a2c704 	addi	r2,r2,-29924
 4010c28:	10800017 	ldw	r2,0(r2)
 4010c2c:	10800d03 	ldbu	r2,52(r2)
 4010c30:	10800054 	ori	r2,r2,1
 4010c34:	18800d05 	stb	r2,52(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4010c38:	008100b4 	movhi	r2,1026
 4010c3c:	10a2c704 	addi	r2,r2,-29924
 4010c40:	10800017 	ldw	r2,0(r2)
 4010c44:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4010c48:	008100b4 	movhi	r2,1026
 4010c4c:	10a2c704 	addi	r2,r2,-29924
 4010c50:	10c00017 	ldw	r3,0(r2)
 4010c54:	e0bffd0b 	ldhu	r2,-12(fp)
 4010c58:	18800c8d 	sth	r2,50(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4010c5c:	e13ffc17 	ldw	r4,-16(fp)
 4010c60:	400bef80 	call	400bef8 <OS_EventTaskWait>
 4010c64:	e0bffb17 	ldw	r2,-20(fp)
 4010c68:	e0bff815 	stw	r2,-32(fp)
 4010c6c:	e0bff817 	ldw	r2,-32(fp)
 4010c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4010c74:	400c7a40 	call	400c7a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010c78:	0005303a 	rdctl	r2,status
 4010c7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010c80:	e0fff717 	ldw	r3,-36(fp)
 4010c84:	00bfff84 	movi	r2,-2
 4010c88:	1884703a 	and	r2,r3,r2
 4010c8c:	1001703a 	wrctl	status,r2
  
  return context;
 4010c90:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 4010c94:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4010c98:	008100b4 	movhi	r2,1026
 4010c9c:	10a2c704 	addi	r2,r2,-29924
 4010ca0:	10800017 	ldw	r2,0(r2)
 4010ca4:	10800d43 	ldbu	r2,53(r2)
 4010ca8:	10803fcc 	andi	r2,r2,255
 4010cac:	e0bfff15 	stw	r2,-4(fp)
 4010cb0:	e0ffff17 	ldw	r3,-4(fp)
 4010cb4:	1805003a 	cmpeq	r2,r3,zero
 4010cb8:	1000041e 	bne	r2,zero,4010ccc <OSSemPend+0x1dc>
 4010cbc:	e0ffff17 	ldw	r3,-4(fp)
 4010cc0:	188000a0 	cmpeqi	r2,r3,2
 4010cc4:	1000041e 	bne	r2,zero,4010cd8 <OSSemPend+0x1e8>
 4010cc8:	00000706 	br	4010ce8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 4010ccc:	e0bffe17 	ldw	r2,-8(fp)
 4010cd0:	10000005 	stb	zero,0(r2)
             break;
 4010cd4:	00000c06 	br	4010d08 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4010cd8:	e0fffe17 	ldw	r3,-8(fp)
 4010cdc:	00800384 	movi	r2,14
 4010ce0:	18800005 	stb	r2,0(r3)
             break;
 4010ce4:	00000806 	br	4010d08 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 4010ce8:	008100b4 	movhi	r2,1026
 4010cec:	10a2c704 	addi	r2,r2,-29924
 4010cf0:	11000017 	ldw	r4,0(r2)
 4010cf4:	e17ffc17 	ldw	r5,-16(fp)
 4010cf8:	400c15c0 	call	400c15c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4010cfc:	e0fffe17 	ldw	r3,-8(fp)
 4010d00:	00800284 	movi	r2,10
 4010d04:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4010d08:	008100b4 	movhi	r2,1026
 4010d0c:	10a2c704 	addi	r2,r2,-29924
 4010d10:	10800017 	ldw	r2,0(r2)
 4010d14:	10000d05 	stb	zero,52(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4010d18:	008100b4 	movhi	r2,1026
 4010d1c:	10a2c704 	addi	r2,r2,-29924
 4010d20:	10800017 	ldw	r2,0(r2)
 4010d24:	10000d45 	stb	zero,53(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4010d28:	008100b4 	movhi	r2,1026
 4010d2c:	10a2c704 	addi	r2,r2,-29924
 4010d30:	10800017 	ldw	r2,0(r2)
 4010d34:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4010d38:	008100b4 	movhi	r2,1026
 4010d3c:	10a2c704 	addi	r2,r2,-29924
 4010d40:	10800017 	ldw	r2,0(r2)
 4010d44:	10000815 	stw	zero,32(r2)
 4010d48:	e0bffb17 	ldw	r2,-20(fp)
 4010d4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010d50:	e0bff617 	ldw	r2,-40(fp)
 4010d54:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 4010d58:	e037883a 	mov	sp,fp
 4010d5c:	dfc00117 	ldw	ra,4(sp)
 4010d60:	df000017 	ldw	fp,0(sp)
 4010d64:	dec00204 	addi	sp,sp,8
 4010d68:	f800283a 	ret

04010d6c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4010d6c:	defff504 	addi	sp,sp,-44
 4010d70:	dfc00a15 	stw	ra,40(sp)
 4010d74:	df000915 	stw	fp,36(sp)
 4010d78:	df000904 	addi	fp,sp,36
 4010d7c:	e13ffc15 	stw	r4,-16(fp)
 4010d80:	e1bffe15 	stw	r6,-8(fp)
 4010d84:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010d88:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010d8c:	e0bffe17 	ldw	r2,-8(fp)
 4010d90:	1004c03a 	cmpne	r2,r2,zero
 4010d94:	1000021e 	bne	r2,zero,4010da0 <OSSemPendAbort+0x34>
        return (0);
 4010d98:	e03fff15 	stw	zero,-4(fp)
 4010d9c:	00004c06 	br	4010ed0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010da0:	e0bffc17 	ldw	r2,-16(fp)
 4010da4:	1004c03a 	cmpne	r2,r2,zero
 4010da8:	1000051e 	bne	r2,zero,4010dc0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4010dac:	e0fffe17 	ldw	r3,-8(fp)
 4010db0:	00800104 	movi	r2,4
 4010db4:	18800005 	stb	r2,0(r3)
        return (0);
 4010db8:	e03fff15 	stw	zero,-4(fp)
 4010dbc:	00004406 	br	4010ed0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010dc0:	e0bffc17 	ldw	r2,-16(fp)
 4010dc4:	10800003 	ldbu	r2,0(r2)
 4010dc8:	10803fcc 	andi	r2,r2,255
 4010dcc:	108000e0 	cmpeqi	r2,r2,3
 4010dd0:	1000051e 	bne	r2,zero,4010de8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4010dd4:	e0fffe17 	ldw	r3,-8(fp)
 4010dd8:	00800044 	movi	r2,1
 4010ddc:	18800005 	stb	r2,0(r3)
        return (0);
 4010de0:	e03fff15 	stw	zero,-4(fp)
 4010de4:	00003a06 	br	4010ed0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010de8:	0005303a 	rdctl	r2,status
 4010dec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010df0:	e0fff917 	ldw	r3,-28(fp)
 4010df4:	00bfff84 	movi	r2,-2
 4010df8:	1884703a 	and	r2,r3,r2
 4010dfc:	1001703a 	wrctl	status,r2
  
  return context;
 4010e00:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4010e04:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 4010e08:	e0bffc17 	ldw	r2,-16(fp)
 4010e0c:	10800283 	ldbu	r2,10(r2)
 4010e10:	10803fcc 	andi	r2,r2,255
 4010e14:	1005003a 	cmpeq	r2,r2,zero
 4010e18:	1000261e 	bne	r2,zero,4010eb4 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 4010e1c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 4010e20:	e0bffd03 	ldbu	r2,-12(fp)
 4010e24:	10800060 	cmpeqi	r2,r2,1
 4010e28:	1000091e 	bne	r2,zero,4010e50 <OSSemPendAbort+0xe4>
 4010e2c:	00000e06 	br	4010e68 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4010e30:	e13ffc17 	ldw	r4,-16(fp)
 4010e34:	000b883a 	mov	r5,zero
 4010e38:	01800044 	movi	r6,1
 4010e3c:	01c00084 	movi	r7,2
 4010e40:	400bd640 	call	400bd64 <OS_EventTaskRdy>
                     nbr_tasks++;
 4010e44:	e0bffb03 	ldbu	r2,-20(fp)
 4010e48:	10800044 	addi	r2,r2,1
 4010e4c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4010e50:	e0bffc17 	ldw	r2,-16(fp)
 4010e54:	10800283 	ldbu	r2,10(r2)
 4010e58:	10803fcc 	andi	r2,r2,255
 4010e5c:	1004c03a 	cmpne	r2,r2,zero
 4010e60:	103ff31e 	bne	r2,zero,4010e30 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4010e64:	00000806 	br	4010e88 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4010e68:	e13ffc17 	ldw	r4,-16(fp)
 4010e6c:	000b883a 	mov	r5,zero
 4010e70:	01800044 	movi	r6,1
 4010e74:	01c00084 	movi	r7,2
 4010e78:	400bd640 	call	400bd64 <OS_EventTaskRdy>
                 nbr_tasks++;
 4010e7c:	e0bffb03 	ldbu	r2,-20(fp)
 4010e80:	10800044 	addi	r2,r2,1
 4010e84:	e0bffb05 	stb	r2,-20(fp)
 4010e88:	e0bffa17 	ldw	r2,-24(fp)
 4010e8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010e90:	e0bff817 	ldw	r2,-32(fp)
 4010e94:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4010e98:	400c7a40 	call	400c7a4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4010e9c:	e0fffe17 	ldw	r3,-8(fp)
 4010ea0:	00800384 	movi	r2,14
 4010ea4:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 4010ea8:	e0bffb03 	ldbu	r2,-20(fp)
 4010eac:	e0bfff15 	stw	r2,-4(fp)
 4010eb0:	00000706 	br	4010ed0 <OSSemPendAbort+0x164>
 4010eb4:	e0bffa17 	ldw	r2,-24(fp)
 4010eb8:	e0bff715 	stw	r2,-36(fp)
 4010ebc:	e0bff717 	ldw	r2,-36(fp)
 4010ec0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010ec4:	e0bffe17 	ldw	r2,-8(fp)
 4010ec8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4010ecc:	e03fff15 	stw	zero,-4(fp)
 4010ed0:	e0bfff17 	ldw	r2,-4(fp)
}
 4010ed4:	e037883a 	mov	sp,fp
 4010ed8:	dfc00117 	ldw	ra,4(sp)
 4010edc:	df000017 	ldw	fp,0(sp)
 4010ee0:	dec00204 	addi	sp,sp,8
 4010ee4:	f800283a 	ret

04010ee8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4010ee8:	defff704 	addi	sp,sp,-36
 4010eec:	dfc00815 	stw	ra,32(sp)
 4010ef0:	df000715 	stw	fp,28(sp)
 4010ef4:	df000704 	addi	fp,sp,28
 4010ef8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010efc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4010f00:	e0bffe17 	ldw	r2,-8(fp)
 4010f04:	1004c03a 	cmpne	r2,r2,zero
 4010f08:	1000031e 	bne	r2,zero,4010f18 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 4010f0c:	00800104 	movi	r2,4
 4010f10:	e0bfff15 	stw	r2,-4(fp)
 4010f14:	00003806 	br	4010ff8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4010f18:	e0bffe17 	ldw	r2,-8(fp)
 4010f1c:	10800003 	ldbu	r2,0(r2)
 4010f20:	10803fcc 	andi	r2,r2,255
 4010f24:	108000e0 	cmpeqi	r2,r2,3
 4010f28:	1000031e 	bne	r2,zero,4010f38 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 4010f2c:	00800044 	movi	r2,1
 4010f30:	e0bfff15 	stw	r2,-4(fp)
 4010f34:	00003006 	br	4010ff8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010f38:	0005303a 	rdctl	r2,status
 4010f3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010f40:	e0fffc17 	ldw	r3,-16(fp)
 4010f44:	00bfff84 	movi	r2,-2
 4010f48:	1884703a 	and	r2,r3,r2
 4010f4c:	1001703a 	wrctl	status,r2
  
  return context;
 4010f50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4010f54:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4010f58:	e0bffe17 	ldw	r2,-8(fp)
 4010f5c:	10800283 	ldbu	r2,10(r2)
 4010f60:	10803fcc 	andi	r2,r2,255
 4010f64:	1005003a 	cmpeq	r2,r2,zero
 4010f68:	10000c1e 	bne	r2,zero,4010f9c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4010f6c:	e13ffe17 	ldw	r4,-8(fp)
 4010f70:	000b883a 	mov	r5,zero
 4010f74:	01800044 	movi	r6,1
 4010f78:	000f883a 	mov	r7,zero
 4010f7c:	400bd640 	call	400bd64 <OS_EventTaskRdy>
 4010f80:	e0bffd17 	ldw	r2,-12(fp)
 4010f84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010f88:	e0bffb17 	ldw	r2,-20(fp)
 4010f8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4010f90:	400c7a40 	call	400c7a4 <OS_Sched>
        return (OS_ERR_NONE);
 4010f94:	e03fff15 	stw	zero,-4(fp)
 4010f98:	00001706 	br	4010ff8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4010f9c:	e0bffe17 	ldw	r2,-8(fp)
 4010fa0:	1080020b 	ldhu	r2,8(r2)
 4010fa4:	10ffffcc 	andi	r3,r2,65535
 4010fa8:	00bfffd4 	movui	r2,65535
 4010fac:	18800c26 	beq	r3,r2,4010fe0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4010fb0:	e0bffe17 	ldw	r2,-8(fp)
 4010fb4:	1080020b 	ldhu	r2,8(r2)
 4010fb8:	10800044 	addi	r2,r2,1
 4010fbc:	1007883a 	mov	r3,r2
 4010fc0:	e0bffe17 	ldw	r2,-8(fp)
 4010fc4:	10c0020d 	sth	r3,8(r2)
 4010fc8:	e0bffd17 	ldw	r2,-12(fp)
 4010fcc:	e0bffa15 	stw	r2,-24(fp)
 4010fd0:	e0bffa17 	ldw	r2,-24(fp)
 4010fd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4010fd8:	e03fff15 	stw	zero,-4(fp)
 4010fdc:	00000606 	br	4010ff8 <OSSemPost+0x110>
 4010fe0:	e0bffd17 	ldw	r2,-12(fp)
 4010fe4:	e0bff915 	stw	r2,-28(fp)
 4010fe8:	e0bff917 	ldw	r2,-28(fp)
 4010fec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4010ff0:	00800c84 	movi	r2,50
 4010ff4:	e0bfff15 	stw	r2,-4(fp)
 4010ff8:	e0bfff17 	ldw	r2,-4(fp)
}
 4010ffc:	e037883a 	mov	sp,fp
 4011000:	dfc00117 	ldw	ra,4(sp)
 4011004:	df000017 	ldw	fp,0(sp)
 4011008:	dec00204 	addi	sp,sp,8
 401100c:	f800283a 	ret

04011010 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4011010:	defff604 	addi	sp,sp,-40
 4011014:	df000915 	stw	fp,36(sp)
 4011018:	df000904 	addi	fp,sp,36
 401101c:	e13ffd15 	stw	r4,-12(fp)
 4011020:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4011024:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4011028:	e0bffd17 	ldw	r2,-12(fp)
 401102c:	1004c03a 	cmpne	r2,r2,zero
 4011030:	1000031e 	bne	r2,zero,4011040 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4011034:	00800104 	movi	r2,4
 4011038:	e0bfff15 	stw	r2,-4(fp)
 401103c:	00003b06 	br	401112c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4011040:	e0bffe17 	ldw	r2,-8(fp)
 4011044:	1004c03a 	cmpne	r2,r2,zero
 4011048:	1000031e 	bne	r2,zero,4011058 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 401104c:	00800244 	movi	r2,9
 4011050:	e0bfff15 	stw	r2,-4(fp)
 4011054:	00003506 	br	401112c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4011058:	e0bffd17 	ldw	r2,-12(fp)
 401105c:	10800003 	ldbu	r2,0(r2)
 4011060:	10803fcc 	andi	r2,r2,255
 4011064:	108000e0 	cmpeqi	r2,r2,3
 4011068:	1000031e 	bne	r2,zero,4011078 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 401106c:	00800044 	movi	r2,1
 4011070:	e0bfff15 	stw	r2,-4(fp)
 4011074:	00002d06 	br	401112c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011078:	0005303a 	rdctl	r2,status
 401107c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011080:	e0fff817 	ldw	r3,-32(fp)
 4011084:	00bfff84 	movi	r2,-2
 4011088:	1884703a 	and	r2,r3,r2
 401108c:	1001703a 	wrctl	status,r2
  
  return context;
 4011090:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4011094:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4011098:	e0bffd17 	ldw	r2,-12(fp)
 401109c:	10c00283 	ldbu	r3,10(r2)
 40110a0:	e0bffe17 	ldw	r2,-8(fp)
 40110a4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 40110a8:	e0bffd17 	ldw	r2,-12(fp)
 40110ac:	108002c4 	addi	r2,r2,11
 40110b0:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 40110b4:	e0bffe17 	ldw	r2,-8(fp)
 40110b8:	10800084 	addi	r2,r2,2
 40110bc:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40110c0:	e03ffa05 	stb	zero,-24(fp)
 40110c4:	00000d06 	br	40110fc <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 40110c8:	e0bffc17 	ldw	r2,-16(fp)
 40110cc:	10c00003 	ldbu	r3,0(r2)
 40110d0:	e0bffb17 	ldw	r2,-20(fp)
 40110d4:	10c00005 	stb	r3,0(r2)
 40110d8:	e0bffb17 	ldw	r2,-20(fp)
 40110dc:	10800044 	addi	r2,r2,1
 40110e0:	e0bffb15 	stw	r2,-20(fp)
 40110e4:	e0bffc17 	ldw	r2,-16(fp)
 40110e8:	10800044 	addi	r2,r2,1
 40110ec:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40110f0:	e0bffa03 	ldbu	r2,-24(fp)
 40110f4:	10800044 	addi	r2,r2,1
 40110f8:	e0bffa05 	stb	r2,-24(fp)
 40110fc:	e0bffa03 	ldbu	r2,-24(fp)
 4011100:	108000f0 	cmpltui	r2,r2,3
 4011104:	103ff01e 	bne	r2,zero,40110c8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4011108:	e0bffd17 	ldw	r2,-12(fp)
 401110c:	10c0020b 	ldhu	r3,8(r2)
 4011110:	e0bffe17 	ldw	r2,-8(fp)
 4011114:	10c0000d 	sth	r3,0(r2)
 4011118:	e0bff917 	ldw	r2,-28(fp)
 401111c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011120:	e0bff717 	ldw	r2,-36(fp)
 4011124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4011128:	e03fff15 	stw	zero,-4(fp)
 401112c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011130:	e037883a 	mov	sp,fp
 4011134:	df000017 	ldw	fp,0(sp)
 4011138:	dec00104 	addi	sp,sp,4
 401113c:	f800283a 	ret

04011140 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 4011140:	defff904 	addi	sp,sp,-28
 4011144:	df000615 	stw	fp,24(sp)
 4011148:	df000604 	addi	fp,sp,24
 401114c:	e13ffd15 	stw	r4,-12(fp)
 4011150:	e1bfff15 	stw	r6,-4(fp)
 4011154:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4011158:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401115c:	e0bfff17 	ldw	r2,-4(fp)
 4011160:	1005003a 	cmpeq	r2,r2,zero
 4011164:	1000331e 	bne	r2,zero,4011234 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011168:	e0bffd17 	ldw	r2,-12(fp)
 401116c:	1004c03a 	cmpne	r2,r2,zero
 4011170:	1000041e 	bne	r2,zero,4011184 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4011174:	e0ffff17 	ldw	r3,-4(fp)
 4011178:	00800104 	movi	r2,4
 401117c:	18800005 	stb	r2,0(r3)
        return;
 4011180:	00002c06 	br	4011234 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4011184:	e0bffd17 	ldw	r2,-12(fp)
 4011188:	10800003 	ldbu	r2,0(r2)
 401118c:	10803fcc 	andi	r2,r2,255
 4011190:	108000e0 	cmpeqi	r2,r2,3
 4011194:	1000041e 	bne	r2,zero,40111a8 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 4011198:	e0ffff17 	ldw	r3,-4(fp)
 401119c:	00800044 	movi	r2,1
 40111a0:	18800005 	stb	r2,0(r3)
        return;
 40111a4:	00002306 	br	4011234 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40111a8:	0005303a 	rdctl	r2,status
 40111ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40111b0:	e0fffb17 	ldw	r3,-20(fp)
 40111b4:	00bfff84 	movi	r2,-2
 40111b8:	1884703a 	and	r2,r3,r2
 40111bc:	1001703a 	wrctl	status,r2
  
  return context;
 40111c0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 40111c4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 40111c8:	e0bfff17 	ldw	r2,-4(fp)
 40111cc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 40111d0:	e0bffd17 	ldw	r2,-12(fp)
 40111d4:	1080020b 	ldhu	r2,8(r2)
 40111d8:	10bfffcc 	andi	r2,r2,65535
 40111dc:	1005003a 	cmpeq	r2,r2,zero
 40111e0:	1000041e 	bne	r2,zero,40111f4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 40111e4:	e0fffd17 	ldw	r3,-12(fp)
 40111e8:	e0bffe0b 	ldhu	r2,-8(fp)
 40111ec:	1880020d 	sth	r2,8(r3)
 40111f0:	00000c06 	br	4011224 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 40111f4:	e0bffd17 	ldw	r2,-12(fp)
 40111f8:	10800283 	ldbu	r2,10(r2)
 40111fc:	10803fcc 	andi	r2,r2,255
 4011200:	1004c03a 	cmpne	r2,r2,zero
 4011204:	1000041e 	bne	r2,zero,4011218 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4011208:	e0fffd17 	ldw	r3,-12(fp)
 401120c:	e0bffe0b 	ldhu	r2,-8(fp)
 4011210:	1880020d 	sth	r2,8(r3)
 4011214:	00000306 	br	4011224 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 4011218:	e0ffff17 	ldw	r3,-4(fp)
 401121c:	00801244 	movi	r2,73
 4011220:	18800005 	stb	r2,0(r3)
 4011224:	e0bffc17 	ldw	r2,-16(fp)
 4011228:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401122c:	e0bffa17 	ldw	r2,-24(fp)
 4011230:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 4011234:	e037883a 	mov	sp,fp
 4011238:	df000017 	ldw	fp,0(sp)
 401123c:	dec00104 	addi	sp,sp,4
 4011240:	f800283a 	ret

04011244 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 4011244:	defff004 	addi	sp,sp,-64
 4011248:	dfc00f15 	stw	ra,60(sp)
 401124c:	df000e15 	stw	fp,56(sp)
 4011250:	df000e04 	addi	fp,sp,56
 4011254:	e13ffd05 	stb	r4,-12(fp)
 4011258:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 401125c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 4011260:	e0bffd03 	ldbu	r2,-12(fp)
 4011264:	10800530 	cmpltui	r2,r2,20
 4011268:	1000061e 	bne	r2,zero,4011284 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 401126c:	e0bffd03 	ldbu	r2,-12(fp)
 4011270:	10803fe0 	cmpeqi	r2,r2,255
 4011274:	1000031e 	bne	r2,zero,4011284 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 4011278:	00800a84 	movi	r2,42
 401127c:	e0bfff15 	stw	r2,-4(fp)
 4011280:	00014706 	br	40117a0 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 4011284:	e0bffe03 	ldbu	r2,-8(fp)
 4011288:	10800530 	cmpltui	r2,r2,20
 401128c:	1000031e 	bne	r2,zero,401129c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 4011290:	00800a84 	movi	r2,42
 4011294:	e0bfff15 	stw	r2,-4(fp)
 4011298:	00014106 	br	40117a0 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401129c:	0005303a 	rdctl	r2,status
 40112a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40112a4:	e0fff617 	ldw	r3,-40(fp)
 40112a8:	00bfff84 	movi	r2,-2
 40112ac:	1884703a 	and	r2,r3,r2
 40112b0:	1001703a 	wrctl	status,r2
  
  return context;
 40112b4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40112b8:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 40112bc:	e0bffe03 	ldbu	r2,-8(fp)
 40112c0:	00c100b4 	movhi	r3,1026
 40112c4:	18f7d104 	addi	r3,r3,-8380
 40112c8:	1085883a 	add	r2,r2,r2
 40112cc:	1085883a 	add	r2,r2,r2
 40112d0:	10c5883a 	add	r2,r2,r3
 40112d4:	10800017 	ldw	r2,0(r2)
 40112d8:	1005003a 	cmpeq	r2,r2,zero
 40112dc:	1000071e 	bne	r2,zero,40112fc <OSTaskChangePrio+0xb8>
 40112e0:	e0bff717 	ldw	r2,-36(fp)
 40112e4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40112e8:	e0bff517 	ldw	r2,-44(fp)
 40112ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 40112f0:	00800a04 	movi	r2,40
 40112f4:	e0bfff15 	stw	r2,-4(fp)
 40112f8:	00012906 	br	40117a0 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 40112fc:	e0bffd03 	ldbu	r2,-12(fp)
 4011300:	10803fd8 	cmpnei	r2,r2,255
 4011304:	1000051e 	bne	r2,zero,401131c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 4011308:	008100b4 	movhi	r2,1026
 401130c:	10a2c704 	addi	r2,r2,-29924
 4011310:	10800017 	ldw	r2,0(r2)
 4011314:	10800d83 	ldbu	r2,54(r2)
 4011318:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 401131c:	e0bffd03 	ldbu	r2,-12(fp)
 4011320:	00c100b4 	movhi	r3,1026
 4011324:	18f7d104 	addi	r3,r3,-8380
 4011328:	1085883a 	add	r2,r2,r2
 401132c:	1085883a 	add	r2,r2,r2
 4011330:	10c5883a 	add	r2,r2,r3
 4011334:	10800017 	ldw	r2,0(r2)
 4011338:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 401133c:	e0bffa17 	ldw	r2,-24(fp)
 4011340:	1004c03a 	cmpne	r2,r2,zero
 4011344:	1000071e 	bne	r2,zero,4011364 <OSTaskChangePrio+0x120>
 4011348:	e0bff717 	ldw	r2,-36(fp)
 401134c:	e0bff415 	stw	r2,-48(fp)
 4011350:	e0bff417 	ldw	r2,-48(fp)
 4011354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 4011358:	00800a44 	movi	r2,41
 401135c:	e0bfff15 	stw	r2,-4(fp)
 4011360:	00010f06 	br	40117a0 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4011364:	e0bffa17 	ldw	r2,-24(fp)
 4011368:	10800058 	cmpnei	r2,r2,1
 401136c:	1000071e 	bne	r2,zero,401138c <OSTaskChangePrio+0x148>
 4011370:	e0bff717 	ldw	r2,-36(fp)
 4011374:	e0bff315 	stw	r2,-52(fp)
 4011378:	e0bff317 	ldw	r2,-52(fp)
 401137c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4011380:	008010c4 	movi	r2,67
 4011384:	e0bfff15 	stw	r2,-4(fp)
 4011388:	00010506 	br	40117a0 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 401138c:	e0bffe03 	ldbu	r2,-8(fp)
 4011390:	1004d0fa 	srli	r2,r2,3
 4011394:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4011398:	e0bffe03 	ldbu	r2,-8(fp)
 401139c:	108001cc 	andi	r2,r2,7
 40113a0:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 40113a4:	e0fff983 	ldbu	r3,-26(fp)
 40113a8:	00800044 	movi	r2,1
 40113ac:	10c4983a 	sll	r2,r2,r3
 40113b0:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 40113b4:	e0fff943 	ldbu	r3,-27(fp)
 40113b8:	00800044 	movi	r2,1
 40113bc:	10c4983a 	sll	r2,r2,r3
 40113c0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 40113c4:	e0bffd03 	ldbu	r2,-12(fp)
 40113c8:	00c100b4 	movhi	r3,1026
 40113cc:	18f7d104 	addi	r3,r3,-8380
 40113d0:	1085883a 	add	r2,r2,r2
 40113d4:	1085883a 	add	r2,r2,r2
 40113d8:	10c5883a 	add	r2,r2,r3
 40113dc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 40113e0:	e0bffe03 	ldbu	r2,-8(fp)
 40113e4:	00c100b4 	movhi	r3,1026
 40113e8:	18f7d104 	addi	r3,r3,-8380
 40113ec:	1085883a 	add	r2,r2,r2
 40113f0:	1085883a 	add	r2,r2,r2
 40113f4:	10c7883a 	add	r3,r2,r3
 40113f8:	e0bffa17 	ldw	r2,-24(fp)
 40113fc:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 4011400:	e0bffa17 	ldw	r2,-24(fp)
 4011404:	10800e03 	ldbu	r2,56(r2)
 4011408:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 401140c:	e0bffa17 	ldw	r2,-24(fp)
 4011410:	10800e83 	ldbu	r2,58(r2)
 4011414:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4011418:	e0bffa17 	ldw	r2,-24(fp)
 401141c:	10800e43 	ldbu	r2,57(r2)
 4011420:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4011424:	e0fff903 	ldbu	r3,-28(fp)
 4011428:	008100b4 	movhi	r2,1026
 401142c:	10a2c444 	addi	r2,r2,-29935
 4011430:	10c5883a 	add	r2,r2,r3
 4011434:	10c00003 	ldbu	r3,0(r2)
 4011438:	e0bff803 	ldbu	r2,-32(fp)
 401143c:	1884703a 	and	r2,r3,r2
 4011440:	10803fcc 	andi	r2,r2,255
 4011444:	1005003a 	cmpeq	r2,r2,zero
 4011448:	1000381e 	bne	r2,zero,401152c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 401144c:	e13ff903 	ldbu	r4,-28(fp)
 4011450:	e0fff903 	ldbu	r3,-28(fp)
 4011454:	008100b4 	movhi	r2,1026
 4011458:	10a2c444 	addi	r2,r2,-29935
 401145c:	10c5883a 	add	r2,r2,r3
 4011460:	10800003 	ldbu	r2,0(r2)
 4011464:	1007883a 	mov	r3,r2
 4011468:	e0bff803 	ldbu	r2,-32(fp)
 401146c:	0084303a 	nor	r2,zero,r2
 4011470:	1884703a 	and	r2,r3,r2
 4011474:	1007883a 	mov	r3,r2
 4011478:	008100b4 	movhi	r2,1026
 401147c:	10a2c444 	addi	r2,r2,-29935
 4011480:	1105883a 	add	r2,r2,r4
 4011484:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4011488:	e0fff903 	ldbu	r3,-28(fp)
 401148c:	008100b4 	movhi	r2,1026
 4011490:	10a2c444 	addi	r2,r2,-29935
 4011494:	10c5883a 	add	r2,r2,r3
 4011498:	10800003 	ldbu	r2,0(r2)
 401149c:	10803fcc 	andi	r2,r2,255
 40114a0:	1004c03a 	cmpne	r2,r2,zero
 40114a4:	10000b1e 	bne	r2,zero,40114d4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 40114a8:	e0bff843 	ldbu	r2,-31(fp)
 40114ac:	0084303a 	nor	r2,zero,r2
 40114b0:	1007883a 	mov	r3,r2
 40114b4:	008100b4 	movhi	r2,1026
 40114b8:	10a2c404 	addi	r2,r2,-29936
 40114bc:	10800003 	ldbu	r2,0(r2)
 40114c0:	1884703a 	and	r2,r3,r2
 40114c4:	1007883a 	mov	r3,r2
 40114c8:	008100b4 	movhi	r2,1026
 40114cc:	10a2c404 	addi	r2,r2,-29936
 40114d0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 40114d4:	008100b4 	movhi	r2,1026
 40114d8:	10a2c404 	addi	r2,r2,-29936
 40114dc:	10c00003 	ldbu	r3,0(r2)
 40114e0:	e0bff8c3 	ldbu	r2,-29(fp)
 40114e4:	1884b03a 	or	r2,r3,r2
 40114e8:	1007883a 	mov	r3,r2
 40114ec:	008100b4 	movhi	r2,1026
 40114f0:	10a2c404 	addi	r2,r2,-29936
 40114f4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 40114f8:	e13ff983 	ldbu	r4,-26(fp)
 40114fc:	e0fff983 	ldbu	r3,-26(fp)
 4011500:	008100b4 	movhi	r2,1026
 4011504:	10a2c444 	addi	r2,r2,-29935
 4011508:	10c5883a 	add	r2,r2,r3
 401150c:	10c00003 	ldbu	r3,0(r2)
 4011510:	e0bff883 	ldbu	r2,-30(fp)
 4011514:	1884b03a 	or	r2,r3,r2
 4011518:	1007883a 	mov	r3,r2
 401151c:	008100b4 	movhi	r2,1026
 4011520:	10a2c444 	addi	r2,r2,-29935
 4011524:	1105883a 	add	r2,r2,r4
 4011528:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 401152c:	e0bffa17 	ldw	r2,-24(fp)
 4011530:	10800717 	ldw	r2,28(r2)
 4011534:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 4011538:	e0bffc17 	ldw	r2,-16(fp)
 401153c:	1005003a 	cmpeq	r2,r2,zero
 4011540:	1000341e 	bne	r2,zero,4011614 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4011544:	e13ff903 	ldbu	r4,-28(fp)
 4011548:	e0fff903 	ldbu	r3,-28(fp)
 401154c:	e0bffc17 	ldw	r2,-16(fp)
 4011550:	1885883a 	add	r2,r3,r2
 4011554:	10800204 	addi	r2,r2,8
 4011558:	108000c3 	ldbu	r2,3(r2)
 401155c:	1007883a 	mov	r3,r2
 4011560:	e0bff803 	ldbu	r2,-32(fp)
 4011564:	0084303a 	nor	r2,zero,r2
 4011568:	1884703a 	and	r2,r3,r2
 401156c:	1007883a 	mov	r3,r2
 4011570:	e0bffc17 	ldw	r2,-16(fp)
 4011574:	2085883a 	add	r2,r4,r2
 4011578:	10800204 	addi	r2,r2,8
 401157c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4011580:	e0fff903 	ldbu	r3,-28(fp)
 4011584:	e0bffc17 	ldw	r2,-16(fp)
 4011588:	1885883a 	add	r2,r3,r2
 401158c:	10800204 	addi	r2,r2,8
 4011590:	108000c3 	ldbu	r2,3(r2)
 4011594:	10803fcc 	andi	r2,r2,255
 4011598:	1004c03a 	cmpne	r2,r2,zero
 401159c:	1000091e 	bne	r2,zero,40115c4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 40115a0:	e0bffc17 	ldw	r2,-16(fp)
 40115a4:	10800283 	ldbu	r2,10(r2)
 40115a8:	1007883a 	mov	r3,r2
 40115ac:	e0bff843 	ldbu	r2,-31(fp)
 40115b0:	0084303a 	nor	r2,zero,r2
 40115b4:	1884703a 	and	r2,r3,r2
 40115b8:	1007883a 	mov	r3,r2
 40115bc:	e0bffc17 	ldw	r2,-16(fp)
 40115c0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 40115c4:	e0bffc17 	ldw	r2,-16(fp)
 40115c8:	10c00283 	ldbu	r3,10(r2)
 40115cc:	e0bff8c3 	ldbu	r2,-29(fp)
 40115d0:	1884b03a 	or	r2,r3,r2
 40115d4:	1007883a 	mov	r3,r2
 40115d8:	e0bffc17 	ldw	r2,-16(fp)
 40115dc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 40115e0:	e13ff983 	ldbu	r4,-26(fp)
 40115e4:	e0fff983 	ldbu	r3,-26(fp)
 40115e8:	e0bffc17 	ldw	r2,-16(fp)
 40115ec:	1885883a 	add	r2,r3,r2
 40115f0:	10800204 	addi	r2,r2,8
 40115f4:	10c000c3 	ldbu	r3,3(r2)
 40115f8:	e0bff883 	ldbu	r2,-30(fp)
 40115fc:	1884b03a 	or	r2,r3,r2
 4011600:	1007883a 	mov	r3,r2
 4011604:	e0bffc17 	ldw	r2,-16(fp)
 4011608:	2085883a 	add	r2,r4,r2
 401160c:	10800204 	addi	r2,r2,8
 4011610:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4011614:	e0bffa17 	ldw	r2,-24(fp)
 4011618:	10800817 	ldw	r2,32(r2)
 401161c:	1005003a 	cmpeq	r2,r2,zero
 4011620:	1000441e 	bne	r2,zero,4011734 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4011624:	e0bffa17 	ldw	r2,-24(fp)
 4011628:	10800817 	ldw	r2,32(r2)
 401162c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 4011630:	e0bffb17 	ldw	r2,-20(fp)
 4011634:	10800017 	ldw	r2,0(r2)
 4011638:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 401163c:	00003a06 	br	4011728 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4011640:	e13ff903 	ldbu	r4,-28(fp)
 4011644:	e0fff903 	ldbu	r3,-28(fp)
 4011648:	e0bffc17 	ldw	r2,-16(fp)
 401164c:	1885883a 	add	r2,r3,r2
 4011650:	10800204 	addi	r2,r2,8
 4011654:	108000c3 	ldbu	r2,3(r2)
 4011658:	1007883a 	mov	r3,r2
 401165c:	e0bff803 	ldbu	r2,-32(fp)
 4011660:	0084303a 	nor	r2,zero,r2
 4011664:	1884703a 	and	r2,r3,r2
 4011668:	1007883a 	mov	r3,r2
 401166c:	e0bffc17 	ldw	r2,-16(fp)
 4011670:	2085883a 	add	r2,r4,r2
 4011674:	10800204 	addi	r2,r2,8
 4011678:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 401167c:	e0fff903 	ldbu	r3,-28(fp)
 4011680:	e0bffc17 	ldw	r2,-16(fp)
 4011684:	1885883a 	add	r2,r3,r2
 4011688:	10800204 	addi	r2,r2,8
 401168c:	108000c3 	ldbu	r2,3(r2)
 4011690:	10803fcc 	andi	r2,r2,255
 4011694:	1004c03a 	cmpne	r2,r2,zero
 4011698:	1000091e 	bne	r2,zero,40116c0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 401169c:	e0bffc17 	ldw	r2,-16(fp)
 40116a0:	10800283 	ldbu	r2,10(r2)
 40116a4:	1007883a 	mov	r3,r2
 40116a8:	e0bff843 	ldbu	r2,-31(fp)
 40116ac:	0084303a 	nor	r2,zero,r2
 40116b0:	1884703a 	and	r2,r3,r2
 40116b4:	1007883a 	mov	r3,r2
 40116b8:	e0bffc17 	ldw	r2,-16(fp)
 40116bc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 40116c0:	e0bffc17 	ldw	r2,-16(fp)
 40116c4:	10c00283 	ldbu	r3,10(r2)
 40116c8:	e0bff8c3 	ldbu	r2,-29(fp)
 40116cc:	1884b03a 	or	r2,r3,r2
 40116d0:	1007883a 	mov	r3,r2
 40116d4:	e0bffc17 	ldw	r2,-16(fp)
 40116d8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 40116dc:	e13ff983 	ldbu	r4,-26(fp)
 40116e0:	e0fff983 	ldbu	r3,-26(fp)
 40116e4:	e0bffc17 	ldw	r2,-16(fp)
 40116e8:	1885883a 	add	r2,r3,r2
 40116ec:	10800204 	addi	r2,r2,8
 40116f0:	10c000c3 	ldbu	r3,3(r2)
 40116f4:	e0bff883 	ldbu	r2,-30(fp)
 40116f8:	1884b03a 	or	r2,r3,r2
 40116fc:	1007883a 	mov	r3,r2
 4011700:	e0bffc17 	ldw	r2,-16(fp)
 4011704:	2085883a 	add	r2,r4,r2
 4011708:	10800204 	addi	r2,r2,8
 401170c:	10c000c5 	stb	r3,3(r2)
            pevents++;
 4011710:	e0bffb17 	ldw	r2,-20(fp)
 4011714:	10800104 	addi	r2,r2,4
 4011718:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 401171c:	e0bffb17 	ldw	r2,-20(fp)
 4011720:	10800017 	ldw	r2,0(r2)
 4011724:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4011728:	e0bffc17 	ldw	r2,-16(fp)
 401172c:	1004c03a 	cmpne	r2,r2,zero
 4011730:	103fc31e 	bne	r2,zero,4011640 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4011734:	e0fffa17 	ldw	r3,-24(fp)
 4011738:	e0bffe03 	ldbu	r2,-8(fp)
 401173c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBY    = y_new;
 4011740:	e0fffa17 	ldw	r3,-24(fp)
 4011744:	e0bff983 	ldbu	r2,-26(fp)
 4011748:	18800e05 	stb	r2,56(r3)
    ptcb->OSTCBX    = x_new;
 401174c:	e0fffa17 	ldw	r3,-24(fp)
 4011750:	e0bff943 	ldbu	r2,-27(fp)
 4011754:	18800dc5 	stb	r2,55(r3)
    ptcb->OSTCBBitY = bity_new;
 4011758:	e0fffa17 	ldw	r3,-24(fp)
 401175c:	e0bff8c3 	ldbu	r2,-29(fp)
 4011760:	18800e85 	stb	r2,58(r3)
    ptcb->OSTCBBitX = bitx_new;
 4011764:	e0fffa17 	ldw	r3,-24(fp)
 4011768:	e0bff883 	ldbu	r2,-30(fp)
 401176c:	18800e45 	stb	r2,57(r3)
 4011770:	e0bff717 	ldw	r2,-36(fp)
 4011774:	e0bff215 	stw	r2,-56(fp)
 4011778:	e0bff217 	ldw	r2,-56(fp)
 401177c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4011780:	008100b4 	movhi	r2,1026
 4011784:	10a2b804 	addi	r2,r2,-29984
 4011788:	10800003 	ldbu	r2,0(r2)
 401178c:	10803fcc 	andi	r2,r2,255
 4011790:	10800058 	cmpnei	r2,r2,1
 4011794:	1000011e 	bne	r2,zero,401179c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 4011798:	400c7a40 	call	400c7a4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 401179c:	e03fff15 	stw	zero,-4(fp)
 40117a0:	e0bfff17 	ldw	r2,-4(fp)
}
 40117a4:	e037883a 	mov	sp,fp
 40117a8:	dfc00117 	ldw	ra,4(sp)
 40117ac:	df000017 	ldw	fp,0(sp)
 40117b0:	dec00204 	addi	sp,sp,8
 40117b4:	f800283a 	ret

040117b8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 40117b8:	deffed04 	addi	sp,sp,-76
 40117bc:	dfc01215 	stw	ra,72(sp)
 40117c0:	df001115 	stw	fp,68(sp)
 40117c4:	df001104 	addi	fp,sp,68
 40117c8:	e13ffb15 	stw	r4,-20(fp)
 40117cc:	e17ffc15 	stw	r5,-16(fp)
 40117d0:	e1bffd15 	stw	r6,-12(fp)
 40117d4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 40117d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40117dc:	e0bffe03 	ldbu	r2,-8(fp)
 40117e0:	10800570 	cmpltui	r2,r2,21
 40117e4:	1000031e 	bne	r2,zero,40117f4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 40117e8:	00800a84 	movi	r2,42
 40117ec:	e0bfff15 	stw	r2,-4(fp)
 40117f0:	00006006 	br	4011974 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40117f4:	0005303a 	rdctl	r2,status
 40117f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40117fc:	e0fff717 	ldw	r3,-36(fp)
 4011800:	00bfff84 	movi	r2,-2
 4011804:	1884703a 	and	r2,r3,r2
 4011808:	1001703a 	wrctl	status,r2
  
  return context;
 401180c:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4011810:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4011814:	008100b4 	movhi	r2,1026
 4011818:	10a2c604 	addi	r2,r2,-29928
 401181c:	10800003 	ldbu	r2,0(r2)
 4011820:	10803fcc 	andi	r2,r2,255
 4011824:	1005003a 	cmpeq	r2,r2,zero
 4011828:	1000071e 	bne	r2,zero,4011848 <OSTaskCreate+0x90>
 401182c:	e0bff817 	ldw	r2,-32(fp)
 4011830:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011834:	e0bff617 	ldw	r2,-40(fp)
 4011838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 401183c:	00800f04 	movi	r2,60
 4011840:	e0bfff15 	stw	r2,-4(fp)
 4011844:	00004b06 	br	4011974 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4011848:	e0bffe03 	ldbu	r2,-8(fp)
 401184c:	00c100b4 	movhi	r3,1026
 4011850:	18f7d104 	addi	r3,r3,-8380
 4011854:	1085883a 	add	r2,r2,r2
 4011858:	1085883a 	add	r2,r2,r2
 401185c:	10c5883a 	add	r2,r2,r3
 4011860:	10800017 	ldw	r2,0(r2)
 4011864:	1004c03a 	cmpne	r2,r2,zero
 4011868:	10003c1e 	bne	r2,zero,401195c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 401186c:	e0bffe03 	ldbu	r2,-8(fp)
 4011870:	00c100b4 	movhi	r3,1026
 4011874:	18f7d104 	addi	r3,r3,-8380
 4011878:	1085883a 	add	r2,r2,r2
 401187c:	1085883a 	add	r2,r2,r2
 4011880:	10c7883a 	add	r3,r2,r3
 4011884:	00800044 	movi	r2,1
 4011888:	18800015 	stw	r2,0(r3)
 401188c:	e0bff817 	ldw	r2,-32(fp)
 4011890:	e0bff515 	stw	r2,-44(fp)
 4011894:	e0bff517 	ldw	r2,-44(fp)
 4011898:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 401189c:	e13ffb17 	ldw	r4,-20(fp)
 40118a0:	e17ffc17 	ldw	r5,-16(fp)
 40118a4:	e1bffd17 	ldw	r6,-12(fp)
 40118a8:	000f883a 	mov	r7,zero
 40118ac:	4015c440 	call	4015c44 <OSTaskStkInit>
 40118b0:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 40118b4:	e13ffe03 	ldbu	r4,-8(fp)
 40118b8:	d8000015 	stw	zero,0(sp)
 40118bc:	d8000115 	stw	zero,4(sp)
 40118c0:	d8000215 	stw	zero,8(sp)
 40118c4:	e17ffa17 	ldw	r5,-24(fp)
 40118c8:	000d883a 	mov	r6,zero
 40118cc:	000f883a 	mov	r7,zero
 40118d0:	400cd980 	call	400cd98 <OS_TCBInit>
 40118d4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 40118d8:	e0bff903 	ldbu	r2,-28(fp)
 40118dc:	1004c03a 	cmpne	r2,r2,zero
 40118e0:	1000081e 	bne	r2,zero,4011904 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 40118e4:	008100b4 	movhi	r2,1026
 40118e8:	10a2b804 	addi	r2,r2,-29984
 40118ec:	10800003 	ldbu	r2,0(r2)
 40118f0:	10803fcc 	andi	r2,r2,255
 40118f4:	10800058 	cmpnei	r2,r2,1
 40118f8:	1000151e 	bne	r2,zero,4011950 <OSTaskCreate+0x198>
                OS_Sched();
 40118fc:	400c7a40 	call	400c7a4 <OS_Sched>
 4011900:	00001306 	br	4011950 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011904:	0005303a 	rdctl	r2,status
 4011908:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401190c:	e0fff417 	ldw	r3,-48(fp)
 4011910:	00bfff84 	movi	r2,-2
 4011914:	1884703a 	and	r2,r3,r2
 4011918:	1001703a 	wrctl	status,r2
  
  return context;
 401191c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4011920:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 4011924:	e0bffe03 	ldbu	r2,-8(fp)
 4011928:	00c100b4 	movhi	r3,1026
 401192c:	18f7d104 	addi	r3,r3,-8380
 4011930:	1085883a 	add	r2,r2,r2
 4011934:	1085883a 	add	r2,r2,r2
 4011938:	10c5883a 	add	r2,r2,r3
 401193c:	10000015 	stw	zero,0(r2)
 4011940:	e0bff817 	ldw	r2,-32(fp)
 4011944:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011948:	e0bff317 	ldw	r2,-52(fp)
 401194c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4011950:	e0bff903 	ldbu	r2,-28(fp)
 4011954:	e0bfff15 	stw	r2,-4(fp)
 4011958:	00000606 	br	4011974 <OSTaskCreate+0x1bc>
 401195c:	e0bff817 	ldw	r2,-32(fp)
 4011960:	e0bff215 	stw	r2,-56(fp)
 4011964:	e0bff217 	ldw	r2,-56(fp)
 4011968:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 401196c:	00800a04 	movi	r2,40
 4011970:	e0bfff15 	stw	r2,-4(fp)
 4011974:	e0bfff17 	ldw	r2,-4(fp)
}
 4011978:	e037883a 	mov	sp,fp
 401197c:	dfc00117 	ldw	ra,4(sp)
 4011980:	df000017 	ldw	fp,0(sp)
 4011984:	dec00204 	addi	sp,sp,8
 4011988:	f800283a 	ret

0401198c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 401198c:	deffeb04 	addi	sp,sp,-84
 4011990:	dfc01415 	stw	ra,80(sp)
 4011994:	df001315 	stw	fp,76(sp)
 4011998:	df001304 	addi	fp,sp,76
 401199c:	e13ff915 	stw	r4,-28(fp)
 40119a0:	e17ffa15 	stw	r5,-24(fp)
 40119a4:	e1bffb15 	stw	r6,-20(fp)
 40119a8:	e0800217 	ldw	r2,8(fp)
 40119ac:	e0c00617 	ldw	r3,24(fp)
 40119b0:	e1fffc05 	stb	r7,-16(fp)
 40119b4:	e0bffd0d 	sth	r2,-12(fp)
 40119b8:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 40119bc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40119c0:	e0bffc03 	ldbu	r2,-16(fp)
 40119c4:	10800570 	cmpltui	r2,r2,21
 40119c8:	1000031e 	bne	r2,zero,40119d8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 40119cc:	00800a84 	movi	r2,42
 40119d0:	e0bfff15 	stw	r2,-4(fp)
 40119d4:	00006706 	br	4011b74 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40119d8:	0005303a 	rdctl	r2,status
 40119dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40119e0:	e0fff517 	ldw	r3,-44(fp)
 40119e4:	00bfff84 	movi	r2,-2
 40119e8:	1884703a 	and	r2,r3,r2
 40119ec:	1001703a 	wrctl	status,r2
  
  return context;
 40119f0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40119f4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 40119f8:	008100b4 	movhi	r2,1026
 40119fc:	10a2c604 	addi	r2,r2,-29928
 4011a00:	10800003 	ldbu	r2,0(r2)
 4011a04:	10803fcc 	andi	r2,r2,255
 4011a08:	1005003a 	cmpeq	r2,r2,zero
 4011a0c:	1000071e 	bne	r2,zero,4011a2c <OSTaskCreateExt+0xa0>
 4011a10:	e0bff617 	ldw	r2,-40(fp)
 4011a14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011a18:	e0bff417 	ldw	r2,-48(fp)
 4011a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4011a20:	00800f04 	movi	r2,60
 4011a24:	e0bfff15 	stw	r2,-4(fp)
 4011a28:	00005206 	br	4011b74 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4011a2c:	e0bffc03 	ldbu	r2,-16(fp)
 4011a30:	00c100b4 	movhi	r3,1026
 4011a34:	18f7d104 	addi	r3,r3,-8380
 4011a38:	1085883a 	add	r2,r2,r2
 4011a3c:	1085883a 	add	r2,r2,r2
 4011a40:	10c5883a 	add	r2,r2,r3
 4011a44:	10800017 	ldw	r2,0(r2)
 4011a48:	1004c03a 	cmpne	r2,r2,zero
 4011a4c:	1000431e 	bne	r2,zero,4011b5c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4011a50:	e0bffc03 	ldbu	r2,-16(fp)
 4011a54:	00c100b4 	movhi	r3,1026
 4011a58:	18f7d104 	addi	r3,r3,-8380
 4011a5c:	1085883a 	add	r2,r2,r2
 4011a60:	1085883a 	add	r2,r2,r2
 4011a64:	10c7883a 	add	r3,r2,r3
 4011a68:	00800044 	movi	r2,1
 4011a6c:	18800015 	stw	r2,0(r3)
 4011a70:	e0bff617 	ldw	r2,-40(fp)
 4011a74:	e0bff315 	stw	r2,-52(fp)
 4011a78:	e0bff317 	ldw	r2,-52(fp)
 4011a7c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 4011a80:	e1bffe0b 	ldhu	r6,-8(fp)
 4011a84:	e1000317 	ldw	r4,12(fp)
 4011a88:	e1400417 	ldw	r5,16(fp)
 4011a8c:	4012c080 	call	4012c08 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 4011a90:	e1fffe0b 	ldhu	r7,-8(fp)
 4011a94:	e13ff917 	ldw	r4,-28(fp)
 4011a98:	e17ffa17 	ldw	r5,-24(fp)
 4011a9c:	e1bffb17 	ldw	r6,-20(fp)
 4011aa0:	4015c440 	call	4015c44 <OSTaskStkInit>
 4011aa4:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 4011aa8:	e13ffc03 	ldbu	r4,-16(fp)
 4011aac:	e1fffd0b 	ldhu	r7,-12(fp)
 4011ab0:	e0fffe0b 	ldhu	r3,-8(fp)
 4011ab4:	e0800417 	ldw	r2,16(fp)
 4011ab8:	d8800015 	stw	r2,0(sp)
 4011abc:	e0800517 	ldw	r2,20(fp)
 4011ac0:	d8800115 	stw	r2,4(sp)
 4011ac4:	d8c00215 	stw	r3,8(sp)
 4011ac8:	e17ff817 	ldw	r5,-32(fp)
 4011acc:	e1800317 	ldw	r6,12(fp)
 4011ad0:	400cd980 	call	400cd98 <OS_TCBInit>
 4011ad4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 4011ad8:	e0bff703 	ldbu	r2,-36(fp)
 4011adc:	1004c03a 	cmpne	r2,r2,zero
 4011ae0:	1000081e 	bne	r2,zero,4011b04 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 4011ae4:	008100b4 	movhi	r2,1026
 4011ae8:	10a2b804 	addi	r2,r2,-29984
 4011aec:	10800003 	ldbu	r2,0(r2)
 4011af0:	10803fcc 	andi	r2,r2,255
 4011af4:	10800058 	cmpnei	r2,r2,1
 4011af8:	1000151e 	bne	r2,zero,4011b50 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 4011afc:	400c7a40 	call	400c7a4 <OS_Sched>
 4011b00:	00001306 	br	4011b50 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011b04:	0005303a 	rdctl	r2,status
 4011b08:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011b0c:	e0fff217 	ldw	r3,-56(fp)
 4011b10:	00bfff84 	movi	r2,-2
 4011b14:	1884703a 	and	r2,r3,r2
 4011b18:	1001703a 	wrctl	status,r2
  
  return context;
 4011b1c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4011b20:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 4011b24:	e0bffc03 	ldbu	r2,-16(fp)
 4011b28:	00c100b4 	movhi	r3,1026
 4011b2c:	18f7d104 	addi	r3,r3,-8380
 4011b30:	1085883a 	add	r2,r2,r2
 4011b34:	1085883a 	add	r2,r2,r2
 4011b38:	10c5883a 	add	r2,r2,r3
 4011b3c:	10000015 	stw	zero,0(r2)
 4011b40:	e0bff617 	ldw	r2,-40(fp)
 4011b44:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011b48:	e0bff117 	ldw	r2,-60(fp)
 4011b4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4011b50:	e0bff703 	ldbu	r2,-36(fp)
 4011b54:	e0bfff15 	stw	r2,-4(fp)
 4011b58:	00000606 	br	4011b74 <OSTaskCreateExt+0x1e8>
 4011b5c:	e0bff617 	ldw	r2,-40(fp)
 4011b60:	e0bff015 	stw	r2,-64(fp)
 4011b64:	e0bff017 	ldw	r2,-64(fp)
 4011b68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4011b6c:	00800a04 	movi	r2,40
 4011b70:	e0bfff15 	stw	r2,-4(fp)
 4011b74:	e0bfff17 	ldw	r2,-4(fp)
}
 4011b78:	e037883a 	mov	sp,fp
 4011b7c:	dfc00117 	ldw	ra,4(sp)
 4011b80:	df000017 	ldw	fp,0(sp)
 4011b84:	dec00204 	addi	sp,sp,8
 4011b88:	f800283a 	ret

04011b8c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 4011b8c:	defff304 	addi	sp,sp,-52
 4011b90:	dfc00c15 	stw	ra,48(sp)
 4011b94:	df000b15 	stw	fp,44(sp)
 4011b98:	df000b04 	addi	fp,sp,44
 4011b9c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 4011ba0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 4011ba4:	008100b4 	movhi	r2,1026
 4011ba8:	10a2c604 	addi	r2,r2,-29928
 4011bac:	10800003 	ldbu	r2,0(r2)
 4011bb0:	10803fcc 	andi	r2,r2,255
 4011bb4:	1005003a 	cmpeq	r2,r2,zero
 4011bb8:	1000031e 	bne	r2,zero,4011bc8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 4011bbc:	00801004 	movi	r2,64
 4011bc0:	e0bfff15 	stw	r2,-4(fp)
 4011bc4:	0000ee06 	br	4011f80 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4011bc8:	e0bffe03 	ldbu	r2,-8(fp)
 4011bcc:	10800518 	cmpnei	r2,r2,20
 4011bd0:	1000031e 	bne	r2,zero,4011be0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 4011bd4:	00800f84 	movi	r2,62
 4011bd8:	e0bfff15 	stw	r2,-4(fp)
 4011bdc:	0000e806 	br	4011f80 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 4011be0:	e0bffe03 	ldbu	r2,-8(fp)
 4011be4:	10800530 	cmpltui	r2,r2,20
 4011be8:	1000061e 	bne	r2,zero,4011c04 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 4011bec:	e0bffe03 	ldbu	r2,-8(fp)
 4011bf0:	10803fe0 	cmpeqi	r2,r2,255
 4011bf4:	1000031e 	bne	r2,zero,4011c04 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 4011bf8:	00800a84 	movi	r2,42
 4011bfc:	e0bfff15 	stw	r2,-4(fp)
 4011c00:	0000df06 	br	4011f80 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011c04:	0005303a 	rdctl	r2,status
 4011c08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011c0c:	e0fffa17 	ldw	r3,-24(fp)
 4011c10:	00bfff84 	movi	r2,-2
 4011c14:	1884703a 	and	r2,r3,r2
 4011c18:	1001703a 	wrctl	status,r2
  
  return context;
 4011c1c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4011c20:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 4011c24:	e0bffe03 	ldbu	r2,-8(fp)
 4011c28:	10803fd8 	cmpnei	r2,r2,255
 4011c2c:	1000051e 	bne	r2,zero,4011c44 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 4011c30:	008100b4 	movhi	r2,1026
 4011c34:	10a2c704 	addi	r2,r2,-29924
 4011c38:	10800017 	ldw	r2,0(r2)
 4011c3c:	10800d83 	ldbu	r2,54(r2)
 4011c40:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4011c44:	e0bffe03 	ldbu	r2,-8(fp)
 4011c48:	00c100b4 	movhi	r3,1026
 4011c4c:	18f7d104 	addi	r3,r3,-8380
 4011c50:	1085883a 	add	r2,r2,r2
 4011c54:	1085883a 	add	r2,r2,r2
 4011c58:	10c5883a 	add	r2,r2,r3
 4011c5c:	10800017 	ldw	r2,0(r2)
 4011c60:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 4011c64:	e0bffc17 	ldw	r2,-16(fp)
 4011c68:	1004c03a 	cmpne	r2,r2,zero
 4011c6c:	1000071e 	bne	r2,zero,4011c8c <OSTaskDel+0x100>
 4011c70:	e0bffb17 	ldw	r2,-20(fp)
 4011c74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011c78:	e0bff917 	ldw	r2,-28(fp)
 4011c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4011c80:	008010c4 	movi	r2,67
 4011c84:	e0bfff15 	stw	r2,-4(fp)
 4011c88:	0000bd06 	br	4011f80 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 4011c8c:	e0bffc17 	ldw	r2,-16(fp)
 4011c90:	10800058 	cmpnei	r2,r2,1
 4011c94:	1000071e 	bne	r2,zero,4011cb4 <OSTaskDel+0x128>
 4011c98:	e0bffb17 	ldw	r2,-20(fp)
 4011c9c:	e0bff815 	stw	r2,-32(fp)
 4011ca0:	e0bff817 	ldw	r2,-32(fp)
 4011ca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4011ca8:	00800f44 	movi	r2,61
 4011cac:	e0bfff15 	stw	r2,-4(fp)
 4011cb0:	0000b306 	br	4011f80 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 4011cb4:	e0bffc17 	ldw	r2,-16(fp)
 4011cb8:	10800e03 	ldbu	r2,56(r2)
 4011cbc:	11003fcc 	andi	r4,r2,255
 4011cc0:	e0bffc17 	ldw	r2,-16(fp)
 4011cc4:	10800e03 	ldbu	r2,56(r2)
 4011cc8:	10c03fcc 	andi	r3,r2,255
 4011ccc:	008100b4 	movhi	r2,1026
 4011cd0:	10a2c444 	addi	r2,r2,-29935
 4011cd4:	10c5883a 	add	r2,r2,r3
 4011cd8:	10800003 	ldbu	r2,0(r2)
 4011cdc:	1007883a 	mov	r3,r2
 4011ce0:	e0bffc17 	ldw	r2,-16(fp)
 4011ce4:	10800e43 	ldbu	r2,57(r2)
 4011ce8:	0084303a 	nor	r2,zero,r2
 4011cec:	1884703a 	and	r2,r3,r2
 4011cf0:	1007883a 	mov	r3,r2
 4011cf4:	008100b4 	movhi	r2,1026
 4011cf8:	10a2c444 	addi	r2,r2,-29935
 4011cfc:	1105883a 	add	r2,r2,r4
 4011d00:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 4011d04:	e0bffc17 	ldw	r2,-16(fp)
 4011d08:	10800e03 	ldbu	r2,56(r2)
 4011d0c:	10c03fcc 	andi	r3,r2,255
 4011d10:	008100b4 	movhi	r2,1026
 4011d14:	10a2c444 	addi	r2,r2,-29935
 4011d18:	10c5883a 	add	r2,r2,r3
 4011d1c:	10800003 	ldbu	r2,0(r2)
 4011d20:	10803fcc 	andi	r2,r2,255
 4011d24:	1004c03a 	cmpne	r2,r2,zero
 4011d28:	10000c1e 	bne	r2,zero,4011d5c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 4011d2c:	e0bffc17 	ldw	r2,-16(fp)
 4011d30:	10800e83 	ldbu	r2,58(r2)
 4011d34:	0084303a 	nor	r2,zero,r2
 4011d38:	1007883a 	mov	r3,r2
 4011d3c:	008100b4 	movhi	r2,1026
 4011d40:	10a2c404 	addi	r2,r2,-29936
 4011d44:	10800003 	ldbu	r2,0(r2)
 4011d48:	1884703a 	and	r2,r3,r2
 4011d4c:	1007883a 	mov	r3,r2
 4011d50:	008100b4 	movhi	r2,1026
 4011d54:	10a2c404 	addi	r2,r2,-29936
 4011d58:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 4011d5c:	e0bffc17 	ldw	r2,-16(fp)
 4011d60:	10800717 	ldw	r2,28(r2)
 4011d64:	1005003a 	cmpeq	r2,r2,zero
 4011d68:	1000041e 	bne	r2,zero,4011d7c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 4011d6c:	e0bffc17 	ldw	r2,-16(fp)
 4011d70:	11400717 	ldw	r5,28(r2)
 4011d74:	e13ffc17 	ldw	r4,-16(fp)
 4011d78:	400c15c0 	call	400c15c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 4011d7c:	e0bffc17 	ldw	r2,-16(fp)
 4011d80:	10800817 	ldw	r2,32(r2)
 4011d84:	1005003a 	cmpeq	r2,r2,zero
 4011d88:	1000041e 	bne	r2,zero,4011d9c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4011d8c:	e0bffc17 	ldw	r2,-16(fp)
 4011d90:	11400817 	ldw	r5,32(r2)
 4011d94:	e13ffc17 	ldw	r4,-16(fp)
 4011d98:	400c2140 	call	400c214 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 4011d9c:	e0bffc17 	ldw	r2,-16(fp)
 4011da0:	10800a17 	ldw	r2,40(r2)
 4011da4:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 4011da8:	e0bffd17 	ldw	r2,-12(fp)
 4011dac:	1005003a 	cmpeq	r2,r2,zero
 4011db0:	1000021e 	bne	r2,zero,4011dbc <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 4011db4:	e13ffd17 	ldw	r4,-12(fp)
 4011db8:	400ea940 	call	400ea94 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 4011dbc:	e0bffc17 	ldw	r2,-16(fp)
 4011dc0:	10000c8d 	sth	zero,50(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 4011dc4:	e0bffc17 	ldw	r2,-16(fp)
 4011dc8:	10000d05 	stb	zero,52(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4011dcc:	e0bffc17 	ldw	r2,-16(fp)
 4011dd0:	10000d45 	stb	zero,53(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 4011dd4:	008100b4 	movhi	r2,1026
 4011dd8:	10a2b7c4 	addi	r2,r2,-29985
 4011ddc:	10800003 	ldbu	r2,0(r2)
 4011de0:	10803fcc 	andi	r2,r2,255
 4011de4:	10803fe0 	cmpeqi	r2,r2,255
 4011de8:	1000081e 	bne	r2,zero,4011e0c <OSTaskDel+0x280>
        OSLockNesting++;
 4011dec:	008100b4 	movhi	r2,1026
 4011df0:	10a2b7c4 	addi	r2,r2,-29985
 4011df4:	10800003 	ldbu	r2,0(r2)
 4011df8:	10800044 	addi	r2,r2,1
 4011dfc:	1007883a 	mov	r3,r2
 4011e00:	008100b4 	movhi	r2,1026
 4011e04:	10a2b7c4 	addi	r2,r2,-29985
 4011e08:	10c00005 	stb	r3,0(r2)
 4011e0c:	e0bffb17 	ldw	r2,-20(fp)
 4011e10:	e0bff715 	stw	r2,-36(fp)
 4011e14:	e0bff717 	ldw	r2,-36(fp)
 4011e18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 4011e1c:	400bd480 	call	400bd48 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011e20:	0005303a 	rdctl	r2,status
 4011e24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e28:	e0fff617 	ldw	r3,-40(fp)
 4011e2c:	00bfff84 	movi	r2,-2
 4011e30:	1884703a 	and	r2,r3,r2
 4011e34:	1001703a 	wrctl	status,r2
  
  return context;
 4011e38:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 4011e3c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4011e40:	008100b4 	movhi	r2,1026
 4011e44:	10a2b7c4 	addi	r2,r2,-29985
 4011e48:	10800003 	ldbu	r2,0(r2)
 4011e4c:	10803fcc 	andi	r2,r2,255
 4011e50:	1005003a 	cmpeq	r2,r2,zero
 4011e54:	1000081e 	bne	r2,zero,4011e78 <OSTaskDel+0x2ec>
        OSLockNesting--;
 4011e58:	008100b4 	movhi	r2,1026
 4011e5c:	10a2b7c4 	addi	r2,r2,-29985
 4011e60:	10800003 	ldbu	r2,0(r2)
 4011e64:	10bfffc4 	addi	r2,r2,-1
 4011e68:	1007883a 	mov	r3,r2
 4011e6c:	008100b4 	movhi	r2,1026
 4011e70:	10a2b7c4 	addi	r2,r2,-29985
 4011e74:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 4011e78:	e13ffc17 	ldw	r4,-16(fp)
 4011e7c:	4015f740 	call	4015f74 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 4011e80:	008100b4 	movhi	r2,1026
 4011e84:	10a2c044 	addi	r2,r2,-29951
 4011e88:	10800003 	ldbu	r2,0(r2)
 4011e8c:	10bfffc4 	addi	r2,r2,-1
 4011e90:	1007883a 	mov	r3,r2
 4011e94:	008100b4 	movhi	r2,1026
 4011e98:	10a2c044 	addi	r2,r2,-29951
 4011e9c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 4011ea0:	e0bffe03 	ldbu	r2,-8(fp)
 4011ea4:	00c100b4 	movhi	r3,1026
 4011ea8:	18f7d104 	addi	r3,r3,-8380
 4011eac:	1085883a 	add	r2,r2,r2
 4011eb0:	1085883a 	add	r2,r2,r2
 4011eb4:	10c5883a 	add	r2,r2,r3
 4011eb8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 4011ebc:	e0bffc17 	ldw	r2,-16(fp)
 4011ec0:	10800617 	ldw	r2,24(r2)
 4011ec4:	1004c03a 	cmpne	r2,r2,zero
 4011ec8:	1000091e 	bne	r2,zero,4011ef0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 4011ecc:	e0bffc17 	ldw	r2,-16(fp)
 4011ed0:	10800517 	ldw	r2,20(r2)
 4011ed4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 4011ed8:	e0bffc17 	ldw	r2,-16(fp)
 4011edc:	10c00517 	ldw	r3,20(r2)
 4011ee0:	008100b4 	movhi	r2,1026
 4011ee4:	10a2bb04 	addi	r2,r2,-29972
 4011ee8:	10c00015 	stw	r3,0(r2)
 4011eec:	00000a06 	br	4011f18 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4011ef0:	e0bffc17 	ldw	r2,-16(fp)
 4011ef4:	10c00617 	ldw	r3,24(r2)
 4011ef8:	e0bffc17 	ldw	r2,-16(fp)
 4011efc:	10800517 	ldw	r2,20(r2)
 4011f00:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 4011f04:	e0bffc17 	ldw	r2,-16(fp)
 4011f08:	10c00517 	ldw	r3,20(r2)
 4011f0c:	e0bffc17 	ldw	r2,-16(fp)
 4011f10:	10800617 	ldw	r2,24(r2)
 4011f14:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 4011f18:	008100b4 	movhi	r2,1026
 4011f1c:	10a2bf04 	addi	r2,r2,-29956
 4011f20:	10c00017 	ldw	r3,0(r2)
 4011f24:	e0bffc17 	ldw	r2,-16(fp)
 4011f28:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 4011f2c:	00c100b4 	movhi	r3,1026
 4011f30:	18e2bf04 	addi	r3,r3,-29956
 4011f34:	e0bffc17 	ldw	r2,-16(fp)
 4011f38:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 4011f3c:	e0fffc17 	ldw	r3,-16(fp)
 4011f40:	00800fc4 	movi	r2,63
 4011f44:	18801405 	stb	r2,80(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4011f48:	e0bffc17 	ldw	r2,-16(fp)
 4011f4c:	10001445 	stb	zero,81(r2)
 4011f50:	e0bffb17 	ldw	r2,-20(fp)
 4011f54:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011f58:	e0bff517 	ldw	r2,-44(fp)
 4011f5c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4011f60:	008100b4 	movhi	r2,1026
 4011f64:	10a2b804 	addi	r2,r2,-29984
 4011f68:	10800003 	ldbu	r2,0(r2)
 4011f6c:	10803fcc 	andi	r2,r2,255
 4011f70:	10800058 	cmpnei	r2,r2,1
 4011f74:	1000011e 	bne	r2,zero,4011f7c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 4011f78:	400c7a40 	call	400c7a4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4011f7c:	e03fff15 	stw	zero,-4(fp)
 4011f80:	e0bfff17 	ldw	r2,-4(fp)
}
 4011f84:	e037883a 	mov	sp,fp
 4011f88:	dfc00117 	ldw	ra,4(sp)
 4011f8c:	df000017 	ldw	fp,0(sp)
 4011f90:	dec00204 	addi	sp,sp,8
 4011f94:	f800283a 	ret

04011f98 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 4011f98:	defff404 	addi	sp,sp,-48
 4011f9c:	df000b15 	stw	fp,44(sp)
 4011fa0:	df000b04 	addi	fp,sp,44
 4011fa4:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4011fa8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 4011fac:	e0bffe03 	ldbu	r2,-8(fp)
 4011fb0:	10800518 	cmpnei	r2,r2,20
 4011fb4:	1000031e 	bne	r2,zero,4011fc4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 4011fb8:	00800f84 	movi	r2,62
 4011fbc:	e0bfff15 	stw	r2,-4(fp)
 4011fc0:	00004c06 	br	40120f4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4011fc4:	e0bffe03 	ldbu	r2,-8(fp)
 4011fc8:	10800530 	cmpltui	r2,r2,20
 4011fcc:	1000061e 	bne	r2,zero,4011fe8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 4011fd0:	e0bffe03 	ldbu	r2,-8(fp)
 4011fd4:	10803fe0 	cmpeqi	r2,r2,255
 4011fd8:	1000031e 	bne	r2,zero,4011fe8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 4011fdc:	00800a84 	movi	r2,42
 4011fe0:	e0bfff15 	stw	r2,-4(fp)
 4011fe4:	00004306 	br	40120f4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 4011fe8:	e0bffe03 	ldbu	r2,-8(fp)
 4011fec:	10803fd8 	cmpnei	r2,r2,255
 4011ff0:	1000141e 	bne	r2,zero,4012044 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ff4:	0005303a 	rdctl	r2,status
 4011ff8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011ffc:	e0fffa17 	ldw	r3,-24(fp)
 4012000:	00bfff84 	movi	r2,-2
 4012004:	1884703a 	and	r2,r3,r2
 4012008:	1001703a 	wrctl	status,r2
  
  return context;
 401200c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 4012010:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 4012014:	008100b4 	movhi	r2,1026
 4012018:	10a2c704 	addi	r2,r2,-29924
 401201c:	10800017 	ldw	r2,0(r2)
 4012020:	10800ec3 	ldbu	r2,59(r2)
 4012024:	e0bffd05 	stb	r2,-12(fp)
 4012028:	e0bffb17 	ldw	r2,-20(fp)
 401202c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012030:	e0bff917 	ldw	r2,-28(fp)
 4012034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 4012038:	e0bffd03 	ldbu	r2,-12(fp)
 401203c:	e0bfff15 	stw	r2,-4(fp)
 4012040:	00002c06 	br	40120f4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012044:	0005303a 	rdctl	r2,status
 4012048:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401204c:	e0fff817 	ldw	r3,-32(fp)
 4012050:	00bfff84 	movi	r2,-2
 4012054:	1884703a 	and	r2,r3,r2
 4012058:	1001703a 	wrctl	status,r2
  
  return context;
 401205c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4012060:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 4012064:	e0bffe03 	ldbu	r2,-8(fp)
 4012068:	00c100b4 	movhi	r3,1026
 401206c:	18f7d104 	addi	r3,r3,-8380
 4012070:	1085883a 	add	r2,r2,r2
 4012074:	1085883a 	add	r2,r2,r2
 4012078:	10c5883a 	add	r2,r2,r3
 401207c:	10800017 	ldw	r2,0(r2)
 4012080:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 4012084:	e0bffc17 	ldw	r2,-16(fp)
 4012088:	1004c03a 	cmpne	r2,r2,zero
 401208c:	1000071e 	bne	r2,zero,40120ac <OSTaskDelReq+0x114>
 4012090:	e0bffb17 	ldw	r2,-20(fp)
 4012094:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012098:	e0bff717 	ldw	r2,-36(fp)
 401209c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 40120a0:	008010c4 	movi	r2,67
 40120a4:	e0bfff15 	stw	r2,-4(fp)
 40120a8:	00001206 	br	40120f4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 40120ac:	e0bffc17 	ldw	r2,-16(fp)
 40120b0:	10800058 	cmpnei	r2,r2,1
 40120b4:	1000071e 	bne	r2,zero,40120d4 <OSTaskDelReq+0x13c>
 40120b8:	e0bffb17 	ldw	r2,-20(fp)
 40120bc:	e0bff615 	stw	r2,-40(fp)
 40120c0:	e0bff617 	ldw	r2,-40(fp)
 40120c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 40120c8:	00800f44 	movi	r2,61
 40120cc:	e0bfff15 	stw	r2,-4(fp)
 40120d0:	00000806 	br	40120f4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 40120d4:	e0fffc17 	ldw	r3,-16(fp)
 40120d8:	00800fc4 	movi	r2,63
 40120dc:	18800ec5 	stb	r2,59(r3)
 40120e0:	e0bffb17 	ldw	r2,-20(fp)
 40120e4:	e0bff515 	stw	r2,-44(fp)
 40120e8:	e0bff517 	ldw	r2,-44(fp)
 40120ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40120f0:	e03fff15 	stw	zero,-4(fp)
 40120f4:	e0bfff17 	ldw	r2,-4(fp)
}
 40120f8:	e037883a 	mov	sp,fp
 40120fc:	df000017 	ldw	fp,0(sp)
 4012100:	dec00104 	addi	sp,sp,4
 4012104:	f800283a 	ret

04012108 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4012108:	defff304 	addi	sp,sp,-52
 401210c:	dfc00c15 	stw	ra,48(sp)
 4012110:	df000b15 	stw	fp,44(sp)
 4012114:	df000b04 	addi	fp,sp,44
 4012118:	e17ffd15 	stw	r5,-12(fp)
 401211c:	e1bffe15 	stw	r6,-8(fp)
 4012120:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 4012124:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4012128:	e0bffe17 	ldw	r2,-8(fp)
 401212c:	1004c03a 	cmpne	r2,r2,zero
 4012130:	1000021e 	bne	r2,zero,401213c <OSTaskNameGet+0x34>
        return (0);
 4012134:	e03fff15 	stw	zero,-4(fp)
 4012138:	00005b06 	br	40122a8 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 401213c:	e0bffc03 	ldbu	r2,-16(fp)
 4012140:	10800570 	cmpltui	r2,r2,21
 4012144:	1000081e 	bne	r2,zero,4012168 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 4012148:	e0bffc03 	ldbu	r2,-16(fp)
 401214c:	10803fe0 	cmpeqi	r2,r2,255
 4012150:	1000051e 	bne	r2,zero,4012168 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 4012154:	e0fffe17 	ldw	r3,-8(fp)
 4012158:	00800a84 	movi	r2,42
 401215c:	18800005 	stb	r2,0(r3)
            return (0);
 4012160:	e03fff15 	stw	zero,-4(fp)
 4012164:	00005006 	br	40122a8 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 4012168:	e0bffd17 	ldw	r2,-12(fp)
 401216c:	1004c03a 	cmpne	r2,r2,zero
 4012170:	1000051e 	bne	r2,zero,4012188 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 4012174:	e0fffe17 	ldw	r3,-8(fp)
 4012178:	00800304 	movi	r2,12
 401217c:	18800005 	stb	r2,0(r3)
        return (0);
 4012180:	e03fff15 	stw	zero,-4(fp)
 4012184:	00004806 	br	40122a8 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 4012188:	008100b4 	movhi	r2,1026
 401218c:	10a2c604 	addi	r2,r2,-29928
 4012190:	10800003 	ldbu	r2,0(r2)
 4012194:	10803fcc 	andi	r2,r2,255
 4012198:	1005003a 	cmpeq	r2,r2,zero
 401219c:	1000051e 	bne	r2,zero,40121b4 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 40121a0:	e0fffe17 	ldw	r3,-8(fp)
 40121a4:	00800444 	movi	r2,17
 40121a8:	18800005 	stb	r2,0(r3)
        return (0);
 40121ac:	e03fff15 	stw	zero,-4(fp)
 40121b0:	00003d06 	br	40122a8 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40121b4:	0005303a 	rdctl	r2,status
 40121b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40121bc:	e0fff817 	ldw	r3,-32(fp)
 40121c0:	00bfff84 	movi	r2,-2
 40121c4:	1884703a 	and	r2,r3,r2
 40121c8:	1001703a 	wrctl	status,r2
  
  return context;
 40121cc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 40121d0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 40121d4:	e0bffc03 	ldbu	r2,-16(fp)
 40121d8:	10803fd8 	cmpnei	r2,r2,255
 40121dc:	1000051e 	bne	r2,zero,40121f4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 40121e0:	008100b4 	movhi	r2,1026
 40121e4:	10a2c704 	addi	r2,r2,-29924
 40121e8:	10800017 	ldw	r2,0(r2)
 40121ec:	10800d83 	ldbu	r2,54(r2)
 40121f0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40121f4:	e0bffc03 	ldbu	r2,-16(fp)
 40121f8:	00c100b4 	movhi	r3,1026
 40121fc:	18f7d104 	addi	r3,r3,-8380
 4012200:	1085883a 	add	r2,r2,r2
 4012204:	1085883a 	add	r2,r2,r2
 4012208:	10c5883a 	add	r2,r2,r3
 401220c:	10800017 	ldw	r2,0(r2)
 4012210:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 4012214:	e0bffb17 	ldw	r2,-20(fp)
 4012218:	1004c03a 	cmpne	r2,r2,zero
 401221c:	1000091e 	bne	r2,zero,4012244 <OSTaskNameGet+0x13c>
 4012220:	e0bff917 	ldw	r2,-28(fp)
 4012224:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012228:	e0bff717 	ldw	r2,-36(fp)
 401222c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4012230:	e0fffe17 	ldw	r3,-8(fp)
 4012234:	008010c4 	movi	r2,67
 4012238:	18800005 	stb	r2,0(r3)
        return (0);
 401223c:	e03fff15 	stw	zero,-4(fp)
 4012240:	00001906 	br	40122a8 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4012244:	e0bffb17 	ldw	r2,-20(fp)
 4012248:	10800058 	cmpnei	r2,r2,1
 401224c:	1000091e 	bne	r2,zero,4012274 <OSTaskNameGet+0x16c>
 4012250:	e0bff917 	ldw	r2,-28(fp)
 4012254:	e0bff615 	stw	r2,-40(fp)
 4012258:	e0bff617 	ldw	r2,-40(fp)
 401225c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4012260:	e0fffe17 	ldw	r3,-8(fp)
 4012264:	008010c4 	movi	r2,67
 4012268:	18800005 	stb	r2,0(r3)
        return (0);
 401226c:	e03fff15 	stw	zero,-4(fp)
 4012270:	00000d06 	br	40122a8 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 4012274:	e0bffb17 	ldw	r2,-20(fp)
 4012278:	11401404 	addi	r5,r2,80
 401227c:	e13ffd17 	ldw	r4,-12(fp)
 4012280:	400cad40 	call	400cad4 <OS_StrCopy>
 4012284:	e0bffa05 	stb	r2,-24(fp)
 4012288:	e0bff917 	ldw	r2,-28(fp)
 401228c:	e0bff515 	stw	r2,-44(fp)
 4012290:	e0bff517 	ldw	r2,-44(fp)
 4012294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012298:	e0bffe17 	ldw	r2,-8(fp)
 401229c:	10000005 	stb	zero,0(r2)
    return (len);
 40122a0:	e0bffa03 	ldbu	r2,-24(fp)
 40122a4:	e0bfff15 	stw	r2,-4(fp)
 40122a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40122ac:	e037883a 	mov	sp,fp
 40122b0:	dfc00117 	ldw	ra,4(sp)
 40122b4:	df000017 	ldw	fp,0(sp)
 40122b8:	dec00204 	addi	sp,sp,8
 40122bc:	f800283a 	ret

040122c0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 40122c0:	defff304 	addi	sp,sp,-52
 40122c4:	dfc00c15 	stw	ra,48(sp)
 40122c8:	df000b15 	stw	fp,44(sp)
 40122cc:	df000b04 	addi	fp,sp,44
 40122d0:	e17ffe15 	stw	r5,-8(fp)
 40122d4:	e1bfff15 	stw	r6,-4(fp)
 40122d8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 40122dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 40122e0:	e0bfff17 	ldw	r2,-4(fp)
 40122e4:	1005003a 	cmpeq	r2,r2,zero
 40122e8:	1000611e 	bne	r2,zero,4012470 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 40122ec:	e0bffd03 	ldbu	r2,-12(fp)
 40122f0:	10800570 	cmpltui	r2,r2,21
 40122f4:	1000071e 	bne	r2,zero,4012314 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 40122f8:	e0bffd03 	ldbu	r2,-12(fp)
 40122fc:	10803fe0 	cmpeqi	r2,r2,255
 4012300:	1000041e 	bne	r2,zero,4012314 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 4012304:	e0ffff17 	ldw	r3,-4(fp)
 4012308:	00800a84 	movi	r2,42
 401230c:	18800005 	stb	r2,0(r3)
            return;
 4012310:	00005706 	br	4012470 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 4012314:	e0bffe17 	ldw	r2,-8(fp)
 4012318:	1004c03a 	cmpne	r2,r2,zero
 401231c:	1000041e 	bne	r2,zero,4012330 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 4012320:	e0ffff17 	ldw	r3,-4(fp)
 4012324:	00800304 	movi	r2,12
 4012328:	18800005 	stb	r2,0(r3)
        return;
 401232c:	00005006 	br	4012470 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 4012330:	008100b4 	movhi	r2,1026
 4012334:	10a2c604 	addi	r2,r2,-29928
 4012338:	10800003 	ldbu	r2,0(r2)
 401233c:	10803fcc 	andi	r2,r2,255
 4012340:	1005003a 	cmpeq	r2,r2,zero
 4012344:	1000041e 	bne	r2,zero,4012358 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 4012348:	e0ffff17 	ldw	r3,-4(fp)
 401234c:	00800484 	movi	r2,18
 4012350:	18800005 	stb	r2,0(r3)
        return;
 4012354:	00004606 	br	4012470 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012358:	0005303a 	rdctl	r2,status
 401235c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012360:	e0fff917 	ldw	r3,-28(fp)
 4012364:	00bfff84 	movi	r2,-2
 4012368:	1884703a 	and	r2,r3,r2
 401236c:	1001703a 	wrctl	status,r2
  
  return context;
 4012370:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4012374:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 4012378:	e0bffd03 	ldbu	r2,-12(fp)
 401237c:	10803fd8 	cmpnei	r2,r2,255
 4012380:	1000051e 	bne	r2,zero,4012398 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 4012384:	008100b4 	movhi	r2,1026
 4012388:	10a2c704 	addi	r2,r2,-29924
 401238c:	10800017 	ldw	r2,0(r2)
 4012390:	10800d83 	ldbu	r2,54(r2)
 4012394:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012398:	e0bffd03 	ldbu	r2,-12(fp)
 401239c:	00c100b4 	movhi	r3,1026
 40123a0:	18f7d104 	addi	r3,r3,-8380
 40123a4:	1085883a 	add	r2,r2,r2
 40123a8:	1085883a 	add	r2,r2,r2
 40123ac:	10c5883a 	add	r2,r2,r3
 40123b0:	10800017 	ldw	r2,0(r2)
 40123b4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 40123b8:	e0bffb17 	ldw	r2,-20(fp)
 40123bc:	1004c03a 	cmpne	r2,r2,zero
 40123c0:	1000081e 	bne	r2,zero,40123e4 <OSTaskNameSet+0x124>
 40123c4:	e0bffa17 	ldw	r2,-24(fp)
 40123c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40123cc:	e0bff817 	ldw	r2,-32(fp)
 40123d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 40123d4:	e0ffff17 	ldw	r3,-4(fp)
 40123d8:	008010c4 	movi	r2,67
 40123dc:	18800005 	stb	r2,0(r3)
        return;
 40123e0:	00002306 	br	4012470 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 40123e4:	e0bffb17 	ldw	r2,-20(fp)
 40123e8:	10800058 	cmpnei	r2,r2,1
 40123ec:	1000081e 	bne	r2,zero,4012410 <OSTaskNameSet+0x150>
 40123f0:	e0bffa17 	ldw	r2,-24(fp)
 40123f4:	e0bff715 	stw	r2,-36(fp)
 40123f8:	e0bff717 	ldw	r2,-36(fp)
 40123fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4012400:	e0ffff17 	ldw	r3,-4(fp)
 4012404:	008010c4 	movi	r2,67
 4012408:	18800005 	stb	r2,0(r3)
        return;
 401240c:	00001806 	br	4012470 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 4012410:	e13ffe17 	ldw	r4,-8(fp)
 4012414:	400cb540 	call	400cb54 <OS_StrLen>
 4012418:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 401241c:	e0bffc03 	ldbu	r2,-16(fp)
 4012420:	10800830 	cmpltui	r2,r2,32
 4012424:	1000081e 	bne	r2,zero,4012448 <OSTaskNameSet+0x188>
 4012428:	e0bffa17 	ldw	r2,-24(fp)
 401242c:	e0bff615 	stw	r2,-40(fp)
 4012430:	e0bff617 	ldw	r2,-40(fp)
 4012434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 4012438:	e0ffff17 	ldw	r3,-4(fp)
 401243c:	00801044 	movi	r2,65
 4012440:	18800005 	stb	r2,0(r3)
        return;
 4012444:	00000a06 	br	4012470 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 4012448:	e0bffb17 	ldw	r2,-20(fp)
 401244c:	11001404 	addi	r4,r2,80
 4012450:	e17ffe17 	ldw	r5,-8(fp)
 4012454:	400cad40 	call	400cad4 <OS_StrCopy>
 4012458:	e0bffa17 	ldw	r2,-24(fp)
 401245c:	e0bff515 	stw	r2,-44(fp)
 4012460:	e0bff517 	ldw	r2,-44(fp)
 4012464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012468:	e0bfff17 	ldw	r2,-4(fp)
 401246c:	10000005 	stb	zero,0(r2)
}
 4012470:	e037883a 	mov	sp,fp
 4012474:	dfc00117 	ldw	ra,4(sp)
 4012478:	df000017 	ldw	fp,0(sp)
 401247c:	dec00204 	addi	sp,sp,8
 4012480:	f800283a 	ret

04012484 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 4012484:	defff304 	addi	sp,sp,-52
 4012488:	dfc00c15 	stw	ra,48(sp)
 401248c:	df000b15 	stw	fp,44(sp)
 4012490:	df000b04 	addi	fp,sp,44
 4012494:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4012498:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 401249c:	e0bffe03 	ldbu	r2,-8(fp)
 40124a0:	10800530 	cmpltui	r2,r2,20
 40124a4:	1000031e 	bne	r2,zero,40124b4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 40124a8:	00800a84 	movi	r2,42
 40124ac:	e0bfff15 	stw	r2,-4(fp)
 40124b0:	00007406 	br	4012684 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40124b4:	0005303a 	rdctl	r2,status
 40124b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40124bc:	e0fffb17 	ldw	r3,-20(fp)
 40124c0:	00bfff84 	movi	r2,-2
 40124c4:	1884703a 	and	r2,r3,r2
 40124c8:	1001703a 	wrctl	status,r2
  
  return context;
 40124cc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40124d0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 40124d4:	e0bffe03 	ldbu	r2,-8(fp)
 40124d8:	00c100b4 	movhi	r3,1026
 40124dc:	18f7d104 	addi	r3,r3,-8380
 40124e0:	1085883a 	add	r2,r2,r2
 40124e4:	1085883a 	add	r2,r2,r2
 40124e8:	10c5883a 	add	r2,r2,r3
 40124ec:	10800017 	ldw	r2,0(r2)
 40124f0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 40124f4:	e0bffd17 	ldw	r2,-12(fp)
 40124f8:	1004c03a 	cmpne	r2,r2,zero
 40124fc:	1000071e 	bne	r2,zero,401251c <OSTaskResume+0x98>
 4012500:	e0bffc17 	ldw	r2,-16(fp)
 4012504:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012508:	e0bffa17 	ldw	r2,-24(fp)
 401250c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 4012510:	00801184 	movi	r2,70
 4012514:	e0bfff15 	stw	r2,-4(fp)
 4012518:	00005a06 	br	4012684 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 401251c:	e0bffd17 	ldw	r2,-12(fp)
 4012520:	10800058 	cmpnei	r2,r2,1
 4012524:	1000071e 	bne	r2,zero,4012544 <OSTaskResume+0xc0>
 4012528:	e0bffc17 	ldw	r2,-16(fp)
 401252c:	e0bff915 	stw	r2,-28(fp)
 4012530:	e0bff917 	ldw	r2,-28(fp)
 4012534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4012538:	008010c4 	movi	r2,67
 401253c:	e0bfff15 	stw	r2,-4(fp)
 4012540:	00005006 	br	4012684 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 4012544:	e0bffd17 	ldw	r2,-12(fp)
 4012548:	10800d03 	ldbu	r2,52(r2)
 401254c:	10803fcc 	andi	r2,r2,255
 4012550:	1080020c 	andi	r2,r2,8
 4012554:	1005003a 	cmpeq	r2,r2,zero
 4012558:	1000441e 	bne	r2,zero,401266c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 401255c:	e0bffd17 	ldw	r2,-12(fp)
 4012560:	10c00d03 	ldbu	r3,52(r2)
 4012564:	00bffdc4 	movi	r2,-9
 4012568:	1884703a 	and	r2,r3,r2
 401256c:	1007883a 	mov	r3,r2
 4012570:	e0bffd17 	ldw	r2,-12(fp)
 4012574:	10c00d05 	stb	r3,52(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4012578:	e0bffd17 	ldw	r2,-12(fp)
 401257c:	10800d03 	ldbu	r2,52(r2)
 4012580:	10803fcc 	andi	r2,r2,255
 4012584:	1004c03a 	cmpne	r2,r2,zero
 4012588:	1000321e 	bne	r2,zero,4012654 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 401258c:	e0bffd17 	ldw	r2,-12(fp)
 4012590:	10800c8b 	ldhu	r2,50(r2)
 4012594:	10bfffcc 	andi	r2,r2,65535
 4012598:	1004c03a 	cmpne	r2,r2,zero
 401259c:	1000281e 	bne	r2,zero,4012640 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 40125a0:	e0bffd17 	ldw	r2,-12(fp)
 40125a4:	10c00e83 	ldbu	r3,58(r2)
 40125a8:	008100b4 	movhi	r2,1026
 40125ac:	10a2c404 	addi	r2,r2,-29936
 40125b0:	10800003 	ldbu	r2,0(r2)
 40125b4:	1884b03a 	or	r2,r3,r2
 40125b8:	1007883a 	mov	r3,r2
 40125bc:	008100b4 	movhi	r2,1026
 40125c0:	10a2c404 	addi	r2,r2,-29936
 40125c4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40125c8:	e0bffd17 	ldw	r2,-12(fp)
 40125cc:	10800e03 	ldbu	r2,56(r2)
 40125d0:	11003fcc 	andi	r4,r2,255
 40125d4:	e0bffd17 	ldw	r2,-12(fp)
 40125d8:	10800e03 	ldbu	r2,56(r2)
 40125dc:	10c03fcc 	andi	r3,r2,255
 40125e0:	008100b4 	movhi	r2,1026
 40125e4:	10a2c444 	addi	r2,r2,-29935
 40125e8:	10c5883a 	add	r2,r2,r3
 40125ec:	10c00003 	ldbu	r3,0(r2)
 40125f0:	e0bffd17 	ldw	r2,-12(fp)
 40125f4:	10800e43 	ldbu	r2,57(r2)
 40125f8:	1884b03a 	or	r2,r3,r2
 40125fc:	1007883a 	mov	r3,r2
 4012600:	008100b4 	movhi	r2,1026
 4012604:	10a2c444 	addi	r2,r2,-29935
 4012608:	1105883a 	add	r2,r2,r4
 401260c:	10c00005 	stb	r3,0(r2)
 4012610:	e0bffc17 	ldw	r2,-16(fp)
 4012614:	e0bff815 	stw	r2,-32(fp)
 4012618:	e0bff817 	ldw	r2,-32(fp)
 401261c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 4012620:	008100b4 	movhi	r2,1026
 4012624:	10a2b804 	addi	r2,r2,-29984
 4012628:	10800003 	ldbu	r2,0(r2)
 401262c:	10803fcc 	andi	r2,r2,255
 4012630:	10800058 	cmpnei	r2,r2,1
 4012634:	10000b1e 	bne	r2,zero,4012664 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 4012638:	400c7a40 	call	400c7a4 <OS_Sched>
 401263c:	00000906 	br	4012664 <OSTaskResume+0x1e0>
 4012640:	e0bffc17 	ldw	r2,-16(fp)
 4012644:	e0bff715 	stw	r2,-36(fp)
 4012648:	e0bff717 	ldw	r2,-36(fp)
 401264c:	1001703a 	wrctl	status,r2
 4012650:	00000406 	br	4012664 <OSTaskResume+0x1e0>
 4012654:	e0bffc17 	ldw	r2,-16(fp)
 4012658:	e0bff615 	stw	r2,-40(fp)
 401265c:	e0bff617 	ldw	r2,-40(fp)
 4012660:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 4012664:	e03fff15 	stw	zero,-4(fp)
 4012668:	00000606 	br	4012684 <OSTaskResume+0x200>
 401266c:	e0bffc17 	ldw	r2,-16(fp)
 4012670:	e0bff515 	stw	r2,-44(fp)
 4012674:	e0bff517 	ldw	r2,-44(fp)
 4012678:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 401267c:	00801104 	movi	r2,68
 4012680:	e0bfff15 	stw	r2,-4(fp)
 4012684:	e0bfff17 	ldw	r2,-4(fp)
}
 4012688:	e037883a 	mov	sp,fp
 401268c:	dfc00117 	ldw	ra,4(sp)
 4012690:	df000017 	ldw	fp,0(sp)
 4012694:	dec00204 	addi	sp,sp,8
 4012698:	f800283a 	ret

0401269c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 401269c:	defff204 	addi	sp,sp,-56
 40126a0:	df000d15 	stw	fp,52(sp)
 40126a4:	df000d04 	addi	fp,sp,52
 40126a8:	e17ffe15 	stw	r5,-8(fp)
 40126ac:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 40126b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 40126b4:	e0bffd03 	ldbu	r2,-12(fp)
 40126b8:	10800570 	cmpltui	r2,r2,21
 40126bc:	1000061e 	bne	r2,zero,40126d8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 40126c0:	e0bffd03 	ldbu	r2,-12(fp)
 40126c4:	10803fe0 	cmpeqi	r2,r2,255
 40126c8:	1000031e 	bne	r2,zero,40126d8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 40126cc:	00800a84 	movi	r2,42
 40126d0:	e0bfff15 	stw	r2,-4(fp)
 40126d4:	00006b06 	br	4012884 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 40126d8:	e0bffe17 	ldw	r2,-8(fp)
 40126dc:	1004c03a 	cmpne	r2,r2,zero
 40126e0:	1000031e 	bne	r2,zero,40126f0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 40126e4:	00800244 	movi	r2,9
 40126e8:	e0bfff15 	stw	r2,-4(fp)
 40126ec:	00006506 	br	4012884 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 40126f0:	e0bffe17 	ldw	r2,-8(fp)
 40126f4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 40126f8:	e0bffe17 	ldw	r2,-8(fp)
 40126fc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012700:	0005303a 	rdctl	r2,status
 4012704:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012708:	e0fff717 	ldw	r3,-36(fp)
 401270c:	00bfff84 	movi	r2,-2
 4012710:	1884703a 	and	r2,r3,r2
 4012714:	1001703a 	wrctl	status,r2
  
  return context;
 4012718:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 401271c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 4012720:	e0bffd03 	ldbu	r2,-12(fp)
 4012724:	10803fd8 	cmpnei	r2,r2,255
 4012728:	1000051e 	bne	r2,zero,4012740 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 401272c:	008100b4 	movhi	r2,1026
 4012730:	10a2c704 	addi	r2,r2,-29924
 4012734:	10800017 	ldw	r2,0(r2)
 4012738:	10800d83 	ldbu	r2,54(r2)
 401273c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012740:	e0bffd03 	ldbu	r2,-12(fp)
 4012744:	00c100b4 	movhi	r3,1026
 4012748:	18f7d104 	addi	r3,r3,-8380
 401274c:	1085883a 	add	r2,r2,r2
 4012750:	1085883a 	add	r2,r2,r2
 4012754:	10c5883a 	add	r2,r2,r3
 4012758:	10800017 	ldw	r2,0(r2)
 401275c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4012760:	e0bffc17 	ldw	r2,-16(fp)
 4012764:	1004c03a 	cmpne	r2,r2,zero
 4012768:	1000071e 	bne	r2,zero,4012788 <OSTaskStkChk+0xec>
 401276c:	e0bff817 	ldw	r2,-32(fp)
 4012770:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012774:	e0bff617 	ldw	r2,-40(fp)
 4012778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401277c:	008010c4 	movi	r2,67
 4012780:	e0bfff15 	stw	r2,-4(fp)
 4012784:	00003f06 	br	4012884 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4012788:	e0bffc17 	ldw	r2,-16(fp)
 401278c:	10800058 	cmpnei	r2,r2,1
 4012790:	1000071e 	bne	r2,zero,40127b0 <OSTaskStkChk+0x114>
 4012794:	e0bff817 	ldw	r2,-32(fp)
 4012798:	e0bff515 	stw	r2,-44(fp)
 401279c:	e0bff517 	ldw	r2,-44(fp)
 40127a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40127a4:	008010c4 	movi	r2,67
 40127a8:	e0bfff15 	stw	r2,-4(fp)
 40127ac:	00003506 	br	4012884 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 40127b0:	e0bffc17 	ldw	r2,-16(fp)
 40127b4:	1080040b 	ldhu	r2,16(r2)
 40127b8:	10bfffcc 	andi	r2,r2,65535
 40127bc:	1080004c 	andi	r2,r2,1
 40127c0:	1004c03a 	cmpne	r2,r2,zero
 40127c4:	1000071e 	bne	r2,zero,40127e4 <OSTaskStkChk+0x148>
 40127c8:	e0bff817 	ldw	r2,-32(fp)
 40127cc:	e0bff415 	stw	r2,-48(fp)
 40127d0:	e0bff417 	ldw	r2,-48(fp)
 40127d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 40127d8:	00801144 	movi	r2,69
 40127dc:	e0bfff15 	stw	r2,-4(fp)
 40127e0:	00002806 	br	4012884 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 40127e4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 40127e8:	e0bffc17 	ldw	r2,-16(fp)
 40127ec:	10800317 	ldw	r2,12(r2)
 40127f0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 40127f4:	e0bffc17 	ldw	r2,-16(fp)
 40127f8:	10800217 	ldw	r2,8(r2)
 40127fc:	e0bffb15 	stw	r2,-20(fp)
 4012800:	e0bff817 	ldw	r2,-32(fp)
 4012804:	e0bff315 	stw	r2,-52(fp)
 4012808:	e0bff317 	ldw	r2,-52(fp)
 401280c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4012810:	00000306 	br	4012820 <OSTaskStkChk+0x184>
        nfree++;
 4012814:	e0bffa17 	ldw	r2,-24(fp)
 4012818:	10800044 	addi	r2,r2,1
 401281c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4012820:	e0bffb17 	ldw	r2,-20(fp)
 4012824:	10800017 	ldw	r2,0(r2)
 4012828:	1005003a 	cmpeq	r2,r2,zero
 401282c:	1007883a 	mov	r3,r2
 4012830:	e0bffb17 	ldw	r2,-20(fp)
 4012834:	10800104 	addi	r2,r2,4
 4012838:	e0bffb15 	stw	r2,-20(fp)
 401283c:	18803fcc 	andi	r2,r3,255
 4012840:	1004c03a 	cmpne	r2,r2,zero
 4012844:	103ff31e 	bne	r2,zero,4012814 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4012848:	e0bffa17 	ldw	r2,-24(fp)
 401284c:	1085883a 	add	r2,r2,r2
 4012850:	1085883a 	add	r2,r2,r2
 4012854:	1007883a 	mov	r3,r2
 4012858:	e0bffe17 	ldw	r2,-8(fp)
 401285c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 4012860:	e0fff917 	ldw	r3,-28(fp)
 4012864:	e0bffa17 	ldw	r2,-24(fp)
 4012868:	1885c83a 	sub	r2,r3,r2
 401286c:	1085883a 	add	r2,r2,r2
 4012870:	1085883a 	add	r2,r2,r2
 4012874:	1007883a 	mov	r3,r2
 4012878:	e0bffe17 	ldw	r2,-8(fp)
 401287c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 4012880:	e03fff15 	stw	zero,-4(fp)
 4012884:	e0bfff17 	ldw	r2,-4(fp)
}
 4012888:	e037883a 	mov	sp,fp
 401288c:	df000017 	ldw	fp,0(sp)
 4012890:	dec00104 	addi	sp,sp,4
 4012894:	f800283a 	ret

04012898 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4012898:	defff404 	addi	sp,sp,-48
 401289c:	dfc00b15 	stw	ra,44(sp)
 40128a0:	df000a15 	stw	fp,40(sp)
 40128a4:	df000a04 	addi	fp,sp,40
 40128a8:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40128ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 40128b0:	e0bffe03 	ldbu	r2,-8(fp)
 40128b4:	10800518 	cmpnei	r2,r2,20
 40128b8:	1000031e 	bne	r2,zero,40128c8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 40128bc:	008011c4 	movi	r2,71
 40128c0:	e0bfff15 	stw	r2,-4(fp)
 40128c4:	00007906 	br	4012aac <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 40128c8:	e0bffe03 	ldbu	r2,-8(fp)
 40128cc:	10800530 	cmpltui	r2,r2,20
 40128d0:	1000061e 	bne	r2,zero,40128ec <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 40128d4:	e0bffe03 	ldbu	r2,-8(fp)
 40128d8:	10803fe0 	cmpeqi	r2,r2,255
 40128dc:	1000031e 	bne	r2,zero,40128ec <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 40128e0:	00800a84 	movi	r2,42
 40128e4:	e0bfff15 	stw	r2,-4(fp)
 40128e8:	00007006 	br	4012aac <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40128ec:	0005303a 	rdctl	r2,status
 40128f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40128f4:	e0fff917 	ldw	r3,-28(fp)
 40128f8:	00bfff84 	movi	r2,-2
 40128fc:	1884703a 	and	r2,r3,r2
 4012900:	1001703a 	wrctl	status,r2
  
  return context;
 4012904:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 4012908:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 401290c:	e0bffe03 	ldbu	r2,-8(fp)
 4012910:	10803fd8 	cmpnei	r2,r2,255
 4012914:	1000081e 	bne	r2,zero,4012938 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 4012918:	008100b4 	movhi	r2,1026
 401291c:	10a2c704 	addi	r2,r2,-29924
 4012920:	10800017 	ldw	r2,0(r2)
 4012924:	10800d83 	ldbu	r2,54(r2)
 4012928:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 401292c:	00800044 	movi	r2,1
 4012930:	e0bffd05 	stb	r2,-12(fp)
 4012934:	00000b06 	br	4012964 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 4012938:	008100b4 	movhi	r2,1026
 401293c:	10a2c704 	addi	r2,r2,-29924
 4012940:	10800017 	ldw	r2,0(r2)
 4012944:	10800d83 	ldbu	r2,54(r2)
 4012948:	10c03fcc 	andi	r3,r2,255
 401294c:	e0bffe03 	ldbu	r2,-8(fp)
 4012950:	1880031e 	bne	r3,r2,4012960 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 4012954:	00800044 	movi	r2,1
 4012958:	e0bffd05 	stb	r2,-12(fp)
 401295c:	00000106 	br	4012964 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 4012960:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012964:	e0bffe03 	ldbu	r2,-8(fp)
 4012968:	00c100b4 	movhi	r3,1026
 401296c:	18f7d104 	addi	r3,r3,-8380
 4012970:	1085883a 	add	r2,r2,r2
 4012974:	1085883a 	add	r2,r2,r2
 4012978:	10c5883a 	add	r2,r2,r3
 401297c:	10800017 	ldw	r2,0(r2)
 4012980:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 4012984:	e0bffc17 	ldw	r2,-16(fp)
 4012988:	1004c03a 	cmpne	r2,r2,zero
 401298c:	1000071e 	bne	r2,zero,40129ac <OSTaskSuspend+0x114>
 4012990:	e0bffa17 	ldw	r2,-24(fp)
 4012994:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012998:	e0bff817 	ldw	r2,-32(fp)
 401299c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 40129a0:	00801204 	movi	r2,72
 40129a4:	e0bfff15 	stw	r2,-4(fp)
 40129a8:	00004006 	br	4012aac <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 40129ac:	e0bffc17 	ldw	r2,-16(fp)
 40129b0:	10800058 	cmpnei	r2,r2,1
 40129b4:	1000071e 	bne	r2,zero,40129d4 <OSTaskSuspend+0x13c>
 40129b8:	e0bffa17 	ldw	r2,-24(fp)
 40129bc:	e0bff715 	stw	r2,-36(fp)
 40129c0:	e0bff717 	ldw	r2,-36(fp)
 40129c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40129c8:	008010c4 	movi	r2,67
 40129cc:	e0bfff15 	stw	r2,-4(fp)
 40129d0:	00003606 	br	4012aac <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 40129d4:	e0bffc17 	ldw	r2,-16(fp)
 40129d8:	10800e03 	ldbu	r2,56(r2)
 40129dc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 40129e0:	e13ffb03 	ldbu	r4,-20(fp)
 40129e4:	e0fffb03 	ldbu	r3,-20(fp)
 40129e8:	008100b4 	movhi	r2,1026
 40129ec:	10a2c444 	addi	r2,r2,-29935
 40129f0:	10c5883a 	add	r2,r2,r3
 40129f4:	10800003 	ldbu	r2,0(r2)
 40129f8:	1007883a 	mov	r3,r2
 40129fc:	e0bffc17 	ldw	r2,-16(fp)
 4012a00:	10800e43 	ldbu	r2,57(r2)
 4012a04:	0084303a 	nor	r2,zero,r2
 4012a08:	1884703a 	and	r2,r3,r2
 4012a0c:	1007883a 	mov	r3,r2
 4012a10:	008100b4 	movhi	r2,1026
 4012a14:	10a2c444 	addi	r2,r2,-29935
 4012a18:	1105883a 	add	r2,r2,r4
 4012a1c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 4012a20:	e0fffb03 	ldbu	r3,-20(fp)
 4012a24:	008100b4 	movhi	r2,1026
 4012a28:	10a2c444 	addi	r2,r2,-29935
 4012a2c:	10c5883a 	add	r2,r2,r3
 4012a30:	10800003 	ldbu	r2,0(r2)
 4012a34:	10803fcc 	andi	r2,r2,255
 4012a38:	1004c03a 	cmpne	r2,r2,zero
 4012a3c:	10000c1e 	bne	r2,zero,4012a70 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 4012a40:	e0bffc17 	ldw	r2,-16(fp)
 4012a44:	10800e83 	ldbu	r2,58(r2)
 4012a48:	0084303a 	nor	r2,zero,r2
 4012a4c:	1007883a 	mov	r3,r2
 4012a50:	008100b4 	movhi	r2,1026
 4012a54:	10a2c404 	addi	r2,r2,-29936
 4012a58:	10800003 	ldbu	r2,0(r2)
 4012a5c:	1884703a 	and	r2,r3,r2
 4012a60:	1007883a 	mov	r3,r2
 4012a64:	008100b4 	movhi	r2,1026
 4012a68:	10a2c404 	addi	r2,r2,-29936
 4012a6c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 4012a70:	e0bffc17 	ldw	r2,-16(fp)
 4012a74:	10800d03 	ldbu	r2,52(r2)
 4012a78:	10800214 	ori	r2,r2,8
 4012a7c:	1007883a 	mov	r3,r2
 4012a80:	e0bffc17 	ldw	r2,-16(fp)
 4012a84:	10c00d05 	stb	r3,52(r2)
 4012a88:	e0bffa17 	ldw	r2,-24(fp)
 4012a8c:	e0bff615 	stw	r2,-40(fp)
 4012a90:	e0bff617 	ldw	r2,-40(fp)
 4012a94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 4012a98:	e0bffd03 	ldbu	r2,-12(fp)
 4012a9c:	10800058 	cmpnei	r2,r2,1
 4012aa0:	1000011e 	bne	r2,zero,4012aa8 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 4012aa4:	400c7a40 	call	400c7a4 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4012aa8:	e03fff15 	stw	zero,-4(fp)
 4012aac:	e0bfff17 	ldw	r2,-4(fp)
}
 4012ab0:	e037883a 	mov	sp,fp
 4012ab4:	dfc00117 	ldw	ra,4(sp)
 4012ab8:	df000017 	ldw	fp,0(sp)
 4012abc:	dec00204 	addi	sp,sp,8
 4012ac0:	f800283a 	ret

04012ac4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 4012ac4:	defff504 	addi	sp,sp,-44
 4012ac8:	dfc00a15 	stw	ra,40(sp)
 4012acc:	df000915 	stw	fp,36(sp)
 4012ad0:	df000904 	addi	fp,sp,36
 4012ad4:	e17ffe15 	stw	r5,-8(fp)
 4012ad8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012adc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4012ae0:	e0bffd03 	ldbu	r2,-12(fp)
 4012ae4:	10800570 	cmpltui	r2,r2,21
 4012ae8:	1000061e 	bne	r2,zero,4012b04 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 4012aec:	e0bffd03 	ldbu	r2,-12(fp)
 4012af0:	10803fe0 	cmpeqi	r2,r2,255
 4012af4:	1000031e 	bne	r2,zero,4012b04 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 4012af8:	00800a84 	movi	r2,42
 4012afc:	e0bfff15 	stw	r2,-4(fp)
 4012b00:	00003b06 	br	4012bf0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 4012b04:	e0bffe17 	ldw	r2,-8(fp)
 4012b08:	1004c03a 	cmpne	r2,r2,zero
 4012b0c:	1000031e 	bne	r2,zero,4012b1c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 4012b10:	00800244 	movi	r2,9
 4012b14:	e0bfff15 	stw	r2,-4(fp)
 4012b18:	00003506 	br	4012bf0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012b1c:	0005303a 	rdctl	r2,status
 4012b20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012b24:	e0fffa17 	ldw	r3,-24(fp)
 4012b28:	00bfff84 	movi	r2,-2
 4012b2c:	1884703a 	and	r2,r3,r2
 4012b30:	1001703a 	wrctl	status,r2
  
  return context;
 4012b34:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4012b38:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 4012b3c:	e0bffd03 	ldbu	r2,-12(fp)
 4012b40:	10803fd8 	cmpnei	r2,r2,255
 4012b44:	1000051e 	bne	r2,zero,4012b5c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 4012b48:	008100b4 	movhi	r2,1026
 4012b4c:	10a2c704 	addi	r2,r2,-29924
 4012b50:	10800017 	ldw	r2,0(r2)
 4012b54:	10800d83 	ldbu	r2,54(r2)
 4012b58:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012b5c:	e0bffd03 	ldbu	r2,-12(fp)
 4012b60:	00c100b4 	movhi	r3,1026
 4012b64:	18f7d104 	addi	r3,r3,-8380
 4012b68:	1085883a 	add	r2,r2,r2
 4012b6c:	1085883a 	add	r2,r2,r2
 4012b70:	10c5883a 	add	r2,r2,r3
 4012b74:	10800017 	ldw	r2,0(r2)
 4012b78:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 4012b7c:	e0bffc17 	ldw	r2,-16(fp)
 4012b80:	1004c03a 	cmpne	r2,r2,zero
 4012b84:	1000071e 	bne	r2,zero,4012ba4 <OSTaskQuery+0xe0>
 4012b88:	e0bffb17 	ldw	r2,-20(fp)
 4012b8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012b90:	e0bff917 	ldw	r2,-28(fp)
 4012b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 4012b98:	00800a44 	movi	r2,41
 4012b9c:	e0bfff15 	stw	r2,-4(fp)
 4012ba0:	00001306 	br	4012bf0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 4012ba4:	e0bffc17 	ldw	r2,-16(fp)
 4012ba8:	10800058 	cmpnei	r2,r2,1
 4012bac:	1000071e 	bne	r2,zero,4012bcc <OSTaskQuery+0x108>
 4012bb0:	e0bffb17 	ldw	r2,-20(fp)
 4012bb4:	e0bff815 	stw	r2,-32(fp)
 4012bb8:	e0bff817 	ldw	r2,-32(fp)
 4012bbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4012bc0:	008010c4 	movi	r2,67
 4012bc4:	e0bfff15 	stw	r2,-4(fp)
 4012bc8:	00000906 	br	4012bf0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 4012bcc:	e13ffe17 	ldw	r4,-8(fp)
 4012bd0:	e17ffc17 	ldw	r5,-16(fp)
 4012bd4:	01801c04 	movi	r6,112
 4012bd8:	400c7380 	call	400c738 <OS_MemCopy>
 4012bdc:	e0bffb17 	ldw	r2,-20(fp)
 4012be0:	e0bff715 	stw	r2,-36(fp)
 4012be4:	e0bff717 	ldw	r2,-36(fp)
 4012be8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4012bec:	e03fff15 	stw	zero,-4(fp)
 4012bf0:	e0bfff17 	ldw	r2,-4(fp)
}
 4012bf4:	e037883a 	mov	sp,fp
 4012bf8:	dfc00117 	ldw	ra,4(sp)
 4012bfc:	df000017 	ldw	fp,0(sp)
 4012c00:	dec00204 	addi	sp,sp,8
 4012c04:	f800283a 	ret

04012c08 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 4012c08:	defffc04 	addi	sp,sp,-16
 4012c0c:	df000315 	stw	fp,12(sp)
 4012c10:	df000304 	addi	fp,sp,12
 4012c14:	e13ffd15 	stw	r4,-12(fp)
 4012c18:	e17ffe15 	stw	r5,-8(fp)
 4012c1c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 4012c20:	e0bfff0b 	ldhu	r2,-4(fp)
 4012c24:	1080004c 	andi	r2,r2,1
 4012c28:	10803fcc 	andi	r2,r2,255
 4012c2c:	1005003a 	cmpeq	r2,r2,zero
 4012c30:	1000101e 	bne	r2,zero,4012c74 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 4012c34:	e0bfff0b 	ldhu	r2,-4(fp)
 4012c38:	1080008c 	andi	r2,r2,2
 4012c3c:	1005003a 	cmpeq	r2,r2,zero
 4012c40:	10000c1e 	bne	r2,zero,4012c74 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4012c44:	00000806 	br	4012c68 <OS_TaskStkClr+0x60>
                size--;
 4012c48:	e0bffe17 	ldw	r2,-8(fp)
 4012c4c:	10bfffc4 	addi	r2,r2,-1
 4012c50:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 4012c54:	e0bffd17 	ldw	r2,-12(fp)
 4012c58:	10000015 	stw	zero,0(r2)
 4012c5c:	e0bffd17 	ldw	r2,-12(fp)
 4012c60:	10800104 	addi	r2,r2,4
 4012c64:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4012c68:	e0bffe17 	ldw	r2,-8(fp)
 4012c6c:	1004c03a 	cmpne	r2,r2,zero
 4012c70:	103ff51e 	bne	r2,zero,4012c48 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 4012c74:	e037883a 	mov	sp,fp
 4012c78:	df000017 	ldw	fp,0(sp)
 4012c7c:	dec00104 	addi	sp,sp,4
 4012c80:	f800283a 	ret

04012c84 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 4012c84:	defff904 	addi	sp,sp,-28
 4012c88:	dfc00615 	stw	ra,24(sp)
 4012c8c:	df000515 	stw	fp,20(sp)
 4012c90:	df000504 	addi	fp,sp,20
 4012c94:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012c98:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4012c9c:	008100b4 	movhi	r2,1026
 4012ca0:	10a2c604 	addi	r2,r2,-29928
 4012ca4:	10800003 	ldbu	r2,0(r2)
 4012ca8:	10803fcc 	andi	r2,r2,255
 4012cac:	1004c03a 	cmpne	r2,r2,zero
 4012cb0:	1000421e 	bne	r2,zero,4012dbc <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 4012cb4:	e0bfff0b 	ldhu	r2,-4(fp)
 4012cb8:	1005003a 	cmpeq	r2,r2,zero
 4012cbc:	10003f1e 	bne	r2,zero,4012dbc <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012cc0:	0005303a 	rdctl	r2,status
 4012cc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012cc8:	e0fffc17 	ldw	r3,-16(fp)
 4012ccc:	00bfff84 	movi	r2,-2
 4012cd0:	1884703a 	and	r2,r3,r2
 4012cd4:	1001703a 	wrctl	status,r2
  
  return context;
 4012cd8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 4012cdc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 4012ce0:	008100b4 	movhi	r2,1026
 4012ce4:	10a2c704 	addi	r2,r2,-29924
 4012ce8:	10800017 	ldw	r2,0(r2)
 4012cec:	10800e03 	ldbu	r2,56(r2)
 4012cf0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4012cf4:	e13ffe03 	ldbu	r4,-8(fp)
 4012cf8:	e0fffe03 	ldbu	r3,-8(fp)
 4012cfc:	008100b4 	movhi	r2,1026
 4012d00:	10a2c444 	addi	r2,r2,-29935
 4012d04:	10c5883a 	add	r2,r2,r3
 4012d08:	10800003 	ldbu	r2,0(r2)
 4012d0c:	1007883a 	mov	r3,r2
 4012d10:	008100b4 	movhi	r2,1026
 4012d14:	10a2c704 	addi	r2,r2,-29924
 4012d18:	10800017 	ldw	r2,0(r2)
 4012d1c:	10800e43 	ldbu	r2,57(r2)
 4012d20:	0084303a 	nor	r2,zero,r2
 4012d24:	1884703a 	and	r2,r3,r2
 4012d28:	1007883a 	mov	r3,r2
 4012d2c:	008100b4 	movhi	r2,1026
 4012d30:	10a2c444 	addi	r2,r2,-29935
 4012d34:	1105883a 	add	r2,r2,r4
 4012d38:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 4012d3c:	e0fffe03 	ldbu	r3,-8(fp)
 4012d40:	008100b4 	movhi	r2,1026
 4012d44:	10a2c444 	addi	r2,r2,-29935
 4012d48:	10c5883a 	add	r2,r2,r3
 4012d4c:	10800003 	ldbu	r2,0(r2)
 4012d50:	10803fcc 	andi	r2,r2,255
 4012d54:	1004c03a 	cmpne	r2,r2,zero
 4012d58:	10000e1e 	bne	r2,zero,4012d94 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4012d5c:	008100b4 	movhi	r2,1026
 4012d60:	10a2c704 	addi	r2,r2,-29924
 4012d64:	10800017 	ldw	r2,0(r2)
 4012d68:	10800e83 	ldbu	r2,58(r2)
 4012d6c:	0084303a 	nor	r2,zero,r2
 4012d70:	1007883a 	mov	r3,r2
 4012d74:	008100b4 	movhi	r2,1026
 4012d78:	10a2c404 	addi	r2,r2,-29936
 4012d7c:	10800003 	ldbu	r2,0(r2)
 4012d80:	1884703a 	and	r2,r3,r2
 4012d84:	1007883a 	mov	r3,r2
 4012d88:	008100b4 	movhi	r2,1026
 4012d8c:	10a2c404 	addi	r2,r2,-29936
 4012d90:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4012d94:	008100b4 	movhi	r2,1026
 4012d98:	10a2c704 	addi	r2,r2,-29924
 4012d9c:	10c00017 	ldw	r3,0(r2)
 4012da0:	e0bfff0b 	ldhu	r2,-4(fp)
 4012da4:	18800c8d 	sth	r2,50(r3)
 4012da8:	e0bffd17 	ldw	r2,-12(fp)
 4012dac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012db0:	e0bffb17 	ldw	r2,-20(fp)
 4012db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 4012db8:	400c7a40 	call	400c7a4 <OS_Sched>
    }
}
 4012dbc:	e037883a 	mov	sp,fp
 4012dc0:	dfc00117 	ldw	ra,4(sp)
 4012dc4:	df000017 	ldw	fp,0(sp)
 4012dc8:	dec00204 	addi	sp,sp,8
 4012dcc:	f800283a 	ret

04012dd0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 4012dd0:	defff604 	addi	sp,sp,-40
 4012dd4:	dfc00915 	stw	ra,36(sp)
 4012dd8:	df000815 	stw	fp,32(sp)
 4012ddc:	dc000715 	stw	r16,28(sp)
 4012de0:	df000704 	addi	fp,sp,28
 4012de4:	e13ffb05 	stb	r4,-20(fp)
 4012de8:	e17ffc05 	stb	r5,-16(fp)
 4012dec:	e1bffd05 	stb	r6,-12(fp)
 4012df0:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4012df4:	008100b4 	movhi	r2,1026
 4012df8:	10a2c604 	addi	r2,r2,-29928
 4012dfc:	10800003 	ldbu	r2,0(r2)
 4012e00:	10803fcc 	andi	r2,r2,255
 4012e04:	1005003a 	cmpeq	r2,r2,zero
 4012e08:	1000031e 	bne	r2,zero,4012e18 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 4012e0c:	00801544 	movi	r2,85
 4012e10:	e0bfff15 	stw	r2,-4(fp)
 4012e14:	00004506 	br	4012f2c <OSTimeDlyHMSM+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4012e18:	e0bffb03 	ldbu	r2,-20(fp)
 4012e1c:	1004c03a 	cmpne	r2,r2,zero
 4012e20:	10000c1e 	bne	r2,zero,4012e54 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 4012e24:	e0bffc03 	ldbu	r2,-16(fp)
 4012e28:	1004c03a 	cmpne	r2,r2,zero
 4012e2c:	1000091e 	bne	r2,zero,4012e54 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 4012e30:	e0bffd03 	ldbu	r2,-12(fp)
 4012e34:	1004c03a 	cmpne	r2,r2,zero
 4012e38:	1000061e 	bne	r2,zero,4012e54 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 4012e3c:	e0bffe0b 	ldhu	r2,-8(fp)
 4012e40:	1004c03a 	cmpne	r2,r2,zero
 4012e44:	1000031e 	bne	r2,zero,4012e54 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 4012e48:	00801504 	movi	r2,84
 4012e4c:	e0bfff15 	stw	r2,-4(fp)
 4012e50:	00003606 	br	4012f2c <OSTimeDlyHMSM+0x15c>
                }
            }
        }
    }
    if (minutes > 59) {
 4012e54:	e0bffc03 	ldbu	r2,-16(fp)
 4012e58:	10800f30 	cmpltui	r2,r2,60
 4012e5c:	1000031e 	bne	r2,zero,4012e6c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 4012e60:	00801444 	movi	r2,81
 4012e64:	e0bfff15 	stw	r2,-4(fp)
 4012e68:	00003006 	br	4012f2c <OSTimeDlyHMSM+0x15c>
    }
    if (seconds > 59) {
 4012e6c:	e0bffd03 	ldbu	r2,-12(fp)
 4012e70:	10800f30 	cmpltui	r2,r2,60
 4012e74:	1000031e 	bne	r2,zero,4012e84 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 4012e78:	00801484 	movi	r2,82
 4012e7c:	e0bfff15 	stw	r2,-4(fp)
 4012e80:	00002a06 	br	4012f2c <OSTimeDlyHMSM+0x15c>
    }
    if (ms > 999) {
 4012e84:	e0bffe0b 	ldhu	r2,-8(fp)
 4012e88:	1080fa30 	cmpltui	r2,r2,1000
 4012e8c:	1000031e 	bne	r2,zero,4012e9c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 4012e90:	008014c4 	movi	r2,83
 4012e94:	e0bfff15 	stw	r2,-4(fp)
 4012e98:	00002406 	br	4012f2c <OSTimeDlyHMSM+0x15c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 4012e9c:	e0bffb03 	ldbu	r2,-20(fp)
 4012ea0:	10c38424 	muli	r3,r2,3600
 4012ea4:	e0bffc03 	ldbu	r2,-16(fp)
 4012ea8:	10800f24 	muli	r2,r2,60
 4012eac:	1887883a 	add	r3,r3,r2
 4012eb0:	e0bffd03 	ldbu	r2,-12(fp)
 4012eb4:	1885883a 	add	r2,r3,r2
 4012eb8:	14001924 	muli	r16,r2,100
 4012ebc:	e0bffe0b 	ldhu	r2,-8(fp)
 4012ec0:	10801924 	muli	r2,r2,100
 4012ec4:	11007d04 	addi	r4,r2,500
 4012ec8:	0140fa04 	movi	r5,1000
 4012ecc:	40098c40 	call	40098c4 <__udivsi3>
 4012ed0:	8085883a 	add	r2,r16,r2
 4012ed4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 4012ed8:	e0bffa17 	ldw	r2,-24(fp)
 4012edc:	1004d43a 	srli	r2,r2,16
 4012ee0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 4012ee4:	e0bffa17 	ldw	r2,-24(fp)
 4012ee8:	10bfffcc 	andi	r2,r2,65535
 4012eec:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 4012ef0:	e0bffa17 	ldw	r2,-24(fp)
 4012ef4:	113fffcc 	andi	r4,r2,65535
 4012ef8:	4012c840 	call	4012c84 <OSTimeDly>
    while (loops > 0) {
 4012efc:	00000706 	br	4012f1c <OSTimeDlyHMSM+0x14c>
        OSTimeDly((INT16U)32768u);
 4012f00:	01200014 	movui	r4,32768
 4012f04:	4012c840 	call	4012c84 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 4012f08:	01200014 	movui	r4,32768
 4012f0c:	4012c840 	call	4012c84 <OSTimeDly>
        loops--;
 4012f10:	e0bff90b 	ldhu	r2,-28(fp)
 4012f14:	10bfffc4 	addi	r2,r2,-1
 4012f18:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 4012f1c:	e0bff90b 	ldhu	r2,-28(fp)
 4012f20:	1004c03a 	cmpne	r2,r2,zero
 4012f24:	103ff61e 	bne	r2,zero,4012f00 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 4012f28:	e03fff15 	stw	zero,-4(fp)
 4012f2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4012f30:	e037883a 	mov	sp,fp
 4012f34:	dfc00217 	ldw	ra,8(sp)
 4012f38:	df000117 	ldw	fp,4(sp)
 4012f3c:	dc000017 	ldw	r16,0(sp)
 4012f40:	dec00304 	addi	sp,sp,12
 4012f44:	f800283a 	ret

04012f48 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 4012f48:	defff404 	addi	sp,sp,-48
 4012f4c:	dfc00b15 	stw	ra,44(sp)
 4012f50:	df000a15 	stw	fp,40(sp)
 4012f54:	df000a04 	addi	fp,sp,40
 4012f58:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012f5c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 4012f60:	e0bffe03 	ldbu	r2,-8(fp)
 4012f64:	10800530 	cmpltui	r2,r2,20
 4012f68:	1000031e 	bne	r2,zero,4012f78 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4012f6c:	00800a84 	movi	r2,42
 4012f70:	e0bfff15 	stw	r2,-4(fp)
 4012f74:	00007206 	br	4013140 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012f78:	0005303a 	rdctl	r2,status
 4012f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012f80:	e0fffb17 	ldw	r3,-20(fp)
 4012f84:	00bfff84 	movi	r2,-2
 4012f88:	1884703a 	and	r2,r3,r2
 4012f8c:	1001703a 	wrctl	status,r2
  
  return context;
 4012f90:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4012f94:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 4012f98:	e0bffe03 	ldbu	r2,-8(fp)
 4012f9c:	00c100b4 	movhi	r3,1026
 4012fa0:	18f7d104 	addi	r3,r3,-8380
 4012fa4:	1085883a 	add	r2,r2,r2
 4012fa8:	1085883a 	add	r2,r2,r2
 4012fac:	10c5883a 	add	r2,r2,r3
 4012fb0:	10800017 	ldw	r2,0(r2)
 4012fb4:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 4012fb8:	e0bffd17 	ldw	r2,-12(fp)
 4012fbc:	1004c03a 	cmpne	r2,r2,zero
 4012fc0:	1000071e 	bne	r2,zero,4012fe0 <OSTimeDlyResume+0x98>
 4012fc4:	e0bffc17 	ldw	r2,-16(fp)
 4012fc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012fcc:	e0bffa17 	ldw	r2,-24(fp)
 4012fd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4012fd4:	008010c4 	movi	r2,67
 4012fd8:	e0bfff15 	stw	r2,-4(fp)
 4012fdc:	00005806 	br	4013140 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4012fe0:	e0bffd17 	ldw	r2,-12(fp)
 4012fe4:	10800058 	cmpnei	r2,r2,1
 4012fe8:	1000071e 	bne	r2,zero,4013008 <OSTimeDlyResume+0xc0>
 4012fec:	e0bffc17 	ldw	r2,-16(fp)
 4012ff0:	e0bff915 	stw	r2,-28(fp)
 4012ff4:	e0bff917 	ldw	r2,-28(fp)
 4012ff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4012ffc:	008010c4 	movi	r2,67
 4013000:	e0bfff15 	stw	r2,-4(fp)
 4013004:	00004e06 	br	4013140 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 4013008:	e0bffd17 	ldw	r2,-12(fp)
 401300c:	10800c8b 	ldhu	r2,50(r2)
 4013010:	10bfffcc 	andi	r2,r2,65535
 4013014:	1004c03a 	cmpne	r2,r2,zero
 4013018:	1000071e 	bne	r2,zero,4013038 <OSTimeDlyResume+0xf0>
 401301c:	e0bffc17 	ldw	r2,-16(fp)
 4013020:	e0bff815 	stw	r2,-32(fp)
 4013024:	e0bff817 	ldw	r2,-32(fp)
 4013028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 401302c:	00801404 	movi	r2,80
 4013030:	e0bfff15 	stw	r2,-4(fp)
 4013034:	00004206 	br	4013140 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 4013038:	e0bffd17 	ldw	r2,-12(fp)
 401303c:	10000c8d 	sth	zero,50(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4013040:	e0bffd17 	ldw	r2,-12(fp)
 4013044:	10800d03 	ldbu	r2,52(r2)
 4013048:	10803fcc 	andi	r2,r2,255
 401304c:	10800dcc 	andi	r2,r2,55
 4013050:	1005003a 	cmpeq	r2,r2,zero
 4013054:	10000b1e 	bne	r2,zero,4013084 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 4013058:	e0bffd17 	ldw	r2,-12(fp)
 401305c:	10c00d03 	ldbu	r3,52(r2)
 4013060:	00bff204 	movi	r2,-56
 4013064:	1884703a 	and	r2,r3,r2
 4013068:	1007883a 	mov	r3,r2
 401306c:	e0bffd17 	ldw	r2,-12(fp)
 4013070:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 4013074:	e0fffd17 	ldw	r3,-12(fp)
 4013078:	00800044 	movi	r2,1
 401307c:	18800d45 	stb	r2,53(r3)
 4013080:	00000206 	br	401308c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 4013084:	e0bffd17 	ldw	r2,-12(fp)
 4013088:	10000d45 	stb	zero,53(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 401308c:	e0bffd17 	ldw	r2,-12(fp)
 4013090:	10800d03 	ldbu	r2,52(r2)
 4013094:	10803fcc 	andi	r2,r2,255
 4013098:	1080020c 	andi	r2,r2,8
 401309c:	1004c03a 	cmpne	r2,r2,zero
 40130a0:	1000221e 	bne	r2,zero,401312c <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 40130a4:	e0bffd17 	ldw	r2,-12(fp)
 40130a8:	10c00e83 	ldbu	r3,58(r2)
 40130ac:	008100b4 	movhi	r2,1026
 40130b0:	10a2c404 	addi	r2,r2,-29936
 40130b4:	10800003 	ldbu	r2,0(r2)
 40130b8:	1884b03a 	or	r2,r3,r2
 40130bc:	1007883a 	mov	r3,r2
 40130c0:	008100b4 	movhi	r2,1026
 40130c4:	10a2c404 	addi	r2,r2,-29936
 40130c8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40130cc:	e0bffd17 	ldw	r2,-12(fp)
 40130d0:	10800e03 	ldbu	r2,56(r2)
 40130d4:	11003fcc 	andi	r4,r2,255
 40130d8:	e0bffd17 	ldw	r2,-12(fp)
 40130dc:	10800e03 	ldbu	r2,56(r2)
 40130e0:	10c03fcc 	andi	r3,r2,255
 40130e4:	008100b4 	movhi	r2,1026
 40130e8:	10a2c444 	addi	r2,r2,-29935
 40130ec:	10c5883a 	add	r2,r2,r3
 40130f0:	10c00003 	ldbu	r3,0(r2)
 40130f4:	e0bffd17 	ldw	r2,-12(fp)
 40130f8:	10800e43 	ldbu	r2,57(r2)
 40130fc:	1884b03a 	or	r2,r3,r2
 4013100:	1007883a 	mov	r3,r2
 4013104:	008100b4 	movhi	r2,1026
 4013108:	10a2c444 	addi	r2,r2,-29935
 401310c:	1105883a 	add	r2,r2,r4
 4013110:	10c00005 	stb	r3,0(r2)
 4013114:	e0bffc17 	ldw	r2,-16(fp)
 4013118:	e0bff715 	stw	r2,-36(fp)
 401311c:	e0bff717 	ldw	r2,-36(fp)
 4013120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 4013124:	400c7a40 	call	400c7a4 <OS_Sched>
 4013128:	00000406 	br	401313c <OSTimeDlyResume+0x1f4>
 401312c:	e0bffc17 	ldw	r2,-16(fp)
 4013130:	e0bff615 	stw	r2,-40(fp)
 4013134:	e0bff617 	ldw	r2,-40(fp)
 4013138:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 401313c:	e03fff15 	stw	zero,-4(fp)
 4013140:	e0bfff17 	ldw	r2,-4(fp)
}
 4013144:	e037883a 	mov	sp,fp
 4013148:	dfc00117 	ldw	ra,4(sp)
 401314c:	df000017 	ldw	fp,0(sp)
 4013150:	dec00204 	addi	sp,sp,8
 4013154:	f800283a 	ret

04013158 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 4013158:	defffb04 	addi	sp,sp,-20
 401315c:	df000415 	stw	fp,16(sp)
 4013160:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4013164:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013168:	0005303a 	rdctl	r2,status
 401316c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013170:	e0fffd17 	ldw	r3,-12(fp)
 4013174:	00bfff84 	movi	r2,-2
 4013178:	1884703a 	and	r2,r3,r2
 401317c:	1001703a 	wrctl	status,r2
  
  return context;
 4013180:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4013184:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 4013188:	008100b4 	movhi	r2,1026
 401318c:	10a2c804 	addi	r2,r2,-29920
 4013190:	10800017 	ldw	r2,0(r2)
 4013194:	e0bfff15 	stw	r2,-4(fp)
 4013198:	e0bffe17 	ldw	r2,-8(fp)
 401319c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40131a0:	e0bffc17 	ldw	r2,-16(fp)
 40131a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 40131a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40131ac:	e037883a 	mov	sp,fp
 40131b0:	df000017 	ldw	fp,0(sp)
 40131b4:	dec00104 	addi	sp,sp,4
 40131b8:	f800283a 	ret

040131bc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 40131bc:	defffb04 	addi	sp,sp,-20
 40131c0:	df000415 	stw	fp,16(sp)
 40131c4:	df000404 	addi	fp,sp,16
 40131c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40131cc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40131d0:	0005303a 	rdctl	r2,status
 40131d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40131d8:	e0fffd17 	ldw	r3,-12(fp)
 40131dc:	00bfff84 	movi	r2,-2
 40131e0:	1884703a 	and	r2,r3,r2
 40131e4:	1001703a 	wrctl	status,r2
  
  return context;
 40131e8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 40131ec:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 40131f0:	00c100b4 	movhi	r3,1026
 40131f4:	18e2c804 	addi	r3,r3,-29920
 40131f8:	e0bfff17 	ldw	r2,-4(fp)
 40131fc:	18800015 	stw	r2,0(r3)
 4013200:	e0bffe17 	ldw	r2,-8(fp)
 4013204:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013208:	e0bffc17 	ldw	r2,-16(fp)
 401320c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4013210:	e037883a 	mov	sp,fp
 4013214:	df000017 	ldw	fp,0(sp)
 4013218:	dec00104 	addi	sp,sp,4
 401321c:	f800283a 	ret

04013220 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4013220:	defffd04 	addi	sp,sp,-12
 4013224:	dfc00215 	stw	ra,8(sp)
 4013228:	df000115 	stw	fp,4(sp)
 401322c:	df000104 	addi	fp,sp,4
 4013230:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 4013234:	4015b540 	call	4015b54 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4013238:	00800044 	movi	r2,1
 401323c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4013240:	e037883a 	mov	sp,fp
 4013244:	dfc00117 	ldw	ra,4(sp)
 4013248:	df000017 	ldw	fp,0(sp)
 401324c:	dec00204 	addi	sp,sp,8
 4013250:	f800283a 	ret

04013254 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4013254:	defffe04 	addi	sp,sp,-8
 4013258:	dfc00115 	stw	ra,4(sp)
 401325c:	df000015 	stw	fp,0(sp)
 4013260:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( UCOSII_TIMER, ucosii_timer);
 4013264:	01060004 	movi	r4,6144
 4013268:	000b883a 	mov	r5,zero
 401326c:	01800084 	movi	r6,2
 4013270:	01c01904 	movi	r7,100
 4013274:	40149f00 	call	40149f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 4013278:	01010074 	movhi	r4,1025
 401327c:	211e2404 	addi	r4,r4,30864
 4013280:	40132f00 	call	40132f0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4013284:	01010074 	movhi	r4,1025
 4013288:	211e5f04 	addi	r4,r4,31100
 401328c:	000b883a 	mov	r5,zero
 4013290:	01800044 	movi	r6,1
 4013294:	4013d6c0 	call	4013d6c <altera_avalon_jtag_uart_init>
 4013298:	01010074 	movhi	r4,1025
 401329c:	211e5504 	addi	r4,r4,31060
 40132a0:	40132b80 	call	40132b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 40132a4:	e037883a 	mov	sp,fp
 40132a8:	dfc00117 	ldw	ra,4(sp)
 40132ac:	df000017 	ldw	fp,0(sp)
 40132b0:	dec00204 	addi	sp,sp,8
 40132b4:	f800283a 	ret

040132b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40132b8:	defffd04 	addi	sp,sp,-12
 40132bc:	dfc00215 	stw	ra,8(sp)
 40132c0:	df000115 	stw	fp,4(sp)
 40132c4:	df000104 	addi	fp,sp,4
 40132c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40132cc:	e13fff17 	ldw	r4,-4(fp)
 40132d0:	014100b4 	movhi	r5,1026
 40132d4:	29627b04 	addi	r5,r5,-30228
 40132d8:	40150340 	call	4015034 <alt_dev_llist_insert>
}
 40132dc:	e037883a 	mov	sp,fp
 40132e0:	dfc00117 	ldw	ra,4(sp)
 40132e4:	df000017 	ldw	fp,0(sp)
 40132e8:	dec00204 	addi	sp,sp,8
 40132ec:	f800283a 	ret

040132f0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 40132f0:	defffc04 	addi	sp,sp,-16
 40132f4:	dfc00315 	stw	ra,12(sp)
 40132f8:	df000215 	stw	fp,8(sp)
 40132fc:	df000204 	addi	fp,sp,8
 4013300:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4013304:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 4013308:	e13fff17 	ldw	r4,-4(fp)
 401330c:	401337c0 	call	401337c <alt_epcs_flash_query>
 4013310:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 4013314:	e0bffe17 	ldw	r2,-8(fp)
 4013318:	1004c03a 	cmpne	r2,r2,zero
 401331c:	1000031e 	bne	r2,zero,401332c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 4013320:	e13fff17 	ldw	r4,-4(fp)
 4013324:	40133440 	call	4013344 <alt_flash_device_register>
 4013328:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 401332c:	e0bffe17 	ldw	r2,-8(fp)
}
 4013330:	e037883a 	mov	sp,fp
 4013334:	dfc00117 	ldw	ra,4(sp)
 4013338:	df000017 	ldw	fp,0(sp)
 401333c:	dec00204 	addi	sp,sp,8
 4013340:	f800283a 	ret

04013344 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 4013344:	defffd04 	addi	sp,sp,-12
 4013348:	dfc00215 	stw	ra,8(sp)
 401334c:	df000115 	stw	fp,4(sp)
 4013350:	df000104 	addi	fp,sp,4
 4013354:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 4013358:	e13fff17 	ldw	r4,-4(fp)
 401335c:	014100b4 	movhi	r5,1026
 4013360:	29629f04 	addi	r5,r5,-30084
 4013364:	40150340 	call	4015034 <alt_dev_llist_insert>
}
 4013368:	e037883a 	mov	sp,fp
 401336c:	dfc00117 	ldw	ra,4(sp)
 4013370:	df000017 	ldw	fp,0(sp)
 4013374:	dec00204 	addi	sp,sp,8
 4013378:	f800283a 	ret

0401337c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 401337c:	defffc04 	addi	sp,sp,-16
 4013380:	dfc00315 	stw	ra,12(sp)
 4013384:	df000215 	stw	fp,8(sp)
 4013388:	df000204 	addi	fp,sp,8
 401338c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4013390:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */

  /* Send the RES command sequence */
  flash->silicon_id =
 4013394:	e0bfff17 	ldw	r2,-4(fp)
 4013398:	11002d17 	ldw	r4,180(r2)
 401339c:	4014e0c0 	call	4014e0c <epcs_read_electronic_signature>
 40133a0:	10c03fcc 	andi	r3,r2,255
 40133a4:	e0bfff17 	ldw	r2,-4(fp)
 40133a8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 40133ac:	e0bfff17 	ldw	r2,-4(fp)
 40133b0:	10802f17 	ldw	r2,188(r2)
 40133b4:	10800598 	cmpnei	r2,r2,22
 40133b8:	10000a1e 	bne	r2,zero,40133e4 <alt_epcs_flash_query+0x68>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 40133bc:	e0ffff17 	ldw	r3,-4(fp)
 40133c0:	00802034 	movhi	r2,128
 40133c4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 40133c8:	e0ffff17 	ldw	r3,-4(fp)
 40133cc:	00802004 	movi	r2,128
 40133d0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 40133d4:	e0ffff17 	ldw	r3,-4(fp)
 40133d8:	00800074 	movhi	r2,1
 40133dc:	18801015 	stw	r2,64(r3)
 40133e0:	00004e06 	br	401351c <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 40133e4:	e0bfff17 	ldw	r2,-4(fp)
 40133e8:	10802f17 	ldw	r2,188(r2)
 40133ec:	10800518 	cmpnei	r2,r2,20
 40133f0:	10000a1e 	bne	r2,zero,401341c <alt_epcs_flash_query+0xa0>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 40133f4:	e0ffff17 	ldw	r3,-4(fp)
 40133f8:	00800834 	movhi	r2,32
 40133fc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 4013400:	e0ffff17 	ldw	r3,-4(fp)
 4013404:	00800804 	movi	r2,32
 4013408:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 401340c:	e0ffff17 	ldw	r3,-4(fp)
 4013410:	00800074 	movhi	r2,1
 4013414:	18801015 	stw	r2,64(r3)
 4013418:	00004006 	br	401351c <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 401341c:	e0bfff17 	ldw	r2,-4(fp)
 4013420:	10802f17 	ldw	r2,188(r2)
 4013424:	108004d8 	cmpnei	r2,r2,19
 4013428:	10000a1e 	bne	r2,zero,4013454 <alt_epcs_flash_query+0xd8>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 401342c:	e0ffff17 	ldw	r3,-4(fp)
 4013430:	00800434 	movhi	r2,16
 4013434:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 4013438:	e0ffff17 	ldw	r3,-4(fp)
 401343c:	00800404 	movi	r2,16
 4013440:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 4013444:	e0ffff17 	ldw	r3,-4(fp)
 4013448:	00800074 	movhi	r2,1
 401344c:	18801015 	stw	r2,64(r3)
 4013450:	00003206 	br	401351c <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 4013454:	e0bfff17 	ldw	r2,-4(fp)
 4013458:	10802f17 	ldw	r2,188(r2)
 401345c:	10800498 	cmpnei	r2,r2,18
 4013460:	10000a1e 	bne	r2,zero,401348c <alt_epcs_flash_query+0x110>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 4013464:	e0ffff17 	ldw	r3,-4(fp)
 4013468:	00800234 	movhi	r2,8
 401346c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 4013470:	e0ffff17 	ldw	r3,-4(fp)
 4013474:	00800204 	movi	r2,8
 4013478:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 401347c:	e0ffff17 	ldw	r3,-4(fp)
 4013480:	00800074 	movhi	r2,1
 4013484:	18801015 	stw	r2,64(r3)
 4013488:	00002406 	br	401351c <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 401348c:	e0bfff17 	ldw	r2,-4(fp)
 4013490:	10802f17 	ldw	r2,188(r2)
 4013494:	10800418 	cmpnei	r2,r2,16
 4013498:	10000a1e 	bne	r2,zero,40134c4 <alt_epcs_flash_query+0x148>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 401349c:	e0ffff17 	ldw	r3,-4(fp)
 40134a0:	008000b4 	movhi	r2,2
 40134a4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 40134a8:	e0ffff17 	ldw	r3,-4(fp)
 40134ac:	00800104 	movi	r2,4
 40134b0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 40134b4:	e0ffff17 	ldw	r3,-4(fp)
 40134b8:	00a00014 	movui	r2,32768
 40134bc:	18801015 	stw	r2,64(r3)
 40134c0:	00001606 	br	401351c <alt_epcs_flash_query+0x1a0>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 40134c4:	e0bfff17 	ldw	r2,-4(fp)
 40134c8:	11002d17 	ldw	r4,180(r2)
 40134cc:	4014e780 	call	4014e78 <epcs_read_device_id>
 40134d0:	10c03fcc 	andi	r3,r2,255
 40134d4:	e0bfff17 	ldw	r2,-4(fp)
 40134d8:	10c02f15 	stw	r3,188(r2)
    
    if(flash->silicon_id == 0x18) /* EPCS128 */
 40134dc:	e0bfff17 	ldw	r2,-4(fp)
 40134e0:	10802f17 	ldw	r2,188(r2)
 40134e4:	10800618 	cmpnei	r2,r2,24
 40134e8:	10000a1e 	bne	r2,zero,4013514 <alt_epcs_flash_query+0x198>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 40134ec:	e0ffff17 	ldw	r3,-4(fp)
 40134f0:	00804034 	movhi	r2,256
 40134f4:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 40134f8:	e0ffff17 	ldw	r3,-4(fp)
 40134fc:	00801004 	movi	r2,64
 4013500:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;     
 4013504:	e0ffff17 	ldw	r3,-4(fp)
 4013508:	00800134 	movhi	r2,4
 401350c:	18801015 	stw	r2,64(r3)
 4013510:	00000206 	br	401351c <alt_epcs_flash_query+0x1a0>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 4013514:	00bffb44 	movi	r2,-19
 4013518:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 401351c:	e0bfff17 	ldw	r2,-4(fp)
 4013520:	10800e17 	ldw	r2,56(r2)
 4013524:	1007883a 	mov	r3,r2
 4013528:	e0bfff17 	ldw	r2,-4(fp)
 401352c:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 4013530:	e0ffff17 	ldw	r3,-4(fp)
 4013534:	00800044 	movi	r2,1
 4013538:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 401353c:	e0bfff17 	ldw	r2,-4(fp)
 4013540:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 4013544:	e0ffff17 	ldw	r3,-4(fp)
 4013548:	00804004 	movi	r2,256
 401354c:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 4013550:	e0bffe17 	ldw	r2,-8(fp)
}
 4013554:	e037883a 	mov	sp,fp
 4013558:	dfc00117 	ldw	ra,4(sp)
 401355c:	df000017 	ldw	fp,0(sp)
 4013560:	dec00204 	addi	sp,sp,8
 4013564:	f800283a 	ret

04013568 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 4013568:	deffeb04 	addi	sp,sp,-84
 401356c:	dfc01415 	stw	ra,80(sp)
 4013570:	df001315 	stw	fp,76(sp)
 4013574:	df001304 	addi	fp,sp,76
 4013578:	e13ff915 	stw	r4,-28(fp)
 401357c:	e17ffa15 	stw	r5,-24(fp)
 4013580:	e1bffb15 	stw	r6,-20(fp)
 4013584:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 4013588:	00800804 	movi	r2,32
 401358c:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 4013590:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 4013594:	00002c06 	br	4013648 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 4013598:	e0bff017 	ldw	r2,-64(fp)
 401359c:	e0bfff15 	stw	r2,-4(fp)
 40135a0:	e0fffc17 	ldw	r3,-16(fp)
 40135a4:	e0fffe15 	stw	r3,-8(fp)
 40135a8:	e0bfff17 	ldw	r2,-4(fp)
 40135ac:	e0fffe17 	ldw	r3,-8(fp)
 40135b0:	10c0022e 	bgeu	r2,r3,40135bc <alt_epcs_flash_memcmp+0x54>
 40135b4:	e0bfff17 	ldw	r2,-4(fp)
 40135b8:	e0bffe15 	stw	r2,-8(fp)
 40135bc:	e0fffe17 	ldw	r3,-8(fp)
 40135c0:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 40135c4:	e0fffb17 	ldw	r3,-20(fp)
 40135c8:	e0bfef17 	ldw	r2,-68(fp)
 40135cc:	188b883a 	add	r5,r3,r2
 40135d0:	e1bff104 	addi	r6,fp,-60
 40135d4:	e13ff917 	ldw	r4,-28(fp)
 40135d8:	e1ffee17 	ldw	r7,-72(fp)
 40135dc:	4013b980 	call	4013b98 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 40135e0:	1004403a 	cmpge	r2,r2,zero
 40135e4:	1000031e 	bne	r2,zero,40135f4 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 40135e8:	00bfffc4 	movi	r2,-1
 40135ec:	e0bffd15 	stw	r2,-12(fp)
 40135f0:	00001906 	br	4013658 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 40135f4:	e0fffa17 	ldw	r3,-24(fp)
 40135f8:	e0bfef17 	ldw	r2,-68(fp)
 40135fc:	1889883a 	add	r4,r3,r2
 4013600:	e1bfee17 	ldw	r6,-72(fp)
 4013604:	e17ff104 	addi	r5,fp,-60
 4013608:	40165880 	call	4016588 <memcmp>
 401360c:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 4013610:	e0bfed17 	ldw	r2,-76(fp)
 4013614:	1005003a 	cmpeq	r2,r2,zero
 4013618:	1000031e 	bne	r2,zero,4013628 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 401361c:	e0ffed17 	ldw	r3,-76(fp)
 4013620:	e0fffd15 	stw	r3,-12(fp)
 4013624:	00000c06 	br	4013658 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 4013628:	e0ffee17 	ldw	r3,-72(fp)
 401362c:	e0bffc17 	ldw	r2,-16(fp)
 4013630:	10c5c83a 	sub	r2,r2,r3
 4013634:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 4013638:	e0ffef17 	ldw	r3,-68(fp)
 401363c:	e0bfee17 	ldw	r2,-72(fp)
 4013640:	1885883a 	add	r2,r3,r2
 4013644:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 4013648:	e0bffc17 	ldw	r2,-16(fp)
 401364c:	1004c03a 	cmpne	r2,r2,zero
 4013650:	103fd11e 	bne	r2,zero,4013598 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 4013654:	e03ffd15 	stw	zero,-12(fp)
 4013658:	e0bffd17 	ldw	r2,-12(fp)
}
 401365c:	e037883a 	mov	sp,fp
 4013660:	dfc00117 	ldw	ra,4(sp)
 4013664:	df000017 	ldw	fp,0(sp)
 4013668:	dec00204 	addi	sp,sp,8
 401366c:	f800283a 	ret

04013670 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 4013670:	defff204 	addi	sp,sp,-56
 4013674:	dfc00d15 	stw	ra,52(sp)
 4013678:	df000c15 	stw	fp,48(sp)
 401367c:	df000c04 	addi	fp,sp,48
 4013680:	e13ffa15 	stw	r4,-24(fp)
 4013684:	e17ffb15 	stw	r5,-20(fp)
 4013688:	e1bffc15 	stw	r6,-16(fp)
 401368c:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 4013690:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 4013694:	e03ff815 	stw	zero,-32(fp)
 4013698:	00008b06 	br	40138c8 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401369c:	e0bff817 	ldw	r2,-32(fp)
 40136a0:	e0fffa17 	ldw	r3,-24(fp)
 40136a4:	1004913a 	slli	r2,r2,4
 40136a8:	10c5883a 	add	r2,r2,r3
 40136ac:	10800d04 	addi	r2,r2,52
 40136b0:	10c00017 	ldw	r3,0(r2)
 40136b4:	e0bffb17 	ldw	r2,-20(fp)
 40136b8:	10c08016 	blt	r2,r3,40138bc <alt_epcs_flash_write+0x24c>
 40136bc:	e0bff817 	ldw	r2,-32(fp)
 40136c0:	e0fffa17 	ldw	r3,-24(fp)
 40136c4:	1004913a 	slli	r2,r2,4
 40136c8:	10c5883a 	add	r2,r2,r3
 40136cc:	10800d04 	addi	r2,r2,52
 40136d0:	11000017 	ldw	r4,0(r2)
 40136d4:	e0bff817 	ldw	r2,-32(fp)
 40136d8:	e0fffa17 	ldw	r3,-24(fp)
 40136dc:	1004913a 	slli	r2,r2,4
 40136e0:	10c5883a 	add	r2,r2,r3
 40136e4:	10800e04 	addi	r2,r2,56
 40136e8:	10800017 	ldw	r2,0(r2)
 40136ec:	2087883a 	add	r3,r4,r2
 40136f0:	e0bffb17 	ldw	r2,-20(fp)
 40136f4:	10c0710e 	bge	r2,r3,40138bc <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 40136f8:	e0bff817 	ldw	r2,-32(fp)
 40136fc:	e0fffa17 	ldw	r3,-24(fp)
 4013700:	1004913a 	slli	r2,r2,4
 4013704:	10c5883a 	add	r2,r2,r3
 4013708:	10800d04 	addi	r2,r2,52
 401370c:	10800017 	ldw	r2,0(r2)
 4013710:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4013714:	e03ff715 	stw	zero,-36(fp)
 4013718:	00006006 	br	401389c <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 401371c:	e0fffb17 	ldw	r3,-20(fp)
 4013720:	e0bff517 	ldw	r2,-44(fp)
 4013724:	18805116 	blt	r3,r2,401386c <alt_epcs_flash_write+0x1fc>
 4013728:	e0bff817 	ldw	r2,-32(fp)
 401372c:	e0fffa17 	ldw	r3,-24(fp)
 4013730:	1004913a 	slli	r2,r2,4
 4013734:	10c5883a 	add	r2,r2,r3
 4013738:	10801004 	addi	r2,r2,64
 401373c:	10c00017 	ldw	r3,0(r2)
 4013740:	e0bff517 	ldw	r2,-44(fp)
 4013744:	1887883a 	add	r3,r3,r2
 4013748:	e0bffb17 	ldw	r2,-20(fp)
 401374c:	10c0470e 	bge	r2,r3,401386c <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 4013750:	e0bff817 	ldw	r2,-32(fp)
 4013754:	e0fffa17 	ldw	r3,-24(fp)
 4013758:	1004913a 	slli	r2,r2,4
 401375c:	10c5883a 	add	r2,r2,r3
 4013760:	10801004 	addi	r2,r2,64
 4013764:	10c00017 	ldw	r3,0(r2)
 4013768:	e0bff517 	ldw	r2,-44(fp)
 401376c:	1887883a 	add	r3,r3,r2
 4013770:	e0bffb17 	ldw	r2,-20(fp)
 4013774:	1885c83a 	sub	r2,r3,r2
 4013778:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 401377c:	e0bff617 	ldw	r2,-40(fp)
 4013780:	e0bfff15 	stw	r2,-4(fp)
 4013784:	e0fffd17 	ldw	r3,-12(fp)
 4013788:	e0fffe15 	stw	r3,-8(fp)
 401378c:	e0bfff17 	ldw	r2,-4(fp)
 4013790:	e0fffe17 	ldw	r3,-8(fp)
 4013794:	10c0020e 	bge	r2,r3,40137a0 <alt_epcs_flash_write+0x130>
 4013798:	e0bfff17 	ldw	r2,-4(fp)
 401379c:	e0bffe15 	stw	r2,-8(fp)
 40137a0:	e0fffe17 	ldw	r3,-8(fp)
 40137a4:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 40137a8:	e1fff617 	ldw	r7,-40(fp)
 40137ac:	e13ffa17 	ldw	r4,-24(fp)
 40137b0:	e17ffc17 	ldw	r5,-16(fp)
 40137b4:	e1bffb17 	ldw	r6,-20(fp)
 40137b8:	40135680 	call	4013568 <alt_epcs_flash_memcmp>
 40137bc:	1005003a 	cmpeq	r2,r2,zero
 40137c0:	1000131e 	bne	r2,zero,4013810 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 40137c4:	e0bffa17 	ldw	r2,-24(fp)
 40137c8:	10800817 	ldw	r2,32(r2)
 40137cc:	e13ffa17 	ldw	r4,-24(fp)
 40137d0:	e17ff517 	ldw	r5,-44(fp)
 40137d4:	103ee83a 	callr	r2
 40137d8:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 40137dc:	e0bff917 	ldw	r2,-28(fp)
 40137e0:	1004c03a 	cmpne	r2,r2,zero
 40137e4:	10000a1e 	bne	r2,zero,4013810 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 40137e8:	e0bffa17 	ldw	r2,-24(fp)
 40137ec:	10c00917 	ldw	r3,36(r2)
 40137f0:	e0bff617 	ldw	r2,-40(fp)
 40137f4:	d8800015 	stw	r2,0(sp)
 40137f8:	e13ffa17 	ldw	r4,-24(fp)
 40137fc:	e17ff517 	ldw	r5,-44(fp)
 4013800:	e1bffb17 	ldw	r6,-20(fp)
 4013804:	e1fffc17 	ldw	r7,-16(fp)
 4013808:	183ee83a 	callr	r3
 401380c:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 4013810:	e0fffd17 	ldw	r3,-12(fp)
 4013814:	e0bff617 	ldw	r2,-40(fp)
 4013818:	18802f26 	beq	r3,r2,40138d8 <alt_epcs_flash_write+0x268>
 401381c:	e0bff917 	ldw	r2,-28(fp)
 4013820:	1004c03a 	cmpne	r2,r2,zero
 4013824:	10002c1e 	bne	r2,zero,40138d8 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 4013828:	e0fffd17 	ldw	r3,-12(fp)
 401382c:	e0bff617 	ldw	r2,-40(fp)
 4013830:	1885c83a 	sub	r2,r3,r2
 4013834:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 4013838:	e0bff817 	ldw	r2,-32(fp)
 401383c:	e0fffa17 	ldw	r3,-24(fp)
 4013840:	1004913a 	slli	r2,r2,4
 4013844:	10c5883a 	add	r2,r2,r3
 4013848:	10801004 	addi	r2,r2,64
 401384c:	10c00017 	ldw	r3,0(r2)
 4013850:	e0bff517 	ldw	r2,-44(fp)
 4013854:	1885883a 	add	r2,r3,r2
 4013858:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 401385c:	e0fffc17 	ldw	r3,-16(fp)
 4013860:	e0bff617 	ldw	r2,-40(fp)
 4013864:	1885883a 	add	r2,r3,r2
 4013868:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 401386c:	e0bff817 	ldw	r2,-32(fp)
 4013870:	e0fffa17 	ldw	r3,-24(fp)
 4013874:	1004913a 	slli	r2,r2,4
 4013878:	10c5883a 	add	r2,r2,r3
 401387c:	10801004 	addi	r2,r2,64
 4013880:	10c00017 	ldw	r3,0(r2)
 4013884:	e0bff517 	ldw	r2,-44(fp)
 4013888:	10c5883a 	add	r2,r2,r3
 401388c:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4013890:	e0bff717 	ldw	r2,-36(fp)
 4013894:	10800044 	addi	r2,r2,1
 4013898:	e0bff715 	stw	r2,-36(fp)
 401389c:	e0bff817 	ldw	r2,-32(fp)
 40138a0:	e0fffa17 	ldw	r3,-24(fp)
 40138a4:	1004913a 	slli	r2,r2,4
 40138a8:	10c5883a 	add	r2,r2,r3
 40138ac:	10800f04 	addi	r2,r2,60
 40138b0:	10c00017 	ldw	r3,0(r2)
 40138b4:	e0bff717 	ldw	r2,-36(fp)
 40138b8:	10ff9816 	blt	r2,r3,401371c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 40138bc:	e0bff817 	ldw	r2,-32(fp)
 40138c0:	10800044 	addi	r2,r2,1
 40138c4:	e0bff815 	stw	r2,-32(fp)
 40138c8:	e0bffa17 	ldw	r2,-24(fp)
 40138cc:	10c00c17 	ldw	r3,48(r2)
 40138d0:	e0bff817 	ldw	r2,-32(fp)
 40138d4:	10ff7116 	blt	r2,r3,401369c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 40138d8:	e0bff917 	ldw	r2,-28(fp)
}
 40138dc:	e037883a 	mov	sp,fp
 40138e0:	dfc00117 	ldw	ra,4(sp)
 40138e4:	df000017 	ldw	fp,0(sp)
 40138e8:	dec00204 	addi	sp,sp,8
 40138ec:	f800283a 	ret

040138f0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 40138f0:	defffa04 	addi	sp,sp,-24
 40138f4:	df000515 	stw	fp,20(sp)
 40138f8:	df000504 	addi	fp,sp,20
 40138fc:	e13ffd15 	stw	r4,-12(fp)
 4013900:	e17ffe15 	stw	r5,-8(fp)
 4013904:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 4013908:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 401390c:	e0bffd17 	ldw	r2,-12(fp)
 4013910:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 4013914:	e0bffb17 	ldw	r2,-20(fp)
 4013918:	10c00c17 	ldw	r3,48(r2)
 401391c:	e0bfff17 	ldw	r2,-4(fp)
 4013920:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 4013924:	e0bffb17 	ldw	r2,-20(fp)
 4013928:	10800c17 	ldw	r2,48(r2)
 401392c:	1004c03a 	cmpne	r2,r2,zero
 4013930:	1000031e 	bne	r2,zero,4013940 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 4013934:	00bffec4 	movi	r2,-5
 4013938:	e0bffc15 	stw	r2,-16(fp)
 401393c:	00000b06 	br	401396c <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 4013940:	e0bffb17 	ldw	r2,-20(fp)
 4013944:	10800c17 	ldw	r2,48(r2)
 4013948:	10800250 	cmplti	r2,r2,9
 401394c:	1000031e 	bne	r2,zero,401395c <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 4013950:	00bffd04 	movi	r2,-12
 4013954:	e0bffc15 	stw	r2,-16(fp)
 4013958:	00000406 	br	401396c <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 401395c:	e0bffb17 	ldw	r2,-20(fp)
 4013960:	10c00d04 	addi	r3,r2,52
 4013964:	e0bffe17 	ldw	r2,-8(fp)
 4013968:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 401396c:	e0bffc17 	ldw	r2,-16(fp)
}
 4013970:	e037883a 	mov	sp,fp
 4013974:	df000017 	ldw	fp,0(sp)
 4013978:	dec00104 	addi	sp,sp,4
 401397c:	f800283a 	ret

04013980 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 4013980:	defffa04 	addi	sp,sp,-24
 4013984:	dfc00515 	stw	ra,20(sp)
 4013988:	df000415 	stw	fp,16(sp)
 401398c:	df000404 	addi	fp,sp,16
 4013990:	e13ffe15 	stw	r4,-8(fp)
 4013994:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4013998:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401399c:	e0bffe17 	ldw	r2,-8(fp)
 40139a0:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 40139a4:	e13ffe17 	ldw	r4,-8(fp)
 40139a8:	e17fff17 	ldw	r5,-4(fp)
 40139ac:	40139f40 	call	40139f4 <alt_epcs_test_address>
 40139b0:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 40139b4:	e0bffd17 	ldw	r2,-12(fp)
 40139b8:	1004803a 	cmplt	r2,r2,zero
 40139bc:	1000071e 	bne	r2,zero,40139dc <alt_epcs_flash_erase_block+0x5c>
  {
    /* Execute a WREN instruction */
    epcs_write_enable(f->register_base);
 40139c0:	e0bffc17 	ldw	r2,-16(fp)
 40139c4:	11002d17 	ldw	r4,180(r2)
 40139c8:	4014c800 	call	4014c80 <epcs_write_enable>

    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset);
 40139cc:	e0bffc17 	ldw	r2,-16(fp)
 40139d0:	11002d17 	ldw	r4,180(r2)
 40139d4:	e17fff17 	ldw	r5,-4(fp)
 40139d8:	4014ae00 	call	4014ae0 <epcs_sector_erase>
  }
  return ret_code;
 40139dc:	e0bffd17 	ldw	r2,-12(fp)
}
 40139e0:	e037883a 	mov	sp,fp
 40139e4:	dfc00117 	ldw	ra,4(sp)
 40139e8:	df000017 	ldw	fp,0(sp)
 40139ec:	dec00204 	addi	sp,sp,8
 40139f0:	f800283a 	ret

040139f4 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 40139f4:	defff904 	addi	sp,sp,-28
 40139f8:	df000615 	stw	fp,24(sp)
 40139fc:	df000604 	addi	fp,sp,24
 4013a00:	e13ffe15 	stw	r4,-8(fp)
 4013a04:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4013a08:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4013a0c:	e0bffe17 	ldw	r2,-8(fp)
 4013a10:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 4013a14:	e0bffc17 	ldw	r2,-16(fp)
 4013a18:	10800c17 	ldw	r2,48(r2)
 4013a1c:	10bfffc4 	addi	r2,r2,-1
 4013a20:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 4013a24:	e0bffb17 	ldw	r2,-20(fp)
 4013a28:	e0fffc17 	ldw	r3,-16(fp)
 4013a2c:	1004913a 	slli	r2,r2,4
 4013a30:	10c5883a 	add	r2,r2,r3
 4013a34:	10800d04 	addi	r2,r2,52
 4013a38:	11000017 	ldw	r4,0(r2)
 4013a3c:	e0bffb17 	ldw	r2,-20(fp)
 4013a40:	e0fffc17 	ldw	r3,-16(fp)
 4013a44:	1004913a 	slli	r2,r2,4
 4013a48:	10c5883a 	add	r2,r2,r3
 4013a4c:	10800e04 	addi	r2,r2,56
 4013a50:	10800017 	ldw	r2,0(r2)
 4013a54:	2085883a 	add	r2,r4,r2
 4013a58:	10bfffc4 	addi	r2,r2,-1
 4013a5c:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 4013a60:	e0ffff17 	ldw	r3,-4(fp)
 4013a64:	e0bffa17 	ldw	r2,-24(fp)
 4013a68:	10c0022e 	bgeu	r2,r3,4013a74 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 4013a6c:	00bffec4 	movi	r2,-5
 4013a70:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 4013a74:	e0bffd17 	ldw	r2,-12(fp)
}
 4013a78:	e037883a 	mov	sp,fp
 4013a7c:	df000017 	ldw	fp,0(sp)
 4013a80:	dec00104 	addi	sp,sp,4
 4013a84:	f800283a 	ret

04013a88 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 4013a88:	defff304 	addi	sp,sp,-52
 4013a8c:	dfc00c15 	stw	ra,48(sp)
 4013a90:	df000b15 	stw	fp,44(sp)
 4013a94:	df000b04 	addi	fp,sp,44
 4013a98:	e13ffa15 	stw	r4,-24(fp)
 4013a9c:	e17ffb15 	stw	r5,-20(fp)
 4013aa0:	e1bffc15 	stw	r6,-16(fp)
 4013aa4:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4013aa8:	e0bffa17 	ldw	r2,-24(fp)
 4013aac:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 4013ab0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 4013ab4:	e13ffa17 	ldw	r4,-24(fp)
 4013ab8:	e17ffc17 	ldw	r5,-16(fp)
 4013abc:	40139f40 	call	40139f4 <alt_epcs_test_address>
 4013ac0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 4013ac4:	e0bff917 	ldw	r2,-28(fp)
 4013ac8:	1004803a 	cmplt	r2,r2,zero
 4013acc:	10002c1e 	bne	r2,zero,4013b80 <alt_epcs_flash_write_block+0xf8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4013ad0:	00002806 	br	4013b74 <alt_epcs_flash_write_block+0xec>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 4013ad4:	e0bff817 	ldw	r2,-32(fp)
 4013ad8:	10c03017 	ldw	r3,192(r2)
 4013adc:	e0bffc17 	ldw	r2,-16(fp)
 4013ae0:	1887883a 	add	r3,r3,r2
 4013ae4:	e0bff817 	ldw	r2,-32(fp)
 4013ae8:	10803017 	ldw	r2,192(r2)
 4013aec:	0085c83a 	sub	r2,zero,r2
 4013af0:	1884703a 	and	r2,r3,r2
 4013af4:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 4013af8:	e0fff517 	ldw	r3,-44(fp)
 4013afc:	e0bffc17 	ldw	r2,-16(fp)
 4013b00:	1885c83a 	sub	r2,r3,r2
 4013b04:	e0c00217 	ldw	r3,8(fp)
 4013b08:	e0ffff15 	stw	r3,-4(fp)
 4013b0c:	e0bffe15 	stw	r2,-8(fp)
 4013b10:	e0bfff17 	ldw	r2,-4(fp)
 4013b14:	e0fffe17 	ldw	r3,-8(fp)
 4013b18:	10c0020e 	bge	r2,r3,4013b24 <alt_epcs_flash_write_block+0x9c>
 4013b1c:	e0bfff17 	ldw	r2,-4(fp)
 4013b20:	e0bffe15 	stw	r2,-8(fp)
 4013b24:	e0fffe17 	ldw	r3,-8(fp)
 4013b28:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write);
 4013b2c:	e0bff817 	ldw	r2,-32(fp)
 4013b30:	11002d17 	ldw	r4,180(r2)
 4013b34:	e0fffd17 	ldw	r3,-12(fp)
 4013b38:	e0bff717 	ldw	r2,-36(fp)
 4013b3c:	188d883a 	add	r6,r3,r2
 4013b40:	e17ffc17 	ldw	r5,-16(fp)
 4013b44:	e1fff617 	ldw	r7,-40(fp)
 4013b48:	4014d340 	call	4014d34 <epcs_write_buffer>

      length -= length_of_current_write;
 4013b4c:	e0c00217 	ldw	r3,8(fp)
 4013b50:	e0bff617 	ldw	r2,-40(fp)
 4013b54:	1885c83a 	sub	r2,r3,r2
 4013b58:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 4013b5c:	e0fff717 	ldw	r3,-36(fp)
 4013b60:	e0bff617 	ldw	r2,-40(fp)
 4013b64:	1885883a 	add	r2,r3,r2
 4013b68:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 4013b6c:	e0bff517 	ldw	r2,-44(fp)
 4013b70:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4013b74:	e0800217 	ldw	r2,8(fp)
 4013b78:	1004c03a 	cmpne	r2,r2,zero
 4013b7c:	103fd51e 	bne	r2,zero,4013ad4 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 4013b80:	e0bff917 	ldw	r2,-28(fp)
}
 4013b84:	e037883a 	mov	sp,fp
 4013b88:	dfc00117 	ldw	ra,4(sp)
 4013b8c:	df000017 	ldw	fp,0(sp)
 4013b90:	dec00204 	addi	sp,sp,8
 4013b94:	f800283a 	ret

04013b98 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 4013b98:	defff804 	addi	sp,sp,-32
 4013b9c:	dfc00715 	stw	ra,28(sp)
 4013ba0:	df000615 	stw	fp,24(sp)
 4013ba4:	df000604 	addi	fp,sp,24
 4013ba8:	e13ffc15 	stw	r4,-16(fp)
 4013bac:	e17ffd15 	stw	r5,-12(fp)
 4013bb0:	e1bffe15 	stw	r6,-8(fp)
 4013bb4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 4013bb8:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4013bbc:	e0bffc17 	ldw	r2,-16(fp)
 4013bc0:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 4013bc4:	e13ffc17 	ldw	r4,-16(fp)
 4013bc8:	e17ffd17 	ldw	r5,-12(fp)
 4013bcc:	40139f40 	call	40139f4 <alt_epcs_test_address>
 4013bd0:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 4013bd4:	e0bffb17 	ldw	r2,-20(fp)
 4013bd8:	1004803a 	cmplt	r2,r2,zero
 4013bdc:	10000b1e 	bne	r2,zero,4013c0c <alt_epcs_flash_read+0x74>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length);
 4013be0:	e0bffa17 	ldw	r2,-24(fp)
 4013be4:	11002d17 	ldw	r4,180(r2)
 4013be8:	e1bffe17 	ldw	r6,-8(fp)
 4013bec:	e17ffd17 	ldw	r5,-12(fp)
 4013bf0:	e1ffff17 	ldw	r7,-4(fp)
 4013bf4:	4014bcc0 	call	4014bcc <epcs_read_buffer>
 4013bf8:	e0bffb15 	stw	r2,-20(fp)

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 4013bfc:	e0fffb17 	ldw	r3,-20(fp)
 4013c00:	e0bfff17 	ldw	r2,-4(fp)
 4013c04:	1880011e 	bne	r3,r2,4013c0c <alt_epcs_flash_read+0x74>
    {
      ret_code = 0;
 4013c08:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 4013c0c:	e0bffb17 	ldw	r2,-20(fp)
}
 4013c10:	e037883a 	mov	sp,fp
 4013c14:	dfc00117 	ldw	ra,4(sp)
 4013c18:	df000017 	ldw	fp,0(sp)
 4013c1c:	dec00204 	addi	sp,sp,8
 4013c20:	f800283a 	ret

04013c24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4013c24:	defffa04 	addi	sp,sp,-24
 4013c28:	dfc00515 	stw	ra,20(sp)
 4013c2c:	df000415 	stw	fp,16(sp)
 4013c30:	df000404 	addi	fp,sp,16
 4013c34:	e13ffd15 	stw	r4,-12(fp)
 4013c38:	e17ffe15 	stw	r5,-8(fp)
 4013c3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4013c40:	e0bffd17 	ldw	r2,-12(fp)
 4013c44:	10800017 	ldw	r2,0(r2)
 4013c48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4013c4c:	e0bffc17 	ldw	r2,-16(fp)
 4013c50:	11000a04 	addi	r4,r2,40
 4013c54:	e0bffd17 	ldw	r2,-12(fp)
 4013c58:	11c00217 	ldw	r7,8(r2)
 4013c5c:	e17ffe17 	ldw	r5,-8(fp)
 4013c60:	e1bfff17 	ldw	r6,-4(fp)
 4013c64:	40143e40 	call	40143e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4013c68:	e037883a 	mov	sp,fp
 4013c6c:	dfc00117 	ldw	ra,4(sp)
 4013c70:	df000017 	ldw	fp,0(sp)
 4013c74:	dec00204 	addi	sp,sp,8
 4013c78:	f800283a 	ret

04013c7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4013c7c:	defffa04 	addi	sp,sp,-24
 4013c80:	dfc00515 	stw	ra,20(sp)
 4013c84:	df000415 	stw	fp,16(sp)
 4013c88:	df000404 	addi	fp,sp,16
 4013c8c:	e13ffd15 	stw	r4,-12(fp)
 4013c90:	e17ffe15 	stw	r5,-8(fp)
 4013c94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4013c98:	e0bffd17 	ldw	r2,-12(fp)
 4013c9c:	10800017 	ldw	r2,0(r2)
 4013ca0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4013ca4:	e0bffc17 	ldw	r2,-16(fp)
 4013ca8:	11000a04 	addi	r4,r2,40
 4013cac:	e0bffd17 	ldw	r2,-12(fp)
 4013cb0:	11c00217 	ldw	r7,8(r2)
 4013cb4:	e17ffe17 	ldw	r5,-8(fp)
 4013cb8:	e1bfff17 	ldw	r6,-4(fp)
 4013cbc:	40146a40 	call	40146a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4013cc0:	e037883a 	mov	sp,fp
 4013cc4:	dfc00117 	ldw	ra,4(sp)
 4013cc8:	df000017 	ldw	fp,0(sp)
 4013ccc:	dec00204 	addi	sp,sp,8
 4013cd0:	f800283a 	ret

04013cd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4013cd4:	defffc04 	addi	sp,sp,-16
 4013cd8:	dfc00315 	stw	ra,12(sp)
 4013cdc:	df000215 	stw	fp,8(sp)
 4013ce0:	df000204 	addi	fp,sp,8
 4013ce4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4013ce8:	e0bfff17 	ldw	r2,-4(fp)
 4013cec:	10800017 	ldw	r2,0(r2)
 4013cf0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4013cf4:	e0bffe17 	ldw	r2,-8(fp)
 4013cf8:	11000a04 	addi	r4,r2,40
 4013cfc:	e0bfff17 	ldw	r2,-4(fp)
 4013d00:	11400217 	ldw	r5,8(r2)
 4013d04:	401427c0 	call	401427c <altera_avalon_jtag_uart_close>
}
 4013d08:	e037883a 	mov	sp,fp
 4013d0c:	dfc00117 	ldw	ra,4(sp)
 4013d10:	df000017 	ldw	fp,0(sp)
 4013d14:	dec00204 	addi	sp,sp,8
 4013d18:	f800283a 	ret

04013d1c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4013d1c:	defffa04 	addi	sp,sp,-24
 4013d20:	dfc00515 	stw	ra,20(sp)
 4013d24:	df000415 	stw	fp,16(sp)
 4013d28:	df000404 	addi	fp,sp,16
 4013d2c:	e13ffd15 	stw	r4,-12(fp)
 4013d30:	e17ffe15 	stw	r5,-8(fp)
 4013d34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4013d38:	e0bffd17 	ldw	r2,-12(fp)
 4013d3c:	10800017 	ldw	r2,0(r2)
 4013d40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4013d44:	e0bffc17 	ldw	r2,-16(fp)
 4013d48:	11000a04 	addi	r4,r2,40
 4013d4c:	e17ffe17 	ldw	r5,-8(fp)
 4013d50:	e1bfff17 	ldw	r6,-4(fp)
 4013d54:	40142f00 	call	40142f0 <altera_avalon_jtag_uart_ioctl>
}
 4013d58:	e037883a 	mov	sp,fp
 4013d5c:	dfc00117 	ldw	ra,4(sp)
 4013d60:	df000017 	ldw	fp,0(sp)
 4013d64:	dec00204 	addi	sp,sp,8
 4013d68:	f800283a 	ret

04013d6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4013d6c:	defff404 	addi	sp,sp,-48
 4013d70:	dfc00b15 	stw	ra,44(sp)
 4013d74:	df000a15 	stw	fp,40(sp)
 4013d78:	df000a04 	addi	fp,sp,40
 4013d7c:	e13ffd15 	stw	r4,-12(fp)
 4013d80:	e17ffe15 	stw	r5,-8(fp)
 4013d84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 4013d88:	e0bffd17 	ldw	r2,-12(fp)
 4013d8c:	10800c04 	addi	r2,r2,48
 4013d90:	e0bffb15 	stw	r2,-20(fp)
 4013d94:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 4013d98:	e13ffc0b 	ldhu	r4,-16(fp)
 4013d9c:	e17ffc84 	addi	r5,fp,-14
 4013da0:	400d5380 	call	400d538 <OSFlagCreate>
 4013da4:	1007883a 	mov	r3,r2
 4013da8:	e0bffb17 	ldw	r2,-20(fp)
 4013dac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 4013db0:	e0bffd17 	ldw	r2,-12(fp)
 4013db4:	10800a04 	addi	r2,r2,40
 4013db8:	e0bff915 	stw	r2,-28(fp)
 4013dbc:	00800044 	movi	r2,1
 4013dc0:	e0bffa0d 	sth	r2,-24(fp)
 4013dc4:	e13ffa0b 	ldhu	r4,-24(fp)
 4013dc8:	401073c0 	call	401073c <OSSemCreate>
 4013dcc:	1007883a 	mov	r3,r2
 4013dd0:	e0bff917 	ldw	r2,-28(fp)
 4013dd4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 4013dd8:	e0bffd17 	ldw	r2,-12(fp)
 4013ddc:	10800b04 	addi	r2,r2,44
 4013de0:	e0bff715 	stw	r2,-36(fp)
 4013de4:	00800044 	movi	r2,1
 4013de8:	e0bff80d 	sth	r2,-32(fp)
 4013dec:	e13ff80b 	ldhu	r4,-32(fp)
 4013df0:	401073c0 	call	401073c <OSSemCreate>
 4013df4:	1007883a 	mov	r3,r2
 4013df8:	e0bff717 	ldw	r2,-36(fp)
 4013dfc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013e00:	e0fffd17 	ldw	r3,-12(fp)
 4013e04:	00800044 	movi	r2,1
 4013e08:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4013e0c:	e0bffd17 	ldw	r2,-12(fp)
 4013e10:	10800017 	ldw	r2,0(r2)
 4013e14:	11000104 	addi	r4,r2,4
 4013e18:	e0bffd17 	ldw	r2,-12(fp)
 4013e1c:	10800817 	ldw	r2,32(r2)
 4013e20:	1007883a 	mov	r3,r2
 4013e24:	2005883a 	mov	r2,r4
 4013e28:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4013e2c:	e13ffe17 	ldw	r4,-8(fp)
 4013e30:	e17fff17 	ldw	r5,-4(fp)
 4013e34:	d8000015 	stw	zero,0(sp)
 4013e38:	01810074 	movhi	r6,1025
 4013e3c:	318fa904 	addi	r6,r6,16036
 4013e40:	e1fffd17 	ldw	r7,-12(fp)
 4013e44:	40152e00 	call	40152e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4013e48:	e0bffd17 	ldw	r2,-12(fp)
 4013e4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4013e50:	e0bffd17 	ldw	r2,-12(fp)
 4013e54:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4013e58:	008100b4 	movhi	r2,1026
 4013e5c:	10a2cd04 	addi	r2,r2,-29900
 4013e60:	10800017 	ldw	r2,0(r2)
 4013e64:	100b883a 	mov	r5,r2
 4013e68:	01810074 	movhi	r6,1025
 4013e6c:	31905a04 	addi	r6,r6,16744
 4013e70:	e1fffd17 	ldw	r7,-12(fp)
 4013e74:	4014ee00 	call	4014ee0 <alt_alarm_start>
 4013e78:	1004403a 	cmpge	r2,r2,zero
 4013e7c:	1000041e 	bne	r2,zero,4013e90 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4013e80:	e0fffd17 	ldw	r3,-12(fp)
 4013e84:	00a00034 	movhi	r2,32768
 4013e88:	10bfffc4 	addi	r2,r2,-1
 4013e8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4013e90:	e037883a 	mov	sp,fp
 4013e94:	dfc00117 	ldw	ra,4(sp)
 4013e98:	df000017 	ldw	fp,0(sp)
 4013e9c:	dec00204 	addi	sp,sp,8
 4013ea0:	f800283a 	ret

04013ea4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4013ea4:	defff204 	addi	sp,sp,-56
 4013ea8:	dfc00d15 	stw	ra,52(sp)
 4013eac:	df000c15 	stw	fp,48(sp)
 4013eb0:	df000c04 	addi	fp,sp,48
 4013eb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4013eb8:	e0bfff17 	ldw	r2,-4(fp)
 4013ebc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 4013ec0:	e0bffd17 	ldw	r2,-12(fp)
 4013ec4:	10800017 	ldw	r2,0(r2)
 4013ec8:	e0bffc15 	stw	r2,-16(fp)
 4013ecc:	00000006 	br	4013ed0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013ed0:	e0bffc17 	ldw	r2,-16(fp)
 4013ed4:	10800104 	addi	r2,r2,4
 4013ed8:	10800037 	ldwio	r2,0(r2)
 4013edc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4013ee0:	e0bffb17 	ldw	r2,-20(fp)
 4013ee4:	1080c00c 	andi	r2,r2,768
 4013ee8:	1005003a 	cmpeq	r2,r2,zero
 4013eec:	1000991e 	bne	r2,zero,4014154 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4013ef0:	e0bffb17 	ldw	r2,-20(fp)
 4013ef4:	1080400c 	andi	r2,r2,256
 4013ef8:	1005003a 	cmpeq	r2,r2,zero
 4013efc:	1000481e 	bne	r2,zero,4014020 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4013f00:	00800074 	movhi	r2,1
 4013f04:	e0bffa15 	stw	r2,-24(fp)
 4013f08:	00000006 	br	4013f0c <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013f0c:	e0bffd17 	ldw	r2,-12(fp)
 4013f10:	10800d17 	ldw	r2,52(r2)
 4013f14:	10800044 	addi	r2,r2,1
 4013f18:	1081ffcc 	andi	r2,r2,2047
 4013f1c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 4013f20:	e0bffd17 	ldw	r2,-12(fp)
 4013f24:	10c00e17 	ldw	r3,56(r2)
 4013f28:	e0bff917 	ldw	r2,-28(fp)
 4013f2c:	18802826 	beq	r3,r2,4013fd0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4013f30:	e0bffc17 	ldw	r2,-16(fp)
 4013f34:	10800037 	ldwio	r2,0(r2)
 4013f38:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4013f3c:	e0bffa17 	ldw	r2,-24(fp)
 4013f40:	10a0000c 	andi	r2,r2,32768
 4013f44:	1005003a 	cmpeq	r2,r2,zero
 4013f48:	1000211e 	bne	r2,zero,4013fd0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4013f4c:	e0bffd17 	ldw	r2,-12(fp)
 4013f50:	10c00d17 	ldw	r3,52(r2)
 4013f54:	e0bffa17 	ldw	r2,-24(fp)
 4013f58:	1009883a 	mov	r4,r2
 4013f5c:	e0bffd17 	ldw	r2,-12(fp)
 4013f60:	1885883a 	add	r2,r3,r2
 4013f64:	10801104 	addi	r2,r2,68
 4013f68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013f6c:	e0bffd17 	ldw	r2,-12(fp)
 4013f70:	10800d17 	ldw	r2,52(r2)
 4013f74:	10800044 	addi	r2,r2,1
 4013f78:	10c1ffcc 	andi	r3,r2,2047
 4013f7c:	e0bffd17 	ldw	r2,-12(fp)
 4013f80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 4013f84:	e0bffd17 	ldw	r2,-12(fp)
 4013f88:	10800c17 	ldw	r2,48(r2)
 4013f8c:	e0bff615 	stw	r2,-40(fp)
 4013f90:	00800044 	movi	r2,1
 4013f94:	e0bff70d 	sth	r2,-36(fp)
 4013f98:	00800044 	movi	r2,1
 4013f9c:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4013fa0:	008100b4 	movhi	r2,1026
 4013fa4:	10a2b804 	addi	r2,r2,-29984
 4013fa8:	10800003 	ldbu	r2,0(r2)
 4013fac:	10803fcc 	andi	r2,r2,255
 4013fb0:	1005003a 	cmpeq	r2,r2,zero
 4013fb4:	103fd51e 	bne	r2,zero,4013f0c <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 4013fb8:	e17ff70b 	ldhu	r5,-36(fp)
 4013fbc:	e1bff783 	ldbu	r6,-34(fp)
 4013fc0:	e1fffe04 	addi	r7,fp,-8
 4013fc4:	e13ff617 	ldw	r4,-40(fp)
 4013fc8:	400e2600 	call	400e260 <OSFlagPost>
    return err;
 4013fcc:	003fcf06 	br	4013f0c <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4013fd0:	e0bffa17 	ldw	r2,-24(fp)
 4013fd4:	10bfffec 	andhi	r2,r2,65535
 4013fd8:	1005003a 	cmpeq	r2,r2,zero
 4013fdc:	1000101e 	bne	r2,zero,4014020 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013fe0:	e0bffd17 	ldw	r2,-12(fp)
 4013fe4:	10c00817 	ldw	r3,32(r2)
 4013fe8:	00bfff84 	movi	r2,-2
 4013fec:	1886703a 	and	r3,r3,r2
 4013ff0:	e0bffd17 	ldw	r2,-12(fp)
 4013ff4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4013ff8:	e0bffc17 	ldw	r2,-16(fp)
 4013ffc:	11000104 	addi	r4,r2,4
 4014000:	e0bffd17 	ldw	r2,-12(fp)
 4014004:	10800817 	ldw	r2,32(r2)
 4014008:	1007883a 	mov	r3,r2
 401400c:	2005883a 	mov	r2,r4
 4014010:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4014014:	e0bffc17 	ldw	r2,-16(fp)
 4014018:	10800104 	addi	r2,r2,4
 401401c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4014020:	e0bffb17 	ldw	r2,-20(fp)
 4014024:	1080800c 	andi	r2,r2,512
 4014028:	1005003a 	cmpeq	r2,r2,zero
 401402c:	103fa81e 	bne	r2,zero,4013ed0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4014030:	e0bffb17 	ldw	r2,-20(fp)
 4014034:	10bfffec 	andhi	r2,r2,65535
 4014038:	1004d43a 	srli	r2,r2,16
 401403c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4014040:	00002706 	br	40140e0 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4014044:	e13ffc17 	ldw	r4,-16(fp)
 4014048:	e0bffd17 	ldw	r2,-12(fp)
 401404c:	10c01017 	ldw	r3,64(r2)
 4014050:	e0bffd17 	ldw	r2,-12(fp)
 4014054:	1885883a 	add	r2,r3,r2
 4014058:	10821104 	addi	r2,r2,2116
 401405c:	10800003 	ldbu	r2,0(r2)
 4014060:	10c03fcc 	andi	r3,r2,255
 4014064:	18c0201c 	xori	r3,r3,128
 4014068:	18ffe004 	addi	r3,r3,-128
 401406c:	2005883a 	mov	r2,r4
 4014070:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4014074:	e0bffd17 	ldw	r2,-12(fp)
 4014078:	10801017 	ldw	r2,64(r2)
 401407c:	10800044 	addi	r2,r2,1
 4014080:	10c1ffcc 	andi	r3,r2,2047
 4014084:	e0bffd17 	ldw	r2,-12(fp)
 4014088:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 401408c:	e0bffd17 	ldw	r2,-12(fp)
 4014090:	10800c17 	ldw	r2,48(r2)
 4014094:	e0bff415 	stw	r2,-48(fp)
 4014098:	00800084 	movi	r2,2
 401409c:	e0bff50d 	sth	r2,-44(fp)
 40140a0:	00800044 	movi	r2,1
 40140a4:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 40140a8:	008100b4 	movhi	r2,1026
 40140ac:	10a2b804 	addi	r2,r2,-29984
 40140b0:	10800003 	ldbu	r2,0(r2)
 40140b4:	10803fcc 	andi	r2,r2,255
 40140b8:	1005003a 	cmpeq	r2,r2,zero
 40140bc:	1000051e 	bne	r2,zero,40140d4 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 40140c0:	e17ff50b 	ldhu	r5,-44(fp)
 40140c4:	e1bff583 	ldbu	r6,-42(fp)
 40140c8:	e1fffe44 	addi	r7,fp,-7
 40140cc:	e13ff417 	ldw	r4,-48(fp)
 40140d0:	400e2600 	call	400e260 <OSFlagPost>

        space--;
 40140d4:	e0bff817 	ldw	r2,-32(fp)
 40140d8:	10bfffc4 	addi	r2,r2,-1
 40140dc:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40140e0:	e0bff817 	ldw	r2,-32(fp)
 40140e4:	1005003a 	cmpeq	r2,r2,zero
 40140e8:	1000051e 	bne	r2,zero,4014100 <altera_avalon_jtag_uart_irq+0x25c>
 40140ec:	e0bffd17 	ldw	r2,-12(fp)
 40140f0:	10c01017 	ldw	r3,64(r2)
 40140f4:	e0bffd17 	ldw	r2,-12(fp)
 40140f8:	10800f17 	ldw	r2,60(r2)
 40140fc:	18bfd11e 	bne	r3,r2,4014044 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4014100:	e0bff817 	ldw	r2,-32(fp)
 4014104:	1005003a 	cmpeq	r2,r2,zero
 4014108:	103f711e 	bne	r2,zero,4013ed0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401410c:	e0bffd17 	ldw	r2,-12(fp)
 4014110:	10c00817 	ldw	r3,32(r2)
 4014114:	00bfff44 	movi	r2,-3
 4014118:	1886703a 	and	r3,r3,r2
 401411c:	e0bffd17 	ldw	r2,-12(fp)
 4014120:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4014124:	e0bffd17 	ldw	r2,-12(fp)
 4014128:	10800017 	ldw	r2,0(r2)
 401412c:	11000104 	addi	r4,r2,4
 4014130:	e0bffd17 	ldw	r2,-12(fp)
 4014134:	10800817 	ldw	r2,32(r2)
 4014138:	1007883a 	mov	r3,r2
 401413c:	2005883a 	mov	r2,r4
 4014140:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4014144:	e0bffc17 	ldw	r2,-16(fp)
 4014148:	10800104 	addi	r2,r2,4
 401414c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4014150:	003f5f06 	br	4013ed0 <altera_avalon_jtag_uart_irq+0x2c>
}
 4014154:	e037883a 	mov	sp,fp
 4014158:	dfc00117 	ldw	ra,4(sp)
 401415c:	df000017 	ldw	fp,0(sp)
 4014160:	dec00204 	addi	sp,sp,8
 4014164:	f800283a 	ret

04014168 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4014168:	defff804 	addi	sp,sp,-32
 401416c:	dfc00715 	stw	ra,28(sp)
 4014170:	df000615 	stw	fp,24(sp)
 4014174:	df000604 	addi	fp,sp,24
 4014178:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401417c:	e0bfff17 	ldw	r2,-4(fp)
 4014180:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4014184:	e0bffd17 	ldw	r2,-12(fp)
 4014188:	10800017 	ldw	r2,0(r2)
 401418c:	10800104 	addi	r2,r2,4
 4014190:	10800037 	ldwio	r2,0(r2)
 4014194:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4014198:	e0bffc17 	ldw	r2,-16(fp)
 401419c:	1081000c 	andi	r2,r2,1024
 40141a0:	1005003a 	cmpeq	r2,r2,zero
 40141a4:	10000c1e 	bne	r2,zero,40141d8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40141a8:	e0bffd17 	ldw	r2,-12(fp)
 40141ac:	10800017 	ldw	r2,0(r2)
 40141b0:	11000104 	addi	r4,r2,4
 40141b4:	e0bffd17 	ldw	r2,-12(fp)
 40141b8:	10800817 	ldw	r2,32(r2)
 40141bc:	10810014 	ori	r2,r2,1024
 40141c0:	1007883a 	mov	r3,r2
 40141c4:	2005883a 	mov	r2,r4
 40141c8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 40141cc:	e0bffd17 	ldw	r2,-12(fp)
 40141d0:	10000915 	stw	zero,36(r2)
 40141d4:	00002106 	br	401425c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40141d8:	e0bffd17 	ldw	r2,-12(fp)
 40141dc:	10c00917 	ldw	r3,36(r2)
 40141e0:	00a00034 	movhi	r2,32768
 40141e4:	10bfff04 	addi	r2,r2,-4
 40141e8:	10c01c36 	bltu	r2,r3,401425c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 40141ec:	e0bffd17 	ldw	r2,-12(fp)
 40141f0:	10800917 	ldw	r2,36(r2)
 40141f4:	10c00044 	addi	r3,r2,1
 40141f8:	e0bffd17 	ldw	r2,-12(fp)
 40141fc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 4014200:	e0bffd17 	ldw	r2,-12(fp)
 4014204:	10c00917 	ldw	r3,36(r2)
 4014208:	e0bffd17 	ldw	r2,-12(fp)
 401420c:	10800117 	ldw	r2,4(r2)
 4014210:	18801236 	bltu	r3,r2,401425c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 4014214:	e0bffd17 	ldw	r2,-12(fp)
 4014218:	10800c17 	ldw	r2,48(r2)
 401421c:	e0bffa15 	stw	r2,-24(fp)
 4014220:	00800104 	movi	r2,4
 4014224:	e0bffb0d 	sth	r2,-20(fp)
 4014228:	00800044 	movi	r2,1
 401422c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4014230:	008100b4 	movhi	r2,1026
 4014234:	10a2b804 	addi	r2,r2,-29984
 4014238:	10800003 	ldbu	r2,0(r2)
 401423c:	10803fcc 	andi	r2,r2,255
 4014240:	1005003a 	cmpeq	r2,r2,zero
 4014244:	1000051e 	bne	r2,zero,401425c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 4014248:	e17ffb0b 	ldhu	r5,-20(fp)
 401424c:	e1bffb83 	ldbu	r6,-18(fp)
 4014250:	e1fffe04 	addi	r7,fp,-8
 4014254:	e13ffa17 	ldw	r4,-24(fp)
 4014258:	400e2600 	call	400e260 <OSFlagPost>
 401425c:	008100b4 	movhi	r2,1026
 4014260:	10a2cd04 	addi	r2,r2,-29900
 4014264:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 4014268:	e037883a 	mov	sp,fp
 401426c:	dfc00117 	ldw	ra,4(sp)
 4014270:	df000017 	ldw	fp,0(sp)
 4014274:	dec00204 	addi	sp,sp,8
 4014278:	f800283a 	ret

0401427c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401427c:	defffc04 	addi	sp,sp,-16
 4014280:	df000315 	stw	fp,12(sp)
 4014284:	df000304 	addi	fp,sp,12
 4014288:	e13ffd15 	stw	r4,-12(fp)
 401428c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4014290:	00000706 	br	40142b0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 4014294:	e0bffe17 	ldw	r2,-8(fp)
 4014298:	1090000c 	andi	r2,r2,16384
 401429c:	1005003a 	cmpeq	r2,r2,zero
 40142a0:	1000031e 	bne	r2,zero,40142b0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 40142a4:	00bffd44 	movi	r2,-11
 40142a8:	e0bfff15 	stw	r2,-4(fp)
 40142ac:	00000b06 	br	40142dc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40142b0:	e0bffd17 	ldw	r2,-12(fp)
 40142b4:	10c01017 	ldw	r3,64(r2)
 40142b8:	e0bffd17 	ldw	r2,-12(fp)
 40142bc:	10800f17 	ldw	r2,60(r2)
 40142c0:	18800526 	beq	r3,r2,40142d8 <altera_avalon_jtag_uart_close+0x5c>
 40142c4:	e0bffd17 	ldw	r2,-12(fp)
 40142c8:	10c00917 	ldw	r3,36(r2)
 40142cc:	e0bffd17 	ldw	r2,-12(fp)
 40142d0:	10800117 	ldw	r2,4(r2)
 40142d4:	18bfef36 	bltu	r3,r2,4014294 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40142d8:	e03fff15 	stw	zero,-4(fp)
 40142dc:	e0bfff17 	ldw	r2,-4(fp)
}
 40142e0:	e037883a 	mov	sp,fp
 40142e4:	df000017 	ldw	fp,0(sp)
 40142e8:	dec00104 	addi	sp,sp,4
 40142ec:	f800283a 	ret

040142f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40142f0:	defff804 	addi	sp,sp,-32
 40142f4:	df000715 	stw	fp,28(sp)
 40142f8:	df000704 	addi	fp,sp,28
 40142fc:	e13ffb15 	stw	r4,-20(fp)
 4014300:	e17ffc15 	stw	r5,-16(fp)
 4014304:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 4014308:	00bff9c4 	movi	r2,-25
 401430c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 4014310:	e0bffc17 	ldw	r2,-16(fp)
 4014314:	e0bfff15 	stw	r2,-4(fp)
 4014318:	e0ffff17 	ldw	r3,-4(fp)
 401431c:	189a8060 	cmpeqi	r2,r3,27137
 4014320:	1000041e 	bne	r2,zero,4014334 <altera_avalon_jtag_uart_ioctl+0x44>
 4014324:	e0ffff17 	ldw	r3,-4(fp)
 4014328:	189a80a0 	cmpeqi	r2,r3,27138
 401432c:	10001b1e 	bne	r2,zero,401439c <altera_avalon_jtag_uart_ioctl+0xac>
 4014330:	00002706 	br	40143d0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4014334:	e0bffb17 	ldw	r2,-20(fp)
 4014338:	10c00117 	ldw	r3,4(r2)
 401433c:	00a00034 	movhi	r2,32768
 4014340:	10bfffc4 	addi	r2,r2,-1
 4014344:	18802226 	beq	r3,r2,40143d0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4014348:	e0bffd17 	ldw	r2,-12(fp)
 401434c:	10800017 	ldw	r2,0(r2)
 4014350:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4014354:	e0bff917 	ldw	r2,-28(fp)
 4014358:	10800090 	cmplti	r2,r2,2
 401435c:	1000071e 	bne	r2,zero,401437c <altera_avalon_jtag_uart_ioctl+0x8c>
 4014360:	e0fff917 	ldw	r3,-28(fp)
 4014364:	00a00034 	movhi	r2,32768
 4014368:	10bfffc4 	addi	r2,r2,-1
 401436c:	18800326 	beq	r3,r2,401437c <altera_avalon_jtag_uart_ioctl+0x8c>
 4014370:	e0bff917 	ldw	r2,-28(fp)
 4014374:	e0bffe15 	stw	r2,-8(fp)
 4014378:	00000306 	br	4014388 <altera_avalon_jtag_uart_ioctl+0x98>
 401437c:	00e00034 	movhi	r3,32768
 4014380:	18ffff84 	addi	r3,r3,-2
 4014384:	e0fffe15 	stw	r3,-8(fp)
 4014388:	e0bffb17 	ldw	r2,-20(fp)
 401438c:	e0fffe17 	ldw	r3,-8(fp)
 4014390:	10c00115 	stw	r3,4(r2)
      rc = 0;
 4014394:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4014398:	00000d06 	br	40143d0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401439c:	e0bffb17 	ldw	r2,-20(fp)
 40143a0:	10c00117 	ldw	r3,4(r2)
 40143a4:	00a00034 	movhi	r2,32768
 40143a8:	10bfffc4 	addi	r2,r2,-1
 40143ac:	18800826 	beq	r3,r2,40143d0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40143b0:	e13ffd17 	ldw	r4,-12(fp)
 40143b4:	e0bffb17 	ldw	r2,-20(fp)
 40143b8:	10c00917 	ldw	r3,36(r2)
 40143bc:	e0bffb17 	ldw	r2,-20(fp)
 40143c0:	10800117 	ldw	r2,4(r2)
 40143c4:	1885803a 	cmpltu	r2,r3,r2
 40143c8:	20800015 	stw	r2,0(r4)
      rc = 0;
 40143cc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 40143d0:	e0bffa17 	ldw	r2,-24(fp)
}
 40143d4:	e037883a 	mov	sp,fp
 40143d8:	df000017 	ldw	fp,0(sp)
 40143dc:	dec00104 	addi	sp,sp,4
 40143e0:	f800283a 	ret

040143e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40143e4:	deffeb04 	addi	sp,sp,-84
 40143e8:	dfc01415 	stw	ra,80(sp)
 40143ec:	df001315 	stw	fp,76(sp)
 40143f0:	df001304 	addi	fp,sp,76
 40143f4:	e13ffb15 	stw	r4,-20(fp)
 40143f8:	e17ffc15 	stw	r5,-16(fp)
 40143fc:	e1bffd15 	stw	r6,-12(fp)
 4014400:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 4014404:	e0bffc17 	ldw	r2,-16(fp)
 4014408:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 401440c:	e0bffb17 	ldw	r2,-20(fp)
 4014410:	10800a17 	ldw	r2,40(r2)
 4014414:	e0bff315 	stw	r2,-52(fp)
 4014418:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 401441c:	e17ff40b 	ldhu	r5,-48(fp)
 4014420:	e1bffa44 	addi	r6,fp,-23
 4014424:	e13ff317 	ldw	r4,-52(fp)
 4014428:	4010af00 	call	4010af0 <OSSemPend>

  while (space > 0)
 401442c:	00006406 	br	40145c0 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4014430:	e0bffb17 	ldw	r2,-20(fp)
 4014434:	10800d17 	ldw	r2,52(r2)
 4014438:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 401443c:	e0bffb17 	ldw	r2,-20(fp)
 4014440:	10800e17 	ldw	r2,56(r2)
 4014444:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 4014448:	e0fff617 	ldw	r3,-40(fp)
 401444c:	e0bff517 	ldw	r2,-44(fp)
 4014450:	18800536 	bltu	r3,r2,4014468 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 4014454:	e0bff617 	ldw	r2,-40(fp)
 4014458:	e0fff517 	ldw	r3,-44(fp)
 401445c:	10c5c83a 	sub	r2,r2,r3
 4014460:	e0bff715 	stw	r2,-36(fp)
 4014464:	00000406 	br	4014478 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4014468:	00820004 	movi	r2,2048
 401446c:	e0fff517 	ldw	r3,-44(fp)
 4014470:	10c5c83a 	sub	r2,r2,r3
 4014474:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4014478:	e0bff717 	ldw	r2,-36(fp)
 401447c:	1005003a 	cmpeq	r2,r2,zero
 4014480:	10001f1e 	bne	r2,zero,4014500 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 4014484:	e0fffd17 	ldw	r3,-12(fp)
 4014488:	e0bff717 	ldw	r2,-36(fp)
 401448c:	1880022e 	bgeu	r3,r2,4014498 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 4014490:	e0bffd17 	ldw	r2,-12(fp)
 4014494:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4014498:	e0bffb17 	ldw	r2,-20(fp)
 401449c:	10c01104 	addi	r3,r2,68
 40144a0:	e0bff517 	ldw	r2,-44(fp)
 40144a4:	1887883a 	add	r3,r3,r2
 40144a8:	e0bff917 	ldw	r2,-28(fp)
 40144ac:	1009883a 	mov	r4,r2
 40144b0:	180b883a 	mov	r5,r3
 40144b4:	e1bff717 	ldw	r6,-36(fp)
 40144b8:	4005b540 	call	4005b54 <memcpy>
      ptr   += n;
 40144bc:	e0fff717 	ldw	r3,-36(fp)
 40144c0:	e0bff917 	ldw	r2,-28(fp)
 40144c4:	10c5883a 	add	r2,r2,r3
 40144c8:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 40144cc:	e0fffd17 	ldw	r3,-12(fp)
 40144d0:	e0bff717 	ldw	r2,-36(fp)
 40144d4:	1885c83a 	sub	r2,r3,r2
 40144d8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40144dc:	e0fff517 	ldw	r3,-44(fp)
 40144e0:	e0bff717 	ldw	r2,-36(fp)
 40144e4:	1885883a 	add	r2,r3,r2
 40144e8:	10c1ffcc 	andi	r3,r2,2047
 40144ec:	e0bffb17 	ldw	r2,-20(fp)
 40144f0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 40144f4:	e0bffd17 	ldw	r2,-12(fp)
 40144f8:	10800048 	cmpgei	r2,r2,1
 40144fc:	103fcc1e 	bne	r2,zero,4014430 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 4014500:	e0fff917 	ldw	r3,-28(fp)
 4014504:	e0bffc17 	ldw	r2,-16(fp)
 4014508:	1880301e 	bne	r3,r2,40145cc <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401450c:	e0bffe17 	ldw	r2,-8(fp)
 4014510:	1090000c 	andi	r2,r2,16384
 4014514:	1004c03a 	cmpne	r2,r2,zero
 4014518:	10002c1e 	bne	r2,zero,40145cc <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 401451c:	008100b4 	movhi	r2,1026
 4014520:	10a2b804 	addi	r2,r2,-29984
 4014524:	10800003 	ldbu	r2,0(r2)
 4014528:	10803fcc 	andi	r2,r2,255
 401452c:	10800058 	cmpnei	r2,r2,1
 4014530:	1000161e 	bne	r2,zero,401458c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 4014534:	e0bffb17 	ldw	r2,-20(fp)
 4014538:	10800c17 	ldw	r2,48(r2)
 401453c:	e0bff015 	stw	r2,-64(fp)
 4014540:	00800144 	movi	r2,5
 4014544:	e0bff10d 	sth	r2,-60(fp)
 4014548:	00bfe0c4 	movi	r2,-125
 401454c:	e0bff185 	stb	r2,-58(fp)
 4014550:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4014554:	008100b4 	movhi	r2,1026
 4014558:	10a2b804 	addi	r2,r2,-29984
 401455c:	10800003 	ldbu	r2,0(r2)
 4014560:	10803fcc 	andi	r2,r2,255
 4014564:	1005003a 	cmpeq	r2,r2,zero
 4014568:	1000111e 	bne	r2,zero,40145b0 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 401456c:	e17ff10b 	ldhu	r5,-60(fp)
 4014570:	e1bff183 	ldbu	r6,-58(fp)
 4014574:	e1fff20b 	ldhu	r7,-56(fp)
 4014578:	e0bffa04 	addi	r2,fp,-24
 401457c:	d8800015 	stw	r2,0(sp)
 4014580:	e13ff017 	ldw	r4,-64(fp)
 4014584:	400dbb40 	call	400dbb4 <OSFlagPend>
    return err;
 4014588:	00000906 	br	40145b0 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401458c:	e0bffb17 	ldw	r2,-20(fp)
 4014590:	10c00d17 	ldw	r3,52(r2)
 4014594:	e0bff617 	ldw	r2,-40(fp)
 4014598:	1880051e 	bne	r3,r2,40145b0 <altera_avalon_jtag_uart_read+0x1cc>
 401459c:	e0bffb17 	ldw	r2,-20(fp)
 40145a0:	10c00917 	ldw	r3,36(r2)
 40145a4:	e0bffb17 	ldw	r2,-20(fp)
 40145a8:	10800117 	ldw	r2,4(r2)
 40145ac:	18bff736 	bltu	r3,r2,401458c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40145b0:	e0bffb17 	ldw	r2,-20(fp)
 40145b4:	10c00d17 	ldw	r3,52(r2)
 40145b8:	e0bff617 	ldw	r2,-40(fp)
 40145bc:	18800326 	beq	r3,r2,40145cc <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40145c0:	e0bffd17 	ldw	r2,-12(fp)
 40145c4:	10800048 	cmpgei	r2,r2,1
 40145c8:	103f991e 	bne	r2,zero,4014430 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 40145cc:	e0bffb17 	ldw	r2,-20(fp)
 40145d0:	11000a17 	ldw	r4,40(r2)
 40145d4:	4010ee80 	call	4010ee8 <OSSemPost>

  if (ptr != buffer)
 40145d8:	e0fff917 	ldw	r3,-28(fp)
 40145dc:	e0bffc17 	ldw	r2,-16(fp)
 40145e0:	18801926 	beq	r3,r2,4014648 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40145e4:	0005303a 	rdctl	r2,status
 40145e8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40145ec:	e0ffef17 	ldw	r3,-68(fp)
 40145f0:	00bfff84 	movi	r2,-2
 40145f4:	1884703a 	and	r2,r3,r2
 40145f8:	1001703a 	wrctl	status,r2
  
  return context;
 40145fc:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4014600:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4014604:	e0bffb17 	ldw	r2,-20(fp)
 4014608:	10800817 	ldw	r2,32(r2)
 401460c:	10c00054 	ori	r3,r2,1
 4014610:	e0bffb17 	ldw	r2,-20(fp)
 4014614:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4014618:	e0bffb17 	ldw	r2,-20(fp)
 401461c:	10800017 	ldw	r2,0(r2)
 4014620:	11000104 	addi	r4,r2,4
 4014624:	e0bffb17 	ldw	r2,-20(fp)
 4014628:	10800817 	ldw	r2,32(r2)
 401462c:	1007883a 	mov	r3,r2
 4014630:	2005883a 	mov	r2,r4
 4014634:	10c00035 	stwio	r3,0(r2)
 4014638:	e0bff817 	ldw	r2,-32(fp)
 401463c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014640:	e0bfee17 	ldw	r2,-72(fp)
 4014644:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4014648:	e0fff917 	ldw	r3,-28(fp)
 401464c:	e0bffc17 	ldw	r2,-16(fp)
 4014650:	18800526 	beq	r3,r2,4014668 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 4014654:	e0fff917 	ldw	r3,-28(fp)
 4014658:	e0bffc17 	ldw	r2,-16(fp)
 401465c:	1887c83a 	sub	r3,r3,r2
 4014660:	e0ffff15 	stw	r3,-4(fp)
 4014664:	00000906 	br	401468c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 4014668:	e0bffe17 	ldw	r2,-8(fp)
 401466c:	1090000c 	andi	r2,r2,16384
 4014670:	1005003a 	cmpeq	r2,r2,zero
 4014674:	1000031e 	bne	r2,zero,4014684 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 4014678:	00bffd44 	movi	r2,-11
 401467c:	e0bfff15 	stw	r2,-4(fp)
 4014680:	00000206 	br	401468c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 4014684:	00bffec4 	movi	r2,-5
 4014688:	e0bfff15 	stw	r2,-4(fp)
 401468c:	e0bfff17 	ldw	r2,-4(fp)
}
 4014690:	e037883a 	mov	sp,fp
 4014694:	dfc00117 	ldw	ra,4(sp)
 4014698:	df000017 	ldw	fp,0(sp)
 401469c:	dec00204 	addi	sp,sp,8
 40146a0:	f800283a 	ret

040146a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40146a4:	deffeb04 	addi	sp,sp,-84
 40146a8:	dfc01415 	stw	ra,80(sp)
 40146ac:	df001315 	stw	fp,76(sp)
 40146b0:	df001304 	addi	fp,sp,76
 40146b4:	e13ffb15 	stw	r4,-20(fp)
 40146b8:	e17ffc15 	stw	r5,-16(fp)
 40146bc:	e1bffd15 	stw	r6,-12(fp)
 40146c0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40146c4:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40146c8:	e0bffc17 	ldw	r2,-16(fp)
 40146cc:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 40146d0:	e0bffb17 	ldw	r2,-20(fp)
 40146d4:	10800b17 	ldw	r2,44(r2)
 40146d8:	e0bff315 	stw	r2,-52(fp)
 40146dc:	e03ff40d 	sth	zero,-48(fp)
 40146e0:	e17ff40b 	ldhu	r5,-48(fp)
 40146e4:	e1bffa04 	addi	r6,fp,-24
 40146e8:	e13ff317 	ldw	r4,-52(fp)
 40146ec:	4010af00 	call	4010af0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40146f0:	00003a06 	br	40147dc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40146f4:	e0bffb17 	ldw	r2,-20(fp)
 40146f8:	10800f17 	ldw	r2,60(r2)
 40146fc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4014700:	e0bffb17 	ldw	r2,-20(fp)
 4014704:	10801017 	ldw	r2,64(r2)
 4014708:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 401470c:	e0fff917 	ldw	r3,-28(fp)
 4014710:	e0bff817 	ldw	r2,-32(fp)
 4014714:	1880062e 	bgeu	r3,r2,4014730 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 4014718:	e0fff817 	ldw	r3,-32(fp)
 401471c:	e0bff917 	ldw	r2,-28(fp)
 4014720:	1885c83a 	sub	r2,r3,r2
 4014724:	10bfffc4 	addi	r2,r2,-1
 4014728:	e0bff715 	stw	r2,-36(fp)
 401472c:	00000c06 	br	4014760 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 4014730:	e0bff817 	ldw	r2,-32(fp)
 4014734:	1005003a 	cmpeq	r2,r2,zero
 4014738:	1000051e 	bne	r2,zero,4014750 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401473c:	00820004 	movi	r2,2048
 4014740:	e0fff917 	ldw	r3,-28(fp)
 4014744:	10c5c83a 	sub	r2,r2,r3
 4014748:	e0bff715 	stw	r2,-36(fp)
 401474c:	00000406 	br	4014760 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4014750:	0081ffc4 	movi	r2,2047
 4014754:	e0fff917 	ldw	r3,-28(fp)
 4014758:	10c5c83a 	sub	r2,r2,r3
 401475c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4014760:	e0bff717 	ldw	r2,-36(fp)
 4014764:	1005003a 	cmpeq	r2,r2,zero
 4014768:	10001f1e 	bne	r2,zero,40147e8 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 401476c:	e0fffd17 	ldw	r3,-12(fp)
 4014770:	e0bff717 	ldw	r2,-36(fp)
 4014774:	1880022e 	bgeu	r3,r2,4014780 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 4014778:	e0bffd17 	ldw	r2,-12(fp)
 401477c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4014780:	e0bffb17 	ldw	r2,-20(fp)
 4014784:	10c21104 	addi	r3,r2,2116
 4014788:	e0bff917 	ldw	r2,-28(fp)
 401478c:	1885883a 	add	r2,r3,r2
 4014790:	e0fffc17 	ldw	r3,-16(fp)
 4014794:	1009883a 	mov	r4,r2
 4014798:	180b883a 	mov	r5,r3
 401479c:	e1bff717 	ldw	r6,-36(fp)
 40147a0:	4005b540 	call	4005b54 <memcpy>
      ptr   += n;
 40147a4:	e0fff717 	ldw	r3,-36(fp)
 40147a8:	e0bffc17 	ldw	r2,-16(fp)
 40147ac:	10c5883a 	add	r2,r2,r3
 40147b0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 40147b4:	e0fffd17 	ldw	r3,-12(fp)
 40147b8:	e0bff717 	ldw	r2,-36(fp)
 40147bc:	1885c83a 	sub	r2,r3,r2
 40147c0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40147c4:	e0fff917 	ldw	r3,-28(fp)
 40147c8:	e0bff717 	ldw	r2,-36(fp)
 40147cc:	1885883a 	add	r2,r3,r2
 40147d0:	10c1ffcc 	andi	r3,r2,2047
 40147d4:	e0bffb17 	ldw	r2,-20(fp)
 40147d8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40147dc:	e0bffd17 	ldw	r2,-12(fp)
 40147e0:	10800048 	cmpgei	r2,r2,1
 40147e4:	103fc31e 	bne	r2,zero,40146f4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40147e8:	0005303a 	rdctl	r2,status
 40147ec:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40147f0:	e0fff217 	ldw	r3,-56(fp)
 40147f4:	00bfff84 	movi	r2,-2
 40147f8:	1884703a 	and	r2,r3,r2
 40147fc:	1001703a 	wrctl	status,r2
  
  return context;
 4014800:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4014804:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4014808:	e0bffb17 	ldw	r2,-20(fp)
 401480c:	10800817 	ldw	r2,32(r2)
 4014810:	10c00094 	ori	r3,r2,2
 4014814:	e0bffb17 	ldw	r2,-20(fp)
 4014818:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401481c:	e0bffb17 	ldw	r2,-20(fp)
 4014820:	10800017 	ldw	r2,0(r2)
 4014824:	11000104 	addi	r4,r2,4
 4014828:	e0bffb17 	ldw	r2,-20(fp)
 401482c:	10800817 	ldw	r2,32(r2)
 4014830:	1007883a 	mov	r3,r2
 4014834:	2005883a 	mov	r2,r4
 4014838:	10c00035 	stwio	r3,0(r2)
 401483c:	e0bff617 	ldw	r2,-40(fp)
 4014840:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014844:	e0bff117 	ldw	r2,-60(fp)
 4014848:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401484c:	e0bffd17 	ldw	r2,-12(fp)
 4014850:	10800050 	cmplti	r2,r2,1
 4014854:	10002d1e 	bne	r2,zero,401490c <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 4014858:	e0bffe17 	ldw	r2,-8(fp)
 401485c:	1090000c 	andi	r2,r2,16384
 4014860:	1004c03a 	cmpne	r2,r2,zero
 4014864:	10002c1e 	bne	r2,zero,4014918 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4014868:	008100b4 	movhi	r2,1026
 401486c:	10a2b804 	addi	r2,r2,-29984
 4014870:	10800003 	ldbu	r2,0(r2)
 4014874:	10803fcc 	andi	r2,r2,255
 4014878:	10800058 	cmpnei	r2,r2,1
 401487c:	1000161e 	bne	r2,zero,40148d8 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 4014880:	e0bffb17 	ldw	r2,-20(fp)
 4014884:	10800c17 	ldw	r2,48(r2)
 4014888:	e0bfee15 	stw	r2,-72(fp)
 401488c:	00800184 	movi	r2,6
 4014890:	e0bfef0d 	sth	r2,-68(fp)
 4014894:	00bfe0c4 	movi	r2,-125
 4014898:	e0bfef85 	stb	r2,-66(fp)
 401489c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 40148a0:	008100b4 	movhi	r2,1026
 40148a4:	10a2b804 	addi	r2,r2,-29984
 40148a8:	10800003 	ldbu	r2,0(r2)
 40148ac:	10803fcc 	andi	r2,r2,255
 40148b0:	1005003a 	cmpeq	r2,r2,zero
 40148b4:	1000111e 	bne	r2,zero,40148fc <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 40148b8:	e17fef0b 	ldhu	r5,-68(fp)
 40148bc:	e1bfef83 	ldbu	r6,-66(fp)
 40148c0:	e1fff00b 	ldhu	r7,-64(fp)
 40148c4:	e0bffa44 	addi	r2,fp,-23
 40148c8:	d8800015 	stw	r2,0(sp)
 40148cc:	e13fee17 	ldw	r4,-72(fp)
 40148d0:	400dbb40 	call	400dbb4 <OSFlagPend>
    return err;
 40148d4:	00000906 	br	40148fc <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40148d8:	e0bffb17 	ldw	r2,-20(fp)
 40148dc:	10c01017 	ldw	r3,64(r2)
 40148e0:	e0bff817 	ldw	r2,-32(fp)
 40148e4:	1880051e 	bne	r3,r2,40148fc <altera_avalon_jtag_uart_write+0x258>
 40148e8:	e0bffb17 	ldw	r2,-20(fp)
 40148ec:	10c00917 	ldw	r3,36(r2)
 40148f0:	e0bffb17 	ldw	r2,-20(fp)
 40148f4:	10800117 	ldw	r2,4(r2)
 40148f8:	18bff736 	bltu	r3,r2,40148d8 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 40148fc:	e0bffb17 	ldw	r2,-20(fp)
 4014900:	10c01017 	ldw	r3,64(r2)
 4014904:	e0bff817 	ldw	r2,-32(fp)
 4014908:	18800326 	beq	r3,r2,4014918 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 401490c:	e0bffd17 	ldw	r2,-12(fp)
 4014910:	10800048 	cmpgei	r2,r2,1
 4014914:	103fb11e 	bne	r2,zero,40147dc <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 4014918:	e0bffb17 	ldw	r2,-20(fp)
 401491c:	11000b17 	ldw	r4,44(r2)
 4014920:	4010ee80 	call	4010ee8 <OSSemPost>

  if (ptr != start)
 4014924:	e0fffc17 	ldw	r3,-16(fp)
 4014928:	e0bff517 	ldw	r2,-44(fp)
 401492c:	18800526 	beq	r3,r2,4014944 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 4014930:	e0fffc17 	ldw	r3,-16(fp)
 4014934:	e0bff517 	ldw	r2,-44(fp)
 4014938:	1887c83a 	sub	r3,r3,r2
 401493c:	e0ffff15 	stw	r3,-4(fp)
 4014940:	00000906 	br	4014968 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 4014944:	e0bffe17 	ldw	r2,-8(fp)
 4014948:	1090000c 	andi	r2,r2,16384
 401494c:	1005003a 	cmpeq	r2,r2,zero
 4014950:	1000031e 	bne	r2,zero,4014960 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 4014954:	00bffd44 	movi	r2,-11
 4014958:	e0bfff15 	stw	r2,-4(fp)
 401495c:	00000206 	br	4014968 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 4014960:	00bffec4 	movi	r2,-5
 4014964:	e0bfff15 	stw	r2,-4(fp)
 4014968:	e0bfff17 	ldw	r2,-4(fp)
}
 401496c:	e037883a 	mov	sp,fp
 4014970:	dfc00117 	ldw	ra,4(sp)
 4014974:	df000017 	ldw	fp,0(sp)
 4014978:	dec00204 	addi	sp,sp,8
 401497c:	f800283a 	ret

04014980 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4014980:	defffa04 	addi	sp,sp,-24
 4014984:	dfc00515 	stw	ra,20(sp)
 4014988:	df000415 	stw	fp,16(sp)
 401498c:	df000404 	addi	fp,sp,16
 4014990:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4014994:	e0bfff17 	ldw	r2,-4(fp)
 4014998:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401499c:	e0bfff17 	ldw	r2,-4(fp)
 40149a0:	10800104 	addi	r2,r2,4
 40149a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40149a8:	0005303a 	rdctl	r2,status
 40149ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40149b0:	e0fffd17 	ldw	r3,-12(fp)
 40149b4:	00bfff84 	movi	r2,-2
 40149b8:	1884703a 	and	r2,r3,r2
 40149bc:	1001703a 	wrctl	status,r2
  
  return context;
 40149c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40149c4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 40149c8:	4015a440 	call	4015a44 <alt_tick>
 40149cc:	e0bffe17 	ldw	r2,-8(fp)
 40149d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40149d4:	e0bffc17 	ldw	r2,-16(fp)
 40149d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40149dc:	e037883a 	mov	sp,fp
 40149e0:	dfc00117 	ldw	ra,4(sp)
 40149e4:	df000017 	ldw	fp,0(sp)
 40149e8:	dec00204 	addi	sp,sp,8
 40149ec:	f800283a 	ret

040149f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40149f0:	defff804 	addi	sp,sp,-32
 40149f4:	dfc00715 	stw	ra,28(sp)
 40149f8:	df000615 	stw	fp,24(sp)
 40149fc:	df000604 	addi	fp,sp,24
 4014a00:	e13ffc15 	stw	r4,-16(fp)
 4014a04:	e17ffd15 	stw	r5,-12(fp)
 4014a08:	e1bffe15 	stw	r6,-8(fp)
 4014a0c:	e1ffff15 	stw	r7,-4(fp)
 4014a10:	e0bfff17 	ldw	r2,-4(fp)
 4014a14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4014a18:	008100b4 	movhi	r2,1026
 4014a1c:	10a2cd04 	addi	r2,r2,-29900
 4014a20:	10800017 	ldw	r2,0(r2)
 4014a24:	1004c03a 	cmpne	r2,r2,zero
 4014a28:	1000041e 	bne	r2,zero,4014a3c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4014a2c:	00c100b4 	movhi	r3,1026
 4014a30:	18e2cd04 	addi	r3,r3,-29900
 4014a34:	e0bffb17 	ldw	r2,-20(fp)
 4014a38:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4014a3c:	e0bffc17 	ldw	r2,-16(fp)
 4014a40:	10800104 	addi	r2,r2,4
 4014a44:	1007883a 	mov	r3,r2
 4014a48:	008001c4 	movi	r2,7
 4014a4c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4014a50:	d8000015 	stw	zero,0(sp)
 4014a54:	e13ffd17 	ldw	r4,-12(fp)
 4014a58:	e17ffe17 	ldw	r5,-8(fp)
 4014a5c:	01810074 	movhi	r6,1025
 4014a60:	31926004 	addi	r6,r6,18816
 4014a64:	e1fffc17 	ldw	r7,-16(fp)
 4014a68:	40152e00 	call	40152e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4014a6c:	e037883a 	mov	sp,fp
 4014a70:	dfc00117 	ldw	ra,4(sp)
 4014a74:	df000017 	ldw	fp,0(sp)
 4014a78:	dec00204 	addi	sp,sp,8
 4014a7c:	f800283a 	ret

04014a80 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 4014a80:	defff904 	addi	sp,sp,-28
 4014a84:	dfc00615 	stw	ra,24(sp)
 4014a88:	df000515 	stw	fp,20(sp)
 4014a8c:	df000504 	addi	fp,sp,20
 4014a90:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 4014a94:	00800144 	movi	r2,5
 4014a98:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 4014a9c:	00800044 	movi	r2,1
 4014aa0:	d8800015 	stw	r2,0(sp)
 4014aa4:	e0bffe44 	addi	r2,fp,-7
 4014aa8:	d8800115 	stw	r2,4(sp)
 4014aac:	d8000215 	stw	zero,8(sp)
 4014ab0:	e13fff17 	ldw	r4,-4(fp)
 4014ab4:	000b883a 	mov	r5,zero
 4014ab8:	01800044 	movi	r6,1
 4014abc:	e1fffe04 	addi	r7,fp,-8
 4014ac0:	401605c0 	call	401605c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 4014ac4:	e0bffe43 	ldbu	r2,-7(fp)
 4014ac8:	10803fcc 	andi	r2,r2,255
}
 4014acc:	e037883a 	mov	sp,fp
 4014ad0:	dfc00117 	ldw	ra,4(sp)
 4014ad4:	df000017 	ldw	fp,0(sp)
 4014ad8:	dec00204 	addi	sp,sp,8
 4014adc:	f800283a 	ret

04014ae0 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset)
{
 4014ae0:	defff804 	addi	sp,sp,-32
 4014ae4:	dfc00715 	stw	ra,28(sp)
 4014ae8:	df000615 	stw	fp,24(sp)
 4014aec:	df000604 	addi	fp,sp,24
 4014af0:	e13ffe15 	stw	r4,-8(fp)
 4014af4:	e17fff15 	stw	r5,-4(fp)
  alt_u8 se[4];
  
  se[0] = epcs_se;
 4014af8:	00bff604 	movi	r2,-40
 4014afc:	e0bffd05 	stb	r2,-12(fp)
  se[1] = (offset >> 16) & 0xFF;
 4014b00:	e0bfff17 	ldw	r2,-4(fp)
 4014b04:	1004d43a 	srli	r2,r2,16
 4014b08:	e0bffd45 	stb	r2,-11(fp)
  se[2] = (offset >> 8) & 0xFF;
 4014b0c:	e0bfff17 	ldw	r2,-4(fp)
 4014b10:	1004d23a 	srli	r2,r2,8
 4014b14:	e0bffd85 	stb	r2,-10(fp)
  se[3] = offset & 0xFF;
 4014b18:	e0bfff17 	ldw	r2,-4(fp)
 4014b1c:	e0bffdc5 	stb	r2,-9(fp)

  alt_avalon_spi_command(
 4014b20:	d8000015 	stw	zero,0(sp)
 4014b24:	d8000115 	stw	zero,4(sp)
 4014b28:	d8000215 	stw	zero,8(sp)
 4014b2c:	e13ffe17 	ldw	r4,-8(fp)
 4014b30:	000b883a 	mov	r5,zero
 4014b34:	01800104 	movi	r6,4
 4014b38:	e1fffd04 	addi	r7,fp,-12
 4014b3c:	401605c0 	call	401605c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4014b40:	e13ffe17 	ldw	r4,-8(fp)
 4014b44:	4014b5c0 	call	4014b5c <epcs_await_wip_released>
}
 4014b48:	e037883a 	mov	sp,fp
 4014b4c:	dfc00117 	ldw	ra,4(sp)
 4014b50:	df000017 	ldw	fp,0(sp)
 4014b54:	dec00204 	addi	sp,sp,8
 4014b58:	f800283a 	ret

04014b5c <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 4014b5c:	defffd04 	addi	sp,sp,-12
 4014b60:	dfc00215 	stw	ra,8(sp)
 4014b64:	df000115 	stw	fp,4(sp)
 4014b68:	df000104 	addi	fp,sp,4
 4014b6c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 4014b70:	e13fff17 	ldw	r4,-4(fp)
 4014b74:	4014b940 	call	4014b94 <epcs_test_wip>
 4014b78:	1004c03a 	cmpne	r2,r2,zero
 4014b7c:	103ffc1e 	bne	r2,zero,4014b70 <epcs_await_wip_released+0x14>
  {
  }
}
 4014b80:	e037883a 	mov	sp,fp
 4014b84:	dfc00117 	ldw	ra,4(sp)
 4014b88:	df000017 	ldw	fp,0(sp)
 4014b8c:	dec00204 	addi	sp,sp,8
 4014b90:	f800283a 	ret

04014b94 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 4014b94:	defffd04 	addi	sp,sp,-12
 4014b98:	dfc00215 	stw	ra,8(sp)
 4014b9c:	df000115 	stw	fp,4(sp)
 4014ba0:	df000104 	addi	fp,sp,4
 4014ba4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 4014ba8:	e13fff17 	ldw	r4,-4(fp)
 4014bac:	4014a800 	call	4014a80 <epcs_read_status_register>
 4014bb0:	10803fcc 	andi	r2,r2,255
 4014bb4:	1080004c 	andi	r2,r2,1
}
 4014bb8:	e037883a 	mov	sp,fp
 4014bbc:	dfc00117 	ldw	ra,4(sp)
 4014bc0:	df000017 	ldw	fp,0(sp)
 4014bc4:	dec00204 	addi	sp,sp,8
 4014bc8:	f800283a 	ret

04014bcc <epcs_read_buffer>:

  epcs_await_wip_released(base);
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length)
{
 4014bcc:	defff604 	addi	sp,sp,-40
 4014bd0:	dfc00915 	stw	ra,36(sp)
 4014bd4:	df000815 	stw	fp,32(sp)
 4014bd8:	df000804 	addi	fp,sp,32
 4014bdc:	e13ffc15 	stw	r4,-16(fp)
 4014be0:	e17ffd15 	stw	r5,-12(fp)
 4014be4:	e1bffe15 	stw	r6,-8(fp)
 4014be8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[4];
  
  read_command[0] = epcs_read;
 4014bec:	008000c4 	movi	r2,3
 4014bf0:	e0bffb05 	stb	r2,-20(fp)
  read_command[1] = (offset >> 16) & 0xFF;
 4014bf4:	e0bffd17 	ldw	r2,-12(fp)
 4014bf8:	1005d43a 	srai	r2,r2,16
 4014bfc:	1007883a 	mov	r3,r2
 4014c00:	00bfffc4 	movi	r2,-1
 4014c04:	1884703a 	and	r2,r3,r2
 4014c08:	e0bffb45 	stb	r2,-19(fp)
  read_command[2] = (offset >> 8) & 0xFF;
 4014c0c:	e0bffd17 	ldw	r2,-12(fp)
 4014c10:	1005d23a 	srai	r2,r2,8
 4014c14:	1007883a 	mov	r3,r2
 4014c18:	00bfffc4 	movi	r2,-1
 4014c1c:	1884703a 	and	r2,r3,r2
 4014c20:	e0bffb85 	stb	r2,-18(fp)
  read_command[3] = offset & 0xFF;
 4014c24:	e0bffd17 	ldw	r2,-12(fp)
 4014c28:	1007883a 	mov	r3,r2
 4014c2c:	00bfffc4 	movi	r2,-1
 4014c30:	1884703a 	and	r2,r3,r2
 4014c34:	e0bffbc5 	stb	r2,-17(fp)
    return 0;
#endif
  /* I don't know why this is necessary, since I call await-wip after
   * all writing commands.
  */
  epcs_await_wip_released(base);
 4014c38:	e13ffc17 	ldw	r4,-16(fp)
 4014c3c:	4014b5c0 	call	4014b5c <epcs_await_wip_released>

  alt_avalon_spi_command(
 4014c40:	e0bfff17 	ldw	r2,-4(fp)
 4014c44:	d8800015 	stw	r2,0(sp)
 4014c48:	e0bffe17 	ldw	r2,-8(fp)
 4014c4c:	d8800115 	stw	r2,4(sp)
 4014c50:	d8000215 	stw	zero,8(sp)
 4014c54:	e13ffc17 	ldw	r4,-16(fp)
 4014c58:	000b883a 	mov	r5,zero
 4014c5c:	01800104 	movi	r6,4
 4014c60:	e1fffb04 	addi	r7,fp,-20
 4014c64:	401605c0 	call	401605c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  return length;
 4014c68:	e0bfff17 	ldw	r2,-4(fp)
}
 4014c6c:	e037883a 	mov	sp,fp
 4014c70:	dfc00117 	ldw	ra,4(sp)
 4014c74:	df000017 	ldw	fp,0(sp)
 4014c78:	dec00204 	addi	sp,sp,8
 4014c7c:	f800283a 	ret

04014c80 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 4014c80:	defff904 	addi	sp,sp,-28
 4014c84:	dfc00615 	stw	ra,24(sp)
 4014c88:	df000515 	stw	fp,20(sp)
 4014c8c:	df000504 	addi	fp,sp,20
 4014c90:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 4014c94:	00800184 	movi	r2,6
 4014c98:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 4014c9c:	d8000015 	stw	zero,0(sp)
 4014ca0:	d8000115 	stw	zero,4(sp)
 4014ca4:	d8000215 	stw	zero,8(sp)
 4014ca8:	e13fff17 	ldw	r4,-4(fp)
 4014cac:	000b883a 	mov	r5,zero
 4014cb0:	01800044 	movi	r6,1
 4014cb4:	e1fffe04 	addi	r7,fp,-8
 4014cb8:	401605c0 	call	401605c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 4014cbc:	e037883a 	mov	sp,fp
 4014cc0:	dfc00117 	ldw	ra,4(sp)
 4014cc4:	df000017 	ldw	fp,0(sp)
 4014cc8:	dec00204 	addi	sp,sp,8
 4014ccc:	f800283a 	ret

04014cd0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 4014cd0:	defff804 	addi	sp,sp,-32
 4014cd4:	dfc00715 	stw	ra,28(sp)
 4014cd8:	df000615 	stw	fp,24(sp)
 4014cdc:	df000604 	addi	fp,sp,24
 4014ce0:	e13ffe15 	stw	r4,-8(fp)
 4014ce4:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 4014ce8:	00800044 	movi	r2,1
 4014cec:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 4014cf0:	e0bfff03 	ldbu	r2,-4(fp)
 4014cf4:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 4014cf8:	d8000015 	stw	zero,0(sp)
 4014cfc:	d8000115 	stw	zero,4(sp)
 4014d00:	d8000215 	stw	zero,8(sp)
 4014d04:	e13ffe17 	ldw	r4,-8(fp)
 4014d08:	000b883a 	mov	r5,zero
 4014d0c:	01800084 	movi	r6,2
 4014d10:	e1fffd04 	addi	r7,fp,-12
 4014d14:	401605c0 	call	401605c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4014d18:	e13ffe17 	ldw	r4,-8(fp)
 4014d1c:	4014b5c0 	call	4014b5c <epcs_await_wip_released>
}
 4014d20:	e037883a 	mov	sp,fp
 4014d24:	dfc00117 	ldw	ra,4(sp)
 4014d28:	df000017 	ldw	fp,0(sp)
 4014d2c:	dec00204 	addi	sp,sp,8
 4014d30:	f800283a 	ret

04014d34 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, int length)
{
 4014d34:	defff604 	addi	sp,sp,-40
 4014d38:	dfc00915 	stw	ra,36(sp)
 4014d3c:	df000815 	stw	fp,32(sp)
 4014d40:	df000804 	addi	fp,sp,32
 4014d44:	e13ffc15 	stw	r4,-16(fp)
 4014d48:	e17ffd15 	stw	r5,-12(fp)
 4014d4c:	e1bffe15 	stw	r6,-8(fp)
 4014d50:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[4];
  
  pp[0] = epcs_pp;
 4014d54:	00800084 	movi	r2,2
 4014d58:	e0bffb05 	stb	r2,-20(fp)
  pp[1] = (offset >> 16) & 0xFF;
 4014d5c:	e0bffd17 	ldw	r2,-12(fp)
 4014d60:	1005d43a 	srai	r2,r2,16
 4014d64:	1007883a 	mov	r3,r2
 4014d68:	00bfffc4 	movi	r2,-1
 4014d6c:	1884703a 	and	r2,r3,r2
 4014d70:	e0bffb45 	stb	r2,-19(fp)
  pp[2] = (offset >> 8) & 0xFF;
 4014d74:	e0bffd17 	ldw	r2,-12(fp)
 4014d78:	1005d23a 	srai	r2,r2,8
 4014d7c:	1007883a 	mov	r3,r2
 4014d80:	00bfffc4 	movi	r2,-1
 4014d84:	1884703a 	and	r2,r3,r2
 4014d88:	e0bffb85 	stb	r2,-18(fp)
  pp[3] = offset & 0xFF;
 4014d8c:	e0bffd17 	ldw	r2,-12(fp)
 4014d90:	1007883a 	mov	r3,r2
 4014d94:	00bfffc4 	movi	r2,-1
 4014d98:	1884703a 	and	r2,r3,r2
 4014d9c:	e0bffbc5 	stb	r2,-17(fp)

  /* First, WREN */
  epcs_write_enable(base);
 4014da0:	e13ffc17 	ldw	r4,-16(fp)
 4014da4:	4014c800 	call	4014c80 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 4014da8:	d8000015 	stw	zero,0(sp)
 4014dac:	d8000115 	stw	zero,4(sp)
 4014db0:	00800044 	movi	r2,1
 4014db4:	d8800215 	stw	r2,8(sp)
 4014db8:	e13ffc17 	ldw	r4,-16(fp)
 4014dbc:	000b883a 	mov	r5,zero
 4014dc0:	01800104 	movi	r6,4
 4014dc4:	e1fffb04 	addi	r7,fp,-20
 4014dc8:	401605c0 	call	401605c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 4014dcc:	e1bfff17 	ldw	r6,-4(fp)
 4014dd0:	d8000015 	stw	zero,0(sp)
 4014dd4:	d8000115 	stw	zero,4(sp)
 4014dd8:	d8000215 	stw	zero,8(sp)
 4014ddc:	e13ffc17 	ldw	r4,-16(fp)
 4014de0:	000b883a 	mov	r5,zero
 4014de4:	e1fffe17 	ldw	r7,-8(fp)
 4014de8:	401605c0 	call	401605c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 4014dec:	e13ffc17 	ldw	r4,-16(fp)
 4014df0:	4014b5c0 	call	4014b5c <epcs_await_wip_released>

  return length;
 4014df4:	e0bfff17 	ldw	r2,-4(fp)
}
 4014df8:	e037883a 	mov	sp,fp
 4014dfc:	dfc00117 	ldw	ra,4(sp)
 4014e00:	df000017 	ldw	fp,0(sp)
 4014e04:	dec00204 	addi	sp,sp,8
 4014e08:	f800283a 	ret

04014e0c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 4014e0c:	defff804 	addi	sp,sp,-32
 4014e10:	dfc00715 	stw	ra,28(sp)
 4014e14:	df000615 	stw	fp,24(sp)
 4014e18:	df000604 	addi	fp,sp,24
 4014e1c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 4014e20:	00bfeac4 	movi	r2,-85
 4014e24:	e0bffd05 	stb	r2,-12(fp)
 4014e28:	e03ffd45 	stb	zero,-11(fp)
 4014e2c:	e03ffd85 	stb	zero,-10(fp)
 4014e30:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4014e34:	00800044 	movi	r2,1
 4014e38:	d8800015 	stw	r2,0(sp)
 4014e3c:	e0bffe04 	addi	r2,fp,-8
 4014e40:	d8800115 	stw	r2,4(sp)
 4014e44:	d8000215 	stw	zero,8(sp)
 4014e48:	e13fff17 	ldw	r4,-4(fp)
 4014e4c:	000b883a 	mov	r5,zero
 4014e50:	01800104 	movi	r6,4
 4014e54:	e1fffd04 	addi	r7,fp,-12
 4014e58:	401605c0 	call	401605c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4014e5c:	e0bffe03 	ldbu	r2,-8(fp)
 4014e60:	10803fcc 	andi	r2,r2,255
}
 4014e64:	e037883a 	mov	sp,fp
 4014e68:	dfc00117 	ldw	ra,4(sp)
 4014e6c:	df000017 	ldw	fp,0(sp)
 4014e70:	dec00204 	addi	sp,sp,8
 4014e74:	f800283a 	ret

04014e78 <epcs_read_device_id>:

alt_u8 epcs_read_device_id(alt_u32 base)
{
 4014e78:	defff904 	addi	sp,sp,-28
 4014e7c:	dfc00615 	stw	ra,24(sp)
 4014e80:	df000515 	stw	fp,20(sp)
 4014e84:	df000504 	addi	fp,sp,20
 4014e88:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid, 0, 0};
 4014e8c:	00bfe7c4 	movi	r2,-97
 4014e90:	e0bffe05 	stb	r2,-8(fp)
 4014e94:	e03ffe45 	stb	zero,-7(fp)
 4014e98:	e03ffe85 	stb	zero,-6(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4014e9c:	00800044 	movi	r2,1
 4014ea0:	d8800015 	stw	r2,0(sp)
 4014ea4:	e0bffec4 	addi	r2,fp,-5
 4014ea8:	d8800115 	stw	r2,4(sp)
 4014eac:	d8000215 	stw	zero,8(sp)
 4014eb0:	e13fff17 	ldw	r4,-4(fp)
 4014eb4:	000b883a 	mov	r5,zero
 4014eb8:	018000c4 	movi	r6,3
 4014ebc:	e1fffe04 	addi	r7,fp,-8
 4014ec0:	401605c0 	call	401605c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4014ec4:	e0bffec3 	ldbu	r2,-5(fp)
 4014ec8:	10803fcc 	andi	r2,r2,255
}
 4014ecc:	e037883a 	mov	sp,fp
 4014ed0:	dfc00117 	ldw	ra,4(sp)
 4014ed4:	df000017 	ldw	fp,0(sp)
 4014ed8:	dec00204 	addi	sp,sp,8
 4014edc:	f800283a 	ret

04014ee0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4014ee0:	defff404 	addi	sp,sp,-48
 4014ee4:	df000b15 	stw	fp,44(sp)
 4014ee8:	df000b04 	addi	fp,sp,44
 4014eec:	e13ffb15 	stw	r4,-20(fp)
 4014ef0:	e17ffc15 	stw	r5,-16(fp)
 4014ef4:	e1bffd15 	stw	r6,-12(fp)
 4014ef8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4014efc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4014f00:	008100b4 	movhi	r2,1026
 4014f04:	10a2cd04 	addi	r2,r2,-29900
 4014f08:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4014f0c:	1005003a 	cmpeq	r2,r2,zero
 4014f10:	1000411e 	bne	r2,zero,4015018 <alt_alarm_start+0x138>
  {
    if (alarm)
 4014f14:	e0bffb17 	ldw	r2,-20(fp)
 4014f18:	1005003a 	cmpeq	r2,r2,zero
 4014f1c:	10003b1e 	bne	r2,zero,401500c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 4014f20:	e0fffb17 	ldw	r3,-20(fp)
 4014f24:	e0bffd17 	ldw	r2,-12(fp)
 4014f28:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 4014f2c:	e0fffb17 	ldw	r3,-20(fp)
 4014f30:	e0bffe17 	ldw	r2,-8(fp)
 4014f34:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014f38:	0005303a 	rdctl	r2,status
 4014f3c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014f40:	e0fff817 	ldw	r3,-32(fp)
 4014f44:	00bfff84 	movi	r2,-2
 4014f48:	1884703a 	and	r2,r3,r2
 4014f4c:	1001703a 	wrctl	status,r2
  
  return context;
 4014f50:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4014f54:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4014f58:	008100b4 	movhi	r2,1026
 4014f5c:	10a2ce04 	addi	r2,r2,-29896
 4014f60:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4014f64:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4014f68:	e0fffc17 	ldw	r3,-16(fp)
 4014f6c:	e0bff917 	ldw	r2,-28(fp)
 4014f70:	1885883a 	add	r2,r3,r2
 4014f74:	10c00044 	addi	r3,r2,1
 4014f78:	e0bffb17 	ldw	r2,-20(fp)
 4014f7c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4014f80:	e0bffb17 	ldw	r2,-20(fp)
 4014f84:	10c00217 	ldw	r3,8(r2)
 4014f88:	e0bff917 	ldw	r2,-28(fp)
 4014f8c:	1880042e 	bgeu	r3,r2,4014fa0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4014f90:	e0fffb17 	ldw	r3,-20(fp)
 4014f94:	00800044 	movi	r2,1
 4014f98:	18800405 	stb	r2,16(r3)
 4014f9c:	00000206 	br	4014fa8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4014fa0:	e0bffb17 	ldw	r2,-20(fp)
 4014fa4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4014fa8:	e0fffb17 	ldw	r3,-20(fp)
 4014fac:	008100b4 	movhi	r2,1026
 4014fb0:	10a2a204 	addi	r2,r2,-30072
 4014fb4:	e0bff615 	stw	r2,-40(fp)
 4014fb8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4014fbc:	e0fff717 	ldw	r3,-36(fp)
 4014fc0:	e0bff617 	ldw	r2,-40(fp)
 4014fc4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4014fc8:	e0bff617 	ldw	r2,-40(fp)
 4014fcc:	10c00017 	ldw	r3,0(r2)
 4014fd0:	e0bff717 	ldw	r2,-36(fp)
 4014fd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4014fd8:	e0bff617 	ldw	r2,-40(fp)
 4014fdc:	10c00017 	ldw	r3,0(r2)
 4014fe0:	e0bff717 	ldw	r2,-36(fp)
 4014fe4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4014fe8:	e0fff617 	ldw	r3,-40(fp)
 4014fec:	e0bff717 	ldw	r2,-36(fp)
 4014ff0:	18800015 	stw	r2,0(r3)
 4014ff4:	e0bffa17 	ldw	r2,-24(fp)
 4014ff8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014ffc:	e0bff517 	ldw	r2,-44(fp)
 4015000:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4015004:	e03fff15 	stw	zero,-4(fp)
 4015008:	00000506 	br	4015020 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 401500c:	00bffa84 	movi	r2,-22
 4015010:	e0bfff15 	stw	r2,-4(fp)
 4015014:	00000206 	br	4015020 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 4015018:	00bfde84 	movi	r2,-134
 401501c:	e0bfff15 	stw	r2,-4(fp)
 4015020:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 4015024:	e037883a 	mov	sp,fp
 4015028:	df000017 	ldw	fp,0(sp)
 401502c:	dec00104 	addi	sp,sp,4
 4015030:	f800283a 	ret

04015034 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4015034:	defff904 	addi	sp,sp,-28
 4015038:	dfc00615 	stw	ra,24(sp)
 401503c:	df000515 	stw	fp,20(sp)
 4015040:	df000504 	addi	fp,sp,20
 4015044:	e13ffd15 	stw	r4,-12(fp)
 4015048:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401504c:	e0bffd17 	ldw	r2,-12(fp)
 4015050:	1005003a 	cmpeq	r2,r2,zero
 4015054:	1000041e 	bne	r2,zero,4015068 <alt_dev_llist_insert+0x34>
 4015058:	e0bffd17 	ldw	r2,-12(fp)
 401505c:	10800217 	ldw	r2,8(r2)
 4015060:	1004c03a 	cmpne	r2,r2,zero
 4015064:	1000071e 	bne	r2,zero,4015084 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4015068:	40150e80 	call	40150e8 <alt_get_errno>
 401506c:	1007883a 	mov	r3,r2
 4015070:	00800584 	movi	r2,22
 4015074:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4015078:	00bffa84 	movi	r2,-22
 401507c:	e0bfff15 	stw	r2,-4(fp)
 4015080:	00001306 	br	40150d0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4015084:	e0fffd17 	ldw	r3,-12(fp)
 4015088:	e0bffe17 	ldw	r2,-8(fp)
 401508c:	e0bffb15 	stw	r2,-20(fp)
 4015090:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4015094:	e0fffc17 	ldw	r3,-16(fp)
 4015098:	e0bffb17 	ldw	r2,-20(fp)
 401509c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 40150a0:	e0bffb17 	ldw	r2,-20(fp)
 40150a4:	10c00017 	ldw	r3,0(r2)
 40150a8:	e0bffc17 	ldw	r2,-16(fp)
 40150ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40150b0:	e0bffb17 	ldw	r2,-20(fp)
 40150b4:	10c00017 	ldw	r3,0(r2)
 40150b8:	e0bffc17 	ldw	r2,-16(fp)
 40150bc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 40150c0:	e0fffb17 	ldw	r3,-20(fp)
 40150c4:	e0bffc17 	ldw	r2,-16(fp)
 40150c8:	18800015 	stw	r2,0(r3)

  return 0;  
 40150cc:	e03fff15 	stw	zero,-4(fp)
 40150d0:	e0bfff17 	ldw	r2,-4(fp)
}
 40150d4:	e037883a 	mov	sp,fp
 40150d8:	dfc00117 	ldw	ra,4(sp)
 40150dc:	df000017 	ldw	fp,0(sp)
 40150e0:	dec00204 	addi	sp,sp,8
 40150e4:	f800283a 	ret

040150e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40150e8:	defffd04 	addi	sp,sp,-12
 40150ec:	dfc00215 	stw	ra,8(sp)
 40150f0:	df000115 	stw	fp,4(sp)
 40150f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40150f8:	008100b4 	movhi	r2,1026
 40150fc:	10a27e04 	addi	r2,r2,-30216
 4015100:	10800017 	ldw	r2,0(r2)
 4015104:	1005003a 	cmpeq	r2,r2,zero
 4015108:	1000061e 	bne	r2,zero,4015124 <alt_get_errno+0x3c>
 401510c:	008100b4 	movhi	r2,1026
 4015110:	10a27e04 	addi	r2,r2,-30216
 4015114:	10800017 	ldw	r2,0(r2)
 4015118:	103ee83a 	callr	r2
 401511c:	e0bfff15 	stw	r2,-4(fp)
 4015120:	00000306 	br	4015130 <alt_get_errno+0x48>
 4015124:	008100b4 	movhi	r2,1026
 4015128:	10a2ae04 	addi	r2,r2,-30024
 401512c:	e0bfff15 	stw	r2,-4(fp)
 4015130:	e0bfff17 	ldw	r2,-4(fp)
}
 4015134:	e037883a 	mov	sp,fp
 4015138:	dfc00117 	ldw	ra,4(sp)
 401513c:	df000017 	ldw	fp,0(sp)
 4015140:	dec00204 	addi	sp,sp,8
 4015144:	f800283a 	ret

04015148 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4015148:	defffd04 	addi	sp,sp,-12
 401514c:	dfc00215 	stw	ra,8(sp)
 4015150:	df000115 	stw	fp,4(sp)
 4015154:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015158:	00bfff04 	movi	r2,-4
 401515c:	00c10074 	movhi	r3,1025
 4015160:	18da7004 	addi	r3,r3,27072
 4015164:	1885883a 	add	r2,r3,r2
 4015168:	e0bfff15 	stw	r2,-4(fp)
 401516c:	00000606 	br	4015188 <_do_ctors+0x40>
        (*ctor) (); 
 4015170:	e0bfff17 	ldw	r2,-4(fp)
 4015174:	10800017 	ldw	r2,0(r2)
 4015178:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401517c:	e0bfff17 	ldw	r2,-4(fp)
 4015180:	10bfff04 	addi	r2,r2,-4
 4015184:	e0bfff15 	stw	r2,-4(fp)
 4015188:	e0ffff17 	ldw	r3,-4(fp)
 401518c:	00810074 	movhi	r2,1025
 4015190:	109a6f04 	addi	r2,r2,27068
 4015194:	18bff62e 	bgeu	r3,r2,4015170 <_do_ctors+0x28>
        (*ctor) (); 
}
 4015198:	e037883a 	mov	sp,fp
 401519c:	dfc00117 	ldw	ra,4(sp)
 40151a0:	df000017 	ldw	fp,0(sp)
 40151a4:	dec00204 	addi	sp,sp,8
 40151a8:	f800283a 	ret

040151ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40151ac:	defffd04 	addi	sp,sp,-12
 40151b0:	dfc00215 	stw	ra,8(sp)
 40151b4:	df000115 	stw	fp,4(sp)
 40151b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40151bc:	00bfff04 	movi	r2,-4
 40151c0:	00c10074 	movhi	r3,1025
 40151c4:	18da7004 	addi	r3,r3,27072
 40151c8:	1885883a 	add	r2,r3,r2
 40151cc:	e0bfff15 	stw	r2,-4(fp)
 40151d0:	00000606 	br	40151ec <_do_dtors+0x40>
        (*dtor) (); 
 40151d4:	e0bfff17 	ldw	r2,-4(fp)
 40151d8:	10800017 	ldw	r2,0(r2)
 40151dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40151e0:	e0bfff17 	ldw	r2,-4(fp)
 40151e4:	10bfff04 	addi	r2,r2,-4
 40151e8:	e0bfff15 	stw	r2,-4(fp)
 40151ec:	e0ffff17 	ldw	r3,-4(fp)
 40151f0:	00810074 	movhi	r2,1025
 40151f4:	109a7004 	addi	r2,r2,27072
 40151f8:	18bff62e 	bgeu	r3,r2,40151d4 <_do_dtors+0x28>
        (*dtor) (); 
}
 40151fc:	e037883a 	mov	sp,fp
 4015200:	dfc00117 	ldw	ra,4(sp)
 4015204:	df000017 	ldw	fp,0(sp)
 4015208:	dec00204 	addi	sp,sp,8
 401520c:	f800283a 	ret

04015210 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4015210:	defffb04 	addi	sp,sp,-20
 4015214:	dfc00415 	stw	ra,16(sp)
 4015218:	df000315 	stw	fp,12(sp)
 401521c:	df000304 	addi	fp,sp,12
 4015220:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4015224:	e13ffe17 	ldw	r4,-8(fp)
 4015228:	d1602f04 	addi	r5,gp,-32580
 401522c:	40162940 	call	4016294 <alt_find_dev>
 4015230:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 4015234:	e0bffd17 	ldw	r2,-12(fp)
 4015238:	1005003a 	cmpeq	r2,r2,zero
 401523c:	10000b1e 	bne	r2,zero,401526c <alt_flash_open_dev+0x5c>
 4015240:	e0bffd17 	ldw	r2,-12(fp)
 4015244:	10800317 	ldw	r2,12(r2)
 4015248:	1005003a 	cmpeq	r2,r2,zero
 401524c:	1000071e 	bne	r2,zero,401526c <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 4015250:	e0bffd17 	ldw	r2,-12(fp)
 4015254:	10800317 	ldw	r2,12(r2)
 4015258:	e13ffd17 	ldw	r4,-12(fp)
 401525c:	e17ffe17 	ldw	r5,-8(fp)
 4015260:	103ee83a 	callr	r2
 4015264:	e0bfff15 	stw	r2,-4(fp)
 4015268:	00000206 	br	4015274 <alt_flash_open_dev+0x64>
  }

  return dev;
 401526c:	e0bffd17 	ldw	r2,-12(fp)
 4015270:	e0bfff15 	stw	r2,-4(fp)
 4015274:	e0bfff17 	ldw	r2,-4(fp)
}
 4015278:	e037883a 	mov	sp,fp
 401527c:	dfc00117 	ldw	ra,4(sp)
 4015280:	df000017 	ldw	fp,0(sp)
 4015284:	dec00204 	addi	sp,sp,8
 4015288:	f800283a 	ret

0401528c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 401528c:	defffd04 	addi	sp,sp,-12
 4015290:	dfc00215 	stw	ra,8(sp)
 4015294:	df000115 	stw	fp,4(sp)
 4015298:	df000104 	addi	fp,sp,4
 401529c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 40152a0:	e0bfff17 	ldw	r2,-4(fp)
 40152a4:	1005003a 	cmpeq	r2,r2,zero
 40152a8:	1000081e 	bne	r2,zero,40152cc <alt_flash_close_dev+0x40>
 40152ac:	e0bfff17 	ldw	r2,-4(fp)
 40152b0:	10800417 	ldw	r2,16(r2)
 40152b4:	1005003a 	cmpeq	r2,r2,zero
 40152b8:	1000041e 	bne	r2,zero,40152cc <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 40152bc:	e0bfff17 	ldw	r2,-4(fp)
 40152c0:	10800417 	ldw	r2,16(r2)
 40152c4:	e13fff17 	ldw	r4,-4(fp)
 40152c8:	103ee83a 	callr	r2
  }
  return;
}
 40152cc:	e037883a 	mov	sp,fp
 40152d0:	dfc00117 	ldw	ra,4(sp)
 40152d4:	df000017 	ldw	fp,0(sp)
 40152d8:	dec00204 	addi	sp,sp,8
 40152dc:	f800283a 	ret

040152e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40152e0:	defff904 	addi	sp,sp,-28
 40152e4:	dfc00615 	stw	ra,24(sp)
 40152e8:	df000515 	stw	fp,20(sp)
 40152ec:	df000504 	addi	fp,sp,20
 40152f0:	e13ffc15 	stw	r4,-16(fp)
 40152f4:	e17ffd15 	stw	r5,-12(fp)
 40152f8:	e1bffe15 	stw	r6,-8(fp)
 40152fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4015300:	e0800217 	ldw	r2,8(fp)
 4015304:	d8800015 	stw	r2,0(sp)
 4015308:	e13ffc17 	ldw	r4,-16(fp)
 401530c:	e17ffd17 	ldw	r5,-12(fp)
 4015310:	e1bffe17 	ldw	r6,-8(fp)
 4015314:	e1ffff17 	ldw	r7,-4(fp)
 4015318:	40154b40 	call	40154b4 <alt_iic_isr_register>
}  
 401531c:	e037883a 	mov	sp,fp
 4015320:	dfc00117 	ldw	ra,4(sp)
 4015324:	df000017 	ldw	fp,0(sp)
 4015328:	dec00204 	addi	sp,sp,8
 401532c:	f800283a 	ret

04015330 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4015330:	defff904 	addi	sp,sp,-28
 4015334:	df000615 	stw	fp,24(sp)
 4015338:	df000604 	addi	fp,sp,24
 401533c:	e13ffe15 	stw	r4,-8(fp)
 4015340:	e17fff15 	stw	r5,-4(fp)
 4015344:	e0bfff17 	ldw	r2,-4(fp)
 4015348:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401534c:	0005303a 	rdctl	r2,status
 4015350:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015354:	e0fffb17 	ldw	r3,-20(fp)
 4015358:	00bfff84 	movi	r2,-2
 401535c:	1884703a 	and	r2,r3,r2
 4015360:	1001703a 	wrctl	status,r2
  
  return context;
 4015364:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015368:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 401536c:	e0fffc17 	ldw	r3,-16(fp)
 4015370:	00800044 	movi	r2,1
 4015374:	10c4983a 	sll	r2,r2,r3
 4015378:	1007883a 	mov	r3,r2
 401537c:	008100b4 	movhi	r2,1026
 4015380:	10a2cc04 	addi	r2,r2,-29904
 4015384:	10800017 	ldw	r2,0(r2)
 4015388:	1886b03a 	or	r3,r3,r2
 401538c:	008100b4 	movhi	r2,1026
 4015390:	10a2cc04 	addi	r2,r2,-29904
 4015394:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4015398:	008100b4 	movhi	r2,1026
 401539c:	10a2cc04 	addi	r2,r2,-29904
 40153a0:	10800017 	ldw	r2,0(r2)
 40153a4:	100170fa 	wrctl	ienable,r2
 40153a8:	e0bffd17 	ldw	r2,-12(fp)
 40153ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40153b0:	e0bffa17 	ldw	r2,-24(fp)
 40153b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40153b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40153bc:	e037883a 	mov	sp,fp
 40153c0:	df000017 	ldw	fp,0(sp)
 40153c4:	dec00104 	addi	sp,sp,4
 40153c8:	f800283a 	ret

040153cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40153cc:	defff904 	addi	sp,sp,-28
 40153d0:	df000615 	stw	fp,24(sp)
 40153d4:	df000604 	addi	fp,sp,24
 40153d8:	e13ffe15 	stw	r4,-8(fp)
 40153dc:	e17fff15 	stw	r5,-4(fp)
 40153e0:	e0bfff17 	ldw	r2,-4(fp)
 40153e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40153e8:	0005303a 	rdctl	r2,status
 40153ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40153f0:	e0fffb17 	ldw	r3,-20(fp)
 40153f4:	00bfff84 	movi	r2,-2
 40153f8:	1884703a 	and	r2,r3,r2
 40153fc:	1001703a 	wrctl	status,r2
  
  return context;
 4015400:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015404:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4015408:	e0fffc17 	ldw	r3,-16(fp)
 401540c:	00800044 	movi	r2,1
 4015410:	10c4983a 	sll	r2,r2,r3
 4015414:	0084303a 	nor	r2,zero,r2
 4015418:	1007883a 	mov	r3,r2
 401541c:	008100b4 	movhi	r2,1026
 4015420:	10a2cc04 	addi	r2,r2,-29904
 4015424:	10800017 	ldw	r2,0(r2)
 4015428:	1886703a 	and	r3,r3,r2
 401542c:	008100b4 	movhi	r2,1026
 4015430:	10a2cc04 	addi	r2,r2,-29904
 4015434:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4015438:	008100b4 	movhi	r2,1026
 401543c:	10a2cc04 	addi	r2,r2,-29904
 4015440:	10800017 	ldw	r2,0(r2)
 4015444:	100170fa 	wrctl	ienable,r2
 4015448:	e0bffd17 	ldw	r2,-12(fp)
 401544c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015450:	e0bffa17 	ldw	r2,-24(fp)
 4015454:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4015458:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 401545c:	e037883a 	mov	sp,fp
 4015460:	df000017 	ldw	fp,0(sp)
 4015464:	dec00104 	addi	sp,sp,4
 4015468:	f800283a 	ret

0401546c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401546c:	defffc04 	addi	sp,sp,-16
 4015470:	df000315 	stw	fp,12(sp)
 4015474:	df000304 	addi	fp,sp,12
 4015478:	e13ffe15 	stw	r4,-8(fp)
 401547c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4015480:	000530fa 	rdctl	r2,ienable
 4015484:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4015488:	e0ffff17 	ldw	r3,-4(fp)
 401548c:	00800044 	movi	r2,1
 4015490:	10c4983a 	sll	r2,r2,r3
 4015494:	1007883a 	mov	r3,r2
 4015498:	e0bffd17 	ldw	r2,-12(fp)
 401549c:	1884703a 	and	r2,r3,r2
 40154a0:	1004c03a 	cmpne	r2,r2,zero
}
 40154a4:	e037883a 	mov	sp,fp
 40154a8:	df000017 	ldw	fp,0(sp)
 40154ac:	dec00104 	addi	sp,sp,4
 40154b0:	f800283a 	ret

040154b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40154b4:	defff404 	addi	sp,sp,-48
 40154b8:	dfc00b15 	stw	ra,44(sp)
 40154bc:	df000a15 	stw	fp,40(sp)
 40154c0:	df000a04 	addi	fp,sp,40
 40154c4:	e13ffb15 	stw	r4,-20(fp)
 40154c8:	e17ffc15 	stw	r5,-16(fp)
 40154cc:	e1bffd15 	stw	r6,-12(fp)
 40154d0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 40154d4:	00bffa84 	movi	r2,-22
 40154d8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40154dc:	e0bffc17 	ldw	r2,-16(fp)
 40154e0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40154e4:	e0bff917 	ldw	r2,-28(fp)
 40154e8:	10800808 	cmpgei	r2,r2,32
 40154ec:	1000291e 	bne	r2,zero,4015594 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40154f0:	0005303a 	rdctl	r2,status
 40154f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40154f8:	e0fff717 	ldw	r3,-36(fp)
 40154fc:	00bfff84 	movi	r2,-2
 4015500:	1884703a 	and	r2,r3,r2
 4015504:	1001703a 	wrctl	status,r2
  
  return context;
 4015508:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401550c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 4015510:	e0bff917 	ldw	r2,-28(fp)
 4015514:	00c100b4 	movhi	r3,1026
 4015518:	18f7e604 	addi	r3,r3,-8296
 401551c:	100490fa 	slli	r2,r2,3
 4015520:	10c7883a 	add	r3,r2,r3
 4015524:	e0bffd17 	ldw	r2,-12(fp)
 4015528:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 401552c:	e0bff917 	ldw	r2,-28(fp)
 4015530:	00c100b4 	movhi	r3,1026
 4015534:	18f7e604 	addi	r3,r3,-8296
 4015538:	100490fa 	slli	r2,r2,3
 401553c:	10c5883a 	add	r2,r2,r3
 4015540:	10c00104 	addi	r3,r2,4
 4015544:	e0bffe17 	ldw	r2,-8(fp)
 4015548:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401554c:	e0bffd17 	ldw	r2,-12(fp)
 4015550:	1005003a 	cmpeq	r2,r2,zero
 4015554:	1000051e 	bne	r2,zero,401556c <alt_iic_isr_register+0xb8>
 4015558:	e17ff917 	ldw	r5,-28(fp)
 401555c:	e13ffb17 	ldw	r4,-20(fp)
 4015560:	40153300 	call	4015330 <alt_ic_irq_enable>
 4015564:	e0bfff15 	stw	r2,-4(fp)
 4015568:	00000406 	br	401557c <alt_iic_isr_register+0xc8>
 401556c:	e17ff917 	ldw	r5,-28(fp)
 4015570:	e13ffb17 	ldw	r4,-20(fp)
 4015574:	40153cc0 	call	40153cc <alt_ic_irq_disable>
 4015578:	e0bfff15 	stw	r2,-4(fp)
 401557c:	e0bfff17 	ldw	r2,-4(fp)
 4015580:	e0bffa15 	stw	r2,-24(fp)
 4015584:	e0bff817 	ldw	r2,-32(fp)
 4015588:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401558c:	e0bff617 	ldw	r2,-40(fp)
 4015590:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4015594:	e0bffa17 	ldw	r2,-24(fp)
}
 4015598:	e037883a 	mov	sp,fp
 401559c:	dfc00117 	ldw	ra,4(sp)
 40155a0:	df000017 	ldw	fp,0(sp)
 40155a4:	dec00204 	addi	sp,sp,8
 40155a8:	f800283a 	ret

040155ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40155ac:	defff904 	addi	sp,sp,-28
 40155b0:	dfc00615 	stw	ra,24(sp)
 40155b4:	df000515 	stw	fp,20(sp)
 40155b8:	df000504 	addi	fp,sp,20
 40155bc:	e13ffc15 	stw	r4,-16(fp)
 40155c0:	e17ffd15 	stw	r5,-12(fp)
 40155c4:	e1bffe15 	stw	r6,-8(fp)
 40155c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40155cc:	e13ffd17 	ldw	r4,-12(fp)
 40155d0:	e17ffe17 	ldw	r5,-8(fp)
 40155d4:	e1bfff17 	ldw	r6,-4(fp)
 40155d8:	40157c40 	call	40157c4 <open>
 40155dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40155e0:	e0bffb17 	ldw	r2,-20(fp)
 40155e4:	1004803a 	cmplt	r2,r2,zero
 40155e8:	10001c1e 	bne	r2,zero,401565c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 40155ec:	e0bffb17 	ldw	r2,-20(fp)
 40155f0:	00c10074 	movhi	r3,1025
 40155f4:	18ddc404 	addi	r3,r3,30480
 40155f8:	10800324 	muli	r2,r2,12
 40155fc:	10c5883a 	add	r2,r2,r3
 4015600:	10c00017 	ldw	r3,0(r2)
 4015604:	e0bffc17 	ldw	r2,-16(fp)
 4015608:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401560c:	e0bffb17 	ldw	r2,-20(fp)
 4015610:	00c10074 	movhi	r3,1025
 4015614:	18ddc404 	addi	r3,r3,30480
 4015618:	10800324 	muli	r2,r2,12
 401561c:	10c5883a 	add	r2,r2,r3
 4015620:	10800104 	addi	r2,r2,4
 4015624:	10c00017 	ldw	r3,0(r2)
 4015628:	e0bffc17 	ldw	r2,-16(fp)
 401562c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4015630:	e0bffb17 	ldw	r2,-20(fp)
 4015634:	00c10074 	movhi	r3,1025
 4015638:	18ddc404 	addi	r3,r3,30480
 401563c:	10800324 	muli	r2,r2,12
 4015640:	10c5883a 	add	r2,r2,r3
 4015644:	10800204 	addi	r2,r2,8
 4015648:	10c00017 	ldw	r3,0(r2)
 401564c:	e0bffc17 	ldw	r2,-16(fp)
 4015650:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4015654:	e13ffb17 	ldw	r4,-20(fp)
 4015658:	400a6740 	call	400a674 <alt_release_fd>
  }
} 
 401565c:	e037883a 	mov	sp,fp
 4015660:	dfc00117 	ldw	ra,4(sp)
 4015664:	df000017 	ldw	fp,0(sp)
 4015668:	dec00204 	addi	sp,sp,8
 401566c:	f800283a 	ret

04015670 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4015670:	defffb04 	addi	sp,sp,-20
 4015674:	dfc00415 	stw	ra,16(sp)
 4015678:	df000315 	stw	fp,12(sp)
 401567c:	df000304 	addi	fp,sp,12
 4015680:	e13ffd15 	stw	r4,-12(fp)
 4015684:	e17ffe15 	stw	r5,-8(fp)
 4015688:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401568c:	01010074 	movhi	r4,1025
 4015690:	211dc704 	addi	r4,r4,30492
 4015694:	e17ffd17 	ldw	r5,-12(fp)
 4015698:	01800044 	movi	r6,1
 401569c:	01c07fc4 	movi	r7,511
 40156a0:	40155ac0 	call	40155ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40156a4:	01010074 	movhi	r4,1025
 40156a8:	211dc404 	addi	r4,r4,30480
 40156ac:	e17ffe17 	ldw	r5,-8(fp)
 40156b0:	000d883a 	mov	r6,zero
 40156b4:	01c07fc4 	movi	r7,511
 40156b8:	40155ac0 	call	40155ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40156bc:	01010074 	movhi	r4,1025
 40156c0:	211dca04 	addi	r4,r4,30504
 40156c4:	e17fff17 	ldw	r5,-4(fp)
 40156c8:	01800044 	movi	r6,1
 40156cc:	01c07fc4 	movi	r7,511
 40156d0:	40155ac0 	call	40155ac <alt_open_fd>
}  
 40156d4:	e037883a 	mov	sp,fp
 40156d8:	dfc00117 	ldw	ra,4(sp)
 40156dc:	df000017 	ldw	fp,0(sp)
 40156e0:	dec00204 	addi	sp,sp,8
 40156e4:	f800283a 	ret

040156e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40156e8:	defffc04 	addi	sp,sp,-16
 40156ec:	df000315 	stw	fp,12(sp)
 40156f0:	df000304 	addi	fp,sp,12
 40156f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40156f8:	e0bffe17 	ldw	r2,-8(fp)
 40156fc:	10800217 	ldw	r2,8(r2)
 4015700:	10d00034 	orhi	r3,r2,16384
 4015704:	e0bffe17 	ldw	r2,-8(fp)
 4015708:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401570c:	e03ffd15 	stw	zero,-12(fp)
 4015710:	00002006 	br	4015794 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4015714:	e0bffd17 	ldw	r2,-12(fp)
 4015718:	00c10074 	movhi	r3,1025
 401571c:	18ddc404 	addi	r3,r3,30480
 4015720:	10800324 	muli	r2,r2,12
 4015724:	10c5883a 	add	r2,r2,r3
 4015728:	10c00017 	ldw	r3,0(r2)
 401572c:	e0bffe17 	ldw	r2,-8(fp)
 4015730:	10800017 	ldw	r2,0(r2)
 4015734:	1880141e 	bne	r3,r2,4015788 <alt_file_locked+0xa0>
 4015738:	e0bffd17 	ldw	r2,-12(fp)
 401573c:	00c10074 	movhi	r3,1025
 4015740:	18ddc404 	addi	r3,r3,30480
 4015744:	10800324 	muli	r2,r2,12
 4015748:	10c5883a 	add	r2,r2,r3
 401574c:	10800204 	addi	r2,r2,8
 4015750:	10800017 	ldw	r2,0(r2)
 4015754:	1004403a 	cmpge	r2,r2,zero
 4015758:	10000b1e 	bne	r2,zero,4015788 <alt_file_locked+0xa0>
 401575c:	e0bffd17 	ldw	r2,-12(fp)
 4015760:	10800324 	muli	r2,r2,12
 4015764:	1007883a 	mov	r3,r2
 4015768:	00810074 	movhi	r2,1025
 401576c:	109dc404 	addi	r2,r2,30480
 4015770:	1887883a 	add	r3,r3,r2
 4015774:	e0bffe17 	ldw	r2,-8(fp)
 4015778:	18800326 	beq	r3,r2,4015788 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401577c:	00bffcc4 	movi	r2,-13
 4015780:	e0bfff15 	stw	r2,-4(fp)
 4015784:	00000a06 	br	40157b0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4015788:	e0bffd17 	ldw	r2,-12(fp)
 401578c:	10800044 	addi	r2,r2,1
 4015790:	e0bffd15 	stw	r2,-12(fp)
 4015794:	008100b4 	movhi	r2,1026
 4015798:	10a27d04 	addi	r2,r2,-30220
 401579c:	10800017 	ldw	r2,0(r2)
 40157a0:	1007883a 	mov	r3,r2
 40157a4:	e0bffd17 	ldw	r2,-12(fp)
 40157a8:	18bfda2e 	bgeu	r3,r2,4015714 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40157ac:	e03fff15 	stw	zero,-4(fp)
 40157b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40157b4:	e037883a 	mov	sp,fp
 40157b8:	df000017 	ldw	fp,0(sp)
 40157bc:	dec00104 	addi	sp,sp,4
 40157c0:	f800283a 	ret

040157c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40157c4:	defff404 	addi	sp,sp,-48
 40157c8:	dfc00b15 	stw	ra,44(sp)
 40157cc:	df000a15 	stw	fp,40(sp)
 40157d0:	df000a04 	addi	fp,sp,40
 40157d4:	e13ffb15 	stw	r4,-20(fp)
 40157d8:	e17ffc15 	stw	r5,-16(fp)
 40157dc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40157e0:	00bfffc4 	movi	r2,-1
 40157e4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 40157e8:	00bffb44 	movi	r2,-19
 40157ec:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 40157f0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40157f4:	e13ffb17 	ldw	r4,-20(fp)
 40157f8:	014100b4 	movhi	r5,1026
 40157fc:	29627b04 	addi	r5,r5,-30228
 4015800:	40162940 	call	4016294 <alt_find_dev>
 4015804:	e0bffa15 	stw	r2,-24(fp)
 4015808:	e0bffa17 	ldw	r2,-24(fp)
 401580c:	1004c03a 	cmpne	r2,r2,zero
 4015810:	1000051e 	bne	r2,zero,4015828 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4015814:	e13ffb17 	ldw	r4,-20(fp)
 4015818:	40163280 	call	4016328 <alt_find_file>
 401581c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4015820:	00800044 	movi	r2,1
 4015824:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4015828:	e0bffa17 	ldw	r2,-24(fp)
 401582c:	1005003a 	cmpeq	r2,r2,zero
 4015830:	1000301e 	bne	r2,zero,40158f4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4015834:	e13ffa17 	ldw	r4,-24(fp)
 4015838:	40164480 	call	4016448 <alt_get_fd>
 401583c:	e0bff815 	stw	r2,-32(fp)
 4015840:	e0bff817 	ldw	r2,-32(fp)
 4015844:	1004403a 	cmpge	r2,r2,zero
 4015848:	1000031e 	bne	r2,zero,4015858 <open+0x94>
    {
      status = index;
 401584c:	e0bff817 	ldw	r2,-32(fp)
 4015850:	e0bff715 	stw	r2,-36(fp)
 4015854:	00002906 	br	40158fc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4015858:	e0bff817 	ldw	r2,-32(fp)
 401585c:	10800324 	muli	r2,r2,12
 4015860:	1007883a 	mov	r3,r2
 4015864:	00810074 	movhi	r2,1025
 4015868:	109dc404 	addi	r2,r2,30480
 401586c:	1885883a 	add	r2,r3,r2
 4015870:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4015874:	e0fffc17 	ldw	r3,-16(fp)
 4015878:	00900034 	movhi	r2,16384
 401587c:	10bfffc4 	addi	r2,r2,-1
 4015880:	1886703a 	and	r3,r3,r2
 4015884:	e0bff917 	ldw	r2,-28(fp)
 4015888:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401588c:	e0bff617 	ldw	r2,-40(fp)
 4015890:	1004c03a 	cmpne	r2,r2,zero
 4015894:	1000061e 	bne	r2,zero,40158b0 <open+0xec>
 4015898:	e13ff917 	ldw	r4,-28(fp)
 401589c:	40156e80 	call	40156e8 <alt_file_locked>
 40158a0:	e0bff715 	stw	r2,-36(fp)
 40158a4:	e0bff717 	ldw	r2,-36(fp)
 40158a8:	1004803a 	cmplt	r2,r2,zero
 40158ac:	1000131e 	bne	r2,zero,40158fc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40158b0:	e0bffa17 	ldw	r2,-24(fp)
 40158b4:	10800317 	ldw	r2,12(r2)
 40158b8:	1005003a 	cmpeq	r2,r2,zero
 40158bc:	1000091e 	bne	r2,zero,40158e4 <open+0x120>
 40158c0:	e0bffa17 	ldw	r2,-24(fp)
 40158c4:	10800317 	ldw	r2,12(r2)
 40158c8:	e13ff917 	ldw	r4,-28(fp)
 40158cc:	e17ffb17 	ldw	r5,-20(fp)
 40158d0:	e1bffc17 	ldw	r6,-16(fp)
 40158d4:	e1fffd17 	ldw	r7,-12(fp)
 40158d8:	103ee83a 	callr	r2
 40158dc:	e0bfff15 	stw	r2,-4(fp)
 40158e0:	00000106 	br	40158e8 <open+0x124>
 40158e4:	e03fff15 	stw	zero,-4(fp)
 40158e8:	e0bfff17 	ldw	r2,-4(fp)
 40158ec:	e0bff715 	stw	r2,-36(fp)
 40158f0:	00000206 	br	40158fc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40158f4:	00bffb44 	movi	r2,-19
 40158f8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40158fc:	e0bff717 	ldw	r2,-36(fp)
 4015900:	1004403a 	cmpge	r2,r2,zero
 4015904:	1000091e 	bne	r2,zero,401592c <open+0x168>
  {
    alt_release_fd (index);  
 4015908:	e13ff817 	ldw	r4,-32(fp)
 401590c:	400a6740 	call	400a674 <alt_release_fd>
    ALT_ERRNO = -status;
 4015910:	401594c0 	call	401594c <alt_get_errno>
 4015914:	e0fff717 	ldw	r3,-36(fp)
 4015918:	00c7c83a 	sub	r3,zero,r3
 401591c:	10c00015 	stw	r3,0(r2)
    return -1;
 4015920:	00bfffc4 	movi	r2,-1
 4015924:	e0bffe15 	stw	r2,-8(fp)
 4015928:	00000206 	br	4015934 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 401592c:	e0bff817 	ldw	r2,-32(fp)
 4015930:	e0bffe15 	stw	r2,-8(fp)
 4015934:	e0bffe17 	ldw	r2,-8(fp)
}
 4015938:	e037883a 	mov	sp,fp
 401593c:	dfc00117 	ldw	ra,4(sp)
 4015940:	df000017 	ldw	fp,0(sp)
 4015944:	dec00204 	addi	sp,sp,8
 4015948:	f800283a 	ret

0401594c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401594c:	defffd04 	addi	sp,sp,-12
 4015950:	dfc00215 	stw	ra,8(sp)
 4015954:	df000115 	stw	fp,4(sp)
 4015958:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 401595c:	008100b4 	movhi	r2,1026
 4015960:	10a27e04 	addi	r2,r2,-30216
 4015964:	10800017 	ldw	r2,0(r2)
 4015968:	1005003a 	cmpeq	r2,r2,zero
 401596c:	1000061e 	bne	r2,zero,4015988 <alt_get_errno+0x3c>
 4015970:	008100b4 	movhi	r2,1026
 4015974:	10a27e04 	addi	r2,r2,-30216
 4015978:	10800017 	ldw	r2,0(r2)
 401597c:	103ee83a 	callr	r2
 4015980:	e0bfff15 	stw	r2,-4(fp)
 4015984:	00000306 	br	4015994 <alt_get_errno+0x48>
 4015988:	008100b4 	movhi	r2,1026
 401598c:	10a2ae04 	addi	r2,r2,-30024
 4015990:	e0bfff15 	stw	r2,-4(fp)
 4015994:	e0bfff17 	ldw	r2,-4(fp)
}
 4015998:	e037883a 	mov	sp,fp
 401599c:	dfc00117 	ldw	ra,4(sp)
 40159a0:	df000017 	ldw	fp,0(sp)
 40159a4:	dec00204 	addi	sp,sp,8
 40159a8:	f800283a 	ret

040159ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40159ac:	defffa04 	addi	sp,sp,-24
 40159b0:	df000515 	stw	fp,20(sp)
 40159b4:	df000504 	addi	fp,sp,20
 40159b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40159bc:	0005303a 	rdctl	r2,status
 40159c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40159c4:	e0fffd17 	ldw	r3,-12(fp)
 40159c8:	00bfff84 	movi	r2,-2
 40159cc:	1884703a 	and	r2,r3,r2
 40159d0:	1001703a 	wrctl	status,r2
  
  return context;
 40159d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40159d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 40159dc:	e0bfff17 	ldw	r2,-4(fp)
 40159e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40159e4:	e0bffc17 	ldw	r2,-16(fp)
 40159e8:	10c00017 	ldw	r3,0(r2)
 40159ec:	e0bffc17 	ldw	r2,-16(fp)
 40159f0:	10800117 	ldw	r2,4(r2)
 40159f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 40159f8:	e0bffc17 	ldw	r2,-16(fp)
 40159fc:	10c00117 	ldw	r3,4(r2)
 4015a00:	e0bffc17 	ldw	r2,-16(fp)
 4015a04:	10800017 	ldw	r2,0(r2)
 4015a08:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4015a0c:	e0fffc17 	ldw	r3,-16(fp)
 4015a10:	e0bffc17 	ldw	r2,-16(fp)
 4015a14:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4015a18:	e0fffc17 	ldw	r3,-16(fp)
 4015a1c:	e0bffc17 	ldw	r2,-16(fp)
 4015a20:	18800015 	stw	r2,0(r3)
 4015a24:	e0bffe17 	ldw	r2,-8(fp)
 4015a28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015a2c:	e0bffb17 	ldw	r2,-20(fp)
 4015a30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4015a34:	e037883a 	mov	sp,fp
 4015a38:	df000017 	ldw	fp,0(sp)
 4015a3c:	dec00104 	addi	sp,sp,4
 4015a40:	f800283a 	ret

04015a44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4015a44:	defffb04 	addi	sp,sp,-20
 4015a48:	dfc00415 	stw	ra,16(sp)
 4015a4c:	df000315 	stw	fp,12(sp)
 4015a50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4015a54:	d0a03217 	ldw	r2,-32568(gp)
 4015a58:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4015a5c:	d0a05e17 	ldw	r2,-32392(gp)
 4015a60:	10800044 	addi	r2,r2,1
 4015a64:	d0a05e15 	stw	r2,-32392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015a68:	00003106 	br	4015b30 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4015a6c:	e0bffe17 	ldw	r2,-8(fp)
 4015a70:	10800017 	ldw	r2,0(r2)
 4015a74:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4015a78:	e0bffe17 	ldw	r2,-8(fp)
 4015a7c:	10800403 	ldbu	r2,16(r2)
 4015a80:	10803fcc 	andi	r2,r2,255
 4015a84:	1005003a 	cmpeq	r2,r2,zero
 4015a88:	1000051e 	bne	r2,zero,4015aa0 <alt_tick+0x5c>
 4015a8c:	d0a05e17 	ldw	r2,-32392(gp)
 4015a90:	1004c03a 	cmpne	r2,r2,zero
 4015a94:	1000021e 	bne	r2,zero,4015aa0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4015a98:	e0bffe17 	ldw	r2,-8(fp)
 4015a9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4015aa0:	e0bffe17 	ldw	r2,-8(fp)
 4015aa4:	10c00217 	ldw	r3,8(r2)
 4015aa8:	d0a05e17 	ldw	r2,-32392(gp)
 4015aac:	10c01e36 	bltu	r2,r3,4015b28 <alt_tick+0xe4>
 4015ab0:	e0bffe17 	ldw	r2,-8(fp)
 4015ab4:	10800403 	ldbu	r2,16(r2)
 4015ab8:	10803fcc 	andi	r2,r2,255
 4015abc:	1004c03a 	cmpne	r2,r2,zero
 4015ac0:	1000191e 	bne	r2,zero,4015b28 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4015ac4:	e0bffe17 	ldw	r2,-8(fp)
 4015ac8:	10c00317 	ldw	r3,12(r2)
 4015acc:	e0bffe17 	ldw	r2,-8(fp)
 4015ad0:	11000517 	ldw	r4,20(r2)
 4015ad4:	183ee83a 	callr	r3
 4015ad8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4015adc:	e0bffd17 	ldw	r2,-12(fp)
 4015ae0:	1004c03a 	cmpne	r2,r2,zero
 4015ae4:	1000031e 	bne	r2,zero,4015af4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4015ae8:	e13ffe17 	ldw	r4,-8(fp)
 4015aec:	40159ac0 	call	40159ac <alt_alarm_stop>
 4015af0:	00000d06 	br	4015b28 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4015af4:	e0bffe17 	ldw	r2,-8(fp)
 4015af8:	10c00217 	ldw	r3,8(r2)
 4015afc:	e0bffd17 	ldw	r2,-12(fp)
 4015b00:	1887883a 	add	r3,r3,r2
 4015b04:	e0bffe17 	ldw	r2,-8(fp)
 4015b08:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4015b0c:	e0bffe17 	ldw	r2,-8(fp)
 4015b10:	10c00217 	ldw	r3,8(r2)
 4015b14:	d0a05e17 	ldw	r2,-32392(gp)
 4015b18:	1880032e 	bgeu	r3,r2,4015b28 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4015b1c:	e0fffe17 	ldw	r3,-8(fp)
 4015b20:	00800044 	movi	r2,1
 4015b24:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4015b28:	e0bfff17 	ldw	r2,-4(fp)
 4015b2c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015b30:	d0e03204 	addi	r3,gp,-32568
 4015b34:	e0bffe17 	ldw	r2,-8(fp)
 4015b38:	10ffcc1e 	bne	r2,r3,4015a6c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4015b3c:	400bad40 	call	400bad4 <OSTimeTick>
}
 4015b40:	e037883a 	mov	sp,fp
 4015b44:	dfc00117 	ldw	ra,4(sp)
 4015b48:	df000017 	ldw	fp,0(sp)
 4015b4c:	dec00204 	addi	sp,sp,8
 4015b50:	f800283a 	ret

04015b54 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 4015b54:	deffff04 	addi	sp,sp,-4
 4015b58:	df000015 	stw	fp,0(sp)
 4015b5c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4015b60:	000170fa 	wrctl	ienable,zero
}
 4015b64:	e037883a 	mov	sp,fp
 4015b68:	df000017 	ldw	fp,0(sp)
 4015b6c:	dec00104 	addi	sp,sp,4
 4015b70:	f800283a 	ret

04015b74 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 4015b74:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 4015b78:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 4015b7c:	d1205717 	ldw	r4,-32420(gp)

      stw ra,  0(sp)
 4015b80:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 4015b84:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 4015b88:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 4015b8c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 4015b90:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 4015b94:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4015b98:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 4015b9c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 4015ba0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 4015ba4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 4015ba8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 4015bac:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4015bb0:	4015f940 	call	4015f94 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 4015bb4:	d1205217 	ldw	r4,-32440(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 4015bb8:	d1604a07 	ldb	r5,-32472(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 4015bbc:	d1205715 	stw	r4,-32420(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 4015bc0:	d1604a45 	stb	r5,-32471(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 4015bc4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 4015bc8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 4015bcc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 4015bd0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 4015bd4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 4015bd8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 4015bdc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 4015be0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 4015be4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 4015be8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 4015bec:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 4015bf0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 4015bf4:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 4015bf8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 4015bfc:	f800283a 	ret

04015c00 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 4015c00:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 4015c04:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 4015c08:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 4015c0c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4015c10:	4015f940 	call	4015f94 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 4015c14:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 4015c18:	d4a04805 	stb	r18,-32480(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 4015c1c:	003fe506 	br	4015bb4 <OSCtxSw+0x40>

04015c20 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 4015c20:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 4015c24:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 4015c28:	10800054 	ori	r2,r2,1
      wrctl status, r2
 4015c2c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 4015c30:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 4015c34:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 4015c38:	dec00204 	addi	sp,sp,8

      callr r2
 4015c3c:	103ee83a 	callr	r2

      nop
 4015c40:	0001883a 	nop

04015c44 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4015c44:	defff704 	addi	sp,sp,-36
 4015c48:	dfc00815 	stw	ra,32(sp)
 4015c4c:	df000715 	stw	fp,28(sp)
 4015c50:	df000704 	addi	fp,sp,28
 4015c54:	e13ffc15 	stw	r4,-16(fp)
 4015c58:	e17ffd15 	stw	r5,-12(fp)
 4015c5c:	e1bffe15 	stw	r6,-8(fp)
 4015c60:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4015c64:	e0bffe17 	ldw	r2,-8(fp)
 4015c68:	1007883a 	mov	r3,r2
 4015c6c:	00bfff04 	movi	r2,-4
 4015c70:	1884703a 	and	r2,r3,r2
 4015c74:	10bf0004 	addi	r2,r2,-1024
 4015c78:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 4015c7c:	e0bff917 	ldw	r2,-28(fp)
 4015c80:	10000015 	stw	zero,0(r2)
 4015c84:	e0bff917 	ldw	r2,-28(fp)
 4015c88:	10c0bb04 	addi	r3,r2,748
 4015c8c:	e0bff917 	ldw	r2,-28(fp)
 4015c90:	10c00115 	stw	r3,4(r2)
 4015c94:	e0bff917 	ldw	r2,-28(fp)
 4015c98:	1080bb04 	addi	r2,r2,748
 4015c9c:	10c01704 	addi	r3,r2,92
 4015ca0:	e0bff917 	ldw	r2,-28(fp)
 4015ca4:	10c00215 	stw	r3,8(r2)
 4015ca8:	e0bff917 	ldw	r2,-28(fp)
 4015cac:	1080bb04 	addi	r2,r2,748
 4015cb0:	10c02e04 	addi	r3,r2,184
 4015cb4:	e0bff917 	ldw	r2,-28(fp)
 4015cb8:	10c00315 	stw	r3,12(r2)
 4015cbc:	e0bff917 	ldw	r2,-28(fp)
 4015cc0:	10000415 	stw	zero,16(r2)
 4015cc4:	e0bff917 	ldw	r2,-28(fp)
 4015cc8:	10800504 	addi	r2,r2,20
 4015ccc:	1009883a 	mov	r4,r2
 4015cd0:	01800644 	movi	r6,25
 4015cd4:	000b883a 	mov	r5,zero
 4015cd8:	4005cd40 	call	4005cd4 <memset>
 4015cdc:	e0bff917 	ldw	r2,-28(fp)
 4015ce0:	10000c15 	stw	zero,48(r2)
 4015ce4:	e0fff917 	ldw	r3,-28(fp)
 4015ce8:	00810074 	movhi	r2,1025
 4015cec:	109bb404 	addi	r2,r2,28368
 4015cf0:	18800d15 	stw	r2,52(r3)
 4015cf4:	e0bff917 	ldw	r2,-28(fp)
 4015cf8:	10000e15 	stw	zero,56(r2)
 4015cfc:	e0bff917 	ldw	r2,-28(fp)
 4015d00:	10000f15 	stw	zero,60(r2)
 4015d04:	e0bff917 	ldw	r2,-28(fp)
 4015d08:	10001015 	stw	zero,64(r2)
 4015d0c:	e0bff917 	ldw	r2,-28(fp)
 4015d10:	10001115 	stw	zero,68(r2)
 4015d14:	e0bff917 	ldw	r2,-28(fp)
 4015d18:	10001215 	stw	zero,72(r2)
 4015d1c:	e0bff917 	ldw	r2,-28(fp)
 4015d20:	10001315 	stw	zero,76(r2)
 4015d24:	e0bff917 	ldw	r2,-28(fp)
 4015d28:	10001415 	stw	zero,80(r2)
 4015d2c:	e0bff917 	ldw	r2,-28(fp)
 4015d30:	10001515 	stw	zero,84(r2)
 4015d34:	e0bff917 	ldw	r2,-28(fp)
 4015d38:	10001615 	stw	zero,88(r2)
 4015d3c:	e0bff917 	ldw	r2,-28(fp)
 4015d40:	10001715 	stw	zero,92(r2)
 4015d44:	e0bff917 	ldw	r2,-28(fp)
 4015d48:	10001805 	stb	zero,96(r2)
 4015d4c:	e0bff917 	ldw	r2,-28(fp)
 4015d50:	10801f04 	addi	r2,r2,124
 4015d54:	10000015 	stw	zero,0(r2)
 4015d58:	10000115 	stw	zero,4(r2)
 4015d5c:	10000215 	stw	zero,8(r2)
 4015d60:	10000315 	stw	zero,12(r2)
 4015d64:	10000415 	stw	zero,16(r2)
 4015d68:	10000515 	stw	zero,20(r2)
 4015d6c:	10000615 	stw	zero,24(r2)
 4015d70:	10000715 	stw	zero,28(r2)
 4015d74:	10000815 	stw	zero,32(r2)
 4015d78:	e0bff917 	ldw	r2,-28(fp)
 4015d7c:	10002815 	stw	zero,160(r2)
 4015d80:	e0fff917 	ldw	r3,-28(fp)
 4015d84:	00800044 	movi	r2,1
 4015d88:	18802915 	stw	r2,164(r3)
 4015d8c:	18002a15 	stw	zero,168(r3)
 4015d90:	e0fff917 	ldw	r3,-28(fp)
 4015d94:	008cc384 	movi	r2,13070
 4015d98:	18802b0d 	sth	r2,172(r3)
 4015d9c:	e0fff917 	ldw	r3,-28(fp)
 4015da0:	00aaf344 	movi	r2,-21555
 4015da4:	18802b8d 	sth	r2,174(r3)
 4015da8:	e0fff917 	ldw	r3,-28(fp)
 4015dac:	00848d04 	movi	r2,4660
 4015db0:	18802c0d 	sth	r2,176(r3)
 4015db4:	e0fff917 	ldw	r3,-28(fp)
 4015db8:	00b99b44 	movi	r2,-6547
 4015dbc:	18802c8d 	sth	r2,178(r3)
 4015dc0:	e0fff917 	ldw	r3,-28(fp)
 4015dc4:	00b7bb04 	movi	r2,-8468
 4015dc8:	18802d0d 	sth	r2,180(r3)
 4015dcc:	e0fff917 	ldw	r3,-28(fp)
 4015dd0:	00800144 	movi	r2,5
 4015dd4:	18802d8d 	sth	r2,182(r3)
 4015dd8:	e0fff917 	ldw	r3,-28(fp)
 4015ddc:	008002c4 	movi	r2,11
 4015de0:	18802e0d 	sth	r2,184(r3)
 4015de4:	e0bff917 	ldw	r2,-28(fp)
 4015de8:	10002f15 	stw	zero,188(r2)
 4015dec:	e0bff917 	ldw	r2,-28(fp)
 4015df0:	10003015 	stw	zero,192(r2)
 4015df4:	e0bff917 	ldw	r2,-28(fp)
 4015df8:	10003115 	stw	zero,196(r2)
 4015dfc:	e0bff917 	ldw	r2,-28(fp)
 4015e00:	10003215 	stw	zero,200(r2)
 4015e04:	e0bff917 	ldw	r2,-28(fp)
 4015e08:	10003315 	stw	zero,204(r2)
 4015e0c:	e0bff917 	ldw	r2,-28(fp)
 4015e10:	10003415 	stw	zero,208(r2)
 4015e14:	e0bff917 	ldw	r2,-28(fp)
 4015e18:	10003e15 	stw	zero,248(r2)
 4015e1c:	e0bff917 	ldw	r2,-28(fp)
 4015e20:	10003f15 	stw	zero,252(r2)
 4015e24:	e0bff917 	ldw	r2,-28(fp)
 4015e28:	10004015 	stw	zero,256(r2)
 4015e2c:	e0bff917 	ldw	r2,-28(fp)
 4015e30:	10004115 	stw	zero,260(r2)
 4015e34:	e0bff917 	ldw	r2,-28(fp)
 4015e38:	10004215 	stw	zero,264(r2)
 4015e3c:	e0bff917 	ldw	r2,-28(fp)
 4015e40:	10004315 	stw	zero,268(r2)
 4015e44:	e0bff917 	ldw	r2,-28(fp)
 4015e48:	10004415 	stw	zero,272(r2)
 4015e4c:	e0bff917 	ldw	r2,-28(fp)
 4015e50:	10004515 	stw	zero,276(r2)
 4015e54:	e0bff917 	ldw	r2,-28(fp)
 4015e58:	10004615 	stw	zero,280(r2)
 4015e5c:	e0bff917 	ldw	r2,-28(fp)
 4015e60:	10004715 	stw	zero,284(r2)
 4015e64:	e0bff917 	ldw	r2,-28(fp)
 4015e68:	10003505 	stb	zero,212(r2)
 4015e6c:	e0bff917 	ldw	r2,-28(fp)
 4015e70:	10003705 	stb	zero,220(r2)
 4015e74:	e0bff917 	ldw	r2,-28(fp)
 4015e78:	10003d15 	stw	zero,244(r2)
 4015e7c:	e0bff917 	ldw	r2,-28(fp)
 4015e80:	10005215 	stw	zero,328(r2)
 4015e84:	e0bff917 	ldw	r2,-28(fp)
 4015e88:	10005315 	stw	zero,332(r2)
 4015e8c:	e0bff917 	ldw	r2,-28(fp)
 4015e90:	10005415 	stw	zero,336(r2)
 4015e94:	e0bff917 	ldw	r2,-28(fp)
 4015e98:	10005515 	stw	zero,340(r2)
 4015e9c:	e0bff917 	ldw	r2,-28(fp)
 4015ea0:	1000b515 	stw	zero,724(r2)
 4015ea4:	e0bff917 	ldw	r2,-28(fp)
 4015ea8:	10007515 	stw	zero,468(r2)
 4015eac:	e0bff917 	ldw	r2,-28(fp)
 4015eb0:	1000b715 	stw	zero,732(r2)
 4015eb4:	e0bff917 	ldw	r2,-28(fp)
 4015eb8:	1000b815 	stw	zero,736(r2)
 4015ebc:	e0bff917 	ldw	r2,-28(fp)
 4015ec0:	1000b915 	stw	zero,740(r2)
 4015ec4:	e0bff917 	ldw	r2,-28(fp)
 4015ec8:	1000ba15 	stw	zero,744(r2)
 4015ecc:	e0bff917 	ldw	r2,-28(fp)
 4015ed0:	1080bb04 	addi	r2,r2,748
 4015ed4:	1009883a 	mov	r4,r2
 4015ed8:	01804504 	movi	r6,276
 4015edc:	000b883a 	mov	r5,zero
 4015ee0:	4005cd40 	call	4005cd4 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 4015ee4:	e0bff917 	ldw	r2,-28(fp)
 4015ee8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 4015eec:	e0bffb17 	ldw	r2,-20(fp)
 4015ef0:	10bff304 	addi	r2,r2,-52
 4015ef4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 4015ef8:	e0bffa17 	ldw	r2,-24(fp)
 4015efc:	10c00c04 	addi	r3,r2,48
 4015f00:	e0bffc17 	ldw	r2,-16(fp)
 4015f04:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 4015f08:	e0bffa17 	ldw	r2,-24(fp)
 4015f0c:	10c00b04 	addi	r3,r2,44
 4015f10:	e0bffd17 	ldw	r2,-12(fp)
 4015f14:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 4015f18:	e0bffa17 	ldw	r2,-24(fp)
 4015f1c:	10c00a04 	addi	r3,r2,40
 4015f20:	e0bff917 	ldw	r2,-28(fp)
 4015f24:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4015f28:	00810074 	movhi	r2,1025
 4015f2c:	10970804 	addi	r2,r2,23584
 4015f30:	10c00104 	addi	r3,r2,4
 4015f34:	e0bffa17 	ldw	r2,-24(fp)
 4015f38:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 4015f3c:	e0bffa17 	ldw	r2,-24(fp)
}
 4015f40:	e037883a 	mov	sp,fp
 4015f44:	dfc00117 	ldw	ra,4(sp)
 4015f48:	df000017 	ldw	fp,0(sp)
 4015f4c:	dec00204 	addi	sp,sp,8
 4015f50:	f800283a 	ret

04015f54 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 4015f54:	defffe04 	addi	sp,sp,-8
 4015f58:	df000115 	stw	fp,4(sp)
 4015f5c:	df000104 	addi	fp,sp,4
 4015f60:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 4015f64:	e037883a 	mov	sp,fp
 4015f68:	df000017 	ldw	fp,0(sp)
 4015f6c:	dec00104 	addi	sp,sp,4
 4015f70:	f800283a 	ret

04015f74 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 4015f74:	defffe04 	addi	sp,sp,-8
 4015f78:	df000115 	stw	fp,4(sp)
 4015f7c:	df000104 	addi	fp,sp,4
 4015f80:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 4015f84:	e037883a 	mov	sp,fp
 4015f88:	df000017 	ldw	fp,0(sp)
 4015f8c:	dec00104 	addi	sp,sp,4
 4015f90:	f800283a 	ret

04015f94 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 4015f94:	deffff04 	addi	sp,sp,-4
 4015f98:	df000015 	stw	fp,0(sp)
 4015f9c:	d839883a 	mov	fp,sp
}
 4015fa0:	e037883a 	mov	sp,fp
 4015fa4:	df000017 	ldw	fp,0(sp)
 4015fa8:	dec00104 	addi	sp,sp,4
 4015fac:	f800283a 	ret

04015fb0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 4015fb0:	deffff04 	addi	sp,sp,-4
 4015fb4:	df000015 	stw	fp,0(sp)
 4015fb8:	d839883a 	mov	fp,sp
}
 4015fbc:	e037883a 	mov	sp,fp
 4015fc0:	df000017 	ldw	fp,0(sp)
 4015fc4:	dec00104 	addi	sp,sp,4
 4015fc8:	f800283a 	ret

04015fcc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 4015fcc:	deffff04 	addi	sp,sp,-4
 4015fd0:	df000015 	stw	fp,0(sp)
 4015fd4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 4015fd8:	e037883a 	mov	sp,fp
 4015fdc:	df000017 	ldw	fp,0(sp)
 4015fe0:	dec00104 	addi	sp,sp,4
 4015fe4:	f800283a 	ret

04015fe8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 4015fe8:	deffff04 	addi	sp,sp,-4
 4015fec:	df000015 	stw	fp,0(sp)
 4015ff0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 4015ff4:	e037883a 	mov	sp,fp
 4015ff8:	df000017 	ldw	fp,0(sp)
 4015ffc:	dec00104 	addi	sp,sp,4
 4016000:	f800283a 	ret

04016004 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 4016004:	deffff04 	addi	sp,sp,-4
 4016008:	df000015 	stw	fp,0(sp)
 401600c:	d839883a 	mov	fp,sp
}
 4016010:	e037883a 	mov	sp,fp
 4016014:	df000017 	ldw	fp,0(sp)
 4016018:	dec00104 	addi	sp,sp,4
 401601c:	f800283a 	ret

04016020 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 4016020:	deffff04 	addi	sp,sp,-4
 4016024:	df000015 	stw	fp,0(sp)
 4016028:	d839883a 	mov	fp,sp
}
 401602c:	e037883a 	mov	sp,fp
 4016030:	df000017 	ldw	fp,0(sp)
 4016034:	dec00104 	addi	sp,sp,4
 4016038:	f800283a 	ret

0401603c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 401603c:	defffe04 	addi	sp,sp,-8
 4016040:	df000115 	stw	fp,4(sp)
 4016044:	df000104 	addi	fp,sp,4
 4016048:	e13fff15 	stw	r4,-4(fp)
}
 401604c:	e037883a 	mov	sp,fp
 4016050:	df000017 	ldw	fp,0(sp)
 4016054:	dec00104 	addi	sp,sp,4
 4016058:	f800283a 	ret

0401605c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401605c:	defff404 	addi	sp,sp,-48
 4016060:	df000b15 	stw	fp,44(sp)
 4016064:	df000b04 	addi	fp,sp,44
 4016068:	e13ffc15 	stw	r4,-16(fp)
 401606c:	e17ffd15 	stw	r5,-12(fp)
 4016070:	e1bffe15 	stw	r6,-8(fp)
 4016074:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4016078:	e0fffe17 	ldw	r3,-8(fp)
 401607c:	e0bfff17 	ldw	r2,-4(fp)
 4016080:	10c5883a 	add	r2,r2,r3
 4016084:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 4016088:	e0c00117 	ldw	r3,4(fp)
 401608c:	e0800217 	ldw	r2,8(fp)
 4016090:	10c5883a 	add	r2,r2,r3
 4016094:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 4016098:	e0800117 	ldw	r2,4(fp)
 401609c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 40160a0:	e0bffe17 	ldw	r2,-8(fp)
 40160a4:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40160a8:	00800044 	movi	r2,1
 40160ac:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 40160b0:	e0bffc17 	ldw	r2,-16(fp)
 40160b4:	11000504 	addi	r4,r2,20
 40160b8:	e0fffd17 	ldw	r3,-12(fp)
 40160bc:	00800044 	movi	r2,1
 40160c0:	10c6983a 	sll	r3,r2,r3
 40160c4:	2005883a 	mov	r2,r4
 40160c8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 40160cc:	e0800317 	ldw	r2,12(fp)
 40160d0:	1080008c 	andi	r2,r2,2
 40160d4:	1004c03a 	cmpne	r2,r2,zero
 40160d8:	1000051e 	bne	r2,zero,40160f0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 40160dc:	e0bffc17 	ldw	r2,-16(fp)
 40160e0:	10800304 	addi	r2,r2,12
 40160e4:	1007883a 	mov	r3,r2
 40160e8:	00810004 	movi	r2,1024
 40160ec:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 40160f0:	e0bffc17 	ldw	r2,-16(fp)
 40160f4:	10800037 	ldwio	r2,0(r2)
 40160f8:	00000006 	br	40160fc <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40160fc:	e0bffc17 	ldw	r2,-16(fp)
 4016100:	10800204 	addi	r2,r2,8
 4016104:	10800037 	ldwio	r2,0(r2)
 4016108:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401610c:	e0bff717 	ldw	r2,-36(fp)
 4016110:	1080100c 	andi	r2,r2,64
 4016114:	1005003a 	cmpeq	r2,r2,zero
 4016118:	1000031e 	bne	r2,zero,4016128 <alt_avalon_spi_command+0xcc>
 401611c:	e0bff617 	ldw	r2,-40(fp)
 4016120:	1004c03a 	cmpne	r2,r2,zero
 4016124:	1000041e 	bne	r2,zero,4016138 <alt_avalon_spi_command+0xdc>
 4016128:	e0bff717 	ldw	r2,-36(fp)
 401612c:	1080200c 	andi	r2,r2,128
 4016130:	1005003a 	cmpeq	r2,r2,zero
 4016134:	103ff11e 	bne	r2,zero,40160fc <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4016138:	e0bff717 	ldw	r2,-36(fp)
 401613c:	1080100c 	andi	r2,r2,64
 4016140:	1005003a 	cmpeq	r2,r2,zero
 4016144:	1000201e 	bne	r2,zero,40161c8 <alt_avalon_spi_command+0x16c>
 4016148:	e0bff617 	ldw	r2,-40(fp)
 401614c:	10800050 	cmplti	r2,r2,1
 4016150:	10001d1e 	bne	r2,zero,40161c8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 4016154:	e0bff617 	ldw	r2,-40(fp)
 4016158:	10bfffc4 	addi	r2,r2,-1
 401615c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 4016160:	e0ffff17 	ldw	r3,-4(fp)
 4016164:	e0bffb17 	ldw	r2,-20(fp)
 4016168:	18800b2e 	bgeu	r3,r2,4016198 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401616c:	e0bffc17 	ldw	r2,-16(fp)
 4016170:	11000104 	addi	r4,r2,4
 4016174:	e0bfff17 	ldw	r2,-4(fp)
 4016178:	10800003 	ldbu	r2,0(r2)
 401617c:	10c03fcc 	andi	r3,r2,255
 4016180:	e0bfff17 	ldw	r2,-4(fp)
 4016184:	10800044 	addi	r2,r2,1
 4016188:	e0bfff15 	stw	r2,-4(fp)
 401618c:	2005883a 	mov	r2,r4
 4016190:	10c00035 	stwio	r3,0(r2)
 4016194:	00000c06 	br	40161c8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 4016198:	e0bff917 	ldw	r2,-28(fp)
 401619c:	1005003a 	cmpeq	r2,r2,zero
 40161a0:	1000071e 	bne	r2,zero,40161c0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 40161a4:	e0bff917 	ldw	r2,-28(fp)
 40161a8:	10bfffc4 	addi	r2,r2,-1
 40161ac:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40161b0:	e0bffc17 	ldw	r2,-16(fp)
 40161b4:	10800104 	addi	r2,r2,4
 40161b8:	10000035 	stwio	zero,0(r2)
 40161bc:	00000206 	br	40161c8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 40161c0:	00bf0004 	movi	r2,-1024
 40161c4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 40161c8:	e0bff717 	ldw	r2,-36(fp)
 40161cc:	1080200c 	andi	r2,r2,128
 40161d0:	1005003a 	cmpeq	r2,r2,zero
 40161d4:	103fc91e 	bne	r2,zero,40160fc <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 40161d8:	e0bffc17 	ldw	r2,-16(fp)
 40161dc:	10800037 	ldwio	r2,0(r2)
 40161e0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 40161e4:	e0bff817 	ldw	r2,-32(fp)
 40161e8:	1005003a 	cmpeq	r2,r2,zero
 40161ec:	1000041e 	bne	r2,zero,4016200 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 40161f0:	e0bff817 	ldw	r2,-32(fp)
 40161f4:	10bfffc4 	addi	r2,r2,-1
 40161f8:	e0bff815 	stw	r2,-32(fp)
 40161fc:	00000706 	br	401621c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 4016200:	e0bff517 	ldw	r2,-44(fp)
 4016204:	1007883a 	mov	r3,r2
 4016208:	e0800217 	ldw	r2,8(fp)
 401620c:	10c00005 	stb	r3,0(r2)
 4016210:	e0800217 	ldw	r2,8(fp)
 4016214:	10800044 	addi	r2,r2,1
 4016218:	e0800215 	stw	r2,8(fp)
      credits++;
 401621c:	e0bff617 	ldw	r2,-40(fp)
 4016220:	10800044 	addi	r2,r2,1
 4016224:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 4016228:	e0bff817 	ldw	r2,-32(fp)
 401622c:	1004c03a 	cmpne	r2,r2,zero
 4016230:	103fb21e 	bne	r2,zero,40160fc <alt_avalon_spi_command+0xa0>
 4016234:	e0c00217 	ldw	r3,8(fp)
 4016238:	e0bffa17 	ldw	r2,-24(fp)
 401623c:	18800126 	beq	r3,r2,4016244 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 4016240:	003fae06 	br	40160fc <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4016244:	e0bffc17 	ldw	r2,-16(fp)
 4016248:	10800204 	addi	r2,r2,8
 401624c:	10800037 	ldwio	r2,0(r2)
 4016250:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4016254:	e0bff717 	ldw	r2,-36(fp)
 4016258:	1080080c 	andi	r2,r2,32
 401625c:	1005003a 	cmpeq	r2,r2,zero
 4016260:	103ff81e 	bne	r2,zero,4016244 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4016264:	e0800317 	ldw	r2,12(fp)
 4016268:	1080004c 	andi	r2,r2,1
 401626c:	1004c03a 	cmpne	r2,r2,zero
 4016270:	1000031e 	bne	r2,zero,4016280 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4016274:	e0bffc17 	ldw	r2,-16(fp)
 4016278:	10800304 	addi	r2,r2,12
 401627c:	10000035 	stwio	zero,0(r2)

  return read_length;
 4016280:	e0800117 	ldw	r2,4(fp)
}
 4016284:	e037883a 	mov	sp,fp
 4016288:	df000017 	ldw	fp,0(sp)
 401628c:	dec00104 	addi	sp,sp,4
 4016290:	f800283a 	ret

04016294 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4016294:	defff904 	addi	sp,sp,-28
 4016298:	dfc00615 	stw	ra,24(sp)
 401629c:	df000515 	stw	fp,20(sp)
 40162a0:	df000504 	addi	fp,sp,20
 40162a4:	e13ffd15 	stw	r4,-12(fp)
 40162a8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40162ac:	e0bffe17 	ldw	r2,-8(fp)
 40162b0:	10800017 	ldw	r2,0(r2)
 40162b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40162b8:	e13ffd17 	ldw	r4,-12(fp)
 40162bc:	40008e80 	call	40008e8 <strlen>
 40162c0:	10800044 	addi	r2,r2,1
 40162c4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40162c8:	00000d06 	br	4016300 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40162cc:	e0bffc17 	ldw	r2,-16(fp)
 40162d0:	11000217 	ldw	r4,8(r2)
 40162d4:	e1bffb17 	ldw	r6,-20(fp)
 40162d8:	e17ffd17 	ldw	r5,-12(fp)
 40162dc:	40165880 	call	4016588 <memcmp>
 40162e0:	1004c03a 	cmpne	r2,r2,zero
 40162e4:	1000031e 	bne	r2,zero,40162f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40162e8:	e0bffc17 	ldw	r2,-16(fp)
 40162ec:	e0bfff15 	stw	r2,-4(fp)
 40162f0:	00000706 	br	4016310 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40162f4:	e0bffc17 	ldw	r2,-16(fp)
 40162f8:	10800017 	ldw	r2,0(r2)
 40162fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4016300:	e0fffe17 	ldw	r3,-8(fp)
 4016304:	e0bffc17 	ldw	r2,-16(fp)
 4016308:	10fff01e 	bne	r2,r3,40162cc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401630c:	e03fff15 	stw	zero,-4(fp)
 4016310:	e0bfff17 	ldw	r2,-4(fp)
}
 4016314:	e037883a 	mov	sp,fp
 4016318:	dfc00117 	ldw	ra,4(sp)
 401631c:	df000017 	ldw	fp,0(sp)
 4016320:	dec00204 	addi	sp,sp,8
 4016324:	f800283a 	ret

04016328 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4016328:	defffa04 	addi	sp,sp,-24
 401632c:	dfc00515 	stw	ra,20(sp)
 4016330:	df000415 	stw	fp,16(sp)
 4016334:	df000404 	addi	fp,sp,16
 4016338:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401633c:	008100b4 	movhi	r2,1026
 4016340:	10a27904 	addi	r2,r2,-30236
 4016344:	10800017 	ldw	r2,0(r2)
 4016348:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401634c:	00003306 	br	401641c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4016350:	e0bffd17 	ldw	r2,-12(fp)
 4016354:	11000217 	ldw	r4,8(r2)
 4016358:	40008e80 	call	40008e8 <strlen>
 401635c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4016360:	e0bffd17 	ldw	r2,-12(fp)
 4016364:	10c00217 	ldw	r3,8(r2)
 4016368:	e0bffc17 	ldw	r2,-16(fp)
 401636c:	1885883a 	add	r2,r3,r2
 4016370:	10bfffc4 	addi	r2,r2,-1
 4016374:	10800003 	ldbu	r2,0(r2)
 4016378:	10803fcc 	andi	r2,r2,255
 401637c:	1080201c 	xori	r2,r2,128
 4016380:	10bfe004 	addi	r2,r2,-128
 4016384:	10800bd8 	cmpnei	r2,r2,47
 4016388:	1000031e 	bne	r2,zero,4016398 <alt_find_file+0x70>
    {
      len -= 1;
 401638c:	e0bffc17 	ldw	r2,-16(fp)
 4016390:	10bfffc4 	addi	r2,r2,-1
 4016394:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016398:	e0bffc17 	ldw	r2,-16(fp)
 401639c:	1007883a 	mov	r3,r2
 40163a0:	e0bffe17 	ldw	r2,-8(fp)
 40163a4:	1885883a 	add	r2,r3,r2
 40163a8:	10800003 	ldbu	r2,0(r2)
 40163ac:	10803fcc 	andi	r2,r2,255
 40163b0:	1080201c 	xori	r2,r2,128
 40163b4:	10bfe004 	addi	r2,r2,-128
 40163b8:	10800be0 	cmpeqi	r2,r2,47
 40163bc:	10000a1e 	bne	r2,zero,40163e8 <alt_find_file+0xc0>
 40163c0:	e0bffc17 	ldw	r2,-16(fp)
 40163c4:	1007883a 	mov	r3,r2
 40163c8:	e0bffe17 	ldw	r2,-8(fp)
 40163cc:	1885883a 	add	r2,r3,r2
 40163d0:	10800003 	ldbu	r2,0(r2)
 40163d4:	10803fcc 	andi	r2,r2,255
 40163d8:	1080201c 	xori	r2,r2,128
 40163dc:	10bfe004 	addi	r2,r2,-128
 40163e0:	1004c03a 	cmpne	r2,r2,zero
 40163e4:	10000a1e 	bne	r2,zero,4016410 <alt_find_file+0xe8>
 40163e8:	e0bffd17 	ldw	r2,-12(fp)
 40163ec:	11000217 	ldw	r4,8(r2)
 40163f0:	e1bffc17 	ldw	r6,-16(fp)
 40163f4:	e17ffe17 	ldw	r5,-8(fp)
 40163f8:	40165880 	call	4016588 <memcmp>
 40163fc:	1004c03a 	cmpne	r2,r2,zero
 4016400:	1000031e 	bne	r2,zero,4016410 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4016404:	e0bffd17 	ldw	r2,-12(fp)
 4016408:	e0bfff15 	stw	r2,-4(fp)
 401640c:	00000806 	br	4016430 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4016410:	e0bffd17 	ldw	r2,-12(fp)
 4016414:	10800017 	ldw	r2,0(r2)
 4016418:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401641c:	00c100b4 	movhi	r3,1026
 4016420:	18e27904 	addi	r3,r3,-30236
 4016424:	e0bffd17 	ldw	r2,-12(fp)
 4016428:	10ffc91e 	bne	r2,r3,4016350 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401642c:	e03fff15 	stw	zero,-4(fp)
 4016430:	e0bfff17 	ldw	r2,-4(fp)
}
 4016434:	e037883a 	mov	sp,fp
 4016438:	dfc00117 	ldw	ra,4(sp)
 401643c:	df000017 	ldw	fp,0(sp)
 4016440:	dec00204 	addi	sp,sp,8
 4016444:	f800283a 	ret

04016448 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4016448:	defff804 	addi	sp,sp,-32
 401644c:	dfc00715 	stw	ra,28(sp)
 4016450:	df000615 	stw	fp,24(sp)
 4016454:	df000604 	addi	fp,sp,24
 4016458:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401645c:	00bffa04 	movi	r2,-24
 4016460:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 4016464:	008100b4 	movhi	r2,1026
 4016468:	10a2af04 	addi	r2,r2,-30020
 401646c:	10800017 	ldw	r2,0(r2)
 4016470:	e0bffa15 	stw	r2,-24(fp)
 4016474:	e03ffb0d 	sth	zero,-20(fp)
 4016478:	e17ffb0b 	ldhu	r5,-20(fp)
 401647c:	e1bffe04 	addi	r6,fp,-8
 4016480:	e13ffa17 	ldw	r4,-24(fp)
 4016484:	4010af00 	call	4010af0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4016488:	e03ffd15 	stw	zero,-12(fp)
 401648c:	00001e06 	br	4016508 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 4016490:	e0bffd17 	ldw	r2,-12(fp)
 4016494:	00c10074 	movhi	r3,1025
 4016498:	18ddc404 	addi	r3,r3,30480
 401649c:	10800324 	muli	r2,r2,12
 40164a0:	10c5883a 	add	r2,r2,r3
 40164a4:	10800017 	ldw	r2,0(r2)
 40164a8:	1004c03a 	cmpne	r2,r2,zero
 40164ac:	1000131e 	bne	r2,zero,40164fc <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 40164b0:	e0bffd17 	ldw	r2,-12(fp)
 40164b4:	00c10074 	movhi	r3,1025
 40164b8:	18ddc404 	addi	r3,r3,30480
 40164bc:	10800324 	muli	r2,r2,12
 40164c0:	10c7883a 	add	r3,r2,r3
 40164c4:	e0bfff17 	ldw	r2,-4(fp)
 40164c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40164cc:	008100b4 	movhi	r2,1026
 40164d0:	10a27d04 	addi	r2,r2,-30220
 40164d4:	10c00017 	ldw	r3,0(r2)
 40164d8:	e0bffd17 	ldw	r2,-12(fp)
 40164dc:	1880040e 	bge	r3,r2,40164f0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 40164e0:	00c100b4 	movhi	r3,1026
 40164e4:	18e27d04 	addi	r3,r3,-30220
 40164e8:	e0bffd17 	ldw	r2,-12(fp)
 40164ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 40164f0:	e0bffd17 	ldw	r2,-12(fp)
 40164f4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 40164f8:	00000606 	br	4016514 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40164fc:	e0bffd17 	ldw	r2,-12(fp)
 4016500:	10800044 	addi	r2,r2,1
 4016504:	e0bffd15 	stw	r2,-12(fp)
 4016508:	e0bffd17 	ldw	r2,-12(fp)
 401650c:	10800810 	cmplti	r2,r2,32
 4016510:	103fdf1e 	bne	r2,zero,4016490 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 4016514:	008100b4 	movhi	r2,1026
 4016518:	10a2af04 	addi	r2,r2,-30020
 401651c:	11000017 	ldw	r4,0(r2)
 4016520:	4010ee80 	call	4010ee8 <OSSemPost>

  return rc;
 4016524:	e0bffc17 	ldw	r2,-16(fp)
}
 4016528:	e037883a 	mov	sp,fp
 401652c:	dfc00117 	ldw	ra,4(sp)
 4016530:	df000017 	ldw	fp,0(sp)
 4016534:	dec00204 	addi	sp,sp,8
 4016538:	f800283a 	ret

0401653c <atexit>:
 401653c:	200b883a 	mov	r5,r4
 4016540:	000d883a 	mov	r6,zero
 4016544:	0009883a 	mov	r4,zero
 4016548:	000f883a 	mov	r7,zero
 401654c:	40165fc1 	jmpi	40165fc <__register_exitproc>

04016550 <exit>:
 4016550:	defffe04 	addi	sp,sp,-8
 4016554:	000b883a 	mov	r5,zero
 4016558:	dc000015 	stw	r16,0(sp)
 401655c:	dfc00115 	stw	ra,4(sp)
 4016560:	2021883a 	mov	r16,r4
 4016564:	40167340 	call	4016734 <__call_exitprocs>
 4016568:	008100b4 	movhi	r2,1026
 401656c:	10a27404 	addi	r2,r2,-30256
 4016570:	11000017 	ldw	r4,0(r2)
 4016574:	20800f17 	ldw	r2,60(r4)
 4016578:	10000126 	beq	r2,zero,4016580 <exit+0x30>
 401657c:	103ee83a 	callr	r2
 4016580:	8009883a 	mov	r4,r16
 4016584:	40169240 	call	4016924 <_exit>

04016588 <memcmp>:
 4016588:	00c000c4 	movi	r3,3
 401658c:	1980032e 	bgeu	r3,r6,401659c <memcmp+0x14>
 4016590:	2144b03a 	or	r2,r4,r5
 4016594:	10c4703a 	and	r2,r2,r3
 4016598:	10000f26 	beq	r2,zero,40165d8 <memcmp+0x50>
 401659c:	31ffffc4 	addi	r7,r6,-1
 40165a0:	3000061e 	bne	r6,zero,40165bc <memcmp+0x34>
 40165a4:	00000a06 	br	40165d0 <memcmp+0x48>
 40165a8:	39ffffc4 	addi	r7,r7,-1
 40165ac:	00bfffc4 	movi	r2,-1
 40165b0:	21000044 	addi	r4,r4,1
 40165b4:	29400044 	addi	r5,r5,1
 40165b8:	38800526 	beq	r7,r2,40165d0 <memcmp+0x48>
 40165bc:	20c00003 	ldbu	r3,0(r4)
 40165c0:	28800003 	ldbu	r2,0(r5)
 40165c4:	18bff826 	beq	r3,r2,40165a8 <memcmp+0x20>
 40165c8:	1885c83a 	sub	r2,r3,r2
 40165cc:	f800283a 	ret
 40165d0:	0005883a 	mov	r2,zero
 40165d4:	f800283a 	ret
 40165d8:	180f883a 	mov	r7,r3
 40165dc:	20c00017 	ldw	r3,0(r4)
 40165e0:	28800017 	ldw	r2,0(r5)
 40165e4:	18bfed1e 	bne	r3,r2,401659c <memcmp+0x14>
 40165e8:	31bfff04 	addi	r6,r6,-4
 40165ec:	21000104 	addi	r4,r4,4
 40165f0:	29400104 	addi	r5,r5,4
 40165f4:	39bff936 	bltu	r7,r6,40165dc <memcmp+0x54>
 40165f8:	003fe806 	br	401659c <memcmp+0x14>

040165fc <__register_exitproc>:
 40165fc:	defffa04 	addi	sp,sp,-24
 4016600:	008100b4 	movhi	r2,1026
 4016604:	10a27404 	addi	r2,r2,-30256
 4016608:	dc000015 	stw	r16,0(sp)
 401660c:	14000017 	ldw	r16,0(r2)
 4016610:	dd000415 	stw	r20,16(sp)
 4016614:	2829883a 	mov	r20,r5
 4016618:	81405217 	ldw	r5,328(r16)
 401661c:	dcc00315 	stw	r19,12(sp)
 4016620:	dc800215 	stw	r18,8(sp)
 4016624:	dc400115 	stw	r17,4(sp)
 4016628:	dfc00515 	stw	ra,20(sp)
 401662c:	2023883a 	mov	r17,r4
 4016630:	3027883a 	mov	r19,r6
 4016634:	3825883a 	mov	r18,r7
 4016638:	28002526 	beq	r5,zero,40166d0 <__register_exitproc+0xd4>
 401663c:	29000117 	ldw	r4,4(r5)
 4016640:	008007c4 	movi	r2,31
 4016644:	11002716 	blt	r2,r4,40166e4 <__register_exitproc+0xe8>
 4016648:	8800101e 	bne	r17,zero,401668c <__register_exitproc+0x90>
 401664c:	2105883a 	add	r2,r4,r4
 4016650:	1085883a 	add	r2,r2,r2
 4016654:	20c00044 	addi	r3,r4,1
 4016658:	1145883a 	add	r2,r2,r5
 401665c:	0009883a 	mov	r4,zero
 4016660:	15000215 	stw	r20,8(r2)
 4016664:	28c00115 	stw	r3,4(r5)
 4016668:	2005883a 	mov	r2,r4
 401666c:	dfc00517 	ldw	ra,20(sp)
 4016670:	dd000417 	ldw	r20,16(sp)
 4016674:	dcc00317 	ldw	r19,12(sp)
 4016678:	dc800217 	ldw	r18,8(sp)
 401667c:	dc400117 	ldw	r17,4(sp)
 4016680:	dc000017 	ldw	r16,0(sp)
 4016684:	dec00604 	addi	sp,sp,24
 4016688:	f800283a 	ret
 401668c:	29802204 	addi	r6,r5,136
 4016690:	00800044 	movi	r2,1
 4016694:	110e983a 	sll	r7,r2,r4
 4016698:	30c04017 	ldw	r3,256(r6)
 401669c:	2105883a 	add	r2,r4,r4
 40166a0:	1085883a 	add	r2,r2,r2
 40166a4:	1185883a 	add	r2,r2,r6
 40166a8:	19c6b03a 	or	r3,r3,r7
 40166ac:	14802015 	stw	r18,128(r2)
 40166b0:	14c00015 	stw	r19,0(r2)
 40166b4:	00800084 	movi	r2,2
 40166b8:	30c04015 	stw	r3,256(r6)
 40166bc:	88bfe31e 	bne	r17,r2,401664c <__register_exitproc+0x50>
 40166c0:	30804117 	ldw	r2,260(r6)
 40166c4:	11c4b03a 	or	r2,r2,r7
 40166c8:	30804115 	stw	r2,260(r6)
 40166cc:	003fdf06 	br	401664c <__register_exitproc+0x50>
 40166d0:	008100b4 	movhi	r2,1026
 40166d4:	10b82604 	addi	r2,r2,-8040
 40166d8:	100b883a 	mov	r5,r2
 40166dc:	80805215 	stw	r2,328(r16)
 40166e0:	003fd606 	br	401663c <__register_exitproc+0x40>
 40166e4:	00800034 	movhi	r2,0
 40166e8:	10800004 	addi	r2,r2,0
 40166ec:	1000021e 	bne	r2,zero,40166f8 <__register_exitproc+0xfc>
 40166f0:	013fffc4 	movi	r4,-1
 40166f4:	003fdc06 	br	4016668 <__register_exitproc+0x6c>
 40166f8:	01006404 	movi	r4,400
 40166fc:	103ee83a 	callr	r2
 4016700:	1007883a 	mov	r3,r2
 4016704:	103ffa26 	beq	r2,zero,40166f0 <__register_exitproc+0xf4>
 4016708:	80805217 	ldw	r2,328(r16)
 401670c:	180b883a 	mov	r5,r3
 4016710:	18000115 	stw	zero,4(r3)
 4016714:	18800015 	stw	r2,0(r3)
 4016718:	80c05215 	stw	r3,328(r16)
 401671c:	18006215 	stw	zero,392(r3)
 4016720:	18006315 	stw	zero,396(r3)
 4016724:	0009883a 	mov	r4,zero
 4016728:	883fc826 	beq	r17,zero,401664c <__register_exitproc+0x50>
 401672c:	003fd706 	br	401668c <__register_exitproc+0x90>

04016730 <register_fini>:
 4016730:	f800283a 	ret

04016734 <__call_exitprocs>:
 4016734:	008100b4 	movhi	r2,1026
 4016738:	10a27404 	addi	r2,r2,-30256
 401673c:	10800017 	ldw	r2,0(r2)
 4016740:	defff304 	addi	sp,sp,-52
 4016744:	df000b15 	stw	fp,44(sp)
 4016748:	d8800115 	stw	r2,4(sp)
 401674c:	00800034 	movhi	r2,0
 4016750:	10800004 	addi	r2,r2,0
 4016754:	1005003a 	cmpeq	r2,r2,zero
 4016758:	d8800215 	stw	r2,8(sp)
 401675c:	d8800117 	ldw	r2,4(sp)
 4016760:	dd400815 	stw	r21,32(sp)
 4016764:	dd000715 	stw	r20,28(sp)
 4016768:	10805204 	addi	r2,r2,328
 401676c:	dfc00c15 	stw	ra,48(sp)
 4016770:	ddc00a15 	stw	r23,40(sp)
 4016774:	dd800915 	stw	r22,36(sp)
 4016778:	dcc00615 	stw	r19,24(sp)
 401677c:	dc800515 	stw	r18,20(sp)
 4016780:	dc400415 	stw	r17,16(sp)
 4016784:	dc000315 	stw	r16,12(sp)
 4016788:	282b883a 	mov	r21,r5
 401678c:	2039883a 	mov	fp,r4
 4016790:	d8800015 	stw	r2,0(sp)
 4016794:	2829003a 	cmpeq	r20,r5,zero
 4016798:	d8800117 	ldw	r2,4(sp)
 401679c:	14405217 	ldw	r17,328(r2)
 40167a0:	88001026 	beq	r17,zero,40167e4 <__call_exitprocs+0xb0>
 40167a4:	ddc00017 	ldw	r23,0(sp)
 40167a8:	88800117 	ldw	r2,4(r17)
 40167ac:	8c802204 	addi	r18,r17,136
 40167b0:	143fffc4 	addi	r16,r2,-1
 40167b4:	80000916 	blt	r16,zero,40167dc <__call_exitprocs+0xa8>
 40167b8:	05bfffc4 	movi	r22,-1
 40167bc:	a000151e 	bne	r20,zero,4016814 <__call_exitprocs+0xe0>
 40167c0:	8409883a 	add	r4,r16,r16
 40167c4:	2105883a 	add	r2,r4,r4
 40167c8:	1485883a 	add	r2,r2,r18
 40167cc:	10c02017 	ldw	r3,128(r2)
 40167d0:	a8c01126 	beq	r21,r3,4016818 <__call_exitprocs+0xe4>
 40167d4:	843fffc4 	addi	r16,r16,-1
 40167d8:	85bff81e 	bne	r16,r22,40167bc <__call_exitprocs+0x88>
 40167dc:	d8800217 	ldw	r2,8(sp)
 40167e0:	10003126 	beq	r2,zero,40168a8 <__call_exitprocs+0x174>
 40167e4:	dfc00c17 	ldw	ra,48(sp)
 40167e8:	df000b17 	ldw	fp,44(sp)
 40167ec:	ddc00a17 	ldw	r23,40(sp)
 40167f0:	dd800917 	ldw	r22,36(sp)
 40167f4:	dd400817 	ldw	r21,32(sp)
 40167f8:	dd000717 	ldw	r20,28(sp)
 40167fc:	dcc00617 	ldw	r19,24(sp)
 4016800:	dc800517 	ldw	r18,20(sp)
 4016804:	dc400417 	ldw	r17,16(sp)
 4016808:	dc000317 	ldw	r16,12(sp)
 401680c:	dec00d04 	addi	sp,sp,52
 4016810:	f800283a 	ret
 4016814:	8409883a 	add	r4,r16,r16
 4016818:	88c00117 	ldw	r3,4(r17)
 401681c:	2105883a 	add	r2,r4,r4
 4016820:	1445883a 	add	r2,r2,r17
 4016824:	18ffffc4 	addi	r3,r3,-1
 4016828:	11800217 	ldw	r6,8(r2)
 401682c:	1c001526 	beq	r3,r16,4016884 <__call_exitprocs+0x150>
 4016830:	10000215 	stw	zero,8(r2)
 4016834:	303fe726 	beq	r6,zero,40167d4 <__call_exitprocs+0xa0>
 4016838:	00c00044 	movi	r3,1
 401683c:	1c06983a 	sll	r3,r3,r16
 4016840:	90804017 	ldw	r2,256(r18)
 4016844:	8cc00117 	ldw	r19,4(r17)
 4016848:	1884703a 	and	r2,r3,r2
 401684c:	10001426 	beq	r2,zero,40168a0 <__call_exitprocs+0x16c>
 4016850:	90804117 	ldw	r2,260(r18)
 4016854:	1884703a 	and	r2,r3,r2
 4016858:	10000c1e 	bne	r2,zero,401688c <__call_exitprocs+0x158>
 401685c:	2105883a 	add	r2,r4,r4
 4016860:	1485883a 	add	r2,r2,r18
 4016864:	11400017 	ldw	r5,0(r2)
 4016868:	e009883a 	mov	r4,fp
 401686c:	303ee83a 	callr	r6
 4016870:	88800117 	ldw	r2,4(r17)
 4016874:	98bfc81e 	bne	r19,r2,4016798 <__call_exitprocs+0x64>
 4016878:	b8800017 	ldw	r2,0(r23)
 401687c:	147fd526 	beq	r2,r17,40167d4 <__call_exitprocs+0xa0>
 4016880:	003fc506 	br	4016798 <__call_exitprocs+0x64>
 4016884:	8c000115 	stw	r16,4(r17)
 4016888:	003fea06 	br	4016834 <__call_exitprocs+0x100>
 401688c:	2105883a 	add	r2,r4,r4
 4016890:	1485883a 	add	r2,r2,r18
 4016894:	11000017 	ldw	r4,0(r2)
 4016898:	303ee83a 	callr	r6
 401689c:	003ff406 	br	4016870 <__call_exitprocs+0x13c>
 40168a0:	303ee83a 	callr	r6
 40168a4:	003ff206 	br	4016870 <__call_exitprocs+0x13c>
 40168a8:	88800117 	ldw	r2,4(r17)
 40168ac:	1000081e 	bne	r2,zero,40168d0 <__call_exitprocs+0x19c>
 40168b0:	89000017 	ldw	r4,0(r17)
 40168b4:	20000726 	beq	r4,zero,40168d4 <__call_exitprocs+0x1a0>
 40168b8:	b9000015 	stw	r4,0(r23)
 40168bc:	8809883a 	mov	r4,r17
 40168c0:	00000000 	call	0 <__alt_mem_epcs>
 40168c4:	bc400017 	ldw	r17,0(r23)
 40168c8:	883fb71e 	bne	r17,zero,40167a8 <__call_exitprocs+0x74>
 40168cc:	003fc506 	br	40167e4 <__call_exitprocs+0xb0>
 40168d0:	89000017 	ldw	r4,0(r17)
 40168d4:	882f883a 	mov	r23,r17
 40168d8:	2023883a 	mov	r17,r4
 40168dc:	883fb21e 	bne	r17,zero,40167a8 <__call_exitprocs+0x74>
 40168e0:	003fc006 	br	40167e4 <__call_exitprocs+0xb0>

040168e4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 40168e4:	defffd04 	addi	sp,sp,-12
 40168e8:	df000215 	stw	fp,8(sp)
 40168ec:	df000204 	addi	fp,sp,8
 40168f0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 40168f4:	e0bfff17 	ldw	r2,-4(fp)
 40168f8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40168fc:	e0bffe17 	ldw	r2,-8(fp)
 4016900:	1005003a 	cmpeq	r2,r2,zero
 4016904:	1000021e 	bne	r2,zero,4016910 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4016908:	002af070 	cmpltui	zero,zero,43969
 401690c:	00000106 	br	4016914 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4016910:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4016914:	e037883a 	mov	sp,fp
 4016918:	df000017 	ldw	fp,0(sp)
 401691c:	dec00104 	addi	sp,sp,4
 4016920:	f800283a 	ret

04016924 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4016924:	defffd04 	addi	sp,sp,-12
 4016928:	dfc00215 	stw	ra,8(sp)
 401692c:	df000115 	stw	fp,4(sp)
 4016930:	df000104 	addi	fp,sp,4
 4016934:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4016938:	008100b4 	movhi	r2,1026
 401693c:	10a2b804 	addi	r2,r2,-29984
 4016940:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4016944:	e13fff17 	ldw	r4,-4(fp)
 4016948:	40168e40 	call	40168e4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401694c:	003fff06 	br	401694c <_exit+0x28>
 4016950:	00000010 	cmplti	zero,zero,0
 4016954:	00000000 	call	0 <__alt_mem_epcs>
 4016958:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
 401695c:	011f7c01 	jmpi	11f7c0 <OSCtxSw_SWITCH_PC+0x11f780>
 4016960:	001b0c0b 	ldhu	zero,27696(zero)
 4016964:	00000028 	cmpgeui	zero,zero,0
 4016968:	00000018 	cmpnei	zero,zero,0
 401696c:	04007ad0 	cmplti	r16,zero,491
 4016970:	000005dc 	xori	zero,zero,23
 4016974:	400e4400 	call	400e440 <OSFlagPost+0x1e0>
 4016978:	92099170 	cmpltui	r8,r18,9797
 401697c:	95079308 	cmpgei	r20,r18,7756
 4016980:	97049605 	stb	fp,4696(r18)
 4016984:	90019f03 	ldbu	zero,1660(r18)
 4016988:	9c06940a 	0x9c06940a
 401698c:	00000002 	0x2
 4016990:	00000028 	cmpgeui	zero,zero,0
 4016994:	00000044 	movi	zero,1
 4016998:	040080ac 	andhi	r16,zero,514
 401699c:	000005b0 	cmpltui	zero,zero,22
 40169a0:	3c0e4400 	call	3c0e440 <OSCtxSw_SWITCH_PC+0x3c0e400>
 40169a4:	92099168 	cmpgeui	r8,r18,9797
 40169a8:	95079308 	cmpgei	r20,r18,7756
 40169ac:	9c039705 	stb	r16,3676(r19)
 40169b0:	90019f02 	0x90019f02
 40169b4:	9606940a 	0x9606940a
 40169b8:	00000004 	movi	zero,0
 40169bc:	04016730 	cmpltui	r16,zero,1436
